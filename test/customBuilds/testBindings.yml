mainBuild:
  name: customBuild.testBindings.js
  bindings:
    - symbol: StaticMethods
    - symbol: Instantiable1
    - symbol: Instantiable2
    - symbol: TemplateClassInt
    - symbol: TemplateClassFloat
    - symbol: NotScopedEnum
    - symbol: ScopedEnum
    - symbol: ExceptionTest
additionalCppCode: |
  #include <string.h>

  enum NotScopedEnum {
    NotScopedEnum_A,
    NotScopedEnum_B,
    NotScopedEnum_C
  };
  enum class ScopedEnum {
    A,
    B,
    C
  };

  class StaticMethods {
  private:
    StaticMethods() {}
  public:
    static int intReturn() {
      return 123;
    }
    static void intArgument(int i) {
      if(i != 123) {
        throw("incorrect value");
      }
    }
    static void intRefArgument(int& i) {
      if(i != 123) {
        throw("incorrect value");
      }
      i = 234;
    }
    static void notScopedEnumArgument(NotScopedEnum e) {
      if(e != NotScopedEnum_B) {
        throw("incorrect value");
      }
    }
    static NotScopedEnum notScopedEnumReturn() {
      return NotScopedEnum_B;
    }
    static void scopedEnumArgument(ScopedEnum e) {
      if(e != ScopedEnum::B) {
        throw("incorrect value");
      }
    }
    static ScopedEnum scopedEnumReturn() {
      return ScopedEnum::B;
    }
    static const char* cStringReturn() {
      return "Hello, World!";
    }
    static const char* cStringNullReturn() {
      return nullptr;
    }
    static void cStringArgument(const char* s) {
      if(s == nullptr) {
        return;
      }
      if(strcmp("Hello, World!", s) != 0) {
        throw("incorrect value");
      }
    }
  };

  class Instantiable1 {
    int _val;
  public:
    Instantiable1(int val) : _val(val) {}
    int getVal() { return _val; }
    int getVal(int add) { return _val + add; }
    float getVal(int add, float fac) { return (_val + add) * fac; }
    void intRefArgument(int& i) {
      if(i != 123) {
        throw("incorrect value");
      }
      i = 234;
    }
    const char* cStringReturn() {
      return "Hello, World!";
    }
    void cStringArgument(const char* s) {
      if(strcmp("Hello, World!", s) != 0) {
        throw("incorrect value");
      }
    }
  };

  class Instantiable2 {
    int _val;
  public:
    Instantiable2() : _val(0) {}
    Instantiable2(int val) : _val(val) {}
    Instantiable2(int val, int add) : _val(val + add) {}
    int getVal() { return _val; }
    int addInstantiable2(Instantiable2& theOther) { // TODO: The bindings should also allow passing a reference type using the '{ current: x }' syntax
      return _val + theOther._val;
    }
  };

  template <typename T>
  class TemplateClass {
    T _val;
  public:
    TemplateClass() {}
    TemplateClass(T val) : _val(val) {}
    T getVal() { return _val; }
    T getVal(T& someOtherVal) {
      if(someOtherVal > _val) {
        throw("incorrect value");
      }
      someOtherVal = 42;
      return _val + someOtherVal;
    }
  };
  typedef TemplateClass<int> TemplateClassInt;
  typedef TemplateClass<float> TemplateClassFloat;

  class ExceptionTest {
  public:
    static bool catchingFunc() {
      try {
        throwingFunc();
        return false;
      } catch (...) {
        return true;
      }
    }
    static void throwingFunc() {
      throw("catch me if you can");
    }
  };

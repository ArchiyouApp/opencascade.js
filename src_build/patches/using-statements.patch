diff -ruN /occt/occt-628c021/src/AIS/AIS_Shape.hxx /occt/occt-628c021/src/AIS/AIS_Shape.hxx
--- /occt/occt-628c021/src/AIS/AIS_Shape.hxx	2020-11-02 17:52:44.000000000 +0100
+++ /occt/occt-628c021/src/AIS/AIS_Shape.hxx	2021-01-20 21:33:40.315522149 +0100
@@ -170,7 +170,8 @@
   
   //! AIS_InteractiveObject defines another virtual method BoundingBox,
   //! which is not the same as above; keep it visible.
-  using AIS_InteractiveObject::BoundingBox;
+  // using AIS_InteractiveObject::BoundingBox;
+  void BoundingBox (Bnd_Box& theBndBox) override { AIS_InteractiveObject::BoundingBox(theBndBox); }
 
   //! Returns the Color attributes of the shape accordingly to
   //! the current facing model;
diff -ruN /occt/occt-628c021/src/BlendFunc/BlendFunc_ChamfInv.hxx /occt/occt-628c021/src/BlendFunc/BlendFunc_ChamfInv.hxx
--- /occt/occt-628c021/src/BlendFunc/BlendFunc_ChamfInv.hxx	2020-11-02 17:52:44.000000000 +0100
+++ /occt/occt-628c021/src/BlendFunc/BlendFunc_ChamfInv.hxx	2021-01-20 21:37:16.022758933 +0100
@@ -59,7 +59,8 @@
   //! False otherwise.
   Standard_EXPORT Standard_Boolean Derivatives (const math_Vector& X, math_Matrix& D) Standard_OVERRIDE;
 
-  using Blend_FuncInv::Set;
+  // using Blend_FuncInv::Set;
+  void Set (const Standard_Boolean OnFirst, const Handle(Adaptor2d_HCurve2d)& COnSurf) override { BlendFunc_GenChamfInv::Set(OnFirst, COnSurf); }
   
   Standard_EXPORT virtual void Set (const Standard_Real Dist1,
                                     const Standard_Real Dist2,
diff -ruN /occt/occt-628c021/src/BlendFunc/BlendFunc_ConstThroatInv.hxx /occt/occt-628c021/src/BlendFunc/BlendFunc_ConstThroatInv.hxx
--- /occt/occt-628c021/src/BlendFunc/BlendFunc_ConstThroatInv.hxx	2020-11-02 17:52:44.000000000 +0100
+++ /occt/occt-628c021/src/BlendFunc/BlendFunc_ConstThroatInv.hxx	2021-01-20 21:37:35.992815165 +0100
@@ -55,7 +55,8 @@
   //! False otherwise.
   Standard_EXPORT Standard_Boolean Derivatives (const math_Vector& X, math_Matrix& D) Standard_OVERRIDE;
   
-  using Blend_FuncInv::Set;
+  // using Blend_FuncInv::Set;
+  void Set (const Standard_Boolean OnFirst, const Handle(Adaptor2d_HCurve2d)& COnSurf) override { BlendFunc_GenChamfInv::Set(OnFirst, COnSurf); }
   
   Standard_EXPORT virtual void Set (const Standard_Real theThroat,
                                     const Standard_Real,
diff -ruN /occt/occt-628c021/src/BRepAlgoAPI/BRepAlgoAPI_Algo.hxx /occt/occt-628c021/src/BRepAlgoAPI/BRepAlgoAPI_Algo.hxx
--- /occt/occt-628c021/src/BRepAlgoAPI/BRepAlgoAPI_Algo.hxx	2020-11-02 17:52:44.000000000 +0100
+++ /occt/occt-628c021/src/BRepAlgoAPI/BRepAlgoAPI_Algo.hxx	2021-01-20 21:36:49.062683833 +0100
@@ -40,21 +40,36 @@
 
   // Provide access to methods of protected base class BOPAlgo_Options
   // (inherited as protected to avoid problems with SWIG wrapper)
-  using BOPAlgo_Options::Clear;
-  using BOPAlgo_Options::SetRunParallel;
-  using BOPAlgo_Options::RunParallel;
-  using BOPAlgo_Options::SetFuzzyValue;
-  using BOPAlgo_Options::FuzzyValue;
-  using BOPAlgo_Options::HasErrors;
-  using BOPAlgo_Options::HasWarnings;
-  using BOPAlgo_Options::HasError;
-  using BOPAlgo_Options::HasWarning;
-  using BOPAlgo_Options::DumpErrors;
-  using BOPAlgo_Options::DumpWarnings;
-  using BOPAlgo_Options::ClearWarnings;
-  using BOPAlgo_Options::GetReport;
-  using BOPAlgo_Options::SetProgressIndicator;
-  using BOPAlgo_Options::SetUseOBB;
+  // using BOPAlgo_Options::Clear;
+  void Clear() override { BOPAlgo_Options::Clear(); }
+  // using BOPAlgo_Options::SetRunParallel;
+  void SetRunParallel(const Standard_Boolean theFlag) { BOPAlgo_Options::SetRunParallel(theFlag); }
+  // using BOPAlgo_Options::RunParallel;
+  Standard_Boolean RunParallel() const { return BOPAlgo_Options::RunParallel(); }
+  // using BOPAlgo_Options::SetFuzzyValue;
+  void SetFuzzyValue(const Standard_Real theFuzz) { BOPAlgo_Options::SetFuzzyValue(theFuzz); }
+  // using BOPAlgo_Options::FuzzyValue;
+  Standard_Real FuzzyValue() const { return BOPAlgo_Options::FuzzyValue(); }
+  // using BOPAlgo_Options::HasErrors;
+  Standard_Boolean HasErrors() const { return BOPAlgo_Options::HasErrors(); }
+  // using BOPAlgo_Options::HasWarnings;
+  Standard_Boolean HasWarnings() const { return BOPAlgo_Options::HasWarnings(); }
+  // using BOPAlgo_Options::HasError;
+  Standard_Boolean HasError (const Handle(Standard_Type)& theType) const { return BOPAlgo_Options::HasError(theType); }
+  // using BOPAlgo_Options::HasWarning;
+  Standard_Boolean HasWarning (const Handle(Standard_Type)& theType) const { return BOPAlgo_Options::HasWarning(theType); }
+  // using BOPAlgo_Options::DumpErrors;
+  void DumpErrors(Standard_OStream& theOS) const { BOPAlgo_Options::DumpErrors(theOS); }
+  // using BOPAlgo_Options::DumpWarnings;
+  void DumpWarnings(Standard_OStream& theOS) const { BOPAlgo_Options::DumpWarnings(theOS); }
+  // using BOPAlgo_Options::ClearWarnings;
+  void ClearWarnings() { BOPAlgo_Options::ClearWarnings(); }
+  // using BOPAlgo_Options::GetReport;
+  const Handle(Message_Report)& GetReport () const { return BOPAlgo_Options::GetReport(); }
+  // using BOPAlgo_Options::SetProgressIndicator;
+  void SetProgressIndicator(const Message_ProgressScope& theProgress) { BOPAlgo_Options::SetProgressIndicator(theProgress); }
+  // using BOPAlgo_Options::SetUseOBB;
+  void SetUseOBB(const Standard_Boolean theUseOBB) { BOPAlgo_Options::SetUseOBB(theUseOBB); }
 
 protected:
 
diff -ruN /occt/occt-628c021/src/Graphic3d/Graphic3d_Buffer.hxx /occt/occt-628c021/src/Graphic3d/Graphic3d_Buffer.hxx
--- /occt/occt-628c021/src/Graphic3d/Graphic3d_Buffer.hxx	2020-11-02 17:52:44.000000000 +0100
+++ /occt/occt-628c021/src/Graphic3d/Graphic3d_Buffer.hxx	2021-01-20 21:09:23.494223787 +0100
@@ -179,8 +179,10 @@
 //! @name general accessors
 public:
 
-  using NCollection_Buffer::Data;
-  using NCollection_Buffer::ChangeData;
+  // using NCollection_Buffer::Data;
+  const Standard_Byte* Data() const { return NCollection_Buffer::Data(); }
+  // using NCollection_Buffer::ChangeData;
+  Standard_Byte* ChangeData() { return NCollection_Buffer::ChangeData(); }
 
   //! Return the attribute data with stride size specific to this attribute.
   //! @param theAttrib       attribute to find
diff -ruN /occt/occt-628c021/src/V3d/V3d_DirectionalLight.hxx /occt/occt-628c021/src/V3d/V3d_DirectionalLight.hxx
--- /occt/occt-628c021/src/V3d/V3d_DirectionalLight.hxx	2020-11-02 17:52:44.000000000 +0100
+++ /occt/occt-628c021/src/V3d/V3d_DirectionalLight.hxx	2021-01-20 21:30:08.791719250 +0100
@@ -38,7 +38,9 @@
 
   //! Defines the direction of the light source by a predefined orientation.
   Standard_EXPORT void SetDirection (V3d_TypeOfOrientation theDirection);
-  using Graphic3d_CLight::SetDirection;
+  // using Graphic3d_CLight::SetDirection;
+  void SetDirection (const gp_Dir& theDir) { Graphic3d_CLight::SetDirection(theDir); }
+  void SetDirection (Standard_Real theVx, Standard_Real theVy, Standard_Real theVz) { Graphic3d_CLight::SetDirection(theVx, theVy, theVz); }
 
 //! @name hidden properties not applicable to directional light
 private:
diff -ruN /occt/occt-628c021/src/V3d/V3d_SpotLight.hxx /occt/occt-628c021/src/V3d/V3d_SpotLight.hxx
--- /occt/occt-628c021/src/V3d/V3d_SpotLight.hxx	2020-11-02 17:52:44.000000000 +0100
+++ /occt/occt-628c021/src/V3d/V3d_SpotLight.hxx	2021-01-20 21:31:34.845230405 +0100
@@ -48,9 +48,15 @@
   //! Defines the direction of the light source
   //! according to a predefined directional vector.
   Standard_EXPORT void SetDirection (V3d_TypeOfOrientation theOrientation);
-  using Graphic3d_CLight::SetDirection;
-  using Graphic3d_CLight::Position;
-  using Graphic3d_CLight::SetPosition;
+  // using Graphic3d_CLight::SetDirection;
+  void SetDirection (const gp_Dir& theDir) { Graphic3d_CLight::SetDirection(theDir); }
+  void SetDirection (Standard_Real theVx, Standard_Real theVy, Standard_Real theVz) { Graphic3d_CLight::SetDirection(theVx, theVy, theVz); }
+  // using Graphic3d_CLight::Position;
+  const gp_Pnt& Position() const { return Graphic3d_CLight::Position(); }
+  void Position (Standard_Real& theX, Standard_Real& theY, Standard_Real& theZ) const { Graphic3d_CLight::Position(theX, theY, theZ); }
+  // using Graphic3d_CLight::SetPosition;
+  void SetPosition (const gp_Pnt& thePosition) { Graphic3d_CLight::SetPosition(thePosition); }
+  void SetPosition (Standard_Real theX, Standard_Real theY, Standard_Real theZ) { Graphic3d_CLight::SetPosition(theX, theY, theZ); }
 
 };
 

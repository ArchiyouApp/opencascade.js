export declare function initOpenCascade(): Promise<opencascade>;

export interface opencascade {
  ready: Promise<opencascade>;
  
  _malloc: (size: number) => number;
  _free: (ptr: number) => void;
  HEAP8: Int8Array;
  HEAP16: Int16Array;
  HEAP32: Int32Array;
  HEAPU8: Uint8Array;
  HEAPU16: Uint16Array;
  HEAPU32: Uint32Array;
  HEAPF32: Float32Array;
  HEAPF64: Float64Array;

  APIHeaderSection_EditHeader: typeof APIHeaderSection_EditHeader;
  APIHeaderSection_MakeHeader: typeof APIHeaderSection_MakeHeader;
  APIHeaderSection_MakeHeader_1: typeof APIHeaderSection_MakeHeader_1;
  APIHeaderSection_MakeHeader_2: typeof APIHeaderSection_MakeHeader_2;
  Adaptor2d_Curve2d: typeof Adaptor2d_Curve2d;
  Adaptor2d_HCurve2d: typeof Adaptor2d_HCurve2d;
  Adaptor2d_HLine2d: typeof Adaptor2d_HLine2d;
  Adaptor2d_HLine2d_1: typeof Adaptor2d_HLine2d_1;
  Adaptor2d_HLine2d_2: typeof Adaptor2d_HLine2d_2;
  Adaptor2d_HOffsetCurve: typeof Adaptor2d_HOffsetCurve;
  Adaptor2d_HOffsetCurve_1: typeof Adaptor2d_HOffsetCurve_1;
  Adaptor2d_HOffsetCurve_2: typeof Adaptor2d_HOffsetCurve_2;
  Adaptor2d_Line2d: typeof Adaptor2d_Line2d;
  Adaptor2d_Line2d_1: typeof Adaptor2d_Line2d_1;
  Adaptor2d_Line2d_2: typeof Adaptor2d_Line2d_2;
  Adaptor2d_OffsetCurve: typeof Adaptor2d_OffsetCurve;
  Adaptor2d_OffsetCurve_1: typeof Adaptor2d_OffsetCurve_1;
  Adaptor2d_OffsetCurve_2: typeof Adaptor2d_OffsetCurve_2;
  Adaptor2d_OffsetCurve_3: typeof Adaptor2d_OffsetCurve_3;
  Adaptor2d_OffsetCurve_4: typeof Adaptor2d_OffsetCurve_4;
  Adaptor3d_Curve: typeof Adaptor3d_Curve;
  Adaptor3d_CurveOnSurface: typeof Adaptor3d_CurveOnSurface;
  Adaptor3d_CurveOnSurface_1: typeof Adaptor3d_CurveOnSurface_1;
  Adaptor3d_CurveOnSurface_2: typeof Adaptor3d_CurveOnSurface_2;
  Adaptor3d_CurveOnSurface_3: typeof Adaptor3d_CurveOnSurface_3;
  Adaptor3d_HCurve: typeof Adaptor3d_HCurve;
  Adaptor3d_HCurveOnSurface: typeof Adaptor3d_HCurveOnSurface;
  Adaptor3d_HCurveOnSurface_1: typeof Adaptor3d_HCurveOnSurface_1;
  Adaptor3d_HCurveOnSurface_2: typeof Adaptor3d_HCurveOnSurface_2;
  Adaptor3d_HIsoCurve: typeof Adaptor3d_HIsoCurve;
  Adaptor3d_HIsoCurve_1: typeof Adaptor3d_HIsoCurve_1;
  Adaptor3d_HIsoCurve_2: typeof Adaptor3d_HIsoCurve_2;
  Adaptor3d_HSurface: typeof Adaptor3d_HSurface;
  Adaptor3d_HSurfaceTool: typeof Adaptor3d_HSurfaceTool;
  Adaptor3d_HVertex: typeof Adaptor3d_HVertex;
  Adaptor3d_HVertex_1: typeof Adaptor3d_HVertex_1;
  Adaptor3d_HVertex_2: typeof Adaptor3d_HVertex_2;
  Adaptor3d_InterFunc: typeof Adaptor3d_InterFunc;
  Adaptor3d_IsoCurve: typeof Adaptor3d_IsoCurve;
  Adaptor3d_IsoCurve_1: typeof Adaptor3d_IsoCurve_1;
  Adaptor3d_IsoCurve_2: typeof Adaptor3d_IsoCurve_2;
  Adaptor3d_IsoCurve_3: typeof Adaptor3d_IsoCurve_3;
  Adaptor3d_IsoCurve_4: typeof Adaptor3d_IsoCurve_4;
  Adaptor3d_Surface: typeof Adaptor3d_Surface;
  Adaptor3d_TopolTool: typeof Adaptor3d_TopolTool;
  Adaptor3d_TopolTool_1: typeof Adaptor3d_TopolTool_1;
  Adaptor3d_TopolTool_2: typeof Adaptor3d_TopolTool_2;
  AdvApp2Var_ApproxAFunc2Var: typeof AdvApp2Var_ApproxAFunc2Var;
  AdvApp2Var_ApproxAFunc2Var_1: typeof AdvApp2Var_ApproxAFunc2Var_1;
  AdvApp2Var_ApproxAFunc2Var_2: typeof AdvApp2Var_ApproxAFunc2Var_2;
  AdvApp2Var_ApproxF2var: typeof AdvApp2Var_ApproxF2var;
  AdvApp2Var_Context: typeof AdvApp2Var_Context;
  AdvApp2Var_Context_1: typeof AdvApp2Var_Context_1;
  AdvApp2Var_Context_2: typeof AdvApp2Var_Context_2;
  AdvApp2Var_Criterion: typeof AdvApp2Var_Criterion;
  AdvApp2Var_Data: typeof AdvApp2Var_Data;
  AdvApp2Var_EvaluatorFunc2Var: typeof AdvApp2Var_EvaluatorFunc2Var;
  AdvApp2Var_MathBase: typeof AdvApp2Var_MathBase;
  AdvApp2Var_Node: typeof AdvApp2Var_Node;
  AdvApp2Var_Node_1: typeof AdvApp2Var_Node_1;
  AdvApp2Var_Node_2: typeof AdvApp2Var_Node_2;
  AdvApp2Var_Node_3: typeof AdvApp2Var_Node_3;
  AdvApp2Var_Patch: typeof AdvApp2Var_Patch;
  AdvApp2Var_Patch_1: typeof AdvApp2Var_Patch_1;
  AdvApp2Var_Patch_2: typeof AdvApp2Var_Patch_2;
  AdvApp2Var_SysBase: typeof AdvApp2Var_SysBase;
  AdvApprox_ApproxAFunction: typeof AdvApprox_ApproxAFunction;
  AdvApprox_ApproxAFunction_1: typeof AdvApprox_ApproxAFunction_1;
  AdvApprox_ApproxAFunction_2: typeof AdvApprox_ApproxAFunction_2;
  AdvApprox_Cutting: typeof AdvApprox_Cutting;
  AdvApprox_DichoCutting: typeof AdvApprox_DichoCutting;
  AdvApprox_EvaluatorFunction: typeof AdvApprox_EvaluatorFunction;
  AdvApprox_PrefAndRec: typeof AdvApprox_PrefAndRec;
  AdvApprox_PrefCutting: typeof AdvApprox_PrefCutting;
  AdvApprox_SimpleApprox: typeof AdvApprox_SimpleApprox;
  AppBlend_Approx: typeof AppBlend_Approx;
  AppCont_Function: typeof AppCont_Function;
  AppCont_LeastSquare: typeof AppCont_LeastSquare;
  AppParCurves: typeof AppParCurves;
  AppParCurves_ConstraintCouple: typeof AppParCurves_ConstraintCouple;
  AppParCurves_ConstraintCouple_1: typeof AppParCurves_ConstraintCouple_1;
  AppParCurves_ConstraintCouple_2: typeof AppParCurves_ConstraintCouple_2;
  AppParCurves_MultiBSpCurve: typeof AppParCurves_MultiBSpCurve;
  AppParCurves_MultiBSpCurve_1: typeof AppParCurves_MultiBSpCurve_1;
  AppParCurves_MultiBSpCurve_2: typeof AppParCurves_MultiBSpCurve_2;
  AppParCurves_MultiBSpCurve_3: typeof AppParCurves_MultiBSpCurve_3;
  AppParCurves_MultiBSpCurve_4: typeof AppParCurves_MultiBSpCurve_4;
  AppParCurves_MultiCurve: typeof AppParCurves_MultiCurve;
  AppParCurves_MultiCurve_1: typeof AppParCurves_MultiCurve_1;
  AppParCurves_MultiCurve_2: typeof AppParCurves_MultiCurve_2;
  AppParCurves_MultiCurve_3: typeof AppParCurves_MultiCurve_3;
  AppParCurves_MultiPoint: typeof AppParCurves_MultiPoint;
  AppParCurves_MultiPoint_1: typeof AppParCurves_MultiPoint_1;
  AppParCurves_MultiPoint_2: typeof AppParCurves_MultiPoint_2;
  AppParCurves_MultiPoint_3: typeof AppParCurves_MultiPoint_3;
  AppParCurves_MultiPoint_4: typeof AppParCurves_MultiPoint_4;
  AppParCurves_MultiPoint_5: typeof AppParCurves_MultiPoint_5;
  AppStdL_Application: typeof AppStdL_Application;
  AppStd_Application: typeof AppStd_Application;
  ApproxInt_KnotTools: typeof ApproxInt_KnotTools;
  ApproxInt_SvSurfaces: typeof ApproxInt_SvSurfaces;
  Approx_Curve2d: typeof Approx_Curve2d;
  Approx_Curve3d: typeof Approx_Curve3d;
  Approx_CurveOnSurface: typeof Approx_CurveOnSurface;
  Approx_CurveOnSurface_1: typeof Approx_CurveOnSurface_1;
  Approx_CurveOnSurface_2: typeof Approx_CurveOnSurface_2;
  Approx_CurvilinearParameter: typeof Approx_CurvilinearParameter;
  Approx_CurvilinearParameter_1: typeof Approx_CurvilinearParameter_1;
  Approx_CurvilinearParameter_2: typeof Approx_CurvilinearParameter_2;
  Approx_CurvilinearParameter_3: typeof Approx_CurvilinearParameter_3;
  Approx_CurvlinFunc: typeof Approx_CurvlinFunc;
  Approx_CurvlinFunc_1: typeof Approx_CurvlinFunc_1;
  Approx_CurvlinFunc_2: typeof Approx_CurvlinFunc_2;
  Approx_CurvlinFunc_3: typeof Approx_CurvlinFunc_3;
  Approx_FitAndDivide: typeof Approx_FitAndDivide;
  Approx_FitAndDivide_1: typeof Approx_FitAndDivide_1;
  Approx_FitAndDivide_2: typeof Approx_FitAndDivide_2;
  Approx_FitAndDivide2d: typeof Approx_FitAndDivide2d;
  Approx_FitAndDivide2d_1: typeof Approx_FitAndDivide2d_1;
  Approx_FitAndDivide2d_2: typeof Approx_FitAndDivide2d_2;
  Approx_MCurvesToBSpCurve: typeof Approx_MCurvesToBSpCurve;
  Approx_SameParameter: typeof Approx_SameParameter;
  Approx_SameParameter_1: typeof Approx_SameParameter_1;
  Approx_SameParameter_2: typeof Approx_SameParameter_2;
  Approx_SameParameter_3: typeof Approx_SameParameter_3;
  Approx_SweepApproximation: typeof Approx_SweepApproximation;
  Approx_SweepFunction: typeof Approx_SweepFunction;
  BRepAdaptor_CompCurve: typeof BRepAdaptor_CompCurve;
  BRepAdaptor_CompCurve_1: typeof BRepAdaptor_CompCurve_1;
  BRepAdaptor_CompCurve_2: typeof BRepAdaptor_CompCurve_2;
  BRepAdaptor_CompCurve_3: typeof BRepAdaptor_CompCurve_3;
  BRepAdaptor_Curve: typeof BRepAdaptor_Curve;
  BRepAdaptor_Curve_1: typeof BRepAdaptor_Curve_1;
  BRepAdaptor_Curve_2: typeof BRepAdaptor_Curve_2;
  BRepAdaptor_Curve_3: typeof BRepAdaptor_Curve_3;
  BRepAdaptor_Curve2d: typeof BRepAdaptor_Curve2d;
  BRepAdaptor_Curve2d_1: typeof BRepAdaptor_Curve2d_1;
  BRepAdaptor_Curve2d_2: typeof BRepAdaptor_Curve2d_2;
  BRepAdaptor_HCompCurve: typeof BRepAdaptor_HCompCurve;
  BRepAdaptor_HCompCurve_1: typeof BRepAdaptor_HCompCurve_1;
  BRepAdaptor_HCompCurve_2: typeof BRepAdaptor_HCompCurve_2;
  BRepAdaptor_HCurve: typeof BRepAdaptor_HCurve;
  BRepAdaptor_HCurve_1: typeof BRepAdaptor_HCurve_1;
  BRepAdaptor_HCurve_2: typeof BRepAdaptor_HCurve_2;
  BRepAdaptor_HCurve2d: typeof BRepAdaptor_HCurve2d;
  BRepAdaptor_HCurve2d_1: typeof BRepAdaptor_HCurve2d_1;
  BRepAdaptor_HCurve2d_2: typeof BRepAdaptor_HCurve2d_2;
  BRepAdaptor_HSurface: typeof BRepAdaptor_HSurface;
  BRepAdaptor_HSurface_1: typeof BRepAdaptor_HSurface_1;
  BRepAdaptor_HSurface_2: typeof BRepAdaptor_HSurface_2;
  BRepAdaptor_Surface: typeof BRepAdaptor_Surface;
  BRepAdaptor_Surface_1: typeof BRepAdaptor_Surface_1;
  BRepAdaptor_Surface_2: typeof BRepAdaptor_Surface_2;
  BRepAlgo: typeof BRepAlgo;
  BRepAlgoAPI_Algo: typeof BRepAlgoAPI_Algo;
  BRepAlgoAPI_BooleanOperation: typeof BRepAlgoAPI_BooleanOperation;
  BRepAlgoAPI_BooleanOperation_1: typeof BRepAlgoAPI_BooleanOperation_1;
  BRepAlgoAPI_BooleanOperation_2: typeof BRepAlgoAPI_BooleanOperation_2;
  BRepAlgoAPI_BuilderAlgo: typeof BRepAlgoAPI_BuilderAlgo;
  BRepAlgoAPI_BuilderAlgo_1: typeof BRepAlgoAPI_BuilderAlgo_1;
  BRepAlgoAPI_BuilderAlgo_2: typeof BRepAlgoAPI_BuilderAlgo_2;
  BRepAlgoAPI_Check: typeof BRepAlgoAPI_Check;
  BRepAlgoAPI_Check_1: typeof BRepAlgoAPI_Check_1;
  BRepAlgoAPI_Check_2: typeof BRepAlgoAPI_Check_2;
  BRepAlgoAPI_Check_3: typeof BRepAlgoAPI_Check_3;
  BRepAlgoAPI_Common: typeof BRepAlgoAPI_Common;
  BRepAlgoAPI_Common_1: typeof BRepAlgoAPI_Common_1;
  BRepAlgoAPI_Common_2: typeof BRepAlgoAPI_Common_2;
  BRepAlgoAPI_Common_3: typeof BRepAlgoAPI_Common_3;
  BRepAlgoAPI_Common_4: typeof BRepAlgoAPI_Common_4;
  BRepAlgoAPI_Cut: typeof BRepAlgoAPI_Cut;
  BRepAlgoAPI_Cut_1: typeof BRepAlgoAPI_Cut_1;
  BRepAlgoAPI_Cut_2: typeof BRepAlgoAPI_Cut_2;
  BRepAlgoAPI_Cut_3: typeof BRepAlgoAPI_Cut_3;
  BRepAlgoAPI_Cut_4: typeof BRepAlgoAPI_Cut_4;
  BRepAlgoAPI_Defeaturing: typeof BRepAlgoAPI_Defeaturing;
  BRepAlgoAPI_Fuse: typeof BRepAlgoAPI_Fuse;
  BRepAlgoAPI_Fuse_1: typeof BRepAlgoAPI_Fuse_1;
  BRepAlgoAPI_Fuse_2: typeof BRepAlgoAPI_Fuse_2;
  BRepAlgoAPI_Fuse_3: typeof BRepAlgoAPI_Fuse_3;
  BRepAlgoAPI_Fuse_4: typeof BRepAlgoAPI_Fuse_4;
  BRepAlgoAPI_Section: typeof BRepAlgoAPI_Section;
  BRepAlgoAPI_Section_1: typeof BRepAlgoAPI_Section_1;
  BRepAlgoAPI_Section_2: typeof BRepAlgoAPI_Section_2;
  BRepAlgoAPI_Section_3: typeof BRepAlgoAPI_Section_3;
  BRepAlgoAPI_Section_4: typeof BRepAlgoAPI_Section_4;
  BRepAlgoAPI_Section_5: typeof BRepAlgoAPI_Section_5;
  BRepAlgoAPI_Section_6: typeof BRepAlgoAPI_Section_6;
  BRepAlgoAPI_Section_7: typeof BRepAlgoAPI_Section_7;
  BRepAlgoAPI_Section_8: typeof BRepAlgoAPI_Section_8;
  BRepAlgoAPI_Splitter: typeof BRepAlgoAPI_Splitter;
  BRepAlgoAPI_Splitter_1: typeof BRepAlgoAPI_Splitter_1;
  BRepAlgoAPI_Splitter_2: typeof BRepAlgoAPI_Splitter_2;
  BRepAlgo_AsDes: typeof BRepAlgo_AsDes;
  BRepAlgo_BooleanOperation: typeof BRepAlgo_BooleanOperation;
  BRepAlgo_Common: typeof BRepAlgo_Common;
  BRepAlgo_Cut: typeof BRepAlgo_Cut;
  BRepAlgo_FaceRestrictor: typeof BRepAlgo_FaceRestrictor;
  BRepAlgo_Fuse: typeof BRepAlgo_Fuse;
  BRepAlgo_Image: typeof BRepAlgo_Image;
  BRepAlgo_Loop: typeof BRepAlgo_Loop;
  BRepAlgo_NormalProjection: typeof BRepAlgo_NormalProjection;
  BRepAlgo_NormalProjection_1: typeof BRepAlgo_NormalProjection_1;
  BRepAlgo_NormalProjection_2: typeof BRepAlgo_NormalProjection_2;
  BRepAlgo_Section: typeof BRepAlgo_Section;
  BRepAlgo_Section_1: typeof BRepAlgo_Section_1;
  BRepAlgo_Section_2: typeof BRepAlgo_Section_2;
  BRepAlgo_Section_3: typeof BRepAlgo_Section_3;
  BRepAlgo_Section_4: typeof BRepAlgo_Section_4;
  BRepAlgo_Section_5: typeof BRepAlgo_Section_5;
  BRepAlgo_Tool: typeof BRepAlgo_Tool;
  BRepApprox_ApproxLine: typeof BRepApprox_ApproxLine;
  BRepApprox_ApproxLine_1: typeof BRepApprox_ApproxLine_1;
  BRepApprox_ApproxLine_2: typeof BRepApprox_ApproxLine_2;
  BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox: typeof BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox;
  BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox: typeof BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox;
  BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox: typeof BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox;
  BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_1: typeof BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_1;
  BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_2: typeof BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_2;
  BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_3: typeof BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_3;
  BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_4: typeof BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_4;
  BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox: typeof BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox;
  BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox: typeof BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox;
  BRepApprox_MyBSplGradientOfTheComputeLineOfApprox: typeof BRepApprox_MyBSplGradientOfTheComputeLineOfApprox;
  BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_1: typeof BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_1;
  BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_2: typeof BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_2;
  BRepApprox_MyGradientOfTheComputeLineBezierOfApprox: typeof BRepApprox_MyGradientOfTheComputeLineBezierOfApprox;
  BRepApprox_MyGradientbisOfTheComputeLineOfApprox: typeof BRepApprox_MyGradientbisOfTheComputeLineOfApprox;
  BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox: typeof BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox;
  BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox: typeof BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox;
  BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox: typeof BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox;
  BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_1: typeof BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_1;
  BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_2: typeof BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_2;
  BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_3: typeof BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_3;
  BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_4: typeof BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_4;
  BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox: typeof BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox;
  BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_1: typeof BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_1;
  BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_2: typeof BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_2;
  BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_3: typeof BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_3;
  BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_4: typeof BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_4;
  BRepApprox_SurfaceTool: typeof BRepApprox_SurfaceTool;
  BRepApprox_TheComputeLineBezierOfApprox: typeof BRepApprox_TheComputeLineBezierOfApprox;
  BRepApprox_TheComputeLineBezierOfApprox_1: typeof BRepApprox_TheComputeLineBezierOfApprox_1;
  BRepApprox_TheComputeLineBezierOfApprox_2: typeof BRepApprox_TheComputeLineBezierOfApprox_2;
  BRepApprox_TheComputeLineBezierOfApprox_3: typeof BRepApprox_TheComputeLineBezierOfApprox_3;
  BRepApprox_TheComputeLineBezierOfApprox_4: typeof BRepApprox_TheComputeLineBezierOfApprox_4;
  BRepApprox_TheComputeLineOfApprox: typeof BRepApprox_TheComputeLineOfApprox;
  BRepApprox_TheComputeLineOfApprox_1: typeof BRepApprox_TheComputeLineOfApprox_1;
  BRepApprox_TheComputeLineOfApprox_2: typeof BRepApprox_TheComputeLineOfApprox_2;
  BRepApprox_TheComputeLineOfApprox_3: typeof BRepApprox_TheComputeLineOfApprox_3;
  BRepApprox_TheComputeLineOfApprox_4: typeof BRepApprox_TheComputeLineOfApprox_4;
  BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox: typeof BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox;
  BRepApprox_TheImpPrmSvSurfacesOfApprox: typeof BRepApprox_TheImpPrmSvSurfacesOfApprox;
  BRepApprox_TheImpPrmSvSurfacesOfApprox_1: typeof BRepApprox_TheImpPrmSvSurfacesOfApprox_1;
  BRepApprox_TheImpPrmSvSurfacesOfApprox_2: typeof BRepApprox_TheImpPrmSvSurfacesOfApprox_2;
  BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox: typeof BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox;
  BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_1: typeof BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_1;
  BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_2: typeof BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_2;
  BRepApprox_TheMultiLineOfApprox: typeof BRepApprox_TheMultiLineOfApprox;
  BRepApprox_TheMultiLineOfApprox_1: typeof BRepApprox_TheMultiLineOfApprox_1;
  BRepApprox_TheMultiLineOfApprox_2: typeof BRepApprox_TheMultiLineOfApprox_2;
  BRepApprox_TheMultiLineOfApprox_3: typeof BRepApprox_TheMultiLineOfApprox_3;
  BRepApprox_TheMultiLineToolOfApprox: typeof BRepApprox_TheMultiLineToolOfApprox;
  BRepApprox_ThePrmPrmSvSurfacesOfApprox: typeof BRepApprox_ThePrmPrmSvSurfacesOfApprox;
  BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox: typeof BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox;
  BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_1: typeof BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_1;
  BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_2: typeof BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_2;
  BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_3: typeof BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_3;
  BRepBlend_AppFunc: typeof BRepBlend_AppFunc;
  BRepBlend_AppFuncRoot: typeof BRepBlend_AppFuncRoot;
  BRepBlend_AppFuncRst: typeof BRepBlend_AppFuncRst;
  BRepBlend_AppFuncRstRst: typeof BRepBlend_AppFuncRstRst;
  BRepBlend_AppSurf: typeof BRepBlend_AppSurf;
  BRepBlend_AppSurf_1: typeof BRepBlend_AppSurf_1;
  BRepBlend_AppSurf_2: typeof BRepBlend_AppSurf_2;
  BRepBlend_AppSurface: typeof BRepBlend_AppSurface;
  BRepBlend_BlendTool: typeof BRepBlend_BlendTool;
  BRepBlend_CSWalking: typeof BRepBlend_CSWalking;
  BRepBlend_CurvPointRadInv: typeof BRepBlend_CurvPointRadInv;
  BRepBlend_Extremity: typeof BRepBlend_Extremity;
  BRepBlend_Extremity_1: typeof BRepBlend_Extremity_1;
  BRepBlend_Extremity_2: typeof BRepBlend_Extremity_2;
  BRepBlend_Extremity_3: typeof BRepBlend_Extremity_3;
  BRepBlend_Extremity_4: typeof BRepBlend_Extremity_4;
  BRepBlend_HCurve2dTool: typeof BRepBlend_HCurve2dTool;
  BRepBlend_HCurveTool: typeof BRepBlend_HCurveTool;
  BRepBlend_Line: typeof BRepBlend_Line;
  BRepBlend_PointOnRst: typeof BRepBlend_PointOnRst;
  BRepBlend_PointOnRst_1: typeof BRepBlend_PointOnRst_1;
  BRepBlend_PointOnRst_2: typeof BRepBlend_PointOnRst_2;
  BRepBlend_RstRstConstRad: typeof BRepBlend_RstRstConstRad;
  BRepBlend_RstRstEvolRad: typeof BRepBlend_RstRstEvolRad;
  BRepBlend_RstRstLineBuilder: typeof BRepBlend_RstRstLineBuilder;
  BRepBlend_SurfCurvConstRadInv: typeof BRepBlend_SurfCurvConstRadInv;
  BRepBlend_SurfCurvEvolRadInv: typeof BRepBlend_SurfCurvEvolRadInv;
  BRepBlend_SurfPointConstRadInv: typeof BRepBlend_SurfPointConstRadInv;
  BRepBlend_SurfPointEvolRadInv: typeof BRepBlend_SurfPointEvolRadInv;
  BRepBlend_SurfRstConstRad: typeof BRepBlend_SurfRstConstRad;
  BRepBlend_SurfRstEvolRad: typeof BRepBlend_SurfRstEvolRad;
  BRepBlend_SurfRstLineBuilder: typeof BRepBlend_SurfRstLineBuilder;
  BRepBlend_Walking: typeof BRepBlend_Walking;
  BRepBndLib: typeof BRepBndLib;
  BRepBuilderAPI: typeof BRepBuilderAPI;
  BRepBuilderAPI_Collect: typeof BRepBuilderAPI_Collect;
  BRepBuilderAPI_Command: typeof BRepBuilderAPI_Command;
  BRepBuilderAPI_Copy: typeof BRepBuilderAPI_Copy;
  BRepBuilderAPI_Copy_1: typeof BRepBuilderAPI_Copy_1;
  BRepBuilderAPI_Copy_2: typeof BRepBuilderAPI_Copy_2;
  BRepBuilderAPI_FastSewing: typeof BRepBuilderAPI_FastSewing;
  BRepBuilderAPI_FindPlane: typeof BRepBuilderAPI_FindPlane;
  BRepBuilderAPI_FindPlane_1: typeof BRepBuilderAPI_FindPlane_1;
  BRepBuilderAPI_FindPlane_2: typeof BRepBuilderAPI_FindPlane_2;
  BRepBuilderAPI_GTransform: typeof BRepBuilderAPI_GTransform;
  BRepBuilderAPI_GTransform_1: typeof BRepBuilderAPI_GTransform_1;
  BRepBuilderAPI_GTransform_2: typeof BRepBuilderAPI_GTransform_2;
  BRepBuilderAPI_MakeEdge: typeof BRepBuilderAPI_MakeEdge;
  BRepBuilderAPI_MakeEdge_1: typeof BRepBuilderAPI_MakeEdge_1;
  BRepBuilderAPI_MakeEdge_2: typeof BRepBuilderAPI_MakeEdge_2;
  BRepBuilderAPI_MakeEdge_3: typeof BRepBuilderAPI_MakeEdge_3;
  BRepBuilderAPI_MakeEdge_4: typeof BRepBuilderAPI_MakeEdge_4;
  BRepBuilderAPI_MakeEdge_5: typeof BRepBuilderAPI_MakeEdge_5;
  BRepBuilderAPI_MakeEdge_6: typeof BRepBuilderAPI_MakeEdge_6;
  BRepBuilderAPI_MakeEdge_7: typeof BRepBuilderAPI_MakeEdge_7;
  BRepBuilderAPI_MakeEdge_8: typeof BRepBuilderAPI_MakeEdge_8;
  BRepBuilderAPI_MakeEdge_9: typeof BRepBuilderAPI_MakeEdge_9;
  BRepBuilderAPI_MakeEdge_10: typeof BRepBuilderAPI_MakeEdge_10;
  BRepBuilderAPI_MakeEdge_11: typeof BRepBuilderAPI_MakeEdge_11;
  BRepBuilderAPI_MakeEdge_12: typeof BRepBuilderAPI_MakeEdge_12;
  BRepBuilderAPI_MakeEdge_13: typeof BRepBuilderAPI_MakeEdge_13;
  BRepBuilderAPI_MakeEdge_14: typeof BRepBuilderAPI_MakeEdge_14;
  BRepBuilderAPI_MakeEdge_15: typeof BRepBuilderAPI_MakeEdge_15;
  BRepBuilderAPI_MakeEdge_16: typeof BRepBuilderAPI_MakeEdge_16;
  BRepBuilderAPI_MakeEdge_17: typeof BRepBuilderAPI_MakeEdge_17;
  BRepBuilderAPI_MakeEdge_18: typeof BRepBuilderAPI_MakeEdge_18;
  BRepBuilderAPI_MakeEdge_19: typeof BRepBuilderAPI_MakeEdge_19;
  BRepBuilderAPI_MakeEdge_20: typeof BRepBuilderAPI_MakeEdge_20;
  BRepBuilderAPI_MakeEdge_21: typeof BRepBuilderAPI_MakeEdge_21;
  BRepBuilderAPI_MakeEdge_22: typeof BRepBuilderAPI_MakeEdge_22;
  BRepBuilderAPI_MakeEdge_23: typeof BRepBuilderAPI_MakeEdge_23;
  BRepBuilderAPI_MakeEdge_24: typeof BRepBuilderAPI_MakeEdge_24;
  BRepBuilderAPI_MakeEdge_25: typeof BRepBuilderAPI_MakeEdge_25;
  BRepBuilderAPI_MakeEdge_26: typeof BRepBuilderAPI_MakeEdge_26;
  BRepBuilderAPI_MakeEdge_27: typeof BRepBuilderAPI_MakeEdge_27;
  BRepBuilderAPI_MakeEdge_28: typeof BRepBuilderAPI_MakeEdge_28;
  BRepBuilderAPI_MakeEdge_29: typeof BRepBuilderAPI_MakeEdge_29;
  BRepBuilderAPI_MakeEdge_30: typeof BRepBuilderAPI_MakeEdge_30;
  BRepBuilderAPI_MakeEdge_31: typeof BRepBuilderAPI_MakeEdge_31;
  BRepBuilderAPI_MakeEdge_32: typeof BRepBuilderAPI_MakeEdge_32;
  BRepBuilderAPI_MakeEdge_33: typeof BRepBuilderAPI_MakeEdge_33;
  BRepBuilderAPI_MakeEdge_34: typeof BRepBuilderAPI_MakeEdge_34;
  BRepBuilderAPI_MakeEdge_35: typeof BRepBuilderAPI_MakeEdge_35;
  BRepBuilderAPI_MakeEdge2d: typeof BRepBuilderAPI_MakeEdge2d;
  BRepBuilderAPI_MakeEdge2d_1: typeof BRepBuilderAPI_MakeEdge2d_1;
  BRepBuilderAPI_MakeEdge2d_2: typeof BRepBuilderAPI_MakeEdge2d_2;
  BRepBuilderAPI_MakeEdge2d_3: typeof BRepBuilderAPI_MakeEdge2d_3;
  BRepBuilderAPI_MakeEdge2d_4: typeof BRepBuilderAPI_MakeEdge2d_4;
  BRepBuilderAPI_MakeEdge2d_5: typeof BRepBuilderAPI_MakeEdge2d_5;
  BRepBuilderAPI_MakeEdge2d_6: typeof BRepBuilderAPI_MakeEdge2d_6;
  BRepBuilderAPI_MakeEdge2d_7: typeof BRepBuilderAPI_MakeEdge2d_7;
  BRepBuilderAPI_MakeEdge2d_8: typeof BRepBuilderAPI_MakeEdge2d_8;
  BRepBuilderAPI_MakeEdge2d_9: typeof BRepBuilderAPI_MakeEdge2d_9;
  BRepBuilderAPI_MakeEdge2d_10: typeof BRepBuilderAPI_MakeEdge2d_10;
  BRepBuilderAPI_MakeEdge2d_11: typeof BRepBuilderAPI_MakeEdge2d_11;
  BRepBuilderAPI_MakeEdge2d_12: typeof BRepBuilderAPI_MakeEdge2d_12;
  BRepBuilderAPI_MakeEdge2d_13: typeof BRepBuilderAPI_MakeEdge2d_13;
  BRepBuilderAPI_MakeEdge2d_14: typeof BRepBuilderAPI_MakeEdge2d_14;
  BRepBuilderAPI_MakeEdge2d_15: typeof BRepBuilderAPI_MakeEdge2d_15;
  BRepBuilderAPI_MakeEdge2d_16: typeof BRepBuilderAPI_MakeEdge2d_16;
  BRepBuilderAPI_MakeEdge2d_17: typeof BRepBuilderAPI_MakeEdge2d_17;
  BRepBuilderAPI_MakeEdge2d_18: typeof BRepBuilderAPI_MakeEdge2d_18;
  BRepBuilderAPI_MakeEdge2d_19: typeof BRepBuilderAPI_MakeEdge2d_19;
  BRepBuilderAPI_MakeEdge2d_20: typeof BRepBuilderAPI_MakeEdge2d_20;
  BRepBuilderAPI_MakeEdge2d_21: typeof BRepBuilderAPI_MakeEdge2d_21;
  BRepBuilderAPI_MakeEdge2d_22: typeof BRepBuilderAPI_MakeEdge2d_22;
  BRepBuilderAPI_MakeEdge2d_23: typeof BRepBuilderAPI_MakeEdge2d_23;
  BRepBuilderAPI_MakeEdge2d_24: typeof BRepBuilderAPI_MakeEdge2d_24;
  BRepBuilderAPI_MakeEdge2d_25: typeof BRepBuilderAPI_MakeEdge2d_25;
  BRepBuilderAPI_MakeEdge2d_26: typeof BRepBuilderAPI_MakeEdge2d_26;
  BRepBuilderAPI_MakeEdge2d_27: typeof BRepBuilderAPI_MakeEdge2d_27;
  BRepBuilderAPI_MakeEdge2d_28: typeof BRepBuilderAPI_MakeEdge2d_28;
  BRepBuilderAPI_MakeFace: typeof BRepBuilderAPI_MakeFace;
  BRepBuilderAPI_MakeFace_1: typeof BRepBuilderAPI_MakeFace_1;
  BRepBuilderAPI_MakeFace_2: typeof BRepBuilderAPI_MakeFace_2;
  BRepBuilderAPI_MakeFace_3: typeof BRepBuilderAPI_MakeFace_3;
  BRepBuilderAPI_MakeFace_4: typeof BRepBuilderAPI_MakeFace_4;
  BRepBuilderAPI_MakeFace_5: typeof BRepBuilderAPI_MakeFace_5;
  BRepBuilderAPI_MakeFace_6: typeof BRepBuilderAPI_MakeFace_6;
  BRepBuilderAPI_MakeFace_7: typeof BRepBuilderAPI_MakeFace_7;
  BRepBuilderAPI_MakeFace_8: typeof BRepBuilderAPI_MakeFace_8;
  BRepBuilderAPI_MakeFace_9: typeof BRepBuilderAPI_MakeFace_9;
  BRepBuilderAPI_MakeFace_10: typeof BRepBuilderAPI_MakeFace_10;
  BRepBuilderAPI_MakeFace_11: typeof BRepBuilderAPI_MakeFace_11;
  BRepBuilderAPI_MakeFace_12: typeof BRepBuilderAPI_MakeFace_12;
  BRepBuilderAPI_MakeFace_13: typeof BRepBuilderAPI_MakeFace_13;
  BRepBuilderAPI_MakeFace_14: typeof BRepBuilderAPI_MakeFace_14;
  BRepBuilderAPI_MakeFace_15: typeof BRepBuilderAPI_MakeFace_15;
  BRepBuilderAPI_MakeFace_16: typeof BRepBuilderAPI_MakeFace_16;
  BRepBuilderAPI_MakeFace_17: typeof BRepBuilderAPI_MakeFace_17;
  BRepBuilderAPI_MakeFace_18: typeof BRepBuilderAPI_MakeFace_18;
  BRepBuilderAPI_MakeFace_19: typeof BRepBuilderAPI_MakeFace_19;
  BRepBuilderAPI_MakeFace_20: typeof BRepBuilderAPI_MakeFace_20;
  BRepBuilderAPI_MakeFace_21: typeof BRepBuilderAPI_MakeFace_21;
  BRepBuilderAPI_MakeFace_22: typeof BRepBuilderAPI_MakeFace_22;
  BRepBuilderAPI_MakePolygon: typeof BRepBuilderAPI_MakePolygon;
  BRepBuilderAPI_MakePolygon_1: typeof BRepBuilderAPI_MakePolygon_1;
  BRepBuilderAPI_MakePolygon_2: typeof BRepBuilderAPI_MakePolygon_2;
  BRepBuilderAPI_MakePolygon_3: typeof BRepBuilderAPI_MakePolygon_3;
  BRepBuilderAPI_MakePolygon_4: typeof BRepBuilderAPI_MakePolygon_4;
  BRepBuilderAPI_MakePolygon_5: typeof BRepBuilderAPI_MakePolygon_5;
  BRepBuilderAPI_MakePolygon_6: typeof BRepBuilderAPI_MakePolygon_6;
  BRepBuilderAPI_MakePolygon_7: typeof BRepBuilderAPI_MakePolygon_7;
  BRepBuilderAPI_MakeShape: typeof BRepBuilderAPI_MakeShape;
  BRepBuilderAPI_MakeShell: typeof BRepBuilderAPI_MakeShell;
  BRepBuilderAPI_MakeShell_1: typeof BRepBuilderAPI_MakeShell_1;
  BRepBuilderAPI_MakeShell_2: typeof BRepBuilderAPI_MakeShell_2;
  BRepBuilderAPI_MakeShell_3: typeof BRepBuilderAPI_MakeShell_3;
  BRepBuilderAPI_MakeSolid: typeof BRepBuilderAPI_MakeSolid;
  BRepBuilderAPI_MakeSolid_1: typeof BRepBuilderAPI_MakeSolid_1;
  BRepBuilderAPI_MakeSolid_2: typeof BRepBuilderAPI_MakeSolid_2;
  BRepBuilderAPI_MakeSolid_3: typeof BRepBuilderAPI_MakeSolid_3;
  BRepBuilderAPI_MakeSolid_4: typeof BRepBuilderAPI_MakeSolid_4;
  BRepBuilderAPI_MakeSolid_5: typeof BRepBuilderAPI_MakeSolid_5;
  BRepBuilderAPI_MakeSolid_6: typeof BRepBuilderAPI_MakeSolid_6;
  BRepBuilderAPI_MakeSolid_7: typeof BRepBuilderAPI_MakeSolid_7;
  BRepBuilderAPI_MakeVertex: typeof BRepBuilderAPI_MakeVertex;
  BRepBuilderAPI_MakeWire: typeof BRepBuilderAPI_MakeWire;
  BRepBuilderAPI_MakeWire_1: typeof BRepBuilderAPI_MakeWire_1;
  BRepBuilderAPI_MakeWire_2: typeof BRepBuilderAPI_MakeWire_2;
  BRepBuilderAPI_MakeWire_3: typeof BRepBuilderAPI_MakeWire_3;
  BRepBuilderAPI_MakeWire_4: typeof BRepBuilderAPI_MakeWire_4;
  BRepBuilderAPI_MakeWire_5: typeof BRepBuilderAPI_MakeWire_5;
  BRepBuilderAPI_MakeWire_6: typeof BRepBuilderAPI_MakeWire_6;
  BRepBuilderAPI_MakeWire_7: typeof BRepBuilderAPI_MakeWire_7;
  BRepBuilderAPI_ModifyShape: typeof BRepBuilderAPI_ModifyShape;
  BRepBuilderAPI_NurbsConvert: typeof BRepBuilderAPI_NurbsConvert;
  BRepBuilderAPI_NurbsConvert_1: typeof BRepBuilderAPI_NurbsConvert_1;
  BRepBuilderAPI_NurbsConvert_2: typeof BRepBuilderAPI_NurbsConvert_2;
  BRepBuilderAPI_Sewing: typeof BRepBuilderAPI_Sewing;
  BRepBuilderAPI_Transform: typeof BRepBuilderAPI_Transform;
  BRepBuilderAPI_Transform_1: typeof BRepBuilderAPI_Transform_1;
  BRepBuilderAPI_Transform_2: typeof BRepBuilderAPI_Transform_2;
  BRepBuilderAPI_VertexInspector: typeof BRepBuilderAPI_VertexInspector;
  BRepCheck: typeof BRepCheck;
  BRepCheck_Analyzer: typeof BRepCheck_Analyzer;
  BRepCheck_Edge: typeof BRepCheck_Edge;
  BRepCheck_Face: typeof BRepCheck_Face;
  BRepCheck_Result: typeof BRepCheck_Result;
  BRepCheck_Shell: typeof BRepCheck_Shell;
  BRepCheck_Solid: typeof BRepCheck_Solid;
  BRepCheck_Vertex: typeof BRepCheck_Vertex;
  BRepCheck_Wire: typeof BRepCheck_Wire;
  BRepClass3d: typeof BRepClass3d;
  BRepClass3d_Intersector3d: typeof BRepClass3d_Intersector3d;
  BRepClass3d_SClassifier: typeof BRepClass3d_SClassifier;
  BRepClass3d_SClassifier_1: typeof BRepClass3d_SClassifier_1;
  BRepClass3d_SClassifier_2: typeof BRepClass3d_SClassifier_2;
  BRepClass3d_SolidClassifier: typeof BRepClass3d_SolidClassifier;
  BRepClass3d_SolidClassifier_1: typeof BRepClass3d_SolidClassifier_1;
  BRepClass3d_SolidClassifier_2: typeof BRepClass3d_SolidClassifier_2;
  BRepClass3d_SolidClassifier_3: typeof BRepClass3d_SolidClassifier_3;
  BRepClass3d_SolidExplorer: typeof BRepClass3d_SolidExplorer;
  BRepClass3d_SolidExplorer_1: typeof BRepClass3d_SolidExplorer_1;
  BRepClass3d_SolidExplorer_2: typeof BRepClass3d_SolidExplorer_2;
  BRepClass3d_SolidPassiveClassifier: typeof BRepClass3d_SolidPassiveClassifier;
  BRepClass_Edge: typeof BRepClass_Edge;
  BRepClass_Edge_1: typeof BRepClass_Edge_1;
  BRepClass_Edge_2: typeof BRepClass_Edge_2;
  BRepClass_FClass2dOfFClassifier: typeof BRepClass_FClass2dOfFClassifier;
  BRepClass_FClassifier: typeof BRepClass_FClassifier;
  BRepClass_FClassifier_1: typeof BRepClass_FClassifier_1;
  BRepClass_FClassifier_2: typeof BRepClass_FClassifier_2;
  BRepClass_FaceClassifier: typeof BRepClass_FaceClassifier;
  BRepClass_FaceClassifier_1: typeof BRepClass_FaceClassifier_1;
  BRepClass_FaceClassifier_2: typeof BRepClass_FaceClassifier_2;
  BRepClass_FaceClassifier_3: typeof BRepClass_FaceClassifier_3;
  BRepClass_FaceClassifier_4: typeof BRepClass_FaceClassifier_4;
  BRepClass_FaceExplorer: typeof BRepClass_FaceExplorer;
  BRepClass_FacePassiveClassifier: typeof BRepClass_FacePassiveClassifier;
  BRepClass_Intersector: typeof BRepClass_Intersector;
  BRepExtrema_DistShapeShape: typeof BRepExtrema_DistShapeShape;
  BRepExtrema_DistShapeShape_1: typeof BRepExtrema_DistShapeShape_1;
  BRepExtrema_DistShapeShape_2: typeof BRepExtrema_DistShapeShape_2;
  BRepExtrema_DistShapeShape_3: typeof BRepExtrema_DistShapeShape_3;
  BRepExtrema_DistanceSS: typeof BRepExtrema_DistanceSS;
  BRepExtrema_DistanceSS_1: typeof BRepExtrema_DistanceSS_1;
  BRepExtrema_DistanceSS_2: typeof BRepExtrema_DistanceSS_2;
  BRepExtrema_ExtCC: typeof BRepExtrema_ExtCC;
  BRepExtrema_ExtCC_1: typeof BRepExtrema_ExtCC_1;
  BRepExtrema_ExtCC_2: typeof BRepExtrema_ExtCC_2;
  BRepExtrema_ExtCF: typeof BRepExtrema_ExtCF;
  BRepExtrema_ExtCF_1: typeof BRepExtrema_ExtCF_1;
  BRepExtrema_ExtCF_2: typeof BRepExtrema_ExtCF_2;
  BRepExtrema_ExtFF: typeof BRepExtrema_ExtFF;
  BRepExtrema_ExtFF_1: typeof BRepExtrema_ExtFF_1;
  BRepExtrema_ExtFF_2: typeof BRepExtrema_ExtFF_2;
  BRepExtrema_ExtPC: typeof BRepExtrema_ExtPC;
  BRepExtrema_ExtPC_1: typeof BRepExtrema_ExtPC_1;
  BRepExtrema_ExtPC_2: typeof BRepExtrema_ExtPC_2;
  BRepExtrema_ExtPF: typeof BRepExtrema_ExtPF;
  BRepExtrema_ExtPF_1: typeof BRepExtrema_ExtPF_1;
  BRepExtrema_ExtPF_2: typeof BRepExtrema_ExtPF_2;
  BRepExtrema_OverlapTool_1: typeof BRepExtrema_OverlapTool_1;
  BRepExtrema_OverlapTool_2: typeof BRepExtrema_OverlapTool_2;
  BRepExtrema_Poly: typeof BRepExtrema_Poly;
  BRepExtrema_SelfIntersection: typeof BRepExtrema_SelfIntersection;
  BRepExtrema_SelfIntersection_1: typeof BRepExtrema_SelfIntersection_1;
  BRepExtrema_SelfIntersection_2: typeof BRepExtrema_SelfIntersection_2;
  BRepExtrema_ShapeProximity: typeof BRepExtrema_ShapeProximity;
  BRepExtrema_ShapeProximity_1: typeof BRepExtrema_ShapeProximity_1;
  BRepExtrema_ShapeProximity_2: typeof BRepExtrema_ShapeProximity_2;
  BRepExtrema_SolutionElem: typeof BRepExtrema_SolutionElem;
  BRepExtrema_SolutionElem_1: typeof BRepExtrema_SolutionElem_1;
  BRepExtrema_SolutionElem_2: typeof BRepExtrema_SolutionElem_2;
  BRepExtrema_SolutionElem_3: typeof BRepExtrema_SolutionElem_3;
  BRepExtrema_SolutionElem_4: typeof BRepExtrema_SolutionElem_4;
  BRepExtrema_TriangleSet: typeof BRepExtrema_TriangleSet;
  BRepExtrema_TriangleSet_1: typeof BRepExtrema_TriangleSet_1;
  BRepExtrema_TriangleSet_2: typeof BRepExtrema_TriangleSet_2;
  BRepExtrema_UnCompatibleShape: typeof BRepExtrema_UnCompatibleShape;
  BRepExtrema_UnCompatibleShape_1: typeof BRepExtrema_UnCompatibleShape_1;
  BRepExtrema_UnCompatibleShape_2: typeof BRepExtrema_UnCompatibleShape_2;
  BRepFeat_Builder: typeof BRepFeat_Builder;
  BRepFeat_Form: typeof BRepFeat_Form;
  BRepFeat_Gluer: typeof BRepFeat_Gluer;
  BRepFeat_Gluer_1: typeof BRepFeat_Gluer_1;
  BRepFeat_Gluer_2: typeof BRepFeat_Gluer_2;
  BRepFeat_MakeCylindricalHole: typeof BRepFeat_MakeCylindricalHole;
  BRepFeat_MakeDPrism: typeof BRepFeat_MakeDPrism;
  BRepFeat_MakeDPrism_1: typeof BRepFeat_MakeDPrism_1;
  BRepFeat_MakeDPrism_2: typeof BRepFeat_MakeDPrism_2;
  BRepFeat_MakePipe: typeof BRepFeat_MakePipe;
  BRepFeat_MakePipe_1: typeof BRepFeat_MakePipe_1;
  BRepFeat_MakePipe_2: typeof BRepFeat_MakePipe_2;
  BRepFeat_MakePrism: typeof BRepFeat_MakePrism;
  BRepFeat_MakePrism_1: typeof BRepFeat_MakePrism_1;
  BRepFeat_MakePrism_2: typeof BRepFeat_MakePrism_2;
  BRepFeat_MakeRevol: typeof BRepFeat_MakeRevol;
  BRepFeat_MakeRevol_1: typeof BRepFeat_MakeRevol_1;
  BRepFeat_MakeRevol_2: typeof BRepFeat_MakeRevol_2;
  BRepFeat_MakeRevolutionForm: typeof BRepFeat_MakeRevolutionForm;
  BRepFeat_MakeRevolutionForm_1: typeof BRepFeat_MakeRevolutionForm_1;
  BRepFeat_MakeRevolutionForm_2: typeof BRepFeat_MakeRevolutionForm_2;
  BRepFeat_RibSlot: typeof BRepFeat_RibSlot;
  BRepFeat_SplitShape: typeof BRepFeat_SplitShape;
  BRepFeat_SplitShape_1: typeof BRepFeat_SplitShape_1;
  BRepFeat_SplitShape_2: typeof BRepFeat_SplitShape_2;
  BRepFill: typeof BRepFill;
  BRepFill_ACRLaw: typeof BRepFill_ACRLaw;
  BRepFill_AdvancedEvolved: typeof BRepFill_AdvancedEvolved;
  BRepFill_ApproxSeewing: typeof BRepFill_ApproxSeewing;
  BRepFill_ApproxSeewing_1: typeof BRepFill_ApproxSeewing_1;
  BRepFill_ApproxSeewing_2: typeof BRepFill_ApproxSeewing_2;
  BRepFill_CompatibleWires: typeof BRepFill_CompatibleWires;
  BRepFill_CompatibleWires_1: typeof BRepFill_CompatibleWires_1;
  BRepFill_CompatibleWires_2: typeof BRepFill_CompatibleWires_2;
  BRepFill_ComputeCLine: typeof BRepFill_ComputeCLine;
  BRepFill_ComputeCLine_1: typeof BRepFill_ComputeCLine_1;
  BRepFill_ComputeCLine_2: typeof BRepFill_ComputeCLine_2;
  BRepFill_CurveConstraint: typeof BRepFill_CurveConstraint;
  BRepFill_CurveConstraint_1: typeof BRepFill_CurveConstraint_1;
  BRepFill_CurveConstraint_2: typeof BRepFill_CurveConstraint_2;
  BRepFill_Draft: typeof BRepFill_Draft;
  BRepFill_DraftLaw: typeof BRepFill_DraftLaw;
  BRepFill_Edge3DLaw: typeof BRepFill_Edge3DLaw;
  BRepFill_EdgeFaceAndOrder: typeof BRepFill_EdgeFaceAndOrder;
  BRepFill_EdgeFaceAndOrder_1: typeof BRepFill_EdgeFaceAndOrder_1;
  BRepFill_EdgeFaceAndOrder_2: typeof BRepFill_EdgeFaceAndOrder_2;
  BRepFill_EdgeOnSurfLaw: typeof BRepFill_EdgeOnSurfLaw;
  BRepFill_Evolved: typeof BRepFill_Evolved;
  BRepFill_Evolved_1: typeof BRepFill_Evolved_1;
  BRepFill_Evolved_2: typeof BRepFill_Evolved_2;
  BRepFill_Evolved_3: typeof BRepFill_Evolved_3;
  BRepFill_FaceAndOrder: typeof BRepFill_FaceAndOrder;
  BRepFill_FaceAndOrder_1: typeof BRepFill_FaceAndOrder_1;
  BRepFill_FaceAndOrder_2: typeof BRepFill_FaceAndOrder_2;
  BRepFill_Filling: typeof BRepFill_Filling;
  BRepFill_Generator: typeof BRepFill_Generator;
  BRepFill_LocationLaw: typeof BRepFill_LocationLaw;
  BRepFill_MultiLine: typeof BRepFill_MultiLine;
  BRepFill_MultiLine_1: typeof BRepFill_MultiLine_1;
  BRepFill_MultiLine_2: typeof BRepFill_MultiLine_2;
  BRepFill_NSections: typeof BRepFill_NSections;
  BRepFill_NSections_1: typeof BRepFill_NSections_1;
  BRepFill_NSections_2: typeof BRepFill_NSections_2;
  BRepFill_OffsetAncestors: typeof BRepFill_OffsetAncestors;
  BRepFill_OffsetAncestors_1: typeof BRepFill_OffsetAncestors_1;
  BRepFill_OffsetAncestors_2: typeof BRepFill_OffsetAncestors_2;
  BRepFill_OffsetWire: typeof BRepFill_OffsetWire;
  BRepFill_OffsetWire_1: typeof BRepFill_OffsetWire_1;
  BRepFill_OffsetWire_2: typeof BRepFill_OffsetWire_2;
  BRepFill_Pipe: typeof BRepFill_Pipe;
  BRepFill_Pipe_1: typeof BRepFill_Pipe_1;
  BRepFill_Pipe_2: typeof BRepFill_Pipe_2;
  BRepFill_PipeShell: typeof BRepFill_PipeShell;
  BRepFill_Section: typeof BRepFill_Section;
  BRepFill_Section_1: typeof BRepFill_Section_1;
  BRepFill_Section_2: typeof BRepFill_Section_2;
  BRepFill_SectionLaw: typeof BRepFill_SectionLaw;
  BRepFill_SectionPlacement: typeof BRepFill_SectionPlacement;
  BRepFill_SectionPlacement_1: typeof BRepFill_SectionPlacement_1;
  BRepFill_SectionPlacement_2: typeof BRepFill_SectionPlacement_2;
  BRepFill_ShapeLaw: typeof BRepFill_ShapeLaw;
  BRepFill_ShapeLaw_1: typeof BRepFill_ShapeLaw_1;
  BRepFill_ShapeLaw_2: typeof BRepFill_ShapeLaw_2;
  BRepFill_ShapeLaw_3: typeof BRepFill_ShapeLaw_3;
  BRepFill_Sweep: typeof BRepFill_Sweep;
  BRepFill_TrimEdgeTool: typeof BRepFill_TrimEdgeTool;
  BRepFill_TrimEdgeTool_1: typeof BRepFill_TrimEdgeTool_1;
  BRepFill_TrimEdgeTool_2: typeof BRepFill_TrimEdgeTool_2;
  BRepFill_TrimShellCorner: typeof BRepFill_TrimShellCorner;
  BRepFill_TrimSurfaceTool: typeof BRepFill_TrimSurfaceTool;
  BRepFilletAPI_LocalOperation: typeof BRepFilletAPI_LocalOperation;
  BRepFilletAPI_MakeChamfer: typeof BRepFilletAPI_MakeChamfer;
  BRepFilletAPI_MakeFillet: typeof BRepFilletAPI_MakeFillet;
  BRepFilletAPI_MakeFillet2d: typeof BRepFilletAPI_MakeFillet2d;
  BRepFilletAPI_MakeFillet2d_1: typeof BRepFilletAPI_MakeFillet2d_1;
  BRepFilletAPI_MakeFillet2d_2: typeof BRepFilletAPI_MakeFillet2d_2;
  BRepGProp: typeof BRepGProp;
  BRepGProp_Cinert: typeof BRepGProp_Cinert;
  BRepGProp_Cinert_1: typeof BRepGProp_Cinert_1;
  BRepGProp_Cinert_2: typeof BRepGProp_Cinert_2;
  BRepGProp_Domain: typeof BRepGProp_Domain;
  BRepGProp_Domain_1: typeof BRepGProp_Domain_1;
  BRepGProp_Domain_2: typeof BRepGProp_Domain_2;
  BRepGProp_EdgeTool: typeof BRepGProp_EdgeTool;
  BRepGProp_Face: typeof BRepGProp_Face;
  BRepGProp_Face_1: typeof BRepGProp_Face_1;
  BRepGProp_Face_2: typeof BRepGProp_Face_2;
  BRepGProp_MeshCinert: typeof BRepGProp_MeshCinert;
  BRepGProp_MeshProps: typeof BRepGProp_MeshProps;
  BRepGProp_Sinert: typeof BRepGProp_Sinert;
  BRepGProp_Sinert_1: typeof BRepGProp_Sinert_1;
  BRepGProp_Sinert_2: typeof BRepGProp_Sinert_2;
  BRepGProp_Sinert_3: typeof BRepGProp_Sinert_3;
  BRepGProp_Sinert_4: typeof BRepGProp_Sinert_4;
  BRepGProp_Sinert_5: typeof BRepGProp_Sinert_5;
  BRepGProp_TFunction: typeof BRepGProp_TFunction;
  BRepGProp_UFunction: typeof BRepGProp_UFunction;
  BRepGProp_Vinert: typeof BRepGProp_Vinert;
  BRepGProp_Vinert_1: typeof BRepGProp_Vinert_1;
  BRepGProp_Vinert_2: typeof BRepGProp_Vinert_2;
  BRepGProp_Vinert_3: typeof BRepGProp_Vinert_3;
  BRepGProp_Vinert_4: typeof BRepGProp_Vinert_4;
  BRepGProp_Vinert_5: typeof BRepGProp_Vinert_5;
  BRepGProp_Vinert_6: typeof BRepGProp_Vinert_6;
  BRepGProp_Vinert_7: typeof BRepGProp_Vinert_7;
  BRepGProp_Vinert_8: typeof BRepGProp_Vinert_8;
  BRepGProp_Vinert_9: typeof BRepGProp_Vinert_9;
  BRepGProp_Vinert_10: typeof BRepGProp_Vinert_10;
  BRepGProp_Vinert_11: typeof BRepGProp_Vinert_11;
  BRepGProp_Vinert_12: typeof BRepGProp_Vinert_12;
  BRepGProp_Vinert_13: typeof BRepGProp_Vinert_13;
  BRepIntCurveSurface_Inter: typeof BRepIntCurveSurface_Inter;
  BRepLProp: typeof BRepLProp;
  BRepLProp_CLProps: typeof BRepLProp_CLProps;
  BRepLProp_CLProps_1: typeof BRepLProp_CLProps_1;
  BRepLProp_CLProps_2: typeof BRepLProp_CLProps_2;
  BRepLProp_CLProps_3: typeof BRepLProp_CLProps_3;
  BRepLProp_CurveTool: typeof BRepLProp_CurveTool;
  BRepLProp_SLProps: typeof BRepLProp_SLProps;
  BRepLProp_SLProps_1: typeof BRepLProp_SLProps_1;
  BRepLProp_SLProps_2: typeof BRepLProp_SLProps_2;
  BRepLProp_SLProps_3: typeof BRepLProp_SLProps_3;
  BRepLProp_SurfaceTool: typeof BRepLProp_SurfaceTool;
  BRepLib: typeof BRepLib;
  BRepLib_CheckCurveOnSurface: typeof BRepLib_CheckCurveOnSurface;
  BRepLib_CheckCurveOnSurface_1: typeof BRepLib_CheckCurveOnSurface_1;
  BRepLib_CheckCurveOnSurface_2: typeof BRepLib_CheckCurveOnSurface_2;
  BRepLib_Command: typeof BRepLib_Command;
  BRepLib_FindSurface: typeof BRepLib_FindSurface;
  BRepLib_FindSurface_1: typeof BRepLib_FindSurface_1;
  BRepLib_FindSurface_2: typeof BRepLib_FindSurface_2;
  BRepLib_FuseEdges: typeof BRepLib_FuseEdges;
  BRepLib_MakeEdge: typeof BRepLib_MakeEdge;
  BRepLib_MakeEdge_1: typeof BRepLib_MakeEdge_1;
  BRepLib_MakeEdge_2: typeof BRepLib_MakeEdge_2;
  BRepLib_MakeEdge_3: typeof BRepLib_MakeEdge_3;
  BRepLib_MakeEdge_4: typeof BRepLib_MakeEdge_4;
  BRepLib_MakeEdge_5: typeof BRepLib_MakeEdge_5;
  BRepLib_MakeEdge_6: typeof BRepLib_MakeEdge_6;
  BRepLib_MakeEdge_7: typeof BRepLib_MakeEdge_7;
  BRepLib_MakeEdge_8: typeof BRepLib_MakeEdge_8;
  BRepLib_MakeEdge_9: typeof BRepLib_MakeEdge_9;
  BRepLib_MakeEdge_10: typeof BRepLib_MakeEdge_10;
  BRepLib_MakeEdge_11: typeof BRepLib_MakeEdge_11;
  BRepLib_MakeEdge_12: typeof BRepLib_MakeEdge_12;
  BRepLib_MakeEdge_13: typeof BRepLib_MakeEdge_13;
  BRepLib_MakeEdge_14: typeof BRepLib_MakeEdge_14;
  BRepLib_MakeEdge_15: typeof BRepLib_MakeEdge_15;
  BRepLib_MakeEdge_16: typeof BRepLib_MakeEdge_16;
  BRepLib_MakeEdge_17: typeof BRepLib_MakeEdge_17;
  BRepLib_MakeEdge_18: typeof BRepLib_MakeEdge_18;
  BRepLib_MakeEdge_19: typeof BRepLib_MakeEdge_19;
  BRepLib_MakeEdge_20: typeof BRepLib_MakeEdge_20;
  BRepLib_MakeEdge_21: typeof BRepLib_MakeEdge_21;
  BRepLib_MakeEdge_22: typeof BRepLib_MakeEdge_22;
  BRepLib_MakeEdge_23: typeof BRepLib_MakeEdge_23;
  BRepLib_MakeEdge_24: typeof BRepLib_MakeEdge_24;
  BRepLib_MakeEdge_25: typeof BRepLib_MakeEdge_25;
  BRepLib_MakeEdge_26: typeof BRepLib_MakeEdge_26;
  BRepLib_MakeEdge_27: typeof BRepLib_MakeEdge_27;
  BRepLib_MakeEdge_28: typeof BRepLib_MakeEdge_28;
  BRepLib_MakeEdge_29: typeof BRepLib_MakeEdge_29;
  BRepLib_MakeEdge_30: typeof BRepLib_MakeEdge_30;
  BRepLib_MakeEdge_31: typeof BRepLib_MakeEdge_31;
  BRepLib_MakeEdge_32: typeof BRepLib_MakeEdge_32;
  BRepLib_MakeEdge_33: typeof BRepLib_MakeEdge_33;
  BRepLib_MakeEdge_34: typeof BRepLib_MakeEdge_34;
  BRepLib_MakeEdge_35: typeof BRepLib_MakeEdge_35;
  BRepLib_MakeEdge2d: typeof BRepLib_MakeEdge2d;
  BRepLib_MakeEdge2d_1: typeof BRepLib_MakeEdge2d_1;
  BRepLib_MakeEdge2d_2: typeof BRepLib_MakeEdge2d_2;
  BRepLib_MakeEdge2d_3: typeof BRepLib_MakeEdge2d_3;
  BRepLib_MakeEdge2d_4: typeof BRepLib_MakeEdge2d_4;
  BRepLib_MakeEdge2d_5: typeof BRepLib_MakeEdge2d_5;
  BRepLib_MakeEdge2d_6: typeof BRepLib_MakeEdge2d_6;
  BRepLib_MakeEdge2d_7: typeof BRepLib_MakeEdge2d_7;
  BRepLib_MakeEdge2d_8: typeof BRepLib_MakeEdge2d_8;
  BRepLib_MakeEdge2d_9: typeof BRepLib_MakeEdge2d_9;
  BRepLib_MakeEdge2d_10: typeof BRepLib_MakeEdge2d_10;
  BRepLib_MakeEdge2d_11: typeof BRepLib_MakeEdge2d_11;
  BRepLib_MakeEdge2d_12: typeof BRepLib_MakeEdge2d_12;
  BRepLib_MakeEdge2d_13: typeof BRepLib_MakeEdge2d_13;
  BRepLib_MakeEdge2d_14: typeof BRepLib_MakeEdge2d_14;
  BRepLib_MakeEdge2d_15: typeof BRepLib_MakeEdge2d_15;
  BRepLib_MakeEdge2d_16: typeof BRepLib_MakeEdge2d_16;
  BRepLib_MakeEdge2d_17: typeof BRepLib_MakeEdge2d_17;
  BRepLib_MakeEdge2d_18: typeof BRepLib_MakeEdge2d_18;
  BRepLib_MakeEdge2d_19: typeof BRepLib_MakeEdge2d_19;
  BRepLib_MakeEdge2d_20: typeof BRepLib_MakeEdge2d_20;
  BRepLib_MakeEdge2d_21: typeof BRepLib_MakeEdge2d_21;
  BRepLib_MakeEdge2d_22: typeof BRepLib_MakeEdge2d_22;
  BRepLib_MakeEdge2d_23: typeof BRepLib_MakeEdge2d_23;
  BRepLib_MakeEdge2d_24: typeof BRepLib_MakeEdge2d_24;
  BRepLib_MakeEdge2d_25: typeof BRepLib_MakeEdge2d_25;
  BRepLib_MakeEdge2d_26: typeof BRepLib_MakeEdge2d_26;
  BRepLib_MakeEdge2d_27: typeof BRepLib_MakeEdge2d_27;
  BRepLib_MakeEdge2d_28: typeof BRepLib_MakeEdge2d_28;
  BRepLib_MakeFace: typeof BRepLib_MakeFace;
  BRepLib_MakeFace_1: typeof BRepLib_MakeFace_1;
  BRepLib_MakeFace_2: typeof BRepLib_MakeFace_2;
  BRepLib_MakeFace_3: typeof BRepLib_MakeFace_3;
  BRepLib_MakeFace_4: typeof BRepLib_MakeFace_4;
  BRepLib_MakeFace_5: typeof BRepLib_MakeFace_5;
  BRepLib_MakeFace_6: typeof BRepLib_MakeFace_6;
  BRepLib_MakeFace_7: typeof BRepLib_MakeFace_7;
  BRepLib_MakeFace_8: typeof BRepLib_MakeFace_8;
  BRepLib_MakeFace_9: typeof BRepLib_MakeFace_9;
  BRepLib_MakeFace_10: typeof BRepLib_MakeFace_10;
  BRepLib_MakeFace_11: typeof BRepLib_MakeFace_11;
  BRepLib_MakeFace_12: typeof BRepLib_MakeFace_12;
  BRepLib_MakeFace_13: typeof BRepLib_MakeFace_13;
  BRepLib_MakeFace_14: typeof BRepLib_MakeFace_14;
  BRepLib_MakeFace_15: typeof BRepLib_MakeFace_15;
  BRepLib_MakeFace_16: typeof BRepLib_MakeFace_16;
  BRepLib_MakeFace_17: typeof BRepLib_MakeFace_17;
  BRepLib_MakeFace_18: typeof BRepLib_MakeFace_18;
  BRepLib_MakeFace_19: typeof BRepLib_MakeFace_19;
  BRepLib_MakeFace_20: typeof BRepLib_MakeFace_20;
  BRepLib_MakeFace_21: typeof BRepLib_MakeFace_21;
  BRepLib_MakeFace_22: typeof BRepLib_MakeFace_22;
  BRepLib_MakePolygon: typeof BRepLib_MakePolygon;
  BRepLib_MakePolygon_1: typeof BRepLib_MakePolygon_1;
  BRepLib_MakePolygon_2: typeof BRepLib_MakePolygon_2;
  BRepLib_MakePolygon_3: typeof BRepLib_MakePolygon_3;
  BRepLib_MakePolygon_4: typeof BRepLib_MakePolygon_4;
  BRepLib_MakePolygon_5: typeof BRepLib_MakePolygon_5;
  BRepLib_MakePolygon_6: typeof BRepLib_MakePolygon_6;
  BRepLib_MakePolygon_7: typeof BRepLib_MakePolygon_7;
  BRepLib_MakeShape: typeof BRepLib_MakeShape;
  BRepLib_MakeShell: typeof BRepLib_MakeShell;
  BRepLib_MakeShell_1: typeof BRepLib_MakeShell_1;
  BRepLib_MakeShell_2: typeof BRepLib_MakeShell_2;
  BRepLib_MakeShell_3: typeof BRepLib_MakeShell_3;
  BRepLib_MakeSolid: typeof BRepLib_MakeSolid;
  BRepLib_MakeSolid_1: typeof BRepLib_MakeSolid_1;
  BRepLib_MakeSolid_2: typeof BRepLib_MakeSolid_2;
  BRepLib_MakeSolid_3: typeof BRepLib_MakeSolid_3;
  BRepLib_MakeSolid_4: typeof BRepLib_MakeSolid_4;
  BRepLib_MakeSolid_5: typeof BRepLib_MakeSolid_5;
  BRepLib_MakeSolid_6: typeof BRepLib_MakeSolid_6;
  BRepLib_MakeSolid_7: typeof BRepLib_MakeSolid_7;
  BRepLib_MakeVertex: typeof BRepLib_MakeVertex;
  BRepLib_MakeWire: typeof BRepLib_MakeWire;
  BRepLib_MakeWire_1: typeof BRepLib_MakeWire_1;
  BRepLib_MakeWire_2: typeof BRepLib_MakeWire_2;
  BRepLib_MakeWire_3: typeof BRepLib_MakeWire_3;
  BRepLib_MakeWire_4: typeof BRepLib_MakeWire_4;
  BRepLib_MakeWire_5: typeof BRepLib_MakeWire_5;
  BRepLib_MakeWire_6: typeof BRepLib_MakeWire_6;
  BRepLib_MakeWire_7: typeof BRepLib_MakeWire_7;
  BRepMAT2d_BisectingLocus: typeof BRepMAT2d_BisectingLocus;
  BRepMAT2d_Explorer: typeof BRepMAT2d_Explorer;
  BRepMAT2d_Explorer_1: typeof BRepMAT2d_Explorer_1;
  BRepMAT2d_Explorer_2: typeof BRepMAT2d_Explorer_2;
  BRepMAT2d_LinkTopoBilo: typeof BRepMAT2d_LinkTopoBilo;
  BRepMAT2d_LinkTopoBilo_1: typeof BRepMAT2d_LinkTopoBilo_1;
  BRepMAT2d_LinkTopoBilo_2: typeof BRepMAT2d_LinkTopoBilo_2;
  BRepMesh_BaseMeshAlgo: typeof BRepMesh_BaseMeshAlgo;
  BRepMesh_BoundaryParamsRangeSplitter: typeof BRepMesh_BoundaryParamsRangeSplitter;
  BRepMesh_Circle: typeof BRepMesh_Circle;
  BRepMesh_Circle_1: typeof BRepMesh_Circle_1;
  BRepMesh_Circle_2: typeof BRepMesh_Circle_2;
  BRepMesh_CircleInspector: typeof BRepMesh_CircleInspector;
  BRepMesh_CircleTool: typeof BRepMesh_CircleTool;
  BRepMesh_CircleTool_1: typeof BRepMesh_CircleTool_1;
  BRepMesh_CircleTool_2: typeof BRepMesh_CircleTool_2;
  BRepMesh_Classifier: typeof BRepMesh_Classifier;
  BRepMesh_ConeRangeSplitter: typeof BRepMesh_ConeRangeSplitter;
  BRepMesh_ConstrainedBaseMeshAlgo: typeof BRepMesh_ConstrainedBaseMeshAlgo;
  BRepMesh_Context: typeof BRepMesh_Context;
  BRepMesh_CurveTessellator: typeof BRepMesh_CurveTessellator;
  BRepMesh_CurveTessellator_1: typeof BRepMesh_CurveTessellator_1;
  BRepMesh_CurveTessellator_2: typeof BRepMesh_CurveTessellator_2;
  BRepMesh_CustomBaseMeshAlgo: typeof BRepMesh_CustomBaseMeshAlgo;
  BRepMesh_CylinderRangeSplitter: typeof BRepMesh_CylinderRangeSplitter;
  BRepMesh_DataStructureOfDelaun: typeof BRepMesh_DataStructureOfDelaun;
  BRepMesh_DefaultRangeSplitter: typeof BRepMesh_DefaultRangeSplitter;
  BRepMesh_Deflection: typeof BRepMesh_Deflection;
  BRepMesh_Delaun: typeof BRepMesh_Delaun;
  BRepMesh_Delaun_1: typeof BRepMesh_Delaun_1;
  BRepMesh_Delaun_2: typeof BRepMesh_Delaun_2;
  BRepMesh_Delaun_3: typeof BRepMesh_Delaun_3;
  BRepMesh_Delaun_4: typeof BRepMesh_Delaun_4;
  BRepMesh_Delaun_5: typeof BRepMesh_Delaun_5;
  BRepMesh_DelaunayBaseMeshAlgo: typeof BRepMesh_DelaunayBaseMeshAlgo;
  BRepMesh_DiscretFactory: typeof BRepMesh_DiscretFactory;
  BRepMesh_DiscretRoot: typeof BRepMesh_DiscretRoot;
  BRepMesh_Edge: typeof BRepMesh_Edge;
  BRepMesh_Edge_1: typeof BRepMesh_Edge_1;
  BRepMesh_Edge_2: typeof BRepMesh_Edge_2;
  BRepMesh_EdgeDiscret: typeof BRepMesh_EdgeDiscret;
  BRepMesh_EdgeTessellationExtractor: typeof BRepMesh_EdgeTessellationExtractor;
  BRepMesh_FaceChecker: typeof BRepMesh_FaceChecker;
  BRepMesh_FaceDiscret: typeof BRepMesh_FaceDiscret;
  BRepMesh_FastDiscret: typeof BRepMesh_FastDiscret;
  BRepMesh_GeomTool: typeof BRepMesh_GeomTool;
  BRepMesh_GeomTool_1: typeof BRepMesh_GeomTool_1;
  BRepMesh_GeomTool_2: typeof BRepMesh_GeomTool_2;
  BRepMesh_IncrementalMesh: typeof BRepMesh_IncrementalMesh;
  BRepMesh_IncrementalMesh_1: typeof BRepMesh_IncrementalMesh_1;
  BRepMesh_IncrementalMesh_2: typeof BRepMesh_IncrementalMesh_2;
  BRepMesh_IncrementalMesh_3: typeof BRepMesh_IncrementalMesh_3;
  BRepMesh_MeshAlgoFactory: typeof BRepMesh_MeshAlgoFactory;
  BRepMesh_MeshTool: typeof BRepMesh_MeshTool;
  BRepMesh_ModelBuilder: typeof BRepMesh_ModelBuilder;
  BRepMesh_ModelHealer: typeof BRepMesh_ModelHealer;
  BRepMesh_ModelPostProcessor: typeof BRepMesh_ModelPostProcessor;
  BRepMesh_ModelPreProcessor: typeof BRepMesh_ModelPreProcessor;
  BRepMesh_NURBSRangeSplitter: typeof BRepMesh_NURBSRangeSplitter;
  BRepMesh_OrientedEdge: typeof BRepMesh_OrientedEdge;
  BRepMesh_OrientedEdge_1: typeof BRepMesh_OrientedEdge_1;
  BRepMesh_OrientedEdge_2: typeof BRepMesh_OrientedEdge_2;
  BRepMesh_PairOfIndex: typeof BRepMesh_PairOfIndex;
  BRepMesh_SelectorOfDataStructureOfDelaun: typeof BRepMesh_SelectorOfDataStructureOfDelaun;
  BRepMesh_SelectorOfDataStructureOfDelaun_1: typeof BRepMesh_SelectorOfDataStructureOfDelaun_1;
  BRepMesh_SelectorOfDataStructureOfDelaun_2: typeof BRepMesh_SelectorOfDataStructureOfDelaun_2;
  BRepMesh_ShapeTool: typeof BRepMesh_ShapeTool;
  BRepMesh_ShapeVisitor: typeof BRepMesh_ShapeVisitor;
  BRepMesh_SphereRangeSplitter: typeof BRepMesh_SphereRangeSplitter;
  BRepMesh_TorusRangeSplitter: typeof BRepMesh_TorusRangeSplitter;
  BRepMesh_Triangle: typeof BRepMesh_Triangle;
  BRepMesh_Triangle_1: typeof BRepMesh_Triangle_1;
  BRepMesh_Triangle_2: typeof BRepMesh_Triangle_2;
  BRepMesh_UVParamRangeSplitter: typeof BRepMesh_UVParamRangeSplitter;
  BRepMesh_Vertex: typeof BRepMesh_Vertex;
  BRepMesh_Vertex_1: typeof BRepMesh_Vertex_1;
  BRepMesh_Vertex_2: typeof BRepMesh_Vertex_2;
  BRepMesh_Vertex_3: typeof BRepMesh_Vertex_3;
  BRepMesh_VertexInspector: typeof BRepMesh_VertexInspector;
  BRepMesh_VertexTool: typeof BRepMesh_VertexTool;
  BRepOffset: typeof BRepOffset;
  BRepOffsetAPI_DraftAngle: typeof BRepOffsetAPI_DraftAngle;
  BRepOffsetAPI_DraftAngle_1: typeof BRepOffsetAPI_DraftAngle_1;
  BRepOffsetAPI_DraftAngle_2: typeof BRepOffsetAPI_DraftAngle_2;
  BRepOffsetAPI_MakeDraft: typeof BRepOffsetAPI_MakeDraft;
  BRepOffsetAPI_MakeEvolved: typeof BRepOffsetAPI_MakeEvolved;
  BRepOffsetAPI_MakeEvolved_1: typeof BRepOffsetAPI_MakeEvolved_1;
  BRepOffsetAPI_MakeEvolved_2: typeof BRepOffsetAPI_MakeEvolved_2;
  BRepOffsetAPI_MakeFilling: typeof BRepOffsetAPI_MakeFilling;
  BRepOffsetAPI_MakeOffset: typeof BRepOffsetAPI_MakeOffset;
  BRepOffsetAPI_MakeOffset_1: typeof BRepOffsetAPI_MakeOffset_1;
  BRepOffsetAPI_MakeOffset_2: typeof BRepOffsetAPI_MakeOffset_2;
  BRepOffsetAPI_MakeOffset_3: typeof BRepOffsetAPI_MakeOffset_3;
  BRepOffsetAPI_MakeOffsetShape: typeof BRepOffsetAPI_MakeOffsetShape;
  BRepOffsetAPI_MakeOffsetShape_1: typeof BRepOffsetAPI_MakeOffsetShape_1;
  BRepOffsetAPI_MakeOffsetShape_2: typeof BRepOffsetAPI_MakeOffsetShape_2;
  BRepOffsetAPI_MakePipe: typeof BRepOffsetAPI_MakePipe;
  BRepOffsetAPI_MakePipe_1: typeof BRepOffsetAPI_MakePipe_1;
  BRepOffsetAPI_MakePipe_2: typeof BRepOffsetAPI_MakePipe_2;
  BRepOffsetAPI_MakePipeShell: typeof BRepOffsetAPI_MakePipeShell;
  BRepOffsetAPI_MakeThickSolid: typeof BRepOffsetAPI_MakeThickSolid;
  BRepOffsetAPI_MakeThickSolid_1: typeof BRepOffsetAPI_MakeThickSolid_1;
  BRepOffsetAPI_MakeThickSolid_2: typeof BRepOffsetAPI_MakeThickSolid_2;
  BRepOffsetAPI_MiddlePath: typeof BRepOffsetAPI_MiddlePath;
  BRepOffsetAPI_NormalProjection: typeof BRepOffsetAPI_NormalProjection;
  BRepOffsetAPI_NormalProjection_1: typeof BRepOffsetAPI_NormalProjection_1;
  BRepOffsetAPI_NormalProjection_2: typeof BRepOffsetAPI_NormalProjection_2;
  BRepOffsetAPI_ThruSections: typeof BRepOffsetAPI_ThruSections;
  BRepOffset_Analyse: typeof BRepOffset_Analyse;
  BRepOffset_Analyse_1: typeof BRepOffset_Analyse_1;
  BRepOffset_Analyse_2: typeof BRepOffset_Analyse_2;
  BRepOffset_Inter2d: typeof BRepOffset_Inter2d;
  BRepOffset_Inter3d: typeof BRepOffset_Inter3d;
  BRepOffset_Interval: typeof BRepOffset_Interval;
  BRepOffset_Interval_1: typeof BRepOffset_Interval_1;
  BRepOffset_Interval_2: typeof BRepOffset_Interval_2;
  BRepOffset_MakeLoops: typeof BRepOffset_MakeLoops;
  BRepOffset_MakeSimpleOffset: typeof BRepOffset_MakeSimpleOffset;
  BRepOffset_MakeSimpleOffset_1: typeof BRepOffset_MakeSimpleOffset_1;
  BRepOffset_MakeSimpleOffset_2: typeof BRepOffset_MakeSimpleOffset_2;
  BRepOffset_Offset: typeof BRepOffset_Offset;
  BRepOffset_Offset_1: typeof BRepOffset_Offset_1;
  BRepOffset_Offset_2: typeof BRepOffset_Offset_2;
  BRepOffset_Offset_3: typeof BRepOffset_Offset_3;
  BRepOffset_Offset_4: typeof BRepOffset_Offset_4;
  BRepOffset_Offset_5: typeof BRepOffset_Offset_5;
  BRepOffset_Offset_6: typeof BRepOffset_Offset_6;
  BRepOffset_SimpleOffset: typeof BRepOffset_SimpleOffset;
  BRepOffset_Tool: typeof BRepOffset_Tool;
  BRepPrimAPI_MakeBox: typeof BRepPrimAPI_MakeBox;
  BRepPrimAPI_MakeBox_1: typeof BRepPrimAPI_MakeBox_1;
  BRepPrimAPI_MakeBox_2: typeof BRepPrimAPI_MakeBox_2;
  BRepPrimAPI_MakeBox_3: typeof BRepPrimAPI_MakeBox_3;
  BRepPrimAPI_MakeBox_4: typeof BRepPrimAPI_MakeBox_4;
  BRepPrimAPI_MakeCone: typeof BRepPrimAPI_MakeCone;
  BRepPrimAPI_MakeCone_1: typeof BRepPrimAPI_MakeCone_1;
  BRepPrimAPI_MakeCone_2: typeof BRepPrimAPI_MakeCone_2;
  BRepPrimAPI_MakeCone_3: typeof BRepPrimAPI_MakeCone_3;
  BRepPrimAPI_MakeCone_4: typeof BRepPrimAPI_MakeCone_4;
  BRepPrimAPI_MakeCylinder: typeof BRepPrimAPI_MakeCylinder;
  BRepPrimAPI_MakeCylinder_1: typeof BRepPrimAPI_MakeCylinder_1;
  BRepPrimAPI_MakeCylinder_2: typeof BRepPrimAPI_MakeCylinder_2;
  BRepPrimAPI_MakeCylinder_3: typeof BRepPrimAPI_MakeCylinder_3;
  BRepPrimAPI_MakeCylinder_4: typeof BRepPrimAPI_MakeCylinder_4;
  BRepPrimAPI_MakeHalfSpace: typeof BRepPrimAPI_MakeHalfSpace;
  BRepPrimAPI_MakeHalfSpace_1: typeof BRepPrimAPI_MakeHalfSpace_1;
  BRepPrimAPI_MakeHalfSpace_2: typeof BRepPrimAPI_MakeHalfSpace_2;
  BRepPrimAPI_MakeOneAxis: typeof BRepPrimAPI_MakeOneAxis;
  BRepPrimAPI_MakePrism: typeof BRepPrimAPI_MakePrism;
  BRepPrimAPI_MakePrism_1: typeof BRepPrimAPI_MakePrism_1;
  BRepPrimAPI_MakePrism_2: typeof BRepPrimAPI_MakePrism_2;
  BRepPrimAPI_MakeRevol: typeof BRepPrimAPI_MakeRevol;
  BRepPrimAPI_MakeRevol_1: typeof BRepPrimAPI_MakeRevol_1;
  BRepPrimAPI_MakeRevol_2: typeof BRepPrimAPI_MakeRevol_2;
  BRepPrimAPI_MakeRevolution: typeof BRepPrimAPI_MakeRevolution;
  BRepPrimAPI_MakeRevolution_1: typeof BRepPrimAPI_MakeRevolution_1;
  BRepPrimAPI_MakeRevolution_2: typeof BRepPrimAPI_MakeRevolution_2;
  BRepPrimAPI_MakeRevolution_3: typeof BRepPrimAPI_MakeRevolution_3;
  BRepPrimAPI_MakeRevolution_4: typeof BRepPrimAPI_MakeRevolution_4;
  BRepPrimAPI_MakeRevolution_5: typeof BRepPrimAPI_MakeRevolution_5;
  BRepPrimAPI_MakeRevolution_6: typeof BRepPrimAPI_MakeRevolution_6;
  BRepPrimAPI_MakeRevolution_7: typeof BRepPrimAPI_MakeRevolution_7;
  BRepPrimAPI_MakeRevolution_8: typeof BRepPrimAPI_MakeRevolution_8;
  BRepPrimAPI_MakeSphere: typeof BRepPrimAPI_MakeSphere;
  BRepPrimAPI_MakeSphere_1: typeof BRepPrimAPI_MakeSphere_1;
  BRepPrimAPI_MakeSphere_2: typeof BRepPrimAPI_MakeSphere_2;
  BRepPrimAPI_MakeSphere_3: typeof BRepPrimAPI_MakeSphere_3;
  BRepPrimAPI_MakeSphere_4: typeof BRepPrimAPI_MakeSphere_4;
  BRepPrimAPI_MakeSphere_5: typeof BRepPrimAPI_MakeSphere_5;
  BRepPrimAPI_MakeSphere_6: typeof BRepPrimAPI_MakeSphere_6;
  BRepPrimAPI_MakeSphere_7: typeof BRepPrimAPI_MakeSphere_7;
  BRepPrimAPI_MakeSphere_8: typeof BRepPrimAPI_MakeSphere_8;
  BRepPrimAPI_MakeSphere_9: typeof BRepPrimAPI_MakeSphere_9;
  BRepPrimAPI_MakeSphere_10: typeof BRepPrimAPI_MakeSphere_10;
  BRepPrimAPI_MakeSphere_11: typeof BRepPrimAPI_MakeSphere_11;
  BRepPrimAPI_MakeSphere_12: typeof BRepPrimAPI_MakeSphere_12;
  BRepPrimAPI_MakeSweep: typeof BRepPrimAPI_MakeSweep;
  BRepPrimAPI_MakeTorus: typeof BRepPrimAPI_MakeTorus;
  BRepPrimAPI_MakeTorus_1: typeof BRepPrimAPI_MakeTorus_1;
  BRepPrimAPI_MakeTorus_2: typeof BRepPrimAPI_MakeTorus_2;
  BRepPrimAPI_MakeTorus_3: typeof BRepPrimAPI_MakeTorus_3;
  BRepPrimAPI_MakeTorus_4: typeof BRepPrimAPI_MakeTorus_4;
  BRepPrimAPI_MakeTorus_5: typeof BRepPrimAPI_MakeTorus_5;
  BRepPrimAPI_MakeTorus_6: typeof BRepPrimAPI_MakeTorus_6;
  BRepPrimAPI_MakeTorus_7: typeof BRepPrimAPI_MakeTorus_7;
  BRepPrimAPI_MakeTorus_8: typeof BRepPrimAPI_MakeTorus_8;
  BRepPrimAPI_MakeWedge: typeof BRepPrimAPI_MakeWedge;
  BRepPrimAPI_MakeWedge_1: typeof BRepPrimAPI_MakeWedge_1;
  BRepPrimAPI_MakeWedge_2: typeof BRepPrimAPI_MakeWedge_2;
  BRepPrimAPI_MakeWedge_3: typeof BRepPrimAPI_MakeWedge_3;
  BRepPrimAPI_MakeWedge_4: typeof BRepPrimAPI_MakeWedge_4;
  BRepPrim_Builder: typeof BRepPrim_Builder;
  BRepPrim_Builder_1: typeof BRepPrim_Builder_1;
  BRepPrim_Builder_2: typeof BRepPrim_Builder_2;
  BRepPrim_Cone: typeof BRepPrim_Cone;
  BRepPrim_Cone_1: typeof BRepPrim_Cone_1;
  BRepPrim_Cone_2: typeof BRepPrim_Cone_2;
  BRepPrim_Cone_3: typeof BRepPrim_Cone_3;
  BRepPrim_Cone_4: typeof BRepPrim_Cone_4;
  BRepPrim_Cone_5: typeof BRepPrim_Cone_5;
  BRepPrim_Cone_6: typeof BRepPrim_Cone_6;
  BRepPrim_Cone_7: typeof BRepPrim_Cone_7;
  BRepPrim_Cylinder: typeof BRepPrim_Cylinder;
  BRepPrim_Cylinder_1: typeof BRepPrim_Cylinder_1;
  BRepPrim_Cylinder_2: typeof BRepPrim_Cylinder_2;
  BRepPrim_Cylinder_3: typeof BRepPrim_Cylinder_3;
  BRepPrim_Cylinder_4: typeof BRepPrim_Cylinder_4;
  BRepPrim_Cylinder_5: typeof BRepPrim_Cylinder_5;
  BRepPrim_Cylinder_6: typeof BRepPrim_Cylinder_6;
  BRepPrim_FaceBuilder: typeof BRepPrim_FaceBuilder;
  BRepPrim_FaceBuilder_1: typeof BRepPrim_FaceBuilder_1;
  BRepPrim_FaceBuilder_2: typeof BRepPrim_FaceBuilder_2;
  BRepPrim_FaceBuilder_3: typeof BRepPrim_FaceBuilder_3;
  BRepPrim_GWedge: typeof BRepPrim_GWedge;
  BRepPrim_GWedge_1: typeof BRepPrim_GWedge_1;
  BRepPrim_GWedge_2: typeof BRepPrim_GWedge_2;
  BRepPrim_GWedge_3: typeof BRepPrim_GWedge_3;
  BRepPrim_OneAxis: typeof BRepPrim_OneAxis;
  BRepPrim_Revolution: typeof BRepPrim_Revolution;
  BRepPrim_Sphere: typeof BRepPrim_Sphere;
  BRepPrim_Sphere_1: typeof BRepPrim_Sphere_1;
  BRepPrim_Sphere_2: typeof BRepPrim_Sphere_2;
  BRepPrim_Sphere_3: typeof BRepPrim_Sphere_3;
  BRepPrim_Torus: typeof BRepPrim_Torus;
  BRepPrim_Torus_1: typeof BRepPrim_Torus_1;
  BRepPrim_Torus_2: typeof BRepPrim_Torus_2;
  BRepPrim_Torus_3: typeof BRepPrim_Torus_3;
  BRepPrim_Wedge: typeof BRepPrim_Wedge;
  BRepPrim_Wedge_1: typeof BRepPrim_Wedge_1;
  BRepPrim_Wedge_2: typeof BRepPrim_Wedge_2;
  BRepPrim_Wedge_3: typeof BRepPrim_Wedge_3;
  BRepProj_Projection: typeof BRepProj_Projection;
  BRepProj_Projection_1: typeof BRepProj_Projection_1;
  BRepProj_Projection_2: typeof BRepProj_Projection_2;
  BRepSweep_Builder: typeof BRepSweep_Builder;
  BRepSweep_Iterator: typeof BRepSweep_Iterator;
  BRepSweep_NumLinearRegularSweep: typeof BRepSweep_NumLinearRegularSweep;
  BRepSweep_Prism: typeof BRepSweep_Prism;
  BRepSweep_Prism_1: typeof BRepSweep_Prism_1;
  BRepSweep_Prism_2: typeof BRepSweep_Prism_2;
  BRepSweep_Revol: typeof BRepSweep_Revol;
  BRepSweep_Revol_1: typeof BRepSweep_Revol_1;
  BRepSweep_Revol_2: typeof BRepSweep_Revol_2;
  BRepSweep_Rotation: typeof BRepSweep_Rotation;
  BRepSweep_Tool: typeof BRepSweep_Tool;
  BRepSweep_Translation: typeof BRepSweep_Translation;
  BRepSweep_Trsf: typeof BRepSweep_Trsf;
  BRepToIGESBRep_Entity: typeof BRepToIGESBRep_Entity;
  BRepToIGES_BREntity: typeof BRepToIGES_BREntity;
  BRepToIGES_BRShell: typeof BRepToIGES_BRShell;
  BRepToIGES_BRShell_1: typeof BRepToIGES_BRShell_1;
  BRepToIGES_BRShell_2: typeof BRepToIGES_BRShell_2;
  BRepToIGES_BRSolid: typeof BRepToIGES_BRSolid;
  BRepToIGES_BRSolid_1: typeof BRepToIGES_BRSolid_1;
  BRepToIGES_BRSolid_2: typeof BRepToIGES_BRSolid_2;
  BRepToIGES_BRWire: typeof BRepToIGES_BRWire;
  BRepToIGES_BRWire_1: typeof BRepToIGES_BRWire_1;
  BRepToIGES_BRWire_2: typeof BRepToIGES_BRWire_2;
  BRepTools: typeof BRepTools;
  BRepTools_GTrsfModification: typeof BRepTools_GTrsfModification;
  BRepTools_History: typeof BRepTools_History;
  BRepTools_Modification: typeof BRepTools_Modification;
  BRepTools_Modifier: typeof BRepTools_Modifier;
  BRepTools_Modifier_1: typeof BRepTools_Modifier_1;
  BRepTools_Modifier_2: typeof BRepTools_Modifier_2;
  BRepTools_Modifier_3: typeof BRepTools_Modifier_3;
  BRepTools_NurbsConvertModification: typeof BRepTools_NurbsConvertModification;
  BRepTools_Quilt: typeof BRepTools_Quilt;
  BRepTools_ReShape: typeof BRepTools_ReShape;
  BRepTools_ShapeSet: typeof BRepTools_ShapeSet;
  BRepTools_ShapeSet_1: typeof BRepTools_ShapeSet_1;
  BRepTools_ShapeSet_2: typeof BRepTools_ShapeSet_2;
  BRepTools_Substitution: typeof BRepTools_Substitution;
  BRepTools_TrsfModification: typeof BRepTools_TrsfModification;
  BRepTools_WireExplorer: typeof BRepTools_WireExplorer;
  BRepTools_WireExplorer_1: typeof BRepTools_WireExplorer_1;
  BRepTools_WireExplorer_2: typeof BRepTools_WireExplorer_2;
  BRepTools_WireExplorer_3: typeof BRepTools_WireExplorer_3;
  BRepTopAdaptor_FClass2d: typeof BRepTopAdaptor_FClass2d;
  BRepTopAdaptor_HVertex: typeof BRepTopAdaptor_HVertex;
  BRepTopAdaptor_Tool: typeof BRepTopAdaptor_Tool;
  BRepTopAdaptor_Tool_1: typeof BRepTopAdaptor_Tool_1;
  BRepTopAdaptor_Tool_2: typeof BRepTopAdaptor_Tool_2;
  BRepTopAdaptor_Tool_3: typeof BRepTopAdaptor_Tool_3;
  BRepTopAdaptor_TopolTool: typeof BRepTopAdaptor_TopolTool;
  BRepTopAdaptor_TopolTool_1: typeof BRepTopAdaptor_TopolTool_1;
  BRepTopAdaptor_TopolTool_2: typeof BRepTopAdaptor_TopolTool_2;
  BRep_Builder: typeof BRep_Builder;
  BRep_Curve3D: typeof BRep_Curve3D;
  BRep_CurveOn2Surfaces: typeof BRep_CurveOn2Surfaces;
  BRep_CurveOnClosedSurface: typeof BRep_CurveOnClosedSurface;
  BRep_CurveOnSurface: typeof BRep_CurveOnSurface;
  BRep_CurveRepresentation: typeof BRep_CurveRepresentation;
  BRep_GCurve: typeof BRep_GCurve;
  BRep_PointOnCurve: typeof BRep_PointOnCurve;
  BRep_PointOnCurveOnSurface: typeof BRep_PointOnCurveOnSurface;
  BRep_PointOnSurface: typeof BRep_PointOnSurface;
  BRep_PointRepresentation: typeof BRep_PointRepresentation;
  BRep_PointsOnSurface: typeof BRep_PointsOnSurface;
  BRep_Polygon3D: typeof BRep_Polygon3D;
  BRep_PolygonOnClosedSurface: typeof BRep_PolygonOnClosedSurface;
  BRep_PolygonOnClosedTriangulation: typeof BRep_PolygonOnClosedTriangulation;
  BRep_PolygonOnSurface: typeof BRep_PolygonOnSurface;
  BRep_PolygonOnTriangulation: typeof BRep_PolygonOnTriangulation;
  BRep_TEdge: typeof BRep_TEdge;
  BRep_TFace: typeof BRep_TFace;
  BRep_TVertex: typeof BRep_TVertex;
  BRep_Tool: typeof BRep_Tool;
  BSplCLib_Cache: typeof BSplCLib_Cache;
  BSplCLib_Cache_1: typeof BSplCLib_Cache_1;
  BSplCLib_Cache_2: typeof BSplCLib_Cache_2;
  BSplCLib_EvaluatorFunction: typeof BSplCLib_EvaluatorFunction;
  BSplSLib: typeof BSplSLib;
  BSplSLib_Cache: typeof BSplSLib_Cache;
  BSplSLib_EvaluatorFunction: typeof BSplSLib_EvaluatorFunction;
  BVH_BuildQueue: typeof BVH_BuildQueue;
  BVH_BuildThread: typeof BVH_BuildThread;
  BVH_BuilderTransient: typeof BVH_BuilderTransient;
  BVH_ObjectTransient: typeof BVH_ObjectTransient;
  BVH_Properties: typeof BVH_Properties;
  BVH_TreeBaseTransient: typeof BVH_TreeBaseTransient;
  BiTgte_Blend: typeof BiTgte_Blend;
  BiTgte_Blend_1: typeof BiTgte_Blend_1;
  BiTgte_Blend_2: typeof BiTgte_Blend_2;
  BiTgte_CurveOnEdge: typeof BiTgte_CurveOnEdge;
  BiTgte_CurveOnEdge_1: typeof BiTgte_CurveOnEdge_1;
  BiTgte_CurveOnEdge_2: typeof BiTgte_CurveOnEdge_2;
  BiTgte_CurveOnVertex: typeof BiTgte_CurveOnVertex;
  BiTgte_CurveOnVertex_1: typeof BiTgte_CurveOnVertex_1;
  BiTgte_CurveOnVertex_2: typeof BiTgte_CurveOnVertex_2;
  BiTgte_HCurveOnEdge: typeof BiTgte_HCurveOnEdge;
  BiTgte_HCurveOnEdge_1: typeof BiTgte_HCurveOnEdge_1;
  BiTgte_HCurveOnEdge_2: typeof BiTgte_HCurveOnEdge_2;
  BiTgte_HCurveOnVertex: typeof BiTgte_HCurveOnVertex;
  BiTgte_HCurveOnVertex_1: typeof BiTgte_HCurveOnVertex_1;
  BiTgte_HCurveOnVertex_2: typeof BiTgte_HCurveOnVertex_2;
  Bisector: typeof Bisector;
  Bisector_Bisec: typeof Bisector_Bisec;
  Bisector_BisecAna: typeof Bisector_BisecAna;
  Bisector_BisecCC: typeof Bisector_BisecCC;
  Bisector_BisecCC_1: typeof Bisector_BisecCC_1;
  Bisector_BisecCC_2: typeof Bisector_BisecCC_2;
  Bisector_BisecPC: typeof Bisector_BisecPC;
  Bisector_BisecPC_1: typeof Bisector_BisecPC_1;
  Bisector_BisecPC_2: typeof Bisector_BisecPC_2;
  Bisector_BisecPC_3: typeof Bisector_BisecPC_3;
  Bisector_Curve: typeof Bisector_Curve;
  Bisector_FunctionH: typeof Bisector_FunctionH;
  Bisector_FunctionInter: typeof Bisector_FunctionInter;
  Bisector_FunctionInter_1: typeof Bisector_FunctionInter_1;
  Bisector_FunctionInter_2: typeof Bisector_FunctionInter_2;
  Bisector_Inter: typeof Bisector_Inter;
  Bisector_Inter_1: typeof Bisector_Inter_1;
  Bisector_Inter_2: typeof Bisector_Inter_2;
  Bisector_PointOnBis: typeof Bisector_PointOnBis;
  Bisector_PointOnBis_1: typeof Bisector_PointOnBis_1;
  Bisector_PointOnBis_2: typeof Bisector_PointOnBis_2;
  Bisector_PolyBis: typeof Bisector_PolyBis;
  BlendFunc_CSCircular: typeof BlendFunc_CSCircular;
  BlendFunc_CSConstRad: typeof BlendFunc_CSConstRad;
  BlendFunc_ChAsym: typeof BlendFunc_ChAsym;
  BlendFunc_ChAsymInv: typeof BlendFunc_ChAsymInv;
  BlendFunc_ChamfInv: typeof BlendFunc_ChamfInv;
  BlendFunc_Chamfer: typeof BlendFunc_Chamfer;
  BlendFunc_ConstRad: typeof BlendFunc_ConstRad;
  BlendFunc_ConstRadInv: typeof BlendFunc_ConstRadInv;
  BlendFunc_ConstThroat: typeof BlendFunc_ConstThroat;
  BlendFunc_ConstThroatInv: typeof BlendFunc_ConstThroatInv;
  BlendFunc_ConstThroatWithPenetration: typeof BlendFunc_ConstThroatWithPenetration;
  BlendFunc_ConstThroatWithPenetrationInv: typeof BlendFunc_ConstThroatWithPenetrationInv;
  BlendFunc_Corde: typeof BlendFunc_Corde;
  BlendFunc_EvolRad: typeof BlendFunc_EvolRad;
  BlendFunc_EvolRadInv: typeof BlendFunc_EvolRadInv;
  BlendFunc_GenChamfInv: typeof BlendFunc_GenChamfInv;
  BlendFunc_GenChamfer: typeof BlendFunc_GenChamfer;
  BlendFunc_Ruled: typeof BlendFunc_Ruled;
  BlendFunc_RuledInv: typeof BlendFunc_RuledInv;
  BlendFunc_Tensor: typeof BlendFunc_Tensor;
  Blend_AppFunction: typeof Blend_AppFunction;
  Blend_CSFunction: typeof Blend_CSFunction;
  Blend_CurvPointFuncInv: typeof Blend_CurvPointFuncInv;
  Blend_FuncInv: typeof Blend_FuncInv;
  Blend_Function: typeof Blend_Function;
  Blend_Point: typeof Blend_Point;
  Blend_Point_1: typeof Blend_Point_1;
  Blend_Point_2: typeof Blend_Point_2;
  Blend_Point_3: typeof Blend_Point_3;
  Blend_Point_4: typeof Blend_Point_4;
  Blend_Point_5: typeof Blend_Point_5;
  Blend_Point_6: typeof Blend_Point_6;
  Blend_Point_7: typeof Blend_Point_7;
  Blend_Point_8: typeof Blend_Point_8;
  Blend_Point_9: typeof Blend_Point_9;
  Blend_RstRstFunction: typeof Blend_RstRstFunction;
  Blend_SurfCurvFuncInv: typeof Blend_SurfCurvFuncInv;
  Blend_SurfPointFuncInv: typeof Blend_SurfPointFuncInv;
  Blend_SurfRstFunction: typeof Blend_SurfRstFunction;
  BndLib: typeof BndLib;
  BndLib_Add2dCurve: typeof BndLib_Add2dCurve;
  BndLib_Add3dCurve: typeof BndLib_Add3dCurve;
  BndLib_AddSurface: typeof BndLib_AddSurface;
  Bnd_B2d: typeof Bnd_B2d;
  Bnd_B2d_1: typeof Bnd_B2d_1;
  Bnd_B2d_2: typeof Bnd_B2d_2;
  Bnd_B2f: typeof Bnd_B2f;
  Bnd_B2f_1: typeof Bnd_B2f_1;
  Bnd_B2f_2: typeof Bnd_B2f_2;
  Bnd_B3d: typeof Bnd_B3d;
  Bnd_B3d_1: typeof Bnd_B3d_1;
  Bnd_B3d_2: typeof Bnd_B3d_2;
  Bnd_B3f: typeof Bnd_B3f;
  Bnd_B3f_1: typeof Bnd_B3f_1;
  Bnd_B3f_2: typeof Bnd_B3f_2;
  Bnd_BoundSortBox: typeof Bnd_BoundSortBox;
  Bnd_BoundSortBox2d: typeof Bnd_BoundSortBox2d;
  Bnd_Box: typeof Bnd_Box;
  Bnd_Box_1: typeof Bnd_Box_1;
  Bnd_Box_2: typeof Bnd_Box_2;
  Bnd_Box2d: typeof Bnd_Box2d;
  Bnd_OBB: typeof Bnd_OBB;
  Bnd_OBB_1: typeof Bnd_OBB_1;
  Bnd_OBB_2: typeof Bnd_OBB_2;
  Bnd_OBB_3: typeof Bnd_OBB_3;
  Bnd_Range: typeof Bnd_Range;
  Bnd_Range_1: typeof Bnd_Range_1;
  Bnd_Range_2: typeof Bnd_Range_2;
  Bnd_Sphere: typeof Bnd_Sphere;
  Bnd_Sphere_1: typeof Bnd_Sphere_1;
  Bnd_Sphere_2: typeof Bnd_Sphere_2;
  Bnd_Tools: typeof Bnd_Tools;
  CDF: typeof CDF;
  CDF_Application: typeof CDF_Application;
  CDF_Directory: typeof CDF_Directory;
  CDF_DirectoryIterator: typeof CDF_DirectoryIterator;
  CDF_DirectoryIterator_1: typeof CDF_DirectoryIterator_1;
  CDF_DirectoryIterator_2: typeof CDF_DirectoryIterator_2;
  CDF_FWOSDriver: typeof CDF_FWOSDriver;
  CDF_MetaDataDriver: typeof CDF_MetaDataDriver;
  CDF_MetaDataDriverError: typeof CDF_MetaDataDriverError;
  CDF_MetaDataDriverError_1: typeof CDF_MetaDataDriverError_1;
  CDF_MetaDataDriverError_2: typeof CDF_MetaDataDriverError_2;
  CDF_MetaDataDriverFactory: typeof CDF_MetaDataDriverFactory;
  CDF_Session: typeof CDF_Session;
  CDF_Store: typeof CDF_Store;
  CDF_StoreList: typeof CDF_StoreList;
  CDM_Application: typeof CDM_Application;
  CDM_Document: typeof CDM_Document;
  CDM_MetaData: typeof CDM_MetaData;
  CDM_Reference: typeof CDM_Reference;
  CDM_ReferenceIterator: typeof CDM_ReferenceIterator;
  CPnts_AbscissaPoint: typeof CPnts_AbscissaPoint;
  CPnts_AbscissaPoint_1: typeof CPnts_AbscissaPoint_1;
  CPnts_AbscissaPoint_2: typeof CPnts_AbscissaPoint_2;
  CPnts_AbscissaPoint_3: typeof CPnts_AbscissaPoint_3;
  CPnts_AbscissaPoint_4: typeof CPnts_AbscissaPoint_4;
  CPnts_AbscissaPoint_5: typeof CPnts_AbscissaPoint_5;
  CPnts_MyGaussFunction: typeof CPnts_MyGaussFunction;
  CPnts_MyRootFunction: typeof CPnts_MyRootFunction;
  CPnts_UniformDeflection: typeof CPnts_UniformDeflection;
  CPnts_UniformDeflection_1: typeof CPnts_UniformDeflection_1;
  CPnts_UniformDeflection_2: typeof CPnts_UniformDeflection_2;
  CPnts_UniformDeflection_3: typeof CPnts_UniformDeflection_3;
  CPnts_UniformDeflection_4: typeof CPnts_UniformDeflection_4;
  CPnts_UniformDeflection_5: typeof CPnts_UniformDeflection_5;
  CSLib: typeof CSLib;
  CSLib_Class2d: typeof CSLib_Class2d;
  CSLib_Class2d_1: typeof CSLib_Class2d_1;
  CSLib_Class2d_2: typeof CSLib_Class2d_2;
  CSLib_NormalPolyDef: typeof CSLib_NormalPolyDef;
  ChFi2d: typeof ChFi2d;
  ChFi2d_AnaFilletAlgo: typeof ChFi2d_AnaFilletAlgo;
  ChFi2d_AnaFilletAlgo_1: typeof ChFi2d_AnaFilletAlgo_1;
  ChFi2d_AnaFilletAlgo_2: typeof ChFi2d_AnaFilletAlgo_2;
  ChFi2d_AnaFilletAlgo_3: typeof ChFi2d_AnaFilletAlgo_3;
  ChFi2d_Builder: typeof ChFi2d_Builder;
  ChFi2d_Builder_1: typeof ChFi2d_Builder_1;
  ChFi2d_Builder_2: typeof ChFi2d_Builder_2;
  ChFi2d_ChamferAPI: typeof ChFi2d_ChamferAPI;
  ChFi2d_ChamferAPI_1: typeof ChFi2d_ChamferAPI_1;
  ChFi2d_ChamferAPI_2: typeof ChFi2d_ChamferAPI_2;
  ChFi2d_ChamferAPI_3: typeof ChFi2d_ChamferAPI_3;
  ChFi2d_FilletAPI: typeof ChFi2d_FilletAPI;
  ChFi2d_FilletAPI_1: typeof ChFi2d_FilletAPI_1;
  ChFi2d_FilletAPI_2: typeof ChFi2d_FilletAPI_2;
  ChFi2d_FilletAPI_3: typeof ChFi2d_FilletAPI_3;
  ChFi2d_FilletAlgo: typeof ChFi2d_FilletAlgo;
  ChFi2d_FilletAlgo_1: typeof ChFi2d_FilletAlgo_1;
  ChFi2d_FilletAlgo_2: typeof ChFi2d_FilletAlgo_2;
  ChFi2d_FilletAlgo_3: typeof ChFi2d_FilletAlgo_3;
  ChFi3d: typeof ChFi3d;
  ChFi3d_Builder: typeof ChFi3d_Builder;
  ChFi3d_ChBuilder: typeof ChFi3d_ChBuilder;
  ChFi3d_FilBuilder: typeof ChFi3d_FilBuilder;
  ChFi3d_SearchSing: typeof ChFi3d_SearchSing;
  ChFiDS_ChamfSpine: typeof ChFiDS_ChamfSpine;
  ChFiDS_ChamfSpine_1: typeof ChFiDS_ChamfSpine_1;
  ChFiDS_ChamfSpine_2: typeof ChFiDS_ChamfSpine_2;
  ChFiDS_CircSection: typeof ChFiDS_CircSection;
  ChFiDS_CommonPoint: typeof ChFiDS_CommonPoint;
  ChFiDS_ElSpine: typeof ChFiDS_ElSpine;
  ChFiDS_FaceInterference: typeof ChFiDS_FaceInterference;
  ChFiDS_FilSpine: typeof ChFiDS_FilSpine;
  ChFiDS_FilSpine_1: typeof ChFiDS_FilSpine_1;
  ChFiDS_FilSpine_2: typeof ChFiDS_FilSpine_2;
  ChFiDS_HElSpine: typeof ChFiDS_HElSpine;
  ChFiDS_HElSpine_1: typeof ChFiDS_HElSpine_1;
  ChFiDS_HElSpine_2: typeof ChFiDS_HElSpine_2;
  ChFiDS_Map: typeof ChFiDS_Map;
  ChFiDS_Regul: typeof ChFiDS_Regul;
  ChFiDS_Spine: typeof ChFiDS_Spine;
  ChFiDS_Spine_1: typeof ChFiDS_Spine_1;
  ChFiDS_Spine_2: typeof ChFiDS_Spine_2;
  ChFiDS_Stripe: typeof ChFiDS_Stripe;
  ChFiDS_StripeMap: typeof ChFiDS_StripeMap;
  ChFiDS_SurfData: typeof ChFiDS_SurfData;
  ChFiKPart_ComputeData: typeof ChFiKPart_ComputeData;
  Contap_ArcFunction: typeof Contap_ArcFunction;
  Contap_ContAna: typeof Contap_ContAna;
  Contap_Contour: typeof Contap_Contour;
  Contap_Contour_1: typeof Contap_Contour_1;
  Contap_Contour_2: typeof Contap_Contour_2;
  Contap_Contour_3: typeof Contap_Contour_3;
  Contap_Contour_4: typeof Contap_Contour_4;
  Contap_Contour_5: typeof Contap_Contour_5;
  Contap_Contour_6: typeof Contap_Contour_6;
  Contap_Contour_7: typeof Contap_Contour_7;
  Contap_HContTool: typeof Contap_HContTool;
  Contap_HCurve2dTool: typeof Contap_HCurve2dTool;
  Contap_Line: typeof Contap_Line;
  Contap_Point: typeof Contap_Point;
  Contap_Point_1: typeof Contap_Point_1;
  Contap_Point_2: typeof Contap_Point_2;
  Contap_SurfFunction: typeof Contap_SurfFunction;
  Contap_SurfProps: typeof Contap_SurfProps;
  Contap_TheIWLineOfTheIWalking: typeof Contap_TheIWLineOfTheIWalking;
  Contap_TheIWalking: typeof Contap_TheIWalking;
  Contap_ThePathPointOfTheSearch: typeof Contap_ThePathPointOfTheSearch;
  Contap_ThePathPointOfTheSearch_1: typeof Contap_ThePathPointOfTheSearch_1;
  Contap_ThePathPointOfTheSearch_2: typeof Contap_ThePathPointOfTheSearch_2;
  Contap_ThePathPointOfTheSearch_3: typeof Contap_ThePathPointOfTheSearch_3;
  Contap_TheSearch: typeof Contap_TheSearch;
  Contap_TheSearchInside: typeof Contap_TheSearchInside;
  Contap_TheSearchInside_1: typeof Contap_TheSearchInside_1;
  Contap_TheSearchInside_2: typeof Contap_TheSearchInside_2;
  Contap_TheSegmentOfTheSearch: typeof Contap_TheSegmentOfTheSearch;
  Convert_CircleToBSplineCurve: typeof Convert_CircleToBSplineCurve;
  Convert_CircleToBSplineCurve_1: typeof Convert_CircleToBSplineCurve_1;
  Convert_CircleToBSplineCurve_2: typeof Convert_CircleToBSplineCurve_2;
  Convert_CompBezierCurves2dToBSplineCurve2d: typeof Convert_CompBezierCurves2dToBSplineCurve2d;
  Convert_CompBezierCurvesToBSplineCurve: typeof Convert_CompBezierCurvesToBSplineCurve;
  Convert_CompPolynomialToPoles: typeof Convert_CompPolynomialToPoles;
  Convert_CompPolynomialToPoles_1: typeof Convert_CompPolynomialToPoles_1;
  Convert_CompPolynomialToPoles_2: typeof Convert_CompPolynomialToPoles_2;
  Convert_CompPolynomialToPoles_3: typeof Convert_CompPolynomialToPoles_3;
  Convert_ConeToBSplineSurface: typeof Convert_ConeToBSplineSurface;
  Convert_ConeToBSplineSurface_1: typeof Convert_ConeToBSplineSurface_1;
  Convert_ConeToBSplineSurface_2: typeof Convert_ConeToBSplineSurface_2;
  Convert_ConicToBSplineCurve: typeof Convert_ConicToBSplineCurve;
  Convert_CylinderToBSplineSurface: typeof Convert_CylinderToBSplineSurface;
  Convert_CylinderToBSplineSurface_1: typeof Convert_CylinderToBSplineSurface_1;
  Convert_CylinderToBSplineSurface_2: typeof Convert_CylinderToBSplineSurface_2;
  Convert_ElementarySurfaceToBSplineSurface: typeof Convert_ElementarySurfaceToBSplineSurface;
  Convert_EllipseToBSplineCurve: typeof Convert_EllipseToBSplineCurve;
  Convert_EllipseToBSplineCurve_1: typeof Convert_EllipseToBSplineCurve_1;
  Convert_EllipseToBSplineCurve_2: typeof Convert_EllipseToBSplineCurve_2;
  Convert_GridPolynomialToPoles: typeof Convert_GridPolynomialToPoles;
  Convert_GridPolynomialToPoles_1: typeof Convert_GridPolynomialToPoles_1;
  Convert_GridPolynomialToPoles_2: typeof Convert_GridPolynomialToPoles_2;
  Convert_HyperbolaToBSplineCurve: typeof Convert_HyperbolaToBSplineCurve;
  Convert_ParabolaToBSplineCurve: typeof Convert_ParabolaToBSplineCurve;
  Convert_SphereToBSplineSurface: typeof Convert_SphereToBSplineSurface;
  Convert_SphereToBSplineSurface_1: typeof Convert_SphereToBSplineSurface_1;
  Convert_SphereToBSplineSurface_2: typeof Convert_SphereToBSplineSurface_2;
  Convert_SphereToBSplineSurface_3: typeof Convert_SphereToBSplineSurface_3;
  Convert_TorusToBSplineSurface: typeof Convert_TorusToBSplineSurface;
  Convert_TorusToBSplineSurface_1: typeof Convert_TorusToBSplineSurface_1;
  Convert_TorusToBSplineSurface_2: typeof Convert_TorusToBSplineSurface_2;
  Convert_TorusToBSplineSurface_3: typeof Convert_TorusToBSplineSurface_3;
  Draft: typeof Draft;
  Draft_EdgeInfo: typeof Draft_EdgeInfo;
  Draft_EdgeInfo_1: typeof Draft_EdgeInfo_1;
  Draft_EdgeInfo_2: typeof Draft_EdgeInfo_2;
  Draft_FaceInfo: typeof Draft_FaceInfo;
  Draft_FaceInfo_1: typeof Draft_FaceInfo_1;
  Draft_FaceInfo_2: typeof Draft_FaceInfo_2;
  Draft_Modification: typeof Draft_Modification;
  Draft_VertexInfo: typeof Draft_VertexInfo;
  DsgPrs: typeof DsgPrs;
  DsgPrs_AnglePresentation: typeof DsgPrs_AnglePresentation;
  DsgPrs_Chamf2dPresentation: typeof DsgPrs_Chamf2dPresentation;
  DsgPrs_ConcentricPresentation: typeof DsgPrs_ConcentricPresentation;
  DsgPrs_DatumPrs: typeof DsgPrs_DatumPrs;
  DsgPrs_DiameterPresentation: typeof DsgPrs_DiameterPresentation;
  DsgPrs_EllipseRadiusPresentation: typeof DsgPrs_EllipseRadiusPresentation;
  DsgPrs_EqualDistancePresentation: typeof DsgPrs_EqualDistancePresentation;
  DsgPrs_EqualRadiusPresentation: typeof DsgPrs_EqualRadiusPresentation;
  DsgPrs_FilletRadiusPresentation: typeof DsgPrs_FilletRadiusPresentation;
  DsgPrs_FixPresentation: typeof DsgPrs_FixPresentation;
  DsgPrs_IdenticPresentation: typeof DsgPrs_IdenticPresentation;
  DsgPrs_LengthPresentation: typeof DsgPrs_LengthPresentation;
  DsgPrs_MidPointPresentation: typeof DsgPrs_MidPointPresentation;
  DsgPrs_OffsetPresentation: typeof DsgPrs_OffsetPresentation;
  DsgPrs_ParalPresentation: typeof DsgPrs_ParalPresentation;
  DsgPrs_PerpenPresentation: typeof DsgPrs_PerpenPresentation;
  DsgPrs_ShadedPlanePresentation: typeof DsgPrs_ShadedPlanePresentation;
  DsgPrs_ShapeDirPresentation: typeof DsgPrs_ShapeDirPresentation;
  DsgPrs_SymbPresentation: typeof DsgPrs_SymbPresentation;
  DsgPrs_SymmetricPresentation: typeof DsgPrs_SymmetricPresentation;
  DsgPrs_TangentPresentation: typeof DsgPrs_TangentPresentation;
  DsgPrs_XYZAxisPresentation: typeof DsgPrs_XYZAxisPresentation;
  DsgPrs_XYZPlanePresentation: typeof DsgPrs_XYZPlanePresentation;
  ElCLib: typeof ElCLib;
  ElSLib: typeof ElSLib;
  Expr: typeof Expr;
  ExprIntrp: typeof ExprIntrp;
  ExprIntrp_Analysis: typeof ExprIntrp_Analysis;
  ExprIntrp_GenExp: typeof ExprIntrp_GenExp;
  ExprIntrp_GenFct: typeof ExprIntrp_GenFct;
  ExprIntrp_GenRel: typeof ExprIntrp_GenRel;
  ExprIntrp_Generator: typeof ExprIntrp_Generator;
  ExprIntrp_SyntaxError: typeof ExprIntrp_SyntaxError;
  ExprIntrp_SyntaxError_1: typeof ExprIntrp_SyntaxError_1;
  ExprIntrp_SyntaxError_2: typeof ExprIntrp_SyntaxError_2;
  Expr_Absolute: typeof Expr_Absolute;
  Expr_ArcCosine: typeof Expr_ArcCosine;
  Expr_ArcSine: typeof Expr_ArcSine;
  Expr_ArcTangent: typeof Expr_ArcTangent;
  Expr_ArgCosh: typeof Expr_ArgCosh;
  Expr_ArgSinh: typeof Expr_ArgSinh;
  Expr_ArgTanh: typeof Expr_ArgTanh;
  Expr_BinaryExpression: typeof Expr_BinaryExpression;
  Expr_BinaryFunction: typeof Expr_BinaryFunction;
  Expr_Cosh: typeof Expr_Cosh;
  Expr_Cosine: typeof Expr_Cosine;
  Expr_Difference: typeof Expr_Difference;
  Expr_Different: typeof Expr_Different;
  Expr_Division: typeof Expr_Division;
  Expr_Equal: typeof Expr_Equal;
  Expr_Exponential: typeof Expr_Exponential;
  Expr_Exponentiate: typeof Expr_Exponentiate;
  Expr_ExprFailure: typeof Expr_ExprFailure;
  Expr_ExprFailure_1: typeof Expr_ExprFailure_1;
  Expr_ExprFailure_2: typeof Expr_ExprFailure_2;
  Expr_FunctionDerivative: typeof Expr_FunctionDerivative;
  Expr_GeneralExpression: typeof Expr_GeneralExpression;
  Expr_GeneralFunction: typeof Expr_GeneralFunction;
  Expr_GeneralRelation: typeof Expr_GeneralRelation;
  Expr_GreaterThan: typeof Expr_GreaterThan;
  Expr_GreaterThanOrEqual: typeof Expr_GreaterThanOrEqual;
  Expr_InvalidAssignment: typeof Expr_InvalidAssignment;
  Expr_InvalidAssignment_1: typeof Expr_InvalidAssignment_1;
  Expr_InvalidAssignment_2: typeof Expr_InvalidAssignment_2;
  Expr_InvalidFunction: typeof Expr_InvalidFunction;
  Expr_InvalidFunction_1: typeof Expr_InvalidFunction_1;
  Expr_InvalidFunction_2: typeof Expr_InvalidFunction_2;
  Expr_InvalidOperand: typeof Expr_InvalidOperand;
  Expr_InvalidOperand_1: typeof Expr_InvalidOperand_1;
  Expr_InvalidOperand_2: typeof Expr_InvalidOperand_2;
  Expr_LessThan: typeof Expr_LessThan;
  Expr_LessThanOrEqual: typeof Expr_LessThanOrEqual;
  Expr_LogOf10: typeof Expr_LogOf10;
  Expr_LogOfe: typeof Expr_LogOfe;
  Expr_NamedConstant: typeof Expr_NamedConstant;
  Expr_NamedExpression: typeof Expr_NamedExpression;
  Expr_NamedFunction: typeof Expr_NamedFunction;
  Expr_NamedUnknown: typeof Expr_NamedUnknown;
  Expr_NotAssigned: typeof Expr_NotAssigned;
  Expr_NotAssigned_1: typeof Expr_NotAssigned_1;
  Expr_NotAssigned_2: typeof Expr_NotAssigned_2;
  Expr_NotEvaluable: typeof Expr_NotEvaluable;
  Expr_NotEvaluable_1: typeof Expr_NotEvaluable_1;
  Expr_NotEvaluable_2: typeof Expr_NotEvaluable_2;
  Expr_NumericValue: typeof Expr_NumericValue;
  Expr_PolyExpression: typeof Expr_PolyExpression;
  Expr_PolyFunction: typeof Expr_PolyFunction;
  Expr_Product: typeof Expr_Product;
  Expr_Product_1: typeof Expr_Product_1;
  Expr_Product_2: typeof Expr_Product_2;
  Expr_RUIterator: typeof Expr_RUIterator;
  Expr_RelationIterator: typeof Expr_RelationIterator;
  Expr_Sign: typeof Expr_Sign;
  Expr_Sine: typeof Expr_Sine;
  Expr_SingleRelation: typeof Expr_SingleRelation;
  Expr_Sinh: typeof Expr_Sinh;
  Expr_Square: typeof Expr_Square;
  Expr_SquareRoot: typeof Expr_SquareRoot;
  Expr_Sum: typeof Expr_Sum;
  Expr_Sum_1: typeof Expr_Sum_1;
  Expr_Sum_2: typeof Expr_Sum_2;
  Expr_SystemRelation: typeof Expr_SystemRelation;
  Expr_Tangent: typeof Expr_Tangent;
  Expr_Tanh: typeof Expr_Tanh;
  Expr_UnaryExpression: typeof Expr_UnaryExpression;
  Expr_UnaryFunction: typeof Expr_UnaryFunction;
  Expr_UnaryMinus: typeof Expr_UnaryMinus;
  Expr_UnknownIterator: typeof Expr_UnknownIterator;
  Extrema_CCLocFOfLocECC: typeof Extrema_CCLocFOfLocECC;
  Extrema_CCLocFOfLocECC_1: typeof Extrema_CCLocFOfLocECC_1;
  Extrema_CCLocFOfLocECC_2: typeof Extrema_CCLocFOfLocECC_2;
  Extrema_CCLocFOfLocECC2d: typeof Extrema_CCLocFOfLocECC2d;
  Extrema_CCLocFOfLocECC2d_1: typeof Extrema_CCLocFOfLocECC2d_1;
  Extrema_CCLocFOfLocECC2d_2: typeof Extrema_CCLocFOfLocECC2d_2;
  Extrema_Curve2dTool: typeof Extrema_Curve2dTool;
  Extrema_CurveTool: typeof Extrema_CurveTool;
  Extrema_ECC: typeof Extrema_ECC;
  Extrema_ECC_1: typeof Extrema_ECC_1;
  Extrema_ECC_2: typeof Extrema_ECC_2;
  Extrema_ECC_3: typeof Extrema_ECC_3;
  Extrema_ECC2d: typeof Extrema_ECC2d;
  Extrema_ECC2d_1: typeof Extrema_ECC2d_1;
  Extrema_ECC2d_2: typeof Extrema_ECC2d_2;
  Extrema_ECC2d_3: typeof Extrema_ECC2d_3;
  Extrema_ELPCOfLocateExtPC: typeof Extrema_ELPCOfLocateExtPC;
  Extrema_ELPCOfLocateExtPC_1: typeof Extrema_ELPCOfLocateExtPC_1;
  Extrema_ELPCOfLocateExtPC_2: typeof Extrema_ELPCOfLocateExtPC_2;
  Extrema_ELPCOfLocateExtPC_3: typeof Extrema_ELPCOfLocateExtPC_3;
  Extrema_ELPCOfLocateExtPC2d: typeof Extrema_ELPCOfLocateExtPC2d;
  Extrema_ELPCOfLocateExtPC2d_1: typeof Extrema_ELPCOfLocateExtPC2d_1;
  Extrema_ELPCOfLocateExtPC2d_2: typeof Extrema_ELPCOfLocateExtPC2d_2;
  Extrema_ELPCOfLocateExtPC2d_3: typeof Extrema_ELPCOfLocateExtPC2d_3;
  Extrema_EPCOfELPCOfLocateExtPC: typeof Extrema_EPCOfELPCOfLocateExtPC;
  Extrema_EPCOfELPCOfLocateExtPC_1: typeof Extrema_EPCOfELPCOfLocateExtPC_1;
  Extrema_EPCOfELPCOfLocateExtPC_2: typeof Extrema_EPCOfELPCOfLocateExtPC_2;
  Extrema_EPCOfELPCOfLocateExtPC_3: typeof Extrema_EPCOfELPCOfLocateExtPC_3;
  Extrema_EPCOfELPCOfLocateExtPC2d: typeof Extrema_EPCOfELPCOfLocateExtPC2d;
  Extrema_EPCOfELPCOfLocateExtPC2d_1: typeof Extrema_EPCOfELPCOfLocateExtPC2d_1;
  Extrema_EPCOfELPCOfLocateExtPC2d_2: typeof Extrema_EPCOfELPCOfLocateExtPC2d_2;
  Extrema_EPCOfELPCOfLocateExtPC2d_3: typeof Extrema_EPCOfELPCOfLocateExtPC2d_3;
  Extrema_EPCOfExtPC: typeof Extrema_EPCOfExtPC;
  Extrema_EPCOfExtPC_1: typeof Extrema_EPCOfExtPC_1;
  Extrema_EPCOfExtPC_2: typeof Extrema_EPCOfExtPC_2;
  Extrema_EPCOfExtPC_3: typeof Extrema_EPCOfExtPC_3;
  Extrema_EPCOfExtPC2d: typeof Extrema_EPCOfExtPC2d;
  Extrema_EPCOfExtPC2d_1: typeof Extrema_EPCOfExtPC2d_1;
  Extrema_EPCOfExtPC2d_2: typeof Extrema_EPCOfExtPC2d_2;
  Extrema_EPCOfExtPC2d_3: typeof Extrema_EPCOfExtPC2d_3;
  Extrema_ExtCC: typeof Extrema_ExtCC;
  Extrema_ExtCC_1: typeof Extrema_ExtCC_1;
  Extrema_ExtCC_2: typeof Extrema_ExtCC_2;
  Extrema_ExtCC_3: typeof Extrema_ExtCC_3;
  Extrema_ExtCC2d: typeof Extrema_ExtCC2d;
  Extrema_ExtCC2d_1: typeof Extrema_ExtCC2d_1;
  Extrema_ExtCC2d_2: typeof Extrema_ExtCC2d_2;
  Extrema_ExtCC2d_3: typeof Extrema_ExtCC2d_3;
  Extrema_ExtCS: typeof Extrema_ExtCS;
  Extrema_ExtCS_1: typeof Extrema_ExtCS_1;
  Extrema_ExtCS_2: typeof Extrema_ExtCS_2;
  Extrema_ExtCS_3: typeof Extrema_ExtCS_3;
  Extrema_ExtElC: typeof Extrema_ExtElC;
  Extrema_ExtElC_1: typeof Extrema_ExtElC_1;
  Extrema_ExtElC_2: typeof Extrema_ExtElC_2;
  Extrema_ExtElC_3: typeof Extrema_ExtElC_3;
  Extrema_ExtElC_4: typeof Extrema_ExtElC_4;
  Extrema_ExtElC_5: typeof Extrema_ExtElC_5;
  Extrema_ExtElC_6: typeof Extrema_ExtElC_6;
  Extrema_ExtElC_7: typeof Extrema_ExtElC_7;
  Extrema_ExtElC2d: typeof Extrema_ExtElC2d;
  Extrema_ExtElC2d_1: typeof Extrema_ExtElC2d_1;
  Extrema_ExtElC2d_2: typeof Extrema_ExtElC2d_2;
  Extrema_ExtElC2d_3: typeof Extrema_ExtElC2d_3;
  Extrema_ExtElC2d_4: typeof Extrema_ExtElC2d_4;
  Extrema_ExtElC2d_5: typeof Extrema_ExtElC2d_5;
  Extrema_ExtElC2d_6: typeof Extrema_ExtElC2d_6;
  Extrema_ExtElC2d_7: typeof Extrema_ExtElC2d_7;
  Extrema_ExtElC2d_8: typeof Extrema_ExtElC2d_8;
  Extrema_ExtElC2d_9: typeof Extrema_ExtElC2d_9;
  Extrema_ExtElC2d_10: typeof Extrema_ExtElC2d_10;
  Extrema_ExtElCS: typeof Extrema_ExtElCS;
  Extrema_ExtElCS_1: typeof Extrema_ExtElCS_1;
  Extrema_ExtElCS_2: typeof Extrema_ExtElCS_2;
  Extrema_ExtElCS_3: typeof Extrema_ExtElCS_3;
  Extrema_ExtElCS_4: typeof Extrema_ExtElCS_4;
  Extrema_ExtElCS_5: typeof Extrema_ExtElCS_5;
  Extrema_ExtElCS_6: typeof Extrema_ExtElCS_6;
  Extrema_ExtElCS_7: typeof Extrema_ExtElCS_7;
  Extrema_ExtElCS_8: typeof Extrema_ExtElCS_8;
  Extrema_ExtElCS_9: typeof Extrema_ExtElCS_9;
  Extrema_ExtElCS_10: typeof Extrema_ExtElCS_10;
  Extrema_ExtElCS_11: typeof Extrema_ExtElCS_11;
  Extrema_ExtElCS_12: typeof Extrema_ExtElCS_12;
  Extrema_ExtElSS: typeof Extrema_ExtElSS;
  Extrema_ExtElSS_1: typeof Extrema_ExtElSS_1;
  Extrema_ExtElSS_2: typeof Extrema_ExtElSS_2;
  Extrema_ExtElSS_3: typeof Extrema_ExtElSS_3;
  Extrema_ExtElSS_4: typeof Extrema_ExtElSS_4;
  Extrema_ExtElSS_5: typeof Extrema_ExtElSS_5;
  Extrema_ExtElSS_6: typeof Extrema_ExtElSS_6;
  Extrema_ExtElSS_7: typeof Extrema_ExtElSS_7;
  Extrema_ExtPC: typeof Extrema_ExtPC;
  Extrema_ExtPC_1: typeof Extrema_ExtPC_1;
  Extrema_ExtPC_2: typeof Extrema_ExtPC_2;
  Extrema_ExtPC_3: typeof Extrema_ExtPC_3;
  Extrema_ExtPC2d: typeof Extrema_ExtPC2d;
  Extrema_ExtPC2d_1: typeof Extrema_ExtPC2d_1;
  Extrema_ExtPC2d_2: typeof Extrema_ExtPC2d_2;
  Extrema_ExtPC2d_3: typeof Extrema_ExtPC2d_3;
  Extrema_ExtPElC: typeof Extrema_ExtPElC;
  Extrema_ExtPElC_1: typeof Extrema_ExtPElC_1;
  Extrema_ExtPElC_2: typeof Extrema_ExtPElC_2;
  Extrema_ExtPElC_3: typeof Extrema_ExtPElC_3;
  Extrema_ExtPElC_4: typeof Extrema_ExtPElC_4;
  Extrema_ExtPElC_5: typeof Extrema_ExtPElC_5;
  Extrema_ExtPElC_6: typeof Extrema_ExtPElC_6;
  Extrema_ExtPElC2d: typeof Extrema_ExtPElC2d;
  Extrema_ExtPElC2d_1: typeof Extrema_ExtPElC2d_1;
  Extrema_ExtPElC2d_2: typeof Extrema_ExtPElC2d_2;
  Extrema_ExtPElC2d_3: typeof Extrema_ExtPElC2d_3;
  Extrema_ExtPElC2d_4: typeof Extrema_ExtPElC2d_4;
  Extrema_ExtPElC2d_5: typeof Extrema_ExtPElC2d_5;
  Extrema_ExtPElC2d_6: typeof Extrema_ExtPElC2d_6;
  Extrema_ExtPElS: typeof Extrema_ExtPElS;
  Extrema_ExtPElS_1: typeof Extrema_ExtPElS_1;
  Extrema_ExtPElS_2: typeof Extrema_ExtPElS_2;
  Extrema_ExtPElS_3: typeof Extrema_ExtPElS_3;
  Extrema_ExtPElS_4: typeof Extrema_ExtPElS_4;
  Extrema_ExtPElS_5: typeof Extrema_ExtPElS_5;
  Extrema_ExtPElS_6: typeof Extrema_ExtPElS_6;
  Extrema_ExtPExtS: typeof Extrema_ExtPExtS;
  Extrema_ExtPExtS_1: typeof Extrema_ExtPExtS_1;
  Extrema_ExtPExtS_2: typeof Extrema_ExtPExtS_2;
  Extrema_ExtPExtS_3: typeof Extrema_ExtPExtS_3;
  Extrema_ExtPRevS: typeof Extrema_ExtPRevS;
  Extrema_ExtPRevS_1: typeof Extrema_ExtPRevS_1;
  Extrema_ExtPRevS_2: typeof Extrema_ExtPRevS_2;
  Extrema_ExtPRevS_3: typeof Extrema_ExtPRevS_3;
  Extrema_ExtPS: typeof Extrema_ExtPS;
  Extrema_ExtPS_1: typeof Extrema_ExtPS_1;
  Extrema_ExtPS_2: typeof Extrema_ExtPS_2;
  Extrema_ExtPS_3: typeof Extrema_ExtPS_3;
  Extrema_ExtSS: typeof Extrema_ExtSS;
  Extrema_ExtSS_1: typeof Extrema_ExtSS_1;
  Extrema_ExtSS_2: typeof Extrema_ExtSS_2;
  Extrema_ExtSS_3: typeof Extrema_ExtSS_3;
  Extrema_FuncExtCS: typeof Extrema_FuncExtCS;
  Extrema_FuncExtCS_1: typeof Extrema_FuncExtCS_1;
  Extrema_FuncExtCS_2: typeof Extrema_FuncExtCS_2;
  Extrema_FuncExtSS: typeof Extrema_FuncExtSS;
  Extrema_FuncExtSS_1: typeof Extrema_FuncExtSS_1;
  Extrema_FuncExtSS_2: typeof Extrema_FuncExtSS_2;
  Extrema_FuncPSDist: typeof Extrema_FuncPSDist;
  Extrema_FuncPSNorm: typeof Extrema_FuncPSNorm;
  Extrema_FuncPSNorm_1: typeof Extrema_FuncPSNorm_1;
  Extrema_FuncPSNorm_2: typeof Extrema_FuncPSNorm_2;
  Extrema_GenExtCS: typeof Extrema_GenExtCS;
  Extrema_GenExtCS_1: typeof Extrema_GenExtCS_1;
  Extrema_GenExtCS_2: typeof Extrema_GenExtCS_2;
  Extrema_GenExtCS_3: typeof Extrema_GenExtCS_3;
  Extrema_GenExtPS: typeof Extrema_GenExtPS;
  Extrema_GenExtPS_1: typeof Extrema_GenExtPS_1;
  Extrema_GenExtPS_2: typeof Extrema_GenExtPS_2;
  Extrema_GenExtPS_3: typeof Extrema_GenExtPS_3;
  Extrema_GenExtSS: typeof Extrema_GenExtSS;
  Extrema_GenExtSS_1: typeof Extrema_GenExtSS_1;
  Extrema_GenExtSS_2: typeof Extrema_GenExtSS_2;
  Extrema_GenExtSS_3: typeof Extrema_GenExtSS_3;
  Extrema_GenLocateExtCS: typeof Extrema_GenLocateExtCS;
  Extrema_GenLocateExtCS_1: typeof Extrema_GenLocateExtCS_1;
  Extrema_GenLocateExtCS_2: typeof Extrema_GenLocateExtCS_2;
  Extrema_GenLocateExtPS: typeof Extrema_GenLocateExtPS;
  Extrema_GenLocateExtSS: typeof Extrema_GenLocateExtSS;
  Extrema_GenLocateExtSS_1: typeof Extrema_GenLocateExtSS_1;
  Extrema_GenLocateExtSS_2: typeof Extrema_GenLocateExtSS_2;
  Extrema_GlobOptFuncCCC0: typeof Extrema_GlobOptFuncCCC0;
  Extrema_GlobOptFuncCCC0_1: typeof Extrema_GlobOptFuncCCC0_1;
  Extrema_GlobOptFuncCCC0_2: typeof Extrema_GlobOptFuncCCC0_2;
  Extrema_GlobOptFuncCCC1: typeof Extrema_GlobOptFuncCCC1;
  Extrema_GlobOptFuncCCC1_1: typeof Extrema_GlobOptFuncCCC1_1;
  Extrema_GlobOptFuncCCC1_2: typeof Extrema_GlobOptFuncCCC1_2;
  Extrema_GlobOptFuncCCC2: typeof Extrema_GlobOptFuncCCC2;
  Extrema_GlobOptFuncCCC2_1: typeof Extrema_GlobOptFuncCCC2_1;
  Extrema_GlobOptFuncCCC2_2: typeof Extrema_GlobOptFuncCCC2_2;
  Extrema_GlobOptFuncCS: typeof Extrema_GlobOptFuncCS;
  Extrema_LocECC: typeof Extrema_LocECC;
  Extrema_LocECC2d: typeof Extrema_LocECC2d;
  Extrema_LocEPCOfLocateExtPC: typeof Extrema_LocEPCOfLocateExtPC;
  Extrema_LocEPCOfLocateExtPC_1: typeof Extrema_LocEPCOfLocateExtPC_1;
  Extrema_LocEPCOfLocateExtPC_2: typeof Extrema_LocEPCOfLocateExtPC_2;
  Extrema_LocEPCOfLocateExtPC_3: typeof Extrema_LocEPCOfLocateExtPC_3;
  Extrema_LocEPCOfLocateExtPC2d: typeof Extrema_LocEPCOfLocateExtPC2d;
  Extrema_LocEPCOfLocateExtPC2d_1: typeof Extrema_LocEPCOfLocateExtPC2d_1;
  Extrema_LocEPCOfLocateExtPC2d_2: typeof Extrema_LocEPCOfLocateExtPC2d_2;
  Extrema_LocEPCOfLocateExtPC2d_3: typeof Extrema_LocEPCOfLocateExtPC2d_3;
  Extrema_LocateExtCC: typeof Extrema_LocateExtCC;
  Extrema_LocateExtCC2d: typeof Extrema_LocateExtCC2d;
  Extrema_LocateExtPC: typeof Extrema_LocateExtPC;
  Extrema_LocateExtPC_1: typeof Extrema_LocateExtPC_1;
  Extrema_LocateExtPC_2: typeof Extrema_LocateExtPC_2;
  Extrema_LocateExtPC_3: typeof Extrema_LocateExtPC_3;
  Extrema_LocateExtPC2d: typeof Extrema_LocateExtPC2d;
  Extrema_LocateExtPC2d_1: typeof Extrema_LocateExtPC2d_1;
  Extrema_LocateExtPC2d_2: typeof Extrema_LocateExtPC2d_2;
  Extrema_LocateExtPC2d_3: typeof Extrema_LocateExtPC2d_3;
  Extrema_PCFOfEPCOfELPCOfLocateExtPC: typeof Extrema_PCFOfEPCOfELPCOfLocateExtPC;
  Extrema_PCFOfEPCOfELPCOfLocateExtPC_1: typeof Extrema_PCFOfEPCOfELPCOfLocateExtPC_1;
  Extrema_PCFOfEPCOfELPCOfLocateExtPC_2: typeof Extrema_PCFOfEPCOfELPCOfLocateExtPC_2;
  Extrema_PCFOfEPCOfELPCOfLocateExtPC2d: typeof Extrema_PCFOfEPCOfELPCOfLocateExtPC2d;
  Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_1: typeof Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_1;
  Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_2: typeof Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_2;
  Extrema_PCFOfEPCOfExtPC: typeof Extrema_PCFOfEPCOfExtPC;
  Extrema_PCFOfEPCOfExtPC_1: typeof Extrema_PCFOfEPCOfExtPC_1;
  Extrema_PCFOfEPCOfExtPC_2: typeof Extrema_PCFOfEPCOfExtPC_2;
  Extrema_PCFOfEPCOfExtPC2d: typeof Extrema_PCFOfEPCOfExtPC2d;
  Extrema_PCFOfEPCOfExtPC2d_1: typeof Extrema_PCFOfEPCOfExtPC2d_1;
  Extrema_PCFOfEPCOfExtPC2d_2: typeof Extrema_PCFOfEPCOfExtPC2d_2;
  Extrema_PCLocFOfLocEPCOfLocateExtPC: typeof Extrema_PCLocFOfLocEPCOfLocateExtPC;
  Extrema_PCLocFOfLocEPCOfLocateExtPC_1: typeof Extrema_PCLocFOfLocEPCOfLocateExtPC_1;
  Extrema_PCLocFOfLocEPCOfLocateExtPC_2: typeof Extrema_PCLocFOfLocEPCOfLocateExtPC_2;
  Extrema_PCLocFOfLocEPCOfLocateExtPC2d: typeof Extrema_PCLocFOfLocEPCOfLocateExtPC2d;
  Extrema_PCLocFOfLocEPCOfLocateExtPC2d_1: typeof Extrema_PCLocFOfLocEPCOfLocateExtPC2d_1;
  Extrema_PCLocFOfLocEPCOfLocateExtPC2d_2: typeof Extrema_PCLocFOfLocEPCOfLocateExtPC2d_2;
  Extrema_POnCurv: typeof Extrema_POnCurv;
  Extrema_POnCurv_1: typeof Extrema_POnCurv_1;
  Extrema_POnCurv_2: typeof Extrema_POnCurv_2;
  Extrema_POnCurv2d: typeof Extrema_POnCurv2d;
  Extrema_POnCurv2d_1: typeof Extrema_POnCurv2d_1;
  Extrema_POnCurv2d_2: typeof Extrema_POnCurv2d_2;
  Extrema_POnSurf: typeof Extrema_POnSurf;
  Extrema_POnSurf_1: typeof Extrema_POnSurf_1;
  Extrema_POnSurf_2: typeof Extrema_POnSurf_2;
  Extrema_POnSurfParams: typeof Extrema_POnSurfParams;
  Extrema_POnSurfParams_1: typeof Extrema_POnSurfParams_1;
  Extrema_POnSurfParams_2: typeof Extrema_POnSurfParams_2;
  GCE2d_MakeArcOfCircle: typeof GCE2d_MakeArcOfCircle;
  GCE2d_MakeArcOfCircle_1: typeof GCE2d_MakeArcOfCircle_1;
  GCE2d_MakeArcOfCircle_2: typeof GCE2d_MakeArcOfCircle_2;
  GCE2d_MakeArcOfCircle_3: typeof GCE2d_MakeArcOfCircle_3;
  GCE2d_MakeArcOfCircle_4: typeof GCE2d_MakeArcOfCircle_4;
  GCE2d_MakeArcOfCircle_5: typeof GCE2d_MakeArcOfCircle_5;
  GCE2d_MakeArcOfEllipse: typeof GCE2d_MakeArcOfEllipse;
  GCE2d_MakeArcOfEllipse_1: typeof GCE2d_MakeArcOfEllipse_1;
  GCE2d_MakeArcOfEllipse_2: typeof GCE2d_MakeArcOfEllipse_2;
  GCE2d_MakeArcOfEllipse_3: typeof GCE2d_MakeArcOfEllipse_3;
  GCE2d_MakeArcOfHyperbola: typeof GCE2d_MakeArcOfHyperbola;
  GCE2d_MakeArcOfHyperbola_1: typeof GCE2d_MakeArcOfHyperbola_1;
  GCE2d_MakeArcOfHyperbola_2: typeof GCE2d_MakeArcOfHyperbola_2;
  GCE2d_MakeArcOfHyperbola_3: typeof GCE2d_MakeArcOfHyperbola_3;
  GCE2d_MakeArcOfParabola: typeof GCE2d_MakeArcOfParabola;
  GCE2d_MakeArcOfParabola_1: typeof GCE2d_MakeArcOfParabola_1;
  GCE2d_MakeArcOfParabola_2: typeof GCE2d_MakeArcOfParabola_2;
  GCE2d_MakeArcOfParabola_3: typeof GCE2d_MakeArcOfParabola_3;
  GCE2d_MakeCircle: typeof GCE2d_MakeCircle;
  GCE2d_MakeCircle_1: typeof GCE2d_MakeCircle_1;
  GCE2d_MakeCircle_2: typeof GCE2d_MakeCircle_2;
  GCE2d_MakeCircle_3: typeof GCE2d_MakeCircle_3;
  GCE2d_MakeCircle_4: typeof GCE2d_MakeCircle_4;
  GCE2d_MakeCircle_5: typeof GCE2d_MakeCircle_5;
  GCE2d_MakeCircle_6: typeof GCE2d_MakeCircle_6;
  GCE2d_MakeCircle_7: typeof GCE2d_MakeCircle_7;
  GCE2d_MakeCircle_8: typeof GCE2d_MakeCircle_8;
  GCE2d_MakeEllipse: typeof GCE2d_MakeEllipse;
  GCE2d_MakeEllipse_1: typeof GCE2d_MakeEllipse_1;
  GCE2d_MakeEllipse_2: typeof GCE2d_MakeEllipse_2;
  GCE2d_MakeEllipse_3: typeof GCE2d_MakeEllipse_3;
  GCE2d_MakeEllipse_4: typeof GCE2d_MakeEllipse_4;
  GCE2d_MakeHyperbola: typeof GCE2d_MakeHyperbola;
  GCE2d_MakeHyperbola_1: typeof GCE2d_MakeHyperbola_1;
  GCE2d_MakeHyperbola_2: typeof GCE2d_MakeHyperbola_2;
  GCE2d_MakeHyperbola_3: typeof GCE2d_MakeHyperbola_3;
  GCE2d_MakeHyperbola_4: typeof GCE2d_MakeHyperbola_4;
  GCE2d_MakeLine: typeof GCE2d_MakeLine;
  GCE2d_MakeLine_1: typeof GCE2d_MakeLine_1;
  GCE2d_MakeLine_2: typeof GCE2d_MakeLine_2;
  GCE2d_MakeLine_3: typeof GCE2d_MakeLine_3;
  GCE2d_MakeLine_4: typeof GCE2d_MakeLine_4;
  GCE2d_MakeLine_5: typeof GCE2d_MakeLine_5;
  GCE2d_MakeLine_6: typeof GCE2d_MakeLine_6;
  GCE2d_MakeMirror: typeof GCE2d_MakeMirror;
  GCE2d_MakeMirror_1: typeof GCE2d_MakeMirror_1;
  GCE2d_MakeMirror_2: typeof GCE2d_MakeMirror_2;
  GCE2d_MakeMirror_3: typeof GCE2d_MakeMirror_3;
  GCE2d_MakeMirror_4: typeof GCE2d_MakeMirror_4;
  GCE2d_MakeParabola: typeof GCE2d_MakeParabola;
  GCE2d_MakeParabola_1: typeof GCE2d_MakeParabola_1;
  GCE2d_MakeParabola_2: typeof GCE2d_MakeParabola_2;
  GCE2d_MakeParabola_3: typeof GCE2d_MakeParabola_3;
  GCE2d_MakeParabola_4: typeof GCE2d_MakeParabola_4;
  GCE2d_MakeParabola_5: typeof GCE2d_MakeParabola_5;
  GCE2d_MakeRotation: typeof GCE2d_MakeRotation;
  GCE2d_MakeScale: typeof GCE2d_MakeScale;
  GCE2d_MakeSegment: typeof GCE2d_MakeSegment;
  GCE2d_MakeSegment_1: typeof GCE2d_MakeSegment_1;
  GCE2d_MakeSegment_2: typeof GCE2d_MakeSegment_2;
  GCE2d_MakeSegment_3: typeof GCE2d_MakeSegment_3;
  GCE2d_MakeSegment_4: typeof GCE2d_MakeSegment_4;
  GCE2d_MakeSegment_5: typeof GCE2d_MakeSegment_5;
  GCE2d_MakeTranslation: typeof GCE2d_MakeTranslation;
  GCE2d_MakeTranslation_1: typeof GCE2d_MakeTranslation_1;
  GCE2d_MakeTranslation_2: typeof GCE2d_MakeTranslation_2;
  GCE2d_Root: typeof GCE2d_Root;
  GCPnts_AbscissaPoint: typeof GCPnts_AbscissaPoint;
  GCPnts_AbscissaPoint_1: typeof GCPnts_AbscissaPoint_1;
  GCPnts_AbscissaPoint_2: typeof GCPnts_AbscissaPoint_2;
  GCPnts_AbscissaPoint_3: typeof GCPnts_AbscissaPoint_3;
  GCPnts_AbscissaPoint_4: typeof GCPnts_AbscissaPoint_4;
  GCPnts_AbscissaPoint_5: typeof GCPnts_AbscissaPoint_5;
  GCPnts_AbscissaPoint_6: typeof GCPnts_AbscissaPoint_6;
  GCPnts_AbscissaPoint_7: typeof GCPnts_AbscissaPoint_7;
  GCPnts_AbscissaPoint_8: typeof GCPnts_AbscissaPoint_8;
  GCPnts_AbscissaPoint_9: typeof GCPnts_AbscissaPoint_9;
  GCPnts_DistFunction2dMV: typeof GCPnts_DistFunction2dMV;
  GCPnts_DistFunctionMV: typeof GCPnts_DistFunctionMV;
  GCPnts_QuasiUniformAbscissa: typeof GCPnts_QuasiUniformAbscissa;
  GCPnts_QuasiUniformAbscissa_1: typeof GCPnts_QuasiUniformAbscissa_1;
  GCPnts_QuasiUniformAbscissa_2: typeof GCPnts_QuasiUniformAbscissa_2;
  GCPnts_QuasiUniformAbscissa_3: typeof GCPnts_QuasiUniformAbscissa_3;
  GCPnts_QuasiUniformAbscissa_4: typeof GCPnts_QuasiUniformAbscissa_4;
  GCPnts_QuasiUniformAbscissa_5: typeof GCPnts_QuasiUniformAbscissa_5;
  GCPnts_QuasiUniformDeflection: typeof GCPnts_QuasiUniformDeflection;
  GCPnts_QuasiUniformDeflection_1: typeof GCPnts_QuasiUniformDeflection_1;
  GCPnts_QuasiUniformDeflection_2: typeof GCPnts_QuasiUniformDeflection_2;
  GCPnts_QuasiUniformDeflection_3: typeof GCPnts_QuasiUniformDeflection_3;
  GCPnts_QuasiUniformDeflection_4: typeof GCPnts_QuasiUniformDeflection_4;
  GCPnts_QuasiUniformDeflection_5: typeof GCPnts_QuasiUniformDeflection_5;
  GCPnts_TangentialDeflection: typeof GCPnts_TangentialDeflection;
  GCPnts_TangentialDeflection_1: typeof GCPnts_TangentialDeflection_1;
  GCPnts_TangentialDeflection_2: typeof GCPnts_TangentialDeflection_2;
  GCPnts_TangentialDeflection_3: typeof GCPnts_TangentialDeflection_3;
  GCPnts_TangentialDeflection_4: typeof GCPnts_TangentialDeflection_4;
  GCPnts_TangentialDeflection_5: typeof GCPnts_TangentialDeflection_5;
  GCPnts_UniformAbscissa: typeof GCPnts_UniformAbscissa;
  GCPnts_UniformAbscissa_1: typeof GCPnts_UniformAbscissa_1;
  GCPnts_UniformAbscissa_2: typeof GCPnts_UniformAbscissa_2;
  GCPnts_UniformAbscissa_3: typeof GCPnts_UniformAbscissa_3;
  GCPnts_UniformAbscissa_4: typeof GCPnts_UniformAbscissa_4;
  GCPnts_UniformAbscissa_5: typeof GCPnts_UniformAbscissa_5;
  GCPnts_UniformAbscissa_6: typeof GCPnts_UniformAbscissa_6;
  GCPnts_UniformAbscissa_7: typeof GCPnts_UniformAbscissa_7;
  GCPnts_UniformAbscissa_8: typeof GCPnts_UniformAbscissa_8;
  GCPnts_UniformAbscissa_9: typeof GCPnts_UniformAbscissa_9;
  GCPnts_UniformDeflection: typeof GCPnts_UniformDeflection;
  GCPnts_UniformDeflection_1: typeof GCPnts_UniformDeflection_1;
  GCPnts_UniformDeflection_2: typeof GCPnts_UniformDeflection_2;
  GCPnts_UniformDeflection_3: typeof GCPnts_UniformDeflection_3;
  GCPnts_UniformDeflection_4: typeof GCPnts_UniformDeflection_4;
  GCPnts_UniformDeflection_5: typeof GCPnts_UniformDeflection_5;
  GC_MakeArcOfCircle: typeof GC_MakeArcOfCircle;
  GC_MakeArcOfCircle_1: typeof GC_MakeArcOfCircle_1;
  GC_MakeArcOfCircle_2: typeof GC_MakeArcOfCircle_2;
  GC_MakeArcOfCircle_3: typeof GC_MakeArcOfCircle_3;
  GC_MakeArcOfCircle_4: typeof GC_MakeArcOfCircle_4;
  GC_MakeArcOfCircle_5: typeof GC_MakeArcOfCircle_5;
  GC_MakeArcOfEllipse: typeof GC_MakeArcOfEllipse;
  GC_MakeArcOfEllipse_1: typeof GC_MakeArcOfEllipse_1;
  GC_MakeArcOfEllipse_2: typeof GC_MakeArcOfEllipse_2;
  GC_MakeArcOfEllipse_3: typeof GC_MakeArcOfEllipse_3;
  GC_MakeArcOfHyperbola: typeof GC_MakeArcOfHyperbola;
  GC_MakeArcOfHyperbola_1: typeof GC_MakeArcOfHyperbola_1;
  GC_MakeArcOfHyperbola_2: typeof GC_MakeArcOfHyperbola_2;
  GC_MakeArcOfHyperbola_3: typeof GC_MakeArcOfHyperbola_3;
  GC_MakeArcOfParabola: typeof GC_MakeArcOfParabola;
  GC_MakeArcOfParabola_1: typeof GC_MakeArcOfParabola_1;
  GC_MakeArcOfParabola_2: typeof GC_MakeArcOfParabola_2;
  GC_MakeArcOfParabola_3: typeof GC_MakeArcOfParabola_3;
  GC_MakeCircle: typeof GC_MakeCircle;
  GC_MakeCircle_1: typeof GC_MakeCircle_1;
  GC_MakeCircle_2: typeof GC_MakeCircle_2;
  GC_MakeCircle_3: typeof GC_MakeCircle_3;
  GC_MakeCircle_4: typeof GC_MakeCircle_4;
  GC_MakeCircle_5: typeof GC_MakeCircle_5;
  GC_MakeCircle_6: typeof GC_MakeCircle_6;
  GC_MakeCircle_7: typeof GC_MakeCircle_7;
  GC_MakeCircle_8: typeof GC_MakeCircle_8;
  GC_MakeConicalSurface: typeof GC_MakeConicalSurface;
  GC_MakeConicalSurface_1: typeof GC_MakeConicalSurface_1;
  GC_MakeConicalSurface_2: typeof GC_MakeConicalSurface_2;
  GC_MakeConicalSurface_3: typeof GC_MakeConicalSurface_3;
  GC_MakeConicalSurface_4: typeof GC_MakeConicalSurface_4;
  GC_MakeCylindricalSurface: typeof GC_MakeCylindricalSurface;
  GC_MakeCylindricalSurface_1: typeof GC_MakeCylindricalSurface_1;
  GC_MakeCylindricalSurface_2: typeof GC_MakeCylindricalSurface_2;
  GC_MakeCylindricalSurface_3: typeof GC_MakeCylindricalSurface_3;
  GC_MakeCylindricalSurface_4: typeof GC_MakeCylindricalSurface_4;
  GC_MakeCylindricalSurface_5: typeof GC_MakeCylindricalSurface_5;
  GC_MakeCylindricalSurface_6: typeof GC_MakeCylindricalSurface_6;
  GC_MakeCylindricalSurface_7: typeof GC_MakeCylindricalSurface_7;
  GC_MakeEllipse: typeof GC_MakeEllipse;
  GC_MakeEllipse_1: typeof GC_MakeEllipse_1;
  GC_MakeEllipse_2: typeof GC_MakeEllipse_2;
  GC_MakeEllipse_3: typeof GC_MakeEllipse_3;
  GC_MakeHyperbola: typeof GC_MakeHyperbola;
  GC_MakeHyperbola_1: typeof GC_MakeHyperbola_1;
  GC_MakeHyperbola_2: typeof GC_MakeHyperbola_2;
  GC_MakeHyperbola_3: typeof GC_MakeHyperbola_3;
  GC_MakeLine: typeof GC_MakeLine;
  GC_MakeLine_1: typeof GC_MakeLine_1;
  GC_MakeLine_2: typeof GC_MakeLine_2;
  GC_MakeLine_3: typeof GC_MakeLine_3;
  GC_MakeLine_4: typeof GC_MakeLine_4;
  GC_MakeLine_5: typeof GC_MakeLine_5;
  GC_MakeMirror: typeof GC_MakeMirror;
  GC_MakeMirror_1: typeof GC_MakeMirror_1;
  GC_MakeMirror_2: typeof GC_MakeMirror_2;
  GC_MakeMirror_3: typeof GC_MakeMirror_3;
  GC_MakeMirror_4: typeof GC_MakeMirror_4;
  GC_MakeMirror_5: typeof GC_MakeMirror_5;
  GC_MakeMirror_6: typeof GC_MakeMirror_6;
  GC_MakePlane: typeof GC_MakePlane;
  GC_MakePlane_1: typeof GC_MakePlane_1;
  GC_MakePlane_2: typeof GC_MakePlane_2;
  GC_MakePlane_3: typeof GC_MakePlane_3;
  GC_MakePlane_4: typeof GC_MakePlane_4;
  GC_MakePlane_5: typeof GC_MakePlane_5;
  GC_MakePlane_6: typeof GC_MakePlane_6;
  GC_MakePlane_7: typeof GC_MakePlane_7;
  GC_MakeRotation: typeof GC_MakeRotation;
  GC_MakeRotation_1: typeof GC_MakeRotation_1;
  GC_MakeRotation_2: typeof GC_MakeRotation_2;
  GC_MakeRotation_3: typeof GC_MakeRotation_3;
  GC_MakeScale: typeof GC_MakeScale;
  GC_MakeSegment: typeof GC_MakeSegment;
  GC_MakeSegment_1: typeof GC_MakeSegment_1;
  GC_MakeSegment_2: typeof GC_MakeSegment_2;
  GC_MakeSegment_3: typeof GC_MakeSegment_3;
  GC_MakeSegment_4: typeof GC_MakeSegment_4;
  GC_MakeTranslation: typeof GC_MakeTranslation;
  GC_MakeTranslation_1: typeof GC_MakeTranslation_1;
  GC_MakeTranslation_2: typeof GC_MakeTranslation_2;
  GC_MakeTrimmedCone: typeof GC_MakeTrimmedCone;
  GC_MakeTrimmedCone_1: typeof GC_MakeTrimmedCone_1;
  GC_MakeTrimmedCone_2: typeof GC_MakeTrimmedCone_2;
  GC_MakeTrimmedCylinder: typeof GC_MakeTrimmedCylinder;
  GC_MakeTrimmedCylinder_1: typeof GC_MakeTrimmedCylinder_1;
  GC_MakeTrimmedCylinder_2: typeof GC_MakeTrimmedCylinder_2;
  GC_MakeTrimmedCylinder_3: typeof GC_MakeTrimmedCylinder_3;
  GC_Root: typeof GC_Root;
  GProp: typeof GProp;
  GProp_CelGProps: typeof GProp_CelGProps;
  GProp_CelGProps_1: typeof GProp_CelGProps_1;
  GProp_CelGProps_2: typeof GProp_CelGProps_2;
  GProp_CelGProps_3: typeof GProp_CelGProps_3;
  GProp_CelGProps_4: typeof GProp_CelGProps_4;
  GProp_GProps: typeof GProp_GProps;
  GProp_GProps_1: typeof GProp_GProps_1;
  GProp_GProps_2: typeof GProp_GProps_2;
  GProp_PEquation: typeof GProp_PEquation;
  GProp_PGProps: typeof GProp_PGProps;
  GProp_PGProps_1: typeof GProp_PGProps_1;
  GProp_PGProps_2: typeof GProp_PGProps_2;
  GProp_PGProps_3: typeof GProp_PGProps_3;
  GProp_PGProps_4: typeof GProp_PGProps_4;
  GProp_PGProps_5: typeof GProp_PGProps_5;
  GProp_PrincipalProps: typeof GProp_PrincipalProps;
  GProp_SelGProps: typeof GProp_SelGProps;
  GProp_SelGProps_1: typeof GProp_SelGProps_1;
  GProp_SelGProps_2: typeof GProp_SelGProps_2;
  GProp_SelGProps_3: typeof GProp_SelGProps_3;
  GProp_SelGProps_4: typeof GProp_SelGProps_4;
  GProp_SelGProps_5: typeof GProp_SelGProps_5;
  GProp_UndefinedAxis: typeof GProp_UndefinedAxis;
  GProp_UndefinedAxis_1: typeof GProp_UndefinedAxis_1;
  GProp_UndefinedAxis_2: typeof GProp_UndefinedAxis_2;
  GProp_VelGProps: typeof GProp_VelGProps;
  GProp_VelGProps_1: typeof GProp_VelGProps_1;
  GProp_VelGProps_2: typeof GProp_VelGProps_2;
  GProp_VelGProps_3: typeof GProp_VelGProps_3;
  GProp_VelGProps_4: typeof GProp_VelGProps_4;
  GProp_VelGProps_5: typeof GProp_VelGProps_5;
  GccAna_Circ2d2TanOn: typeof GccAna_Circ2d2TanOn;
  GccAna_Circ2d2TanOn_1: typeof GccAna_Circ2d2TanOn_1;
  GccAna_Circ2d2TanOn_2: typeof GccAna_Circ2d2TanOn_2;
  GccAna_Circ2d2TanOn_3: typeof GccAna_Circ2d2TanOn_3;
  GccAna_Circ2d2TanOn_4: typeof GccAna_Circ2d2TanOn_4;
  GccAna_Circ2d2TanOn_5: typeof GccAna_Circ2d2TanOn_5;
  GccAna_Circ2d2TanOn_6: typeof GccAna_Circ2d2TanOn_6;
  GccAna_Circ2d2TanOn_7: typeof GccAna_Circ2d2TanOn_7;
  GccAna_Circ2d2TanOn_8: typeof GccAna_Circ2d2TanOn_8;
  GccAna_Circ2d2TanOn_9: typeof GccAna_Circ2d2TanOn_9;
  GccAna_Circ2d2TanOn_10: typeof GccAna_Circ2d2TanOn_10;
  GccAna_Circ2d2TanOn_11: typeof GccAna_Circ2d2TanOn_11;
  GccAna_Circ2d2TanOn_12: typeof GccAna_Circ2d2TanOn_12;
  GccAna_Circ2d2TanRad: typeof GccAna_Circ2d2TanRad;
  GccAna_Circ2d2TanRad_1: typeof GccAna_Circ2d2TanRad_1;
  GccAna_Circ2d2TanRad_2: typeof GccAna_Circ2d2TanRad_2;
  GccAna_Circ2d2TanRad_3: typeof GccAna_Circ2d2TanRad_3;
  GccAna_Circ2d2TanRad_4: typeof GccAna_Circ2d2TanRad_4;
  GccAna_Circ2d2TanRad_5: typeof GccAna_Circ2d2TanRad_5;
  GccAna_Circ2d2TanRad_6: typeof GccAna_Circ2d2TanRad_6;
  GccAna_Circ2d3Tan: typeof GccAna_Circ2d3Tan;
  GccAna_Circ2d3Tan_1: typeof GccAna_Circ2d3Tan_1;
  GccAna_Circ2d3Tan_2: typeof GccAna_Circ2d3Tan_2;
  GccAna_Circ2d3Tan_3: typeof GccAna_Circ2d3Tan_3;
  GccAna_Circ2d3Tan_4: typeof GccAna_Circ2d3Tan_4;
  GccAna_Circ2d3Tan_5: typeof GccAna_Circ2d3Tan_5;
  GccAna_Circ2d3Tan_6: typeof GccAna_Circ2d3Tan_6;
  GccAna_Circ2d3Tan_7: typeof GccAna_Circ2d3Tan_7;
  GccAna_Circ2d3Tan_8: typeof GccAna_Circ2d3Tan_8;
  GccAna_Circ2d3Tan_9: typeof GccAna_Circ2d3Tan_9;
  GccAna_Circ2d3Tan_10: typeof GccAna_Circ2d3Tan_10;
  GccAna_Circ2dBisec: typeof GccAna_Circ2dBisec;
  GccAna_Circ2dTanCen: typeof GccAna_Circ2dTanCen;
  GccAna_Circ2dTanCen_1: typeof GccAna_Circ2dTanCen_1;
  GccAna_Circ2dTanCen_2: typeof GccAna_Circ2dTanCen_2;
  GccAna_Circ2dTanCen_3: typeof GccAna_Circ2dTanCen_3;
  GccAna_Circ2dTanOnRad: typeof GccAna_Circ2dTanOnRad;
  GccAna_Circ2dTanOnRad_1: typeof GccAna_Circ2dTanOnRad_1;
  GccAna_Circ2dTanOnRad_2: typeof GccAna_Circ2dTanOnRad_2;
  GccAna_Circ2dTanOnRad_3: typeof GccAna_Circ2dTanOnRad_3;
  GccAna_Circ2dTanOnRad_4: typeof GccAna_Circ2dTanOnRad_4;
  GccAna_Circ2dTanOnRad_5: typeof GccAna_Circ2dTanOnRad_5;
  GccAna_Circ2dTanOnRad_6: typeof GccAna_Circ2dTanOnRad_6;
  GccAna_CircLin2dBisec: typeof GccAna_CircLin2dBisec;
  GccAna_CircPnt2dBisec: typeof GccAna_CircPnt2dBisec;
  GccAna_CircPnt2dBisec_1: typeof GccAna_CircPnt2dBisec_1;
  GccAna_CircPnt2dBisec_2: typeof GccAna_CircPnt2dBisec_2;
  GccAna_Lin2d2Tan: typeof GccAna_Lin2d2Tan;
  GccAna_Lin2d2Tan_1: typeof GccAna_Lin2d2Tan_1;
  GccAna_Lin2d2Tan_2: typeof GccAna_Lin2d2Tan_2;
  GccAna_Lin2d2Tan_3: typeof GccAna_Lin2d2Tan_3;
  GccAna_Lin2dBisec: typeof GccAna_Lin2dBisec;
  GccAna_Lin2dTanObl: typeof GccAna_Lin2dTanObl;
  GccAna_Lin2dTanObl_1: typeof GccAna_Lin2dTanObl_1;
  GccAna_Lin2dTanObl_2: typeof GccAna_Lin2dTanObl_2;
  GccAna_Lin2dTanPar: typeof GccAna_Lin2dTanPar;
  GccAna_Lin2dTanPar_1: typeof GccAna_Lin2dTanPar_1;
  GccAna_Lin2dTanPar_2: typeof GccAna_Lin2dTanPar_2;
  GccAna_Lin2dTanPer: typeof GccAna_Lin2dTanPer;
  GccAna_Lin2dTanPer_1: typeof GccAna_Lin2dTanPer_1;
  GccAna_Lin2dTanPer_2: typeof GccAna_Lin2dTanPer_2;
  GccAna_Lin2dTanPer_3: typeof GccAna_Lin2dTanPer_3;
  GccAna_Lin2dTanPer_4: typeof GccAna_Lin2dTanPer_4;
  GccAna_LinPnt2dBisec: typeof GccAna_LinPnt2dBisec;
  GccAna_NoSolution: typeof GccAna_NoSolution;
  GccAna_NoSolution_1: typeof GccAna_NoSolution_1;
  GccAna_NoSolution_2: typeof GccAna_NoSolution_2;
  GccAna_Pnt2dBisec: typeof GccAna_Pnt2dBisec;
  GccEnt: typeof GccEnt;
  GccEnt_BadQualifier: typeof GccEnt_BadQualifier;
  GccEnt_BadQualifier_1: typeof GccEnt_BadQualifier_1;
  GccEnt_BadQualifier_2: typeof GccEnt_BadQualifier_2;
  GccEnt_QualifiedCirc: typeof GccEnt_QualifiedCirc;
  GccEnt_QualifiedLin: typeof GccEnt_QualifiedLin;
  GccInt_BCirc: typeof GccInt_BCirc;
  GccInt_BElips: typeof GccInt_BElips;
  GccInt_BHyper: typeof GccInt_BHyper;
  GccInt_BLine: typeof GccInt_BLine;
  GccInt_BParab: typeof GccInt_BParab;
  GccInt_BPoint: typeof GccInt_BPoint;
  GccInt_Bisec: typeof GccInt_Bisec;
  Geom2dAdaptor: typeof Geom2dAdaptor;
  Geom2dAdaptor_Curve: typeof Geom2dAdaptor_Curve;
  Geom2dAdaptor_Curve_1: typeof Geom2dAdaptor_Curve_1;
  Geom2dAdaptor_Curve_2: typeof Geom2dAdaptor_Curve_2;
  Geom2dAdaptor_Curve_3: typeof Geom2dAdaptor_Curve_3;
  Geom2dAdaptor_GHCurve: typeof Geom2dAdaptor_GHCurve;
  Geom2dAdaptor_GHCurve_1: typeof Geom2dAdaptor_GHCurve_1;
  Geom2dAdaptor_GHCurve_2: typeof Geom2dAdaptor_GHCurve_2;
  Geom2dAdaptor_HCurve: typeof Geom2dAdaptor_HCurve;
  Geom2dAdaptor_HCurve_1: typeof Geom2dAdaptor_HCurve_1;
  Geom2dAdaptor_HCurve_2: typeof Geom2dAdaptor_HCurve_2;
  Geom2dAdaptor_HCurve_3: typeof Geom2dAdaptor_HCurve_3;
  Geom2dAdaptor_HCurve_4: typeof Geom2dAdaptor_HCurve_4;
  Geom2dConvert: typeof Geom2dConvert;
  Geom2dConvert_ApproxCurve: typeof Geom2dConvert_ApproxCurve;
  Geom2dConvert_ApproxCurve_1: typeof Geom2dConvert_ApproxCurve_1;
  Geom2dConvert_ApproxCurve_2: typeof Geom2dConvert_ApproxCurve_2;
  Geom2dConvert_BSplineCurveKnotSplitting: typeof Geom2dConvert_BSplineCurveKnotSplitting;
  Geom2dConvert_BSplineCurveToBezierCurve: typeof Geom2dConvert_BSplineCurveToBezierCurve;
  Geom2dConvert_BSplineCurveToBezierCurve_1: typeof Geom2dConvert_BSplineCurveToBezierCurve_1;
  Geom2dConvert_BSplineCurveToBezierCurve_2: typeof Geom2dConvert_BSplineCurveToBezierCurve_2;
  Geom2dConvert_CompCurveToBSplineCurve: typeof Geom2dConvert_CompCurveToBSplineCurve;
  Geom2dConvert_CompCurveToBSplineCurve_1: typeof Geom2dConvert_CompCurveToBSplineCurve_1;
  Geom2dConvert_CompCurveToBSplineCurve_2: typeof Geom2dConvert_CompCurveToBSplineCurve_2;
  Geom2dEvaluator_Curve: typeof Geom2dEvaluator_Curve;
  Geom2dEvaluator_OffsetCurve: typeof Geom2dEvaluator_OffsetCurve;
  Geom2dEvaluator_OffsetCurve_1: typeof Geom2dEvaluator_OffsetCurve_1;
  Geom2dEvaluator_OffsetCurve_2: typeof Geom2dEvaluator_OffsetCurve_2;
  Geom2dLProp_CLProps2d: typeof Geom2dLProp_CLProps2d;
  Geom2dLProp_CLProps2d_1: typeof Geom2dLProp_CLProps2d_1;
  Geom2dLProp_CLProps2d_2: typeof Geom2dLProp_CLProps2d_2;
  Geom2dLProp_CLProps2d_3: typeof Geom2dLProp_CLProps2d_3;
  Geom2dLProp_CurAndInf2d: typeof Geom2dLProp_CurAndInf2d;
  Geom2dLProp_Curve2dTool: typeof Geom2dLProp_Curve2dTool;
  Geom2dLProp_FuncCurExt: typeof Geom2dLProp_FuncCurExt;
  Geom2dLProp_FuncCurNul: typeof Geom2dLProp_FuncCurNul;
  Geom2dLProp_NumericCurInf2d: typeof Geom2dLProp_NumericCurInf2d;
  Geom2dToIGES_Geom2dCurve: typeof Geom2dToIGES_Geom2dCurve;
  Geom2dToIGES_Geom2dCurve_1: typeof Geom2dToIGES_Geom2dCurve_1;
  Geom2dToIGES_Geom2dCurve_2: typeof Geom2dToIGES_Geom2dCurve_2;
  Geom2dToIGES_Geom2dEntity: typeof Geom2dToIGES_Geom2dEntity;
  Geom2dToIGES_Geom2dEntity_1: typeof Geom2dToIGES_Geom2dEntity_1;
  Geom2dToIGES_Geom2dEntity_2: typeof Geom2dToIGES_Geom2dEntity_2;
  Geom2dToIGES_Geom2dPoint: typeof Geom2dToIGES_Geom2dPoint;
  Geom2dToIGES_Geom2dPoint_1: typeof Geom2dToIGES_Geom2dPoint_1;
  Geom2dToIGES_Geom2dPoint_2: typeof Geom2dToIGES_Geom2dPoint_2;
  Geom2dToIGES_Geom2dVector: typeof Geom2dToIGES_Geom2dVector;
  Geom2dToIGES_Geom2dVector_1: typeof Geom2dToIGES_Geom2dVector_1;
  Geom2dToIGES_Geom2dVector_2: typeof Geom2dToIGES_Geom2dVector_2;
  Geom2d_AxisPlacement: typeof Geom2d_AxisPlacement;
  Geom2d_AxisPlacement_1: typeof Geom2d_AxisPlacement_1;
  Geom2d_AxisPlacement_2: typeof Geom2d_AxisPlacement_2;
  Geom2d_BSplineCurve: typeof Geom2d_BSplineCurve;
  Geom2d_BSplineCurve_1: typeof Geom2d_BSplineCurve_1;
  Geom2d_BSplineCurve_2: typeof Geom2d_BSplineCurve_2;
  Geom2d_BezierCurve: typeof Geom2d_BezierCurve;
  Geom2d_BezierCurve_1: typeof Geom2d_BezierCurve_1;
  Geom2d_BezierCurve_2: typeof Geom2d_BezierCurve_2;
  Geom2d_BoundedCurve: typeof Geom2d_BoundedCurve;
  Geom2d_CartesianPoint: typeof Geom2d_CartesianPoint;
  Geom2d_CartesianPoint_1: typeof Geom2d_CartesianPoint_1;
  Geom2d_CartesianPoint_2: typeof Geom2d_CartesianPoint_2;
  Geom2d_Circle: typeof Geom2d_Circle;
  Geom2d_Circle_1: typeof Geom2d_Circle_1;
  Geom2d_Circle_2: typeof Geom2d_Circle_2;
  Geom2d_Circle_3: typeof Geom2d_Circle_3;
  Geom2d_Conic: typeof Geom2d_Conic;
  Geom2d_Curve: typeof Geom2d_Curve;
  Geom2d_Direction: typeof Geom2d_Direction;
  Geom2d_Direction_1: typeof Geom2d_Direction_1;
  Geom2d_Direction_2: typeof Geom2d_Direction_2;
  Geom2d_Ellipse: typeof Geom2d_Ellipse;
  Geom2d_Ellipse_1: typeof Geom2d_Ellipse_1;
  Geom2d_Ellipse_2: typeof Geom2d_Ellipse_2;
  Geom2d_Ellipse_3: typeof Geom2d_Ellipse_3;
  Geom2d_Geometry: typeof Geom2d_Geometry;
  Geom2d_Hyperbola: typeof Geom2d_Hyperbola;
  Geom2d_Hyperbola_1: typeof Geom2d_Hyperbola_1;
  Geom2d_Hyperbola_2: typeof Geom2d_Hyperbola_2;
  Geom2d_Hyperbola_3: typeof Geom2d_Hyperbola_3;
  Geom2d_Line: typeof Geom2d_Line;
  Geom2d_Line_1: typeof Geom2d_Line_1;
  Geom2d_Line_2: typeof Geom2d_Line_2;
  Geom2d_Line_3: typeof Geom2d_Line_3;
  Geom2d_OffsetCurve: typeof Geom2d_OffsetCurve;
  Geom2d_Parabola: typeof Geom2d_Parabola;
  Geom2d_Parabola_1: typeof Geom2d_Parabola_1;
  Geom2d_Parabola_2: typeof Geom2d_Parabola_2;
  Geom2d_Parabola_3: typeof Geom2d_Parabola_3;
  Geom2d_Parabola_4: typeof Geom2d_Parabola_4;
  Geom2d_Point: typeof Geom2d_Point;
  Geom2d_Transformation: typeof Geom2d_Transformation;
  Geom2d_Transformation_1: typeof Geom2d_Transformation_1;
  Geom2d_Transformation_2: typeof Geom2d_Transformation_2;
  Geom2d_TrimmedCurve: typeof Geom2d_TrimmedCurve;
  Geom2d_UndefinedDerivative: typeof Geom2d_UndefinedDerivative;
  Geom2d_UndefinedDerivative_1: typeof Geom2d_UndefinedDerivative_1;
  Geom2d_UndefinedDerivative_2: typeof Geom2d_UndefinedDerivative_2;
  Geom2d_UndefinedValue: typeof Geom2d_UndefinedValue;
  Geom2d_UndefinedValue_1: typeof Geom2d_UndefinedValue_1;
  Geom2d_UndefinedValue_2: typeof Geom2d_UndefinedValue_2;
  Geom2d_Vector: typeof Geom2d_Vector;
  Geom2d_VectorWithMagnitude: typeof Geom2d_VectorWithMagnitude;
  Geom2d_VectorWithMagnitude_1: typeof Geom2d_VectorWithMagnitude_1;
  Geom2d_VectorWithMagnitude_2: typeof Geom2d_VectorWithMagnitude_2;
  Geom2d_VectorWithMagnitude_3: typeof Geom2d_VectorWithMagnitude_3;
  GeomAPI: typeof GeomAPI;
  GeomAPI_ExtremaCurveCurve: typeof GeomAPI_ExtremaCurveCurve;
  GeomAPI_ExtremaCurveCurve_1: typeof GeomAPI_ExtremaCurveCurve_1;
  GeomAPI_ExtremaCurveCurve_2: typeof GeomAPI_ExtremaCurveCurve_2;
  GeomAPI_ExtremaCurveCurve_3: typeof GeomAPI_ExtremaCurveCurve_3;
  GeomAPI_ExtremaCurveSurface: typeof GeomAPI_ExtremaCurveSurface;
  GeomAPI_ExtremaCurveSurface_1: typeof GeomAPI_ExtremaCurveSurface_1;
  GeomAPI_ExtremaCurveSurface_2: typeof GeomAPI_ExtremaCurveSurface_2;
  GeomAPI_ExtremaCurveSurface_3: typeof GeomAPI_ExtremaCurveSurface_3;
  GeomAPI_ExtremaSurfaceSurface: typeof GeomAPI_ExtremaSurfaceSurface;
  GeomAPI_ExtremaSurfaceSurface_1: typeof GeomAPI_ExtremaSurfaceSurface_1;
  GeomAPI_ExtremaSurfaceSurface_2: typeof GeomAPI_ExtremaSurfaceSurface_2;
  GeomAPI_ExtremaSurfaceSurface_3: typeof GeomAPI_ExtremaSurfaceSurface_3;
  GeomAPI_IntCS: typeof GeomAPI_IntCS;
  GeomAPI_IntCS_1: typeof GeomAPI_IntCS_1;
  GeomAPI_IntCS_2: typeof GeomAPI_IntCS_2;
  GeomAPI_IntSS: typeof GeomAPI_IntSS;
  GeomAPI_IntSS_1: typeof GeomAPI_IntSS_1;
  GeomAPI_IntSS_2: typeof GeomAPI_IntSS_2;
  GeomAPI_PointsToBSpline: typeof GeomAPI_PointsToBSpline;
  GeomAPI_PointsToBSpline_1: typeof GeomAPI_PointsToBSpline_1;
  GeomAPI_PointsToBSpline_2: typeof GeomAPI_PointsToBSpline_2;
  GeomAPI_PointsToBSpline_3: typeof GeomAPI_PointsToBSpline_3;
  GeomAPI_PointsToBSpline_4: typeof GeomAPI_PointsToBSpline_4;
  GeomAPI_PointsToBSpline_5: typeof GeomAPI_PointsToBSpline_5;
  GeomAPI_PointsToBSplineSurface: typeof GeomAPI_PointsToBSplineSurface;
  GeomAPI_PointsToBSplineSurface_1: typeof GeomAPI_PointsToBSplineSurface_1;
  GeomAPI_PointsToBSplineSurface_2: typeof GeomAPI_PointsToBSplineSurface_2;
  GeomAPI_PointsToBSplineSurface_3: typeof GeomAPI_PointsToBSplineSurface_3;
  GeomAPI_PointsToBSplineSurface_4: typeof GeomAPI_PointsToBSplineSurface_4;
  GeomAPI_PointsToBSplineSurface_5: typeof GeomAPI_PointsToBSplineSurface_5;
  GeomAPI_ProjectPointOnCurve: typeof GeomAPI_ProjectPointOnCurve;
  GeomAPI_ProjectPointOnCurve_1: typeof GeomAPI_ProjectPointOnCurve_1;
  GeomAPI_ProjectPointOnCurve_2: typeof GeomAPI_ProjectPointOnCurve_2;
  GeomAPI_ProjectPointOnCurve_3: typeof GeomAPI_ProjectPointOnCurve_3;
  GeomAPI_ProjectPointOnSurf: typeof GeomAPI_ProjectPointOnSurf;
  GeomAPI_ProjectPointOnSurf_1: typeof GeomAPI_ProjectPointOnSurf_1;
  GeomAPI_ProjectPointOnSurf_2: typeof GeomAPI_ProjectPointOnSurf_2;
  GeomAPI_ProjectPointOnSurf_3: typeof GeomAPI_ProjectPointOnSurf_3;
  GeomAPI_ProjectPointOnSurf_4: typeof GeomAPI_ProjectPointOnSurf_4;
  GeomAPI_ProjectPointOnSurf_5: typeof GeomAPI_ProjectPointOnSurf_5;
  GeomAdaptor: typeof GeomAdaptor;
  GeomAdaptor_Curve: typeof GeomAdaptor_Curve;
  GeomAdaptor_Curve_1: typeof GeomAdaptor_Curve_1;
  GeomAdaptor_Curve_2: typeof GeomAdaptor_Curve_2;
  GeomAdaptor_Curve_3: typeof GeomAdaptor_Curve_3;
  GeomAdaptor_GHCurve: typeof GeomAdaptor_GHCurve;
  GeomAdaptor_GHCurve_1: typeof GeomAdaptor_GHCurve_1;
  GeomAdaptor_GHCurve_2: typeof GeomAdaptor_GHCurve_2;
  GeomAdaptor_GHSurface: typeof GeomAdaptor_GHSurface;
  GeomAdaptor_GHSurface_1: typeof GeomAdaptor_GHSurface_1;
  GeomAdaptor_GHSurface_2: typeof GeomAdaptor_GHSurface_2;
  GeomAdaptor_HCurve: typeof GeomAdaptor_HCurve;
  GeomAdaptor_HCurve_1: typeof GeomAdaptor_HCurve_1;
  GeomAdaptor_HCurve_2: typeof GeomAdaptor_HCurve_2;
  GeomAdaptor_HCurve_3: typeof GeomAdaptor_HCurve_3;
  GeomAdaptor_HCurve_4: typeof GeomAdaptor_HCurve_4;
  GeomAdaptor_HSurface: typeof GeomAdaptor_HSurface;
  GeomAdaptor_HSurface_1: typeof GeomAdaptor_HSurface_1;
  GeomAdaptor_HSurface_2: typeof GeomAdaptor_HSurface_2;
  GeomAdaptor_HSurface_3: typeof GeomAdaptor_HSurface_3;
  GeomAdaptor_HSurface_4: typeof GeomAdaptor_HSurface_4;
  GeomAdaptor_HSurfaceOfLinearExtrusion: typeof GeomAdaptor_HSurfaceOfLinearExtrusion;
  GeomAdaptor_HSurfaceOfLinearExtrusion_1: typeof GeomAdaptor_HSurfaceOfLinearExtrusion_1;
  GeomAdaptor_HSurfaceOfLinearExtrusion_2: typeof GeomAdaptor_HSurfaceOfLinearExtrusion_2;
  GeomAdaptor_HSurfaceOfRevolution: typeof GeomAdaptor_HSurfaceOfRevolution;
  GeomAdaptor_HSurfaceOfRevolution_1: typeof GeomAdaptor_HSurfaceOfRevolution_1;
  GeomAdaptor_HSurfaceOfRevolution_2: typeof GeomAdaptor_HSurfaceOfRevolution_2;
  GeomAdaptor_Surface: typeof GeomAdaptor_Surface;
  GeomAdaptor_Surface_1: typeof GeomAdaptor_Surface_1;
  GeomAdaptor_Surface_2: typeof GeomAdaptor_Surface_2;
  GeomAdaptor_Surface_3: typeof GeomAdaptor_Surface_3;
  GeomAdaptor_SurfaceOfLinearExtrusion: typeof GeomAdaptor_SurfaceOfLinearExtrusion;
  GeomAdaptor_SurfaceOfLinearExtrusion_1: typeof GeomAdaptor_SurfaceOfLinearExtrusion_1;
  GeomAdaptor_SurfaceOfLinearExtrusion_2: typeof GeomAdaptor_SurfaceOfLinearExtrusion_2;
  GeomAdaptor_SurfaceOfLinearExtrusion_3: typeof GeomAdaptor_SurfaceOfLinearExtrusion_3;
  GeomAdaptor_SurfaceOfRevolution: typeof GeomAdaptor_SurfaceOfRevolution;
  GeomAdaptor_SurfaceOfRevolution_1: typeof GeomAdaptor_SurfaceOfRevolution_1;
  GeomAdaptor_SurfaceOfRevolution_2: typeof GeomAdaptor_SurfaceOfRevolution_2;
  GeomAdaptor_SurfaceOfRevolution_3: typeof GeomAdaptor_SurfaceOfRevolution_3;
  GeomConvert: typeof GeomConvert;
  GeomConvert_ApproxCurve: typeof GeomConvert_ApproxCurve;
  GeomConvert_ApproxCurve_1: typeof GeomConvert_ApproxCurve_1;
  GeomConvert_ApproxCurve_2: typeof GeomConvert_ApproxCurve_2;
  GeomConvert_ApproxSurface: typeof GeomConvert_ApproxSurface;
  GeomConvert_ApproxSurface_1: typeof GeomConvert_ApproxSurface_1;
  GeomConvert_ApproxSurface_2: typeof GeomConvert_ApproxSurface_2;
  GeomConvert_BSplineCurveKnotSplitting: typeof GeomConvert_BSplineCurveKnotSplitting;
  GeomConvert_BSplineCurveToBezierCurve: typeof GeomConvert_BSplineCurveToBezierCurve;
  GeomConvert_BSplineCurveToBezierCurve_1: typeof GeomConvert_BSplineCurveToBezierCurve_1;
  GeomConvert_BSplineCurveToBezierCurve_2: typeof GeomConvert_BSplineCurveToBezierCurve_2;
  GeomConvert_BSplineSurfaceKnotSplitting: typeof GeomConvert_BSplineSurfaceKnotSplitting;
  GeomConvert_BSplineSurfaceToBezierSurface: typeof GeomConvert_BSplineSurfaceToBezierSurface;
  GeomConvert_BSplineSurfaceToBezierSurface_1: typeof GeomConvert_BSplineSurfaceToBezierSurface_1;
  GeomConvert_BSplineSurfaceToBezierSurface_2: typeof GeomConvert_BSplineSurfaceToBezierSurface_2;
  GeomConvert_CompBezierSurfacesToBSplineSurface: typeof GeomConvert_CompBezierSurfacesToBSplineSurface;
  GeomConvert_CompBezierSurfacesToBSplineSurface_1: typeof GeomConvert_CompBezierSurfacesToBSplineSurface_1;
  GeomConvert_CompBezierSurfacesToBSplineSurface_2: typeof GeomConvert_CompBezierSurfacesToBSplineSurface_2;
  GeomConvert_CompBezierSurfacesToBSplineSurface_3: typeof GeomConvert_CompBezierSurfacesToBSplineSurface_3;
  GeomConvert_CompCurveToBSplineCurve: typeof GeomConvert_CompCurveToBSplineCurve;
  GeomConvert_CompCurveToBSplineCurve_1: typeof GeomConvert_CompCurveToBSplineCurve_1;
  GeomConvert_CompCurveToBSplineCurve_2: typeof GeomConvert_CompCurveToBSplineCurve_2;
  GeomEvaluator_Curve: typeof GeomEvaluator_Curve;
  GeomEvaluator_OffsetCurve: typeof GeomEvaluator_OffsetCurve;
  GeomEvaluator_OffsetCurve_1: typeof GeomEvaluator_OffsetCurve_1;
  GeomEvaluator_OffsetCurve_2: typeof GeomEvaluator_OffsetCurve_2;
  GeomEvaluator_OffsetSurface: typeof GeomEvaluator_OffsetSurface;
  GeomEvaluator_OffsetSurface_1: typeof GeomEvaluator_OffsetSurface_1;
  GeomEvaluator_OffsetSurface_2: typeof GeomEvaluator_OffsetSurface_2;
  GeomEvaluator_Surface: typeof GeomEvaluator_Surface;
  GeomEvaluator_SurfaceOfExtrusion: typeof GeomEvaluator_SurfaceOfExtrusion;
  GeomEvaluator_SurfaceOfExtrusion_1: typeof GeomEvaluator_SurfaceOfExtrusion_1;
  GeomEvaluator_SurfaceOfExtrusion_2: typeof GeomEvaluator_SurfaceOfExtrusion_2;
  GeomEvaluator_SurfaceOfRevolution: typeof GeomEvaluator_SurfaceOfRevolution;
  GeomEvaluator_SurfaceOfRevolution_1: typeof GeomEvaluator_SurfaceOfRevolution_1;
  GeomEvaluator_SurfaceOfRevolution_2: typeof GeomEvaluator_SurfaceOfRevolution_2;
  GeomFill: typeof GeomFill;
  GeomFill_AppSurf: typeof GeomFill_AppSurf;
  GeomFill_AppSurf_1: typeof GeomFill_AppSurf_1;
  GeomFill_AppSurf_2: typeof GeomFill_AppSurf_2;
  GeomFill_AppSweep: typeof GeomFill_AppSweep;
  GeomFill_AppSweep_1: typeof GeomFill_AppSweep_1;
  GeomFill_AppSweep_2: typeof GeomFill_AppSweep_2;
  GeomFill_BSplineCurves: typeof GeomFill_BSplineCurves;
  GeomFill_BSplineCurves_1: typeof GeomFill_BSplineCurves_1;
  GeomFill_BSplineCurves_2: typeof GeomFill_BSplineCurves_2;
  GeomFill_BSplineCurves_3: typeof GeomFill_BSplineCurves_3;
  GeomFill_BSplineCurves_4: typeof GeomFill_BSplineCurves_4;
  GeomFill_BezierCurves: typeof GeomFill_BezierCurves;
  GeomFill_BezierCurves_1: typeof GeomFill_BezierCurves_1;
  GeomFill_BezierCurves_2: typeof GeomFill_BezierCurves_2;
  GeomFill_BezierCurves_3: typeof GeomFill_BezierCurves_3;
  GeomFill_BezierCurves_4: typeof GeomFill_BezierCurves_4;
  GeomFill_BoundWithSurf: typeof GeomFill_BoundWithSurf;
  GeomFill_Boundary: typeof GeomFill_Boundary;
  GeomFill_CircularBlendFunc: typeof GeomFill_CircularBlendFunc;
  GeomFill_ConstantBiNormal: typeof GeomFill_ConstantBiNormal;
  GeomFill_ConstrainedFilling: typeof GeomFill_ConstrainedFilling;
  GeomFill_Coons: typeof GeomFill_Coons;
  GeomFill_Coons_1: typeof GeomFill_Coons_1;
  GeomFill_Coons_2: typeof GeomFill_Coons_2;
  GeomFill_Coons_3: typeof GeomFill_Coons_3;
  GeomFill_CoonsAlgPatch: typeof GeomFill_CoonsAlgPatch;
  GeomFill_CornerState: typeof GeomFill_CornerState;
  GeomFill_CorrectedFrenet: typeof GeomFill_CorrectedFrenet;
  GeomFill_CorrectedFrenet_1: typeof GeomFill_CorrectedFrenet_1;
  GeomFill_CorrectedFrenet_2: typeof GeomFill_CorrectedFrenet_2;
  GeomFill_CurveAndTrihedron: typeof GeomFill_CurveAndTrihedron;
  GeomFill_Curved: typeof GeomFill_Curved;
  GeomFill_Curved_1: typeof GeomFill_Curved_1;
  GeomFill_Curved_2: typeof GeomFill_Curved_2;
  GeomFill_Curved_3: typeof GeomFill_Curved_3;
  GeomFill_Curved_4: typeof GeomFill_Curved_4;
  GeomFill_Curved_5: typeof GeomFill_Curved_5;
  GeomFill_Darboux: typeof GeomFill_Darboux;
  GeomFill_DegeneratedBound: typeof GeomFill_DegeneratedBound;
  GeomFill_DiscreteTrihedron: typeof GeomFill_DiscreteTrihedron;
  GeomFill_DraftTrihedron: typeof GeomFill_DraftTrihedron;
  GeomFill_EvolvedSection: typeof GeomFill_EvolvedSection;
  GeomFill_Filling: typeof GeomFill_Filling;
  GeomFill_Fixed: typeof GeomFill_Fixed;
  GeomFill_Frenet: typeof GeomFill_Frenet;
  GeomFill_FunctionDraft: typeof GeomFill_FunctionDraft;
  GeomFill_Generator: typeof GeomFill_Generator;
  GeomFill_GuideTrihedronAC: typeof GeomFill_GuideTrihedronAC;
  GeomFill_GuideTrihedronPlan: typeof GeomFill_GuideTrihedronPlan;
  GeomFill_Line: typeof GeomFill_Line;
  GeomFill_Line_1: typeof GeomFill_Line_1;
  GeomFill_Line_2: typeof GeomFill_Line_2;
  GeomFill_LocFunction: typeof GeomFill_LocFunction;
  GeomFill_LocationDraft: typeof GeomFill_LocationDraft;
  GeomFill_LocationGuide: typeof GeomFill_LocationGuide;
  GeomFill_LocationLaw: typeof GeomFill_LocationLaw;
  GeomFill_Pipe: typeof GeomFill_Pipe;
  GeomFill_Pipe_1: typeof GeomFill_Pipe_1;
  GeomFill_Pipe_2: typeof GeomFill_Pipe_2;
  GeomFill_Pipe_3: typeof GeomFill_Pipe_3;
  GeomFill_Pipe_4: typeof GeomFill_Pipe_4;
  GeomFill_Pipe_5: typeof GeomFill_Pipe_5;
  GeomFill_Pipe_6: typeof GeomFill_Pipe_6;
  GeomFill_Pipe_7: typeof GeomFill_Pipe_7;
  GeomFill_Pipe_8: typeof GeomFill_Pipe_8;
  GeomFill_Pipe_9: typeof GeomFill_Pipe_9;
  GeomFill_Pipe_10: typeof GeomFill_Pipe_10;
  GeomFill_PlanFunc: typeof GeomFill_PlanFunc;
  GeomFill_PolynomialConvertor: typeof GeomFill_PolynomialConvertor;
  GeomFill_Profiler: typeof GeomFill_Profiler;
  GeomFill_QuasiAngularConvertor: typeof GeomFill_QuasiAngularConvertor;
  GeomFill_SectionGenerator: typeof GeomFill_SectionGenerator;
  GeomFill_SectionLaw: typeof GeomFill_SectionLaw;
  GeomFill_SectionPlacement: typeof GeomFill_SectionPlacement;
  GeomFill_SimpleBound: typeof GeomFill_SimpleBound;
  GeomFill_SnglrFunc: typeof GeomFill_SnglrFunc;
  GeomFill_Stretch: typeof GeomFill_Stretch;
  GeomFill_Stretch_1: typeof GeomFill_Stretch_1;
  GeomFill_Stretch_2: typeof GeomFill_Stretch_2;
  GeomFill_Stretch_3: typeof GeomFill_Stretch_3;
  GeomFill_Sweep: typeof GeomFill_Sweep;
  GeomFill_SweepFunction: typeof GeomFill_SweepFunction;
  GeomFill_Tensor: typeof GeomFill_Tensor;
  GeomFill_TgtField: typeof GeomFill_TgtField;
  GeomFill_TgtOnCoons: typeof GeomFill_TgtOnCoons;
  GeomFill_TrihedronLaw: typeof GeomFill_TrihedronLaw;
  GeomFill_TrihedronWithGuide: typeof GeomFill_TrihedronWithGuide;
  GeomFill_UniformSection: typeof GeomFill_UniformSection;
  GeomInt: typeof GeomInt;
  GeomInt_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfWLApprox: typeof GeomInt_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfWLApprox;
  GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox: typeof GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox;
  GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox: typeof GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox;
  GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_1: typeof GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_1;
  GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_2: typeof GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_2;
  GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_3: typeof GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_3;
  GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_4: typeof GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_4;
  GeomInt_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfWLApprox: typeof GeomInt_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfWLApprox;
  GeomInt_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfWLApprox: typeof GeomInt_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfWLApprox;
  GeomInt_LineConstructor: typeof GeomInt_LineConstructor;
  GeomInt_LineTool: typeof GeomInt_LineTool;
  GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox: typeof GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox;
  GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_1: typeof GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_1;
  GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_2: typeof GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_2;
  GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox: typeof GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox;
  GeomInt_MyGradientbisOfTheComputeLineOfWLApprox: typeof GeomInt_MyGradientbisOfTheComputeLineOfWLApprox;
  GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox: typeof GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox;
  GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox: typeof GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox;
  GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox: typeof GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox;
  GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_1: typeof GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_1;
  GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_2: typeof GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_2;
  GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_3: typeof GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_3;
  GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_4: typeof GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_4;
  GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox: typeof GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox;
  GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_1: typeof GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_1;
  GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_2: typeof GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_2;
  GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_3: typeof GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_3;
  GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_4: typeof GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_4;
  GeomInt_ParameterAndOrientation: typeof GeomInt_ParameterAndOrientation;
  GeomInt_ParameterAndOrientation_1: typeof GeomInt_ParameterAndOrientation_1;
  GeomInt_ParameterAndOrientation_2: typeof GeomInt_ParameterAndOrientation_2;
  GeomInt_TheComputeLineBezierOfWLApprox: typeof GeomInt_TheComputeLineBezierOfWLApprox;
  GeomInt_TheComputeLineBezierOfWLApprox_1: typeof GeomInt_TheComputeLineBezierOfWLApprox_1;
  GeomInt_TheComputeLineBezierOfWLApprox_2: typeof GeomInt_TheComputeLineBezierOfWLApprox_2;
  GeomInt_TheComputeLineBezierOfWLApprox_3: typeof GeomInt_TheComputeLineBezierOfWLApprox_3;
  GeomInt_TheComputeLineBezierOfWLApprox_4: typeof GeomInt_TheComputeLineBezierOfWLApprox_4;
  GeomInt_TheComputeLineOfWLApprox: typeof GeomInt_TheComputeLineOfWLApprox;
  GeomInt_TheComputeLineOfWLApprox_1: typeof GeomInt_TheComputeLineOfWLApprox_1;
  GeomInt_TheComputeLineOfWLApprox_2: typeof GeomInt_TheComputeLineOfWLApprox_2;
  GeomInt_TheComputeLineOfWLApprox_3: typeof GeomInt_TheComputeLineOfWLApprox_3;
  GeomInt_TheComputeLineOfWLApprox_4: typeof GeomInt_TheComputeLineOfWLApprox_4;
  GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox: typeof GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox;
  GeomInt_TheImpPrmSvSurfacesOfWLApprox: typeof GeomInt_TheImpPrmSvSurfacesOfWLApprox;
  GeomInt_TheImpPrmSvSurfacesOfWLApprox_1: typeof GeomInt_TheImpPrmSvSurfacesOfWLApprox_1;
  GeomInt_TheImpPrmSvSurfacesOfWLApprox_2: typeof GeomInt_TheImpPrmSvSurfacesOfWLApprox_2;
  GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox: typeof GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox;
  GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_1: typeof GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_1;
  GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_2: typeof GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_2;
  GeomInt_TheMultiLineOfWLApprox: typeof GeomInt_TheMultiLineOfWLApprox;
  GeomInt_TheMultiLineOfWLApprox_1: typeof GeomInt_TheMultiLineOfWLApprox_1;
  GeomInt_TheMultiLineOfWLApprox_2: typeof GeomInt_TheMultiLineOfWLApprox_2;
  GeomInt_TheMultiLineOfWLApprox_3: typeof GeomInt_TheMultiLineOfWLApprox_3;
  GeomInt_TheMultiLineToolOfWLApprox: typeof GeomInt_TheMultiLineToolOfWLApprox;
  GeomInt_ThePrmPrmSvSurfacesOfWLApprox: typeof GeomInt_ThePrmPrmSvSurfacesOfWLApprox;
  GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox: typeof GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox;
  GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_1: typeof GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_1;
  GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_2: typeof GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_2;
  GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_3: typeof GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_3;
  GeomLProp: typeof GeomLProp;
  GeomLProp_CLProps: typeof GeomLProp_CLProps;
  GeomLProp_CLProps_1: typeof GeomLProp_CLProps_1;
  GeomLProp_CLProps_2: typeof GeomLProp_CLProps_2;
  GeomLProp_CLProps_3: typeof GeomLProp_CLProps_3;
  GeomLProp_CurveTool: typeof GeomLProp_CurveTool;
  GeomLProp_SLProps: typeof GeomLProp_SLProps;
  GeomLProp_SLProps_1: typeof GeomLProp_SLProps_1;
  GeomLProp_SLProps_2: typeof GeomLProp_SLProps_2;
  GeomLProp_SLProps_3: typeof GeomLProp_SLProps_3;
  GeomLProp_SurfaceTool: typeof GeomLProp_SurfaceTool;
  GeomLib: typeof GeomLib;
  GeomLib_Check2dBSplineCurve: typeof GeomLib_Check2dBSplineCurve;
  GeomLib_CheckBSplineCurve: typeof GeomLib_CheckBSplineCurve;
  GeomLib_CheckCurveOnSurface: typeof GeomLib_CheckCurveOnSurface;
  GeomLib_CheckCurveOnSurface_1: typeof GeomLib_CheckCurveOnSurface_1;
  GeomLib_CheckCurveOnSurface_2: typeof GeomLib_CheckCurveOnSurface_2;
  GeomLib_DenominatorMultiplier: typeof GeomLib_DenominatorMultiplier;
  GeomLib_Interpolate: typeof GeomLib_Interpolate;
  GeomLib_IsPlanarSurface: typeof GeomLib_IsPlanarSurface;
  GeomLib_LogSample: typeof GeomLib_LogSample;
  GeomLib_MakeCurvefromApprox: typeof GeomLib_MakeCurvefromApprox;
  GeomLib_PolyFunc: typeof GeomLib_PolyFunc;
  GeomLib_Tool: typeof GeomLib_Tool;
  GeomPlate_Aij: typeof GeomPlate_Aij;
  GeomPlate_Aij_1: typeof GeomPlate_Aij_1;
  GeomPlate_Aij_2: typeof GeomPlate_Aij_2;
  GeomPlate_BuildAveragePlane: typeof GeomPlate_BuildAveragePlane;
  GeomPlate_BuildAveragePlane_1: typeof GeomPlate_BuildAveragePlane_1;
  GeomPlate_BuildAveragePlane_2: typeof GeomPlate_BuildAveragePlane_2;
  GeomPlate_BuildPlateSurface: typeof GeomPlate_BuildPlateSurface;
  GeomPlate_BuildPlateSurface_1: typeof GeomPlate_BuildPlateSurface_1;
  GeomPlate_BuildPlateSurface_2: typeof GeomPlate_BuildPlateSurface_2;
  GeomPlate_BuildPlateSurface_3: typeof GeomPlate_BuildPlateSurface_3;
  GeomPlate_CurveConstraint: typeof GeomPlate_CurveConstraint;
  GeomPlate_CurveConstraint_1: typeof GeomPlate_CurveConstraint_1;
  GeomPlate_CurveConstraint_2: typeof GeomPlate_CurveConstraint_2;
  GeomPlate_MakeApprox: typeof GeomPlate_MakeApprox;
  GeomPlate_MakeApprox_1: typeof GeomPlate_MakeApprox_1;
  GeomPlate_MakeApprox_2: typeof GeomPlate_MakeApprox_2;
  GeomPlate_PlateG0Criterion: typeof GeomPlate_PlateG0Criterion;
  GeomPlate_PlateG1Criterion: typeof GeomPlate_PlateG1Criterion;
  GeomPlate_PointConstraint: typeof GeomPlate_PointConstraint;
  GeomPlate_PointConstraint_1: typeof GeomPlate_PointConstraint_1;
  GeomPlate_PointConstraint_2: typeof GeomPlate_PointConstraint_2;
  GeomPlate_Surface: typeof GeomPlate_Surface;
  GeomProjLib: typeof GeomProjLib;
  GeomToIGES_GeomCurve: typeof GeomToIGES_GeomCurve;
  GeomToIGES_GeomCurve_1: typeof GeomToIGES_GeomCurve_1;
  GeomToIGES_GeomCurve_2: typeof GeomToIGES_GeomCurve_2;
  GeomToIGES_GeomEntity: typeof GeomToIGES_GeomEntity;
  GeomToIGES_GeomEntity_1: typeof GeomToIGES_GeomEntity_1;
  GeomToIGES_GeomEntity_2: typeof GeomToIGES_GeomEntity_2;
  GeomToIGES_GeomPoint: typeof GeomToIGES_GeomPoint;
  GeomToIGES_GeomPoint_1: typeof GeomToIGES_GeomPoint_1;
  GeomToIGES_GeomPoint_2: typeof GeomToIGES_GeomPoint_2;
  GeomToIGES_GeomSurface: typeof GeomToIGES_GeomSurface;
  GeomToIGES_GeomSurface_1: typeof GeomToIGES_GeomSurface_1;
  GeomToIGES_GeomSurface_2: typeof GeomToIGES_GeomSurface_2;
  GeomToIGES_GeomVector: typeof GeomToIGES_GeomVector;
  GeomToIGES_GeomVector_1: typeof GeomToIGES_GeomVector_1;
  GeomToIGES_GeomVector_2: typeof GeomToIGES_GeomVector_2;
  GeomToStep_MakeAxis1Placement: typeof GeomToStep_MakeAxis1Placement;
  GeomToStep_MakeAxis1Placement_1: typeof GeomToStep_MakeAxis1Placement_1;
  GeomToStep_MakeAxis1Placement_2: typeof GeomToStep_MakeAxis1Placement_2;
  GeomToStep_MakeAxis1Placement_3: typeof GeomToStep_MakeAxis1Placement_3;
  GeomToStep_MakeAxis1Placement_4: typeof GeomToStep_MakeAxis1Placement_4;
  GeomToStep_MakeAxis2Placement2d: typeof GeomToStep_MakeAxis2Placement2d;
  GeomToStep_MakeAxis2Placement2d_1: typeof GeomToStep_MakeAxis2Placement2d_1;
  GeomToStep_MakeAxis2Placement2d_2: typeof GeomToStep_MakeAxis2Placement2d_2;
  GeomToStep_MakeAxis2Placement3d: typeof GeomToStep_MakeAxis2Placement3d;
  GeomToStep_MakeAxis2Placement3d_1: typeof GeomToStep_MakeAxis2Placement3d_1;
  GeomToStep_MakeAxis2Placement3d_2: typeof GeomToStep_MakeAxis2Placement3d_2;
  GeomToStep_MakeAxis2Placement3d_3: typeof GeomToStep_MakeAxis2Placement3d_3;
  GeomToStep_MakeAxis2Placement3d_4: typeof GeomToStep_MakeAxis2Placement3d_4;
  GeomToStep_MakeAxis2Placement3d_5: typeof GeomToStep_MakeAxis2Placement3d_5;
  GeomToStep_MakeBSplineCurveWithKnots: typeof GeomToStep_MakeBSplineCurveWithKnots;
  GeomToStep_MakeBSplineCurveWithKnots_1: typeof GeomToStep_MakeBSplineCurveWithKnots_1;
  GeomToStep_MakeBSplineCurveWithKnots_2: typeof GeomToStep_MakeBSplineCurveWithKnots_2;
  GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve: typeof GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve;
  GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_1: typeof GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_1;
  GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_2: typeof GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_2;
  GeomToStep_MakeBSplineSurfaceWithKnots: typeof GeomToStep_MakeBSplineSurfaceWithKnots;
  GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface: typeof GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface;
  GeomToStep_MakeBoundedCurve: typeof GeomToStep_MakeBoundedCurve;
  GeomToStep_MakeBoundedCurve_1: typeof GeomToStep_MakeBoundedCurve_1;
  GeomToStep_MakeBoundedCurve_2: typeof GeomToStep_MakeBoundedCurve_2;
  GeomToStep_MakeBoundedSurface: typeof GeomToStep_MakeBoundedSurface;
  GeomToStep_MakeCartesianPoint: typeof GeomToStep_MakeCartesianPoint;
  GeomToStep_MakeCartesianPoint_1: typeof GeomToStep_MakeCartesianPoint_1;
  GeomToStep_MakeCartesianPoint_2: typeof GeomToStep_MakeCartesianPoint_2;
  GeomToStep_MakeCartesianPoint_3: typeof GeomToStep_MakeCartesianPoint_3;
  GeomToStep_MakeCartesianPoint_4: typeof GeomToStep_MakeCartesianPoint_4;
  GeomToStep_MakeCircle: typeof GeomToStep_MakeCircle;
  GeomToStep_MakeCircle_1: typeof GeomToStep_MakeCircle_1;
  GeomToStep_MakeCircle_2: typeof GeomToStep_MakeCircle_2;
  GeomToStep_MakeCircle_3: typeof GeomToStep_MakeCircle_3;
  GeomToStep_MakeConic: typeof GeomToStep_MakeConic;
  GeomToStep_MakeConic_1: typeof GeomToStep_MakeConic_1;
  GeomToStep_MakeConic_2: typeof GeomToStep_MakeConic_2;
  GeomToStep_MakeConicalSurface: typeof GeomToStep_MakeConicalSurface;
  GeomToStep_MakeCurve: typeof GeomToStep_MakeCurve;
  GeomToStep_MakeCurve_1: typeof GeomToStep_MakeCurve_1;
  GeomToStep_MakeCurve_2: typeof GeomToStep_MakeCurve_2;
  GeomToStep_MakeCylindricalSurface: typeof GeomToStep_MakeCylindricalSurface;
  GeomToStep_MakeDirection: typeof GeomToStep_MakeDirection;
  GeomToStep_MakeDirection_1: typeof GeomToStep_MakeDirection_1;
  GeomToStep_MakeDirection_2: typeof GeomToStep_MakeDirection_2;
  GeomToStep_MakeDirection_3: typeof GeomToStep_MakeDirection_3;
  GeomToStep_MakeDirection_4: typeof GeomToStep_MakeDirection_4;
  GeomToStep_MakeElementarySurface: typeof GeomToStep_MakeElementarySurface;
  GeomToStep_MakeEllipse: typeof GeomToStep_MakeEllipse;
  GeomToStep_MakeEllipse_1: typeof GeomToStep_MakeEllipse_1;
  GeomToStep_MakeEllipse_2: typeof GeomToStep_MakeEllipse_2;
  GeomToStep_MakeEllipse_3: typeof GeomToStep_MakeEllipse_3;
  GeomToStep_MakeHyperbola: typeof GeomToStep_MakeHyperbola;
  GeomToStep_MakeHyperbola_1: typeof GeomToStep_MakeHyperbola_1;
  GeomToStep_MakeHyperbola_2: typeof GeomToStep_MakeHyperbola_2;
  GeomToStep_MakeLine: typeof GeomToStep_MakeLine;
  GeomToStep_MakeLine_1: typeof GeomToStep_MakeLine_1;
  GeomToStep_MakeLine_2: typeof GeomToStep_MakeLine_2;
  GeomToStep_MakeLine_3: typeof GeomToStep_MakeLine_3;
  GeomToStep_MakeLine_4: typeof GeomToStep_MakeLine_4;
  GeomToStep_MakeParabola: typeof GeomToStep_MakeParabola;
  GeomToStep_MakeParabola_1: typeof GeomToStep_MakeParabola_1;
  GeomToStep_MakeParabola_2: typeof GeomToStep_MakeParabola_2;
  GeomToStep_MakePlane: typeof GeomToStep_MakePlane;
  GeomToStep_MakePlane_1: typeof GeomToStep_MakePlane_1;
  GeomToStep_MakePlane_2: typeof GeomToStep_MakePlane_2;
  GeomToStep_MakePolyline: typeof GeomToStep_MakePolyline;
  GeomToStep_MakePolyline_1: typeof GeomToStep_MakePolyline_1;
  GeomToStep_MakePolyline_2: typeof GeomToStep_MakePolyline_2;
  GeomToStep_MakeRectangularTrimmedSurface: typeof GeomToStep_MakeRectangularTrimmedSurface;
  GeomToStep_MakeSphericalSurface: typeof GeomToStep_MakeSphericalSurface;
  GeomToStep_MakeSurface: typeof GeomToStep_MakeSurface;
  GeomToStep_MakeSurfaceOfLinearExtrusion: typeof GeomToStep_MakeSurfaceOfLinearExtrusion;
  GeomToStep_MakeSurfaceOfRevolution: typeof GeomToStep_MakeSurfaceOfRevolution;
  GeomToStep_MakeSweptSurface: typeof GeomToStep_MakeSweptSurface;
  GeomToStep_MakeToroidalSurface: typeof GeomToStep_MakeToroidalSurface;
  GeomToStep_MakeVector: typeof GeomToStep_MakeVector;
  GeomToStep_MakeVector_1: typeof GeomToStep_MakeVector_1;
  GeomToStep_MakeVector_2: typeof GeomToStep_MakeVector_2;
  GeomToStep_MakeVector_3: typeof GeomToStep_MakeVector_3;
  GeomToStep_MakeVector_4: typeof GeomToStep_MakeVector_4;
  GeomToStep_Root: typeof GeomToStep_Root;
  GeomTools: typeof GeomTools;
  GeomTools_Curve2dSet: typeof GeomTools_Curve2dSet;
  GeomTools_CurveSet: typeof GeomTools_CurveSet;
  GeomTools_SurfaceSet: typeof GeomTools_SurfaceSet;
  Geom_Axis1Placement: typeof Geom_Axis1Placement;
  Geom_Axis1Placement_1: typeof Geom_Axis1Placement_1;
  Geom_Axis1Placement_2: typeof Geom_Axis1Placement_2;
  Geom_Axis2Placement: typeof Geom_Axis2Placement;
  Geom_Axis2Placement_1: typeof Geom_Axis2Placement_1;
  Geom_Axis2Placement_2: typeof Geom_Axis2Placement_2;
  Geom_AxisPlacement: typeof Geom_AxisPlacement;
  Geom_BSplineCurve: typeof Geom_BSplineCurve;
  Geom_BSplineCurve_1: typeof Geom_BSplineCurve_1;
  Geom_BSplineCurve_2: typeof Geom_BSplineCurve_2;
  Geom_BSplineSurface: typeof Geom_BSplineSurface;
  Geom_BSplineSurface_1: typeof Geom_BSplineSurface_1;
  Geom_BSplineSurface_2: typeof Geom_BSplineSurface_2;
  Geom_BezierCurve: typeof Geom_BezierCurve;
  Geom_BezierCurve_1: typeof Geom_BezierCurve_1;
  Geom_BezierCurve_2: typeof Geom_BezierCurve_2;
  Geom_BezierSurface: typeof Geom_BezierSurface;
  Geom_BezierSurface_1: typeof Geom_BezierSurface_1;
  Geom_BezierSurface_2: typeof Geom_BezierSurface_2;
  Geom_BoundedCurve: typeof Geom_BoundedCurve;
  Geom_BoundedSurface: typeof Geom_BoundedSurface;
  Geom_CartesianPoint: typeof Geom_CartesianPoint;
  Geom_CartesianPoint_1: typeof Geom_CartesianPoint_1;
  Geom_CartesianPoint_2: typeof Geom_CartesianPoint_2;
  Geom_Circle: typeof Geom_Circle;
  Geom_Circle_1: typeof Geom_Circle_1;
  Geom_Circle_2: typeof Geom_Circle_2;
  Geom_Conic: typeof Geom_Conic;
  Geom_ConicalSurface: typeof Geom_ConicalSurface;
  Geom_ConicalSurface_1: typeof Geom_ConicalSurface_1;
  Geom_ConicalSurface_2: typeof Geom_ConicalSurface_2;
  Geom_Curve: typeof Geom_Curve;
  Geom_CylindricalSurface: typeof Geom_CylindricalSurface;
  Geom_CylindricalSurface_1: typeof Geom_CylindricalSurface_1;
  Geom_CylindricalSurface_2: typeof Geom_CylindricalSurface_2;
  Geom_Direction: typeof Geom_Direction;
  Geom_Direction_1: typeof Geom_Direction_1;
  Geom_Direction_2: typeof Geom_Direction_2;
  Geom_ElementarySurface: typeof Geom_ElementarySurface;
  Geom_Ellipse: typeof Geom_Ellipse;
  Geom_Ellipse_1: typeof Geom_Ellipse_1;
  Geom_Ellipse_2: typeof Geom_Ellipse_2;
  Geom_Geometry: typeof Geom_Geometry;
  Geom_Hyperbola: typeof Geom_Hyperbola;
  Geom_Hyperbola_1: typeof Geom_Hyperbola_1;
  Geom_Hyperbola_2: typeof Geom_Hyperbola_2;
  Geom_Line: typeof Geom_Line;
  Geom_Line_1: typeof Geom_Line_1;
  Geom_Line_2: typeof Geom_Line_2;
  Geom_Line_3: typeof Geom_Line_3;
  Geom_OffsetCurve: typeof Geom_OffsetCurve;
  Geom_OffsetSurface: typeof Geom_OffsetSurface;
  Geom_OsculatingSurface: typeof Geom_OsculatingSurface;
  Geom_OsculatingSurface_1: typeof Geom_OsculatingSurface_1;
  Geom_OsculatingSurface_2: typeof Geom_OsculatingSurface_2;
  Geom_Parabola: typeof Geom_Parabola;
  Geom_Parabola_1: typeof Geom_Parabola_1;
  Geom_Parabola_2: typeof Geom_Parabola_2;
  Geom_Parabola_3: typeof Geom_Parabola_3;
  Geom_Plane: typeof Geom_Plane;
  Geom_Plane_1: typeof Geom_Plane_1;
  Geom_Plane_2: typeof Geom_Plane_2;
  Geom_Plane_3: typeof Geom_Plane_3;
  Geom_Plane_4: typeof Geom_Plane_4;
  Geom_Point: typeof Geom_Point;
  Geom_RectangularTrimmedSurface: typeof Geom_RectangularTrimmedSurface;
  Geom_RectangularTrimmedSurface_1: typeof Geom_RectangularTrimmedSurface_1;
  Geom_RectangularTrimmedSurface_2: typeof Geom_RectangularTrimmedSurface_2;
  Geom_SphericalSurface: typeof Geom_SphericalSurface;
  Geom_SphericalSurface_1: typeof Geom_SphericalSurface_1;
  Geom_SphericalSurface_2: typeof Geom_SphericalSurface_2;
  Geom_Surface: typeof Geom_Surface;
  Geom_SurfaceOfLinearExtrusion: typeof Geom_SurfaceOfLinearExtrusion;
  Geom_SurfaceOfRevolution: typeof Geom_SurfaceOfRevolution;
  Geom_SweptSurface: typeof Geom_SweptSurface;
  Geom_ToroidalSurface: typeof Geom_ToroidalSurface;
  Geom_ToroidalSurface_1: typeof Geom_ToroidalSurface_1;
  Geom_ToroidalSurface_2: typeof Geom_ToroidalSurface_2;
  Geom_Transformation: typeof Geom_Transformation;
  Geom_Transformation_1: typeof Geom_Transformation_1;
  Geom_Transformation_2: typeof Geom_Transformation_2;
  Geom_TrimmedCurve: typeof Geom_TrimmedCurve;
  Geom_UndefinedDerivative: typeof Geom_UndefinedDerivative;
  Geom_UndefinedDerivative_1: typeof Geom_UndefinedDerivative_1;
  Geom_UndefinedDerivative_2: typeof Geom_UndefinedDerivative_2;
  Geom_UndefinedValue: typeof Geom_UndefinedValue;
  Geom_UndefinedValue_1: typeof Geom_UndefinedValue_1;
  Geom_UndefinedValue_2: typeof Geom_UndefinedValue_2;
  Geom_Vector: typeof Geom_Vector;
  Geom_VectorWithMagnitude: typeof Geom_VectorWithMagnitude;
  Geom_VectorWithMagnitude_1: typeof Geom_VectorWithMagnitude_1;
  Geom_VectorWithMagnitude_2: typeof Geom_VectorWithMagnitude_2;
  Geom_VectorWithMagnitude_3: typeof Geom_VectorWithMagnitude_3;
  Graphic3d_ArrayOfPoints: typeof Graphic3d_ArrayOfPoints;
  Graphic3d_ArrayOfPoints_1: typeof Graphic3d_ArrayOfPoints_1;
  Graphic3d_ArrayOfPoints_2: typeof Graphic3d_ArrayOfPoints_2;
  Graphic3d_ArrayOfPolygons: typeof Graphic3d_ArrayOfPolygons;
  Graphic3d_ArrayOfPolygons_1: typeof Graphic3d_ArrayOfPolygons_1;
  Graphic3d_ArrayOfPolygons_2: typeof Graphic3d_ArrayOfPolygons_2;
  Graphic3d_ArrayOfPolylines: typeof Graphic3d_ArrayOfPolylines;
  Graphic3d_ArrayOfPolylines_1: typeof Graphic3d_ArrayOfPolylines_1;
  Graphic3d_ArrayOfPolylines_2: typeof Graphic3d_ArrayOfPolylines_2;
  Graphic3d_ArrayOfPrimitives: typeof Graphic3d_ArrayOfPrimitives;
  Graphic3d_ArrayOfQuadrangleStrips: typeof Graphic3d_ArrayOfQuadrangleStrips;
  Graphic3d_ArrayOfQuadrangleStrips_1: typeof Graphic3d_ArrayOfQuadrangleStrips_1;
  Graphic3d_ArrayOfQuadrangleStrips_2: typeof Graphic3d_ArrayOfQuadrangleStrips_2;
  Graphic3d_ArrayOfQuadrangles: typeof Graphic3d_ArrayOfQuadrangles;
  Graphic3d_ArrayOfQuadrangles_1: typeof Graphic3d_ArrayOfQuadrangles_1;
  Graphic3d_ArrayOfQuadrangles_2: typeof Graphic3d_ArrayOfQuadrangles_2;
  Graphic3d_ArrayOfSegments: typeof Graphic3d_ArrayOfSegments;
  Graphic3d_ArrayOfSegments_1: typeof Graphic3d_ArrayOfSegments_1;
  Graphic3d_ArrayOfSegments_2: typeof Graphic3d_ArrayOfSegments_2;
  Graphic3d_ArrayOfTriangleFans: typeof Graphic3d_ArrayOfTriangleFans;
  Graphic3d_ArrayOfTriangleFans_1: typeof Graphic3d_ArrayOfTriangleFans_1;
  Graphic3d_ArrayOfTriangleFans_2: typeof Graphic3d_ArrayOfTriangleFans_2;
  Graphic3d_ArrayOfTriangleStrips: typeof Graphic3d_ArrayOfTriangleStrips;
  Graphic3d_ArrayOfTriangleStrips_1: typeof Graphic3d_ArrayOfTriangleStrips_1;
  Graphic3d_ArrayOfTriangleStrips_2: typeof Graphic3d_ArrayOfTriangleStrips_2;
  Graphic3d_ArrayOfTriangles: typeof Graphic3d_ArrayOfTriangles;
  Graphic3d_ArrayOfTriangles_1: typeof Graphic3d_ArrayOfTriangles_1;
  Graphic3d_ArrayOfTriangles_2: typeof Graphic3d_ArrayOfTriangles_2;
  Graphic3d_AspectFillArea3d: typeof Graphic3d_AspectFillArea3d;
  Graphic3d_AspectFillArea3d_1: typeof Graphic3d_AspectFillArea3d_1;
  Graphic3d_AspectFillArea3d_2: typeof Graphic3d_AspectFillArea3d_2;
  Graphic3d_AspectLine3d: typeof Graphic3d_AspectLine3d;
  Graphic3d_AspectLine3d_1: typeof Graphic3d_AspectLine3d_1;
  Graphic3d_AspectLine3d_2: typeof Graphic3d_AspectLine3d_2;
  Graphic3d_AspectMarker3d: typeof Graphic3d_AspectMarker3d;
  Graphic3d_AspectMarker3d_1: typeof Graphic3d_AspectMarker3d_1;
  Graphic3d_AspectMarker3d_2: typeof Graphic3d_AspectMarker3d_2;
  Graphic3d_AspectMarker3d_3: typeof Graphic3d_AspectMarker3d_3;
  Graphic3d_AspectMarker3d_4: typeof Graphic3d_AspectMarker3d_4;
  Graphic3d_AspectText3d: typeof Graphic3d_AspectText3d;
  Graphic3d_AspectText3d_1: typeof Graphic3d_AspectText3d_1;
  Graphic3d_AspectText3d_2: typeof Graphic3d_AspectText3d_2;
  Graphic3d_Aspects: typeof Graphic3d_Aspects;
  Graphic3d_AttribBuffer: typeof Graphic3d_AttribBuffer;
  Graphic3d_AxisAspect: typeof Graphic3d_AxisAspect;
  Graphic3d_BSDF: typeof Graphic3d_BSDF;
  Graphic3d_BoundBuffer: typeof Graphic3d_BoundBuffer;
  Graphic3d_Buffer: typeof Graphic3d_Buffer;
  Graphic3d_BvhCStructureSet: typeof Graphic3d_BvhCStructureSet;
  Graphic3d_CLight: typeof Graphic3d_CLight;
  Graphic3d_CStructure: typeof Graphic3d_CStructure;
  Graphic3d_CTexture: typeof Graphic3d_CTexture;
  Graphic3d_CView: typeof Graphic3d_CView;
  Graphic3d_Camera: typeof Graphic3d_Camera;
  Graphic3d_Camera_1: typeof Graphic3d_Camera_1;
  Graphic3d_Camera_2: typeof Graphic3d_Camera_2;
  Graphic3d_CameraTile: typeof Graphic3d_CameraTile;
  Graphic3d_ClipPlane: typeof Graphic3d_ClipPlane;
  Graphic3d_ClipPlane_1: typeof Graphic3d_ClipPlane_1;
  Graphic3d_ClipPlane_2: typeof Graphic3d_ClipPlane_2;
  Graphic3d_ClipPlane_3: typeof Graphic3d_ClipPlane_3;
  Graphic3d_ClipPlane_4: typeof Graphic3d_ClipPlane_4;
  Graphic3d_CubeMapOrder: typeof Graphic3d_CubeMapOrder;
  Graphic3d_CubeMapOrder_1: typeof Graphic3d_CubeMapOrder_1;
  Graphic3d_CubeMapOrder_2: typeof Graphic3d_CubeMapOrder_2;
  Graphic3d_CubeMapOrder_3: typeof Graphic3d_CubeMapOrder_3;
  Graphic3d_CubeMapPacked: typeof Graphic3d_CubeMapPacked;
  Graphic3d_CubeMapPacked_1: typeof Graphic3d_CubeMapPacked_1;
  Graphic3d_CubeMapPacked_2: typeof Graphic3d_CubeMapPacked_2;
  Graphic3d_CubeMapSeparate: typeof Graphic3d_CubeMapSeparate;
  Graphic3d_CubeMapSeparate_1: typeof Graphic3d_CubeMapSeparate_1;
  Graphic3d_CubeMapSeparate_2: typeof Graphic3d_CubeMapSeparate_2;
  Graphic3d_CullingTool: typeof Graphic3d_CullingTool;
  Graphic3d_DataStructureManager: typeof Graphic3d_DataStructureManager;
  Graphic3d_FrameStats: typeof Graphic3d_FrameStats;
  Graphic3d_FrameStatsData: typeof Graphic3d_FrameStatsData;
  Graphic3d_FrameStatsDataTmp: typeof Graphic3d_FrameStatsDataTmp;
  Graphic3d_Fresnel: typeof Graphic3d_Fresnel;
  Graphic3d_GraduatedTrihedron: typeof Graphic3d_GraduatedTrihedron;
  Graphic3d_GraphicDriver: typeof Graphic3d_GraphicDriver;
  Graphic3d_Group: typeof Graphic3d_Group;
  Graphic3d_GroupDefinitionError: typeof Graphic3d_GroupDefinitionError;
  Graphic3d_GroupDefinitionError_1: typeof Graphic3d_GroupDefinitionError_1;
  Graphic3d_GroupDefinitionError_2: typeof Graphic3d_GroupDefinitionError_2;
  Graphic3d_HatchStyle: typeof Graphic3d_HatchStyle;
  Graphic3d_HatchStyle_1: typeof Graphic3d_HatchStyle_1;
  Graphic3d_HatchStyle_2: typeof Graphic3d_HatchStyle_2;
  Graphic3d_IndexBuffer: typeof Graphic3d_IndexBuffer;
  Graphic3d_Layer: typeof Graphic3d_Layer;
  Graphic3d_LightSet: typeof Graphic3d_LightSet;
  Graphic3d_MarkerImage: typeof Graphic3d_MarkerImage;
  Graphic3d_MarkerImage_1: typeof Graphic3d_MarkerImage_1;
  Graphic3d_MarkerImage_2: typeof Graphic3d_MarkerImage_2;
  Graphic3d_MaterialAspect: typeof Graphic3d_MaterialAspect;
  Graphic3d_MaterialAspect_1: typeof Graphic3d_MaterialAspect_1;
  Graphic3d_MaterialAspect_2: typeof Graphic3d_MaterialAspect_2;
  Graphic3d_MaterialDefinitionError: typeof Graphic3d_MaterialDefinitionError;
  Graphic3d_MaterialDefinitionError_1: typeof Graphic3d_MaterialDefinitionError_1;
  Graphic3d_MaterialDefinitionError_2: typeof Graphic3d_MaterialDefinitionError_2;
  Graphic3d_MediaTexture: typeof Graphic3d_MediaTexture;
  Graphic3d_MutableIndexBuffer: typeof Graphic3d_MutableIndexBuffer;
  Graphic3d_PBRMaterial: typeof Graphic3d_PBRMaterial;
  Graphic3d_PBRMaterial_1: typeof Graphic3d_PBRMaterial_1;
  Graphic3d_PBRMaterial_2: typeof Graphic3d_PBRMaterial_2;
  Graphic3d_PresentationAttributes: typeof Graphic3d_PresentationAttributes;
  Graphic3d_PriorityDefinitionError: typeof Graphic3d_PriorityDefinitionError;
  Graphic3d_PriorityDefinitionError_1: typeof Graphic3d_PriorityDefinitionError_1;
  Graphic3d_PriorityDefinitionError_2: typeof Graphic3d_PriorityDefinitionError_2;
  Graphic3d_RenderingParams: typeof Graphic3d_RenderingParams;
  Graphic3d_SequenceOfHClipPlane: typeof Graphic3d_SequenceOfHClipPlane;
  Graphic3d_ShaderAttribute: typeof Graphic3d_ShaderAttribute;
  Graphic3d_ShaderObject: typeof Graphic3d_ShaderObject;
  Graphic3d_ShaderProgram: typeof Graphic3d_ShaderProgram;
  Graphic3d_ShaderVariable: typeof Graphic3d_ShaderVariable;
  Graphic3d_Structure: typeof Graphic3d_Structure;
  Graphic3d_StructureDefinitionError: typeof Graphic3d_StructureDefinitionError;
  Graphic3d_StructureDefinitionError_1: typeof Graphic3d_StructureDefinitionError_1;
  Graphic3d_StructureDefinitionError_2: typeof Graphic3d_StructureDefinitionError_2;
  Graphic3d_StructureManager: typeof Graphic3d_StructureManager;
  Graphic3d_Text: typeof Graphic3d_Text;
  Graphic3d_Texture1D: typeof Graphic3d_Texture1D;
  Graphic3d_Texture1Dmanual: typeof Graphic3d_Texture1Dmanual;
  Graphic3d_Texture1Dmanual_1: typeof Graphic3d_Texture1Dmanual_1;
  Graphic3d_Texture1Dmanual_2: typeof Graphic3d_Texture1Dmanual_2;
  Graphic3d_Texture1Dmanual_3: typeof Graphic3d_Texture1Dmanual_3;
  Graphic3d_Texture1Dsegment: typeof Graphic3d_Texture1Dsegment;
  Graphic3d_Texture1Dsegment_1: typeof Graphic3d_Texture1Dsegment_1;
  Graphic3d_Texture1Dsegment_2: typeof Graphic3d_Texture1Dsegment_2;
  Graphic3d_Texture1Dsegment_3: typeof Graphic3d_Texture1Dsegment_3;
  Graphic3d_Texture2D: typeof Graphic3d_Texture2D;
  Graphic3d_Texture2Dmanual: typeof Graphic3d_Texture2Dmanual;
  Graphic3d_Texture2Dmanual_1: typeof Graphic3d_Texture2Dmanual_1;
  Graphic3d_Texture2Dmanual_2: typeof Graphic3d_Texture2Dmanual_2;
  Graphic3d_Texture2Dmanual_3: typeof Graphic3d_Texture2Dmanual_3;
  Graphic3d_Texture2Dplane: typeof Graphic3d_Texture2Dplane;
  Graphic3d_Texture2Dplane_1: typeof Graphic3d_Texture2Dplane_1;
  Graphic3d_Texture2Dplane_2: typeof Graphic3d_Texture2Dplane_2;
  Graphic3d_Texture2Dplane_3: typeof Graphic3d_Texture2Dplane_3;
  Graphic3d_TextureEnv: typeof Graphic3d_TextureEnv;
  Graphic3d_TextureEnv_1: typeof Graphic3d_TextureEnv_1;
  Graphic3d_TextureEnv_2: typeof Graphic3d_TextureEnv_2;
  Graphic3d_TextureEnv_3: typeof Graphic3d_TextureEnv_3;
  Graphic3d_TextureMap: typeof Graphic3d_TextureMap;
  Graphic3d_TextureParams: typeof Graphic3d_TextureParams;
  Graphic3d_TextureRoot: typeof Graphic3d_TextureRoot;
  Graphic3d_TextureSet: typeof Graphic3d_TextureSet;
  Graphic3d_TextureSet_1: typeof Graphic3d_TextureSet_1;
  Graphic3d_TextureSet_2: typeof Graphic3d_TextureSet_2;
  Graphic3d_TextureSet_3: typeof Graphic3d_TextureSet_3;
  Graphic3d_TransformError: typeof Graphic3d_TransformError;
  Graphic3d_TransformError_1: typeof Graphic3d_TransformError_1;
  Graphic3d_TransformError_2: typeof Graphic3d_TransformError_2;
  Graphic3d_TransformPers: typeof Graphic3d_TransformPers;
  Graphic3d_TransformPers_1: typeof Graphic3d_TransformPers_1;
  Graphic3d_TransformPers_2: typeof Graphic3d_TransformPers_2;
  Graphic3d_TransformPers_3: typeof Graphic3d_TransformPers_3;
  Graphic3d_ValidatedCubeMapOrder: typeof Graphic3d_ValidatedCubeMapOrder;
  Graphic3d_Vertex: typeof Graphic3d_Vertex;
  Graphic3d_Vertex_1: typeof Graphic3d_Vertex_1;
  Graphic3d_Vertex_2: typeof Graphic3d_Vertex_2;
  Graphic3d_Vertex_3: typeof Graphic3d_Vertex_3;
  Graphic3d_Vertex_4: typeof Graphic3d_Vertex_4;
  Graphic3d_ViewAffinity: typeof Graphic3d_ViewAffinity;
  Graphic3d_WorldViewProjState: typeof Graphic3d_WorldViewProjState;
  Graphic3d_WorldViewProjState_1: typeof Graphic3d_WorldViewProjState_1;
  Graphic3d_WorldViewProjState_2: typeof Graphic3d_WorldViewProjState_2;
  HLRAlgo: typeof HLRAlgo;
  HLRAlgo_BiPoint: typeof HLRAlgo_BiPoint;
  HLRAlgo_BiPoint_1: typeof HLRAlgo_BiPoint_1;
  HLRAlgo_BiPoint_2: typeof HLRAlgo_BiPoint_2;
  HLRAlgo_BiPoint_3: typeof HLRAlgo_BiPoint_3;
  HLRAlgo_BiPoint_4: typeof HLRAlgo_BiPoint_4;
  HLRAlgo_BiPoint_5: typeof HLRAlgo_BiPoint_5;
  HLRAlgo_BiPoint_6: typeof HLRAlgo_BiPoint_6;
  HLRAlgo_BiPoint_7: typeof HLRAlgo_BiPoint_7;
  HLRAlgo_Coincidence: typeof HLRAlgo_Coincidence;
  HLRAlgo_EdgeIterator: typeof HLRAlgo_EdgeIterator;
  HLRAlgo_EdgeStatus: typeof HLRAlgo_EdgeStatus;
  HLRAlgo_EdgeStatus_1: typeof HLRAlgo_EdgeStatus_1;
  HLRAlgo_EdgeStatus_2: typeof HLRAlgo_EdgeStatus_2;
  HLRAlgo_EdgesBlock: typeof HLRAlgo_EdgesBlock;
  HLRAlgo_Interference: typeof HLRAlgo_Interference;
  HLRAlgo_Interference_1: typeof HLRAlgo_Interference_1;
  HLRAlgo_Interference_2: typeof HLRAlgo_Interference_2;
  HLRAlgo_Intersection: typeof HLRAlgo_Intersection;
  HLRAlgo_Intersection_1: typeof HLRAlgo_Intersection_1;
  HLRAlgo_Intersection_2: typeof HLRAlgo_Intersection_2;
  HLRAlgo_PolyAlgo: typeof HLRAlgo_PolyAlgo;
  HLRAlgo_PolyData: typeof HLRAlgo_PolyData;
  HLRAlgo_PolyHidingData: typeof HLRAlgo_PolyHidingData;
  HLRAlgo_PolyInternalData: typeof HLRAlgo_PolyInternalData;
  HLRAlgo_PolyInternalNode: typeof HLRAlgo_PolyInternalNode;
  HLRAlgo_PolyShellData: typeof HLRAlgo_PolyShellData;
  HLRAlgo_Projector: typeof HLRAlgo_Projector;
  HLRAlgo_Projector_1: typeof HLRAlgo_Projector_1;
  HLRAlgo_Projector_2: typeof HLRAlgo_Projector_2;
  HLRAlgo_Projector_3: typeof HLRAlgo_Projector_3;
  HLRAlgo_Projector_4: typeof HLRAlgo_Projector_4;
  HLRAlgo_Projector_5: typeof HLRAlgo_Projector_5;
  HLRAlgo_WiresBlock: typeof HLRAlgo_WiresBlock;
  HLRAppli_ReflectLines: typeof HLRAppli_ReflectLines;
  HLRTopoBRep_DSFiller: typeof HLRTopoBRep_DSFiller;
  HLRTopoBRep_Data: typeof HLRTopoBRep_Data;
  HLRTopoBRep_FaceData: typeof HLRTopoBRep_FaceData;
  HLRTopoBRep_FaceIsoLiner: typeof HLRTopoBRep_FaceIsoLiner;
  HLRTopoBRep_OutLiner: typeof HLRTopoBRep_OutLiner;
  HLRTopoBRep_OutLiner_1: typeof HLRTopoBRep_OutLiner_1;
  HLRTopoBRep_OutLiner_2: typeof HLRTopoBRep_OutLiner_2;
  HLRTopoBRep_OutLiner_3: typeof HLRTopoBRep_OutLiner_3;
  HLRTopoBRep_VData: typeof HLRTopoBRep_VData;
  HLRTopoBRep_VData_1: typeof HLRTopoBRep_VData_1;
  HLRTopoBRep_VData_2: typeof HLRTopoBRep_VData_2;
  HatchGen_Domain: typeof HatchGen_Domain;
  HatchGen_Domain_1: typeof HatchGen_Domain_1;
  HatchGen_Domain_2: typeof HatchGen_Domain_2;
  HatchGen_Domain_3: typeof HatchGen_Domain_3;
  HatchGen_IntersectionPoint: typeof HatchGen_IntersectionPoint;
  HatchGen_PointOnElement: typeof HatchGen_PointOnElement;
  HatchGen_PointOnElement_1: typeof HatchGen_PointOnElement_1;
  HatchGen_PointOnElement_2: typeof HatchGen_PointOnElement_2;
  HatchGen_PointOnElement_3: typeof HatchGen_PointOnElement_3;
  HatchGen_PointOnHatching: typeof HatchGen_PointOnHatching;
  HatchGen_PointOnHatching_1: typeof HatchGen_PointOnHatching_1;
  HatchGen_PointOnHatching_2: typeof HatchGen_PointOnHatching_2;
  HatchGen_PointOnHatching_3: typeof HatchGen_PointOnHatching_3;
  Hatch_Hatcher: typeof Hatch_Hatcher;
  Hatch_Line: typeof Hatch_Line;
  Hatch_Line_1: typeof Hatch_Line_1;
  Hatch_Line_2: typeof Hatch_Line_2;
  Hatch_Parameter: typeof Hatch_Parameter;
  Hatch_Parameter_1: typeof Hatch_Parameter_1;
  Hatch_Parameter_2: typeof Hatch_Parameter_2;
  HeaderSection: typeof HeaderSection;
  HeaderSection_FileDescription: typeof HeaderSection_FileDescription;
  HeaderSection_FileName: typeof HeaderSection_FileName;
  HeaderSection_FileSchema: typeof HeaderSection_FileSchema;
  HeaderSection_Protocol: typeof HeaderSection_Protocol;
  Hermit: typeof Hermit;
  IFGraph_AllConnected: typeof IFGraph_AllConnected;
  IFGraph_AllConnected_1: typeof IFGraph_AllConnected_1;
  IFGraph_AllConnected_2: typeof IFGraph_AllConnected_2;
  IFGraph_AllShared: typeof IFGraph_AllShared;
  IFGraph_AllShared_1: typeof IFGraph_AllShared_1;
  IFGraph_AllShared_2: typeof IFGraph_AllShared_2;
  IFGraph_Articulations: typeof IFGraph_Articulations;
  IFGraph_Compare: typeof IFGraph_Compare;
  IFGraph_ConnectedComponants: typeof IFGraph_ConnectedComponants;
  IFGraph_Cumulate: typeof IFGraph_Cumulate;
  IFGraph_Cycles: typeof IFGraph_Cycles;
  IFGraph_Cycles_1: typeof IFGraph_Cycles_1;
  IFGraph_Cycles_2: typeof IFGraph_Cycles_2;
  IFGraph_ExternalSources: typeof IFGraph_ExternalSources;
  IFGraph_SCRoots: typeof IFGraph_SCRoots;
  IFGraph_SCRoots_1: typeof IFGraph_SCRoots_1;
  IFGraph_SCRoots_2: typeof IFGraph_SCRoots_2;
  IFGraph_StrongComponants: typeof IFGraph_StrongComponants;
  IFGraph_SubPartsIterator: typeof IFGraph_SubPartsIterator;
  IFGraph_SubPartsIterator_1: typeof IFGraph_SubPartsIterator_1;
  IFGraph_SubPartsIterator_2: typeof IFGraph_SubPartsIterator_2;
  IFSelect: typeof IFSelect;
  IFSelect_Act: typeof IFSelect_Act;
  IFSelect_Activator: typeof IFSelect_Activator;
  IFSelect_AppliedModifiers: typeof IFSelect_AppliedModifiers;
  IFSelect_BasicDumper: typeof IFSelect_BasicDumper;
  IFSelect_CheckCounter: typeof IFSelect_CheckCounter;
  IFSelect_ContextWrite: typeof IFSelect_ContextWrite;
  IFSelect_ContextWrite_1: typeof IFSelect_ContextWrite_1;
  IFSelect_ContextWrite_2: typeof IFSelect_ContextWrite_2;
  IFSelect_DispGlobal: typeof IFSelect_DispGlobal;
  IFSelect_DispPerCount: typeof IFSelect_DispPerCount;
  IFSelect_DispPerFiles: typeof IFSelect_DispPerFiles;
  IFSelect_DispPerOne: typeof IFSelect_DispPerOne;
  IFSelect_DispPerSignature: typeof IFSelect_DispPerSignature;
  IFSelect_Dispatch: typeof IFSelect_Dispatch;
  IFSelect_Editor: typeof IFSelect_Editor;
  IFSelect_Functions: typeof IFSelect_Functions;
  IFSelect_GeneralModifier: typeof IFSelect_GeneralModifier;
  IFSelect_GraphCounter: typeof IFSelect_GraphCounter;
  IFSelect_ListEditor: typeof IFSelect_ListEditor;
  IFSelect_ListEditor_1: typeof IFSelect_ListEditor_1;
  IFSelect_ListEditor_2: typeof IFSelect_ListEditor_2;
  IFSelect_ModelCopier: typeof IFSelect_ModelCopier;
  IFSelect_ModifEditForm: typeof IFSelect_ModifEditForm;
  IFSelect_ModifReorder: typeof IFSelect_ModifReorder;
  IFSelect_Modifier: typeof IFSelect_Modifier;
  IFSelect_PacketList: typeof IFSelect_PacketList;
  IFSelect_ParamEditor: typeof IFSelect_ParamEditor;
  IFSelect_SelectAnyList: typeof IFSelect_SelectAnyList;
  IFSelect_SelectAnyType: typeof IFSelect_SelectAnyType;
  IFSelect_SelectBase: typeof IFSelect_SelectBase;
  IFSelect_SelectCombine: typeof IFSelect_SelectCombine;
  IFSelect_SelectControl: typeof IFSelect_SelectControl;
  IFSelect_SelectDeduct: typeof IFSelect_SelectDeduct;
  IFSelect_SelectDiff: typeof IFSelect_SelectDiff;
  IFSelect_SelectEntityNumber: typeof IFSelect_SelectEntityNumber;
  IFSelect_SelectErrorEntities: typeof IFSelect_SelectErrorEntities;
  IFSelect_SelectExplore: typeof IFSelect_SelectExplore;
  IFSelect_SelectExtract: typeof IFSelect_SelectExtract;
  IFSelect_SelectFlag: typeof IFSelect_SelectFlag;
  IFSelect_SelectInList: typeof IFSelect_SelectInList;
  IFSelect_SelectIncorrectEntities: typeof IFSelect_SelectIncorrectEntities;
  IFSelect_SelectIntersection: typeof IFSelect_SelectIntersection;
  IFSelect_SelectModelEntities: typeof IFSelect_SelectModelEntities;
  IFSelect_SelectModelRoots: typeof IFSelect_SelectModelRoots;
  IFSelect_SelectPointed: typeof IFSelect_SelectPointed;
  IFSelect_SelectRange: typeof IFSelect_SelectRange;
  IFSelect_SelectRootComps: typeof IFSelect_SelectRootComps;
  IFSelect_SelectRoots: typeof IFSelect_SelectRoots;
  IFSelect_SelectSent: typeof IFSelect_SelectSent;
  IFSelect_SelectShared: typeof IFSelect_SelectShared;
  IFSelect_SelectSharing: typeof IFSelect_SelectSharing;
  IFSelect_SelectSignature: typeof IFSelect_SelectSignature;
  IFSelect_SelectSignature_1: typeof IFSelect_SelectSignature_1;
  IFSelect_SelectSignature_2: typeof IFSelect_SelectSignature_2;
  IFSelect_SelectSignature_3: typeof IFSelect_SelectSignature_3;
  IFSelect_SelectSignedShared: typeof IFSelect_SelectSignedShared;
  IFSelect_SelectSignedSharing: typeof IFSelect_SelectSignedSharing;
  IFSelect_SelectSuite: typeof IFSelect_SelectSuite;
  IFSelect_SelectType: typeof IFSelect_SelectType;
  IFSelect_SelectType_1: typeof IFSelect_SelectType_1;
  IFSelect_SelectType_2: typeof IFSelect_SelectType_2;
  IFSelect_SelectUnion: typeof IFSelect_SelectUnion;
  IFSelect_SelectUnknownEntities: typeof IFSelect_SelectUnknownEntities;
  IFSelect_Selection: typeof IFSelect_Selection;
  IFSelect_SelectionIterator: typeof IFSelect_SelectionIterator;
  IFSelect_SelectionIterator_1: typeof IFSelect_SelectionIterator_1;
  IFSelect_SelectionIterator_2: typeof IFSelect_SelectionIterator_2;
  IFSelect_SessionDumper: typeof IFSelect_SessionDumper;
  IFSelect_SessionFile: typeof IFSelect_SessionFile;
  IFSelect_SessionFile_1: typeof IFSelect_SessionFile_1;
  IFSelect_SessionFile_2: typeof IFSelect_SessionFile_2;
  IFSelect_SessionPilot: typeof IFSelect_SessionPilot;
  IFSelect_ShareOut: typeof IFSelect_ShareOut;
  IFSelect_ShareOutResult: typeof IFSelect_ShareOutResult;
  IFSelect_ShareOutResult_1: typeof IFSelect_ShareOutResult_1;
  IFSelect_ShareOutResult_2: typeof IFSelect_ShareOutResult_2;
  IFSelect_ShareOutResult_3: typeof IFSelect_ShareOutResult_3;
  IFSelect_ShareOutResult_4: typeof IFSelect_ShareOutResult_4;
  IFSelect_SignAncestor: typeof IFSelect_SignAncestor;
  IFSelect_SignCategory: typeof IFSelect_SignCategory;
  IFSelect_SignCounter: typeof IFSelect_SignCounter;
  IFSelect_SignCounter_1: typeof IFSelect_SignCounter_1;
  IFSelect_SignCounter_2: typeof IFSelect_SignCounter_2;
  IFSelect_SignMultiple: typeof IFSelect_SignMultiple;
  IFSelect_SignType: typeof IFSelect_SignType;
  IFSelect_SignValidity: typeof IFSelect_SignValidity;
  IFSelect_Signature: typeof IFSelect_Signature;
  IFSelect_SignatureList: typeof IFSelect_SignatureList;
  IFSelect_TransformStandard: typeof IFSelect_TransformStandard;
  IFSelect_Transformer: typeof IFSelect_Transformer;
  IFSelect_WorkLibrary: typeof IFSelect_WorkLibrary;
  IFSelect_WorkSession: typeof IFSelect_WorkSession;
  IGESControl_ActorWrite: typeof IGESControl_ActorWrite;
  IGESControl_AlgoContainer: typeof IGESControl_AlgoContainer;
  IGESControl_Controller: typeof IGESControl_Controller;
  IGESControl_IGESBoundary: typeof IGESControl_IGESBoundary;
  IGESControl_IGESBoundary_1: typeof IGESControl_IGESBoundary_1;
  IGESControl_IGESBoundary_2: typeof IGESControl_IGESBoundary_2;
  IGESControl_Reader: typeof IGESControl_Reader;
  IGESControl_Reader_1: typeof IGESControl_Reader_1;
  IGESControl_Reader_2: typeof IGESControl_Reader_2;
  IGESControl_ToolContainer: typeof IGESControl_ToolContainer;
  IGESControl_Writer: typeof IGESControl_Writer;
  IGESControl_Writer_1: typeof IGESControl_Writer_1;
  IGESControl_Writer_2: typeof IGESControl_Writer_2;
  IGESControl_Writer_3: typeof IGESControl_Writer_3;
  IMeshData_Curve: typeof IMeshData_Curve;
  IMeshData_Model: typeof IMeshData_Model;
  IMeshData_PCurve: typeof IMeshData_PCurve;
  IMeshData_ParametersList: typeof IMeshData_ParametersList;
  IMeshData_Shape: typeof IMeshData_Shape;
  IMeshData_StatusOwner: typeof IMeshData_StatusOwner;
  IMeshData_TessellatedShape: typeof IMeshData_TessellatedShape;
  IMeshTools_Context: typeof IMeshTools_Context;
  IMeshTools_CurveTessellator: typeof IMeshTools_CurveTessellator;
  IMeshTools_MeshAlgo: typeof IMeshTools_MeshAlgo;
  IMeshTools_MeshAlgoFactory: typeof IMeshTools_MeshAlgoFactory;
  IMeshTools_MeshBuilder: typeof IMeshTools_MeshBuilder;
  IMeshTools_MeshBuilder_1: typeof IMeshTools_MeshBuilder_1;
  IMeshTools_MeshBuilder_2: typeof IMeshTools_MeshBuilder_2;
  IMeshTools_ModelAlgo: typeof IMeshTools_ModelAlgo;
  IMeshTools_ModelBuilder: typeof IMeshTools_ModelBuilder;
  IMeshTools_ShapeExplorer: typeof IMeshTools_ShapeExplorer;
  IMeshTools_ShapeVisitor: typeof IMeshTools_ShapeVisitor;
  Image_AlienPixMap: typeof Image_AlienPixMap;
  Image_Diff: typeof Image_Diff;
  Image_PixMap: typeof Image_PixMap;
  Image_PixMapData: typeof Image_PixMapData;
  Image_Texture: typeof Image_Texture;
  Image_Texture_1: typeof Image_Texture_1;
  Image_Texture_2: typeof Image_Texture_2;
  Image_Texture_3: typeof Image_Texture_3;
  IntAna2d_AnaIntersection: typeof IntAna2d_AnaIntersection;
  IntAna2d_AnaIntersection_1: typeof IntAna2d_AnaIntersection_1;
  IntAna2d_AnaIntersection_2: typeof IntAna2d_AnaIntersection_2;
  IntAna2d_AnaIntersection_3: typeof IntAna2d_AnaIntersection_3;
  IntAna2d_AnaIntersection_4: typeof IntAna2d_AnaIntersection_4;
  IntAna2d_AnaIntersection_5: typeof IntAna2d_AnaIntersection_5;
  IntAna2d_AnaIntersection_6: typeof IntAna2d_AnaIntersection_6;
  IntAna2d_AnaIntersection_7: typeof IntAna2d_AnaIntersection_7;
  IntAna2d_AnaIntersection_8: typeof IntAna2d_AnaIntersection_8;
  IntAna2d_AnaIntersection_9: typeof IntAna2d_AnaIntersection_9;
  IntAna2d_Conic: typeof IntAna2d_Conic;
  IntAna2d_Conic_1: typeof IntAna2d_Conic_1;
  IntAna2d_Conic_2: typeof IntAna2d_Conic_2;
  IntAna2d_Conic_3: typeof IntAna2d_Conic_3;
  IntAna2d_Conic_4: typeof IntAna2d_Conic_4;
  IntAna2d_Conic_5: typeof IntAna2d_Conic_5;
  IntAna2d_IntPoint: typeof IntAna2d_IntPoint;
  IntAna2d_IntPoint_1: typeof IntAna2d_IntPoint_1;
  IntAna2d_IntPoint_2: typeof IntAna2d_IntPoint_2;
  IntAna2d_IntPoint_3: typeof IntAna2d_IntPoint_3;
  IntAna_Curve: typeof IntAna_Curve;
  IntAna_Int3Pln: typeof IntAna_Int3Pln;
  IntAna_Int3Pln_1: typeof IntAna_Int3Pln_1;
  IntAna_Int3Pln_2: typeof IntAna_Int3Pln_2;
  IntAna_IntConicQuad: typeof IntAna_IntConicQuad;
  IntAna_IntConicQuad_1: typeof IntAna_IntConicQuad_1;
  IntAna_IntConicQuad_2: typeof IntAna_IntConicQuad_2;
  IntAna_IntConicQuad_3: typeof IntAna_IntConicQuad_3;
  IntAna_IntConicQuad_4: typeof IntAna_IntConicQuad_4;
  IntAna_IntConicQuad_5: typeof IntAna_IntConicQuad_5;
  IntAna_IntConicQuad_6: typeof IntAna_IntConicQuad_6;
  IntAna_IntConicQuad_7: typeof IntAna_IntConicQuad_7;
  IntAna_IntConicQuad_8: typeof IntAna_IntConicQuad_8;
  IntAna_IntConicQuad_9: typeof IntAna_IntConicQuad_9;
  IntAna_IntConicQuad_10: typeof IntAna_IntConicQuad_10;
  IntAna_IntConicQuad_11: typeof IntAna_IntConicQuad_11;
  IntAna_IntLinTorus: typeof IntAna_IntLinTorus;
  IntAna_IntLinTorus_1: typeof IntAna_IntLinTorus_1;
  IntAna_IntLinTorus_2: typeof IntAna_IntLinTorus_2;
  IntAna_IntQuadQuad: typeof IntAna_IntQuadQuad;
  IntAna_IntQuadQuad_1: typeof IntAna_IntQuadQuad_1;
  IntAna_IntQuadQuad_2: typeof IntAna_IntQuadQuad_2;
  IntAna_IntQuadQuad_3: typeof IntAna_IntQuadQuad_3;
  IntAna_QuadQuadGeo: typeof IntAna_QuadQuadGeo;
  IntAna_QuadQuadGeo_1: typeof IntAna_QuadQuadGeo_1;
  IntAna_QuadQuadGeo_2: typeof IntAna_QuadQuadGeo_2;
  IntAna_QuadQuadGeo_3: typeof IntAna_QuadQuadGeo_3;
  IntAna_QuadQuadGeo_4: typeof IntAna_QuadQuadGeo_4;
  IntAna_QuadQuadGeo_5: typeof IntAna_QuadQuadGeo_5;
  IntAna_QuadQuadGeo_6: typeof IntAna_QuadQuadGeo_6;
  IntAna_QuadQuadGeo_7: typeof IntAna_QuadQuadGeo_7;
  IntAna_QuadQuadGeo_8: typeof IntAna_QuadQuadGeo_8;
  IntAna_QuadQuadGeo_9: typeof IntAna_QuadQuadGeo_9;
  IntAna_QuadQuadGeo_10: typeof IntAna_QuadQuadGeo_10;
  IntAna_QuadQuadGeo_11: typeof IntAna_QuadQuadGeo_11;
  IntAna_QuadQuadGeo_12: typeof IntAna_QuadQuadGeo_12;
  IntAna_QuadQuadGeo_13: typeof IntAna_QuadQuadGeo_13;
  IntAna_QuadQuadGeo_14: typeof IntAna_QuadQuadGeo_14;
  IntAna_QuadQuadGeo_15: typeof IntAna_QuadQuadGeo_15;
  IntAna_QuadQuadGeo_16: typeof IntAna_QuadQuadGeo_16;
  IntAna_Quadric: typeof IntAna_Quadric;
  IntAna_Quadric_1: typeof IntAna_Quadric_1;
  IntAna_Quadric_2: typeof IntAna_Quadric_2;
  IntAna_Quadric_3: typeof IntAna_Quadric_3;
  IntAna_Quadric_4: typeof IntAna_Quadric_4;
  IntAna_Quadric_5: typeof IntAna_Quadric_5;
  IntCurveSurface_HInter: typeof IntCurveSurface_HInter;
  IntCurveSurface_Intersection: typeof IntCurveSurface_Intersection;
  IntCurveSurface_IntersectionPoint: typeof IntCurveSurface_IntersectionPoint;
  IntCurveSurface_IntersectionPoint_1: typeof IntCurveSurface_IntersectionPoint_1;
  IntCurveSurface_IntersectionPoint_2: typeof IntCurveSurface_IntersectionPoint_2;
  IntCurveSurface_IntersectionSegment: typeof IntCurveSurface_IntersectionSegment;
  IntCurveSurface_IntersectionSegment_1: typeof IntCurveSurface_IntersectionSegment_1;
  IntCurveSurface_IntersectionSegment_2: typeof IntCurveSurface_IntersectionSegment_2;
  IntCurveSurface_TheCSFunctionOfHInter: typeof IntCurveSurface_TheCSFunctionOfHInter;
  IntCurveSurface_TheExactHInter: typeof IntCurveSurface_TheExactHInter;
  IntCurveSurface_TheExactHInter_1: typeof IntCurveSurface_TheExactHInter_1;
  IntCurveSurface_TheExactHInter_2: typeof IntCurveSurface_TheExactHInter_2;
  IntCurveSurface_TheHCurveTool: typeof IntCurveSurface_TheHCurveTool;
  IntCurveSurface_TheInterferenceOfHInter: typeof IntCurveSurface_TheInterferenceOfHInter;
  IntCurveSurface_TheInterferenceOfHInter_1: typeof IntCurveSurface_TheInterferenceOfHInter_1;
  IntCurveSurface_TheInterferenceOfHInter_2: typeof IntCurveSurface_TheInterferenceOfHInter_2;
  IntCurveSurface_TheInterferenceOfHInter_3: typeof IntCurveSurface_TheInterferenceOfHInter_3;
  IntCurveSurface_TheInterferenceOfHInter_4: typeof IntCurveSurface_TheInterferenceOfHInter_4;
  IntCurveSurface_TheInterferenceOfHInter_5: typeof IntCurveSurface_TheInterferenceOfHInter_5;
  IntCurveSurface_TheInterferenceOfHInter_6: typeof IntCurveSurface_TheInterferenceOfHInter_6;
  IntCurveSurface_TheInterferenceOfHInter_7: typeof IntCurveSurface_TheInterferenceOfHInter_7;
  IntCurveSurface_ThePolygonOfHInter: typeof IntCurveSurface_ThePolygonOfHInter;
  IntCurveSurface_ThePolygonOfHInter_1: typeof IntCurveSurface_ThePolygonOfHInter_1;
  IntCurveSurface_ThePolygonOfHInter_2: typeof IntCurveSurface_ThePolygonOfHInter_2;
  IntCurveSurface_ThePolygonOfHInter_3: typeof IntCurveSurface_ThePolygonOfHInter_3;
  IntCurveSurface_ThePolygonToolOfHInter: typeof IntCurveSurface_ThePolygonToolOfHInter;
  IntCurveSurface_ThePolyhedronToolOfHInter: typeof IntCurveSurface_ThePolyhedronToolOfHInter;
  IntCurveSurface_TheQuadCurvExactHInter: typeof IntCurveSurface_TheQuadCurvExactHInter;
  IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter: typeof IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter;
  IntCurve_IConicTool: typeof IntCurve_IConicTool;
  IntCurve_IConicTool_1: typeof IntCurve_IConicTool_1;
  IntCurve_IConicTool_2: typeof IntCurve_IConicTool_2;
  IntCurve_IConicTool_3: typeof IntCurve_IConicTool_3;
  IntCurve_IConicTool_4: typeof IntCurve_IConicTool_4;
  IntCurve_IConicTool_5: typeof IntCurve_IConicTool_5;
  IntCurve_IConicTool_6: typeof IntCurve_IConicTool_6;
  IntCurve_IConicTool_7: typeof IntCurve_IConicTool_7;
  IntCurve_IntConicConic: typeof IntCurve_IntConicConic;
  IntCurve_IntConicConic_1: typeof IntCurve_IntConicConic_1;
  IntCurve_IntConicConic_2: typeof IntCurve_IntConicConic_2;
  IntCurve_IntConicConic_3: typeof IntCurve_IntConicConic_3;
  IntCurve_IntConicConic_4: typeof IntCurve_IntConicConic_4;
  IntCurve_IntConicConic_5: typeof IntCurve_IntConicConic_5;
  IntCurve_IntConicConic_6: typeof IntCurve_IntConicConic_6;
  IntCurve_IntConicConic_7: typeof IntCurve_IntConicConic_7;
  IntCurve_IntConicConic_8: typeof IntCurve_IntConicConic_8;
  IntCurve_IntConicConic_9: typeof IntCurve_IntConicConic_9;
  IntCurve_IntConicConic_10: typeof IntCurve_IntConicConic_10;
  IntCurve_IntConicConic_11: typeof IntCurve_IntConicConic_11;
  IntCurve_IntConicConic_12: typeof IntCurve_IntConicConic_12;
  IntCurve_IntConicConic_13: typeof IntCurve_IntConicConic_13;
  IntCurve_IntConicConic_14: typeof IntCurve_IntConicConic_14;
  IntCurve_IntConicConic_15: typeof IntCurve_IntConicConic_15;
  IntCurve_IntConicConic_16: typeof IntCurve_IntConicConic_16;
  IntCurve_IntImpConicParConic: typeof IntCurve_IntImpConicParConic;
  IntCurve_IntImpConicParConic_1: typeof IntCurve_IntImpConicParConic_1;
  IntCurve_IntImpConicParConic_2: typeof IntCurve_IntImpConicParConic_2;
  IntCurve_MyImpParToolOfIntImpConicParConic: typeof IntCurve_MyImpParToolOfIntImpConicParConic;
  IntCurve_PConic: typeof IntCurve_PConic;
  IntCurve_PConic_1: typeof IntCurve_PConic_1;
  IntCurve_PConic_2: typeof IntCurve_PConic_2;
  IntCurve_PConic_3: typeof IntCurve_PConic_3;
  IntCurve_PConic_4: typeof IntCurve_PConic_4;
  IntCurve_PConic_5: typeof IntCurve_PConic_5;
  IntCurve_PConic_6: typeof IntCurve_PConic_6;
  IntCurve_PConicTool: typeof IntCurve_PConicTool;
  IntCurve_ProjectOnPConicTool: typeof IntCurve_ProjectOnPConicTool;
  IntCurvesFace_Intersector: typeof IntCurvesFace_Intersector;
  IntCurvesFace_ShapeIntersector: typeof IntCurvesFace_ShapeIntersector;
  IntPatch_ALine: typeof IntPatch_ALine;
  IntPatch_ALine_1: typeof IntPatch_ALine_1;
  IntPatch_ALine_2: typeof IntPatch_ALine_2;
  IntPatch_ALine_3: typeof IntPatch_ALine_3;
  IntPatch_ALineToWLine: typeof IntPatch_ALineToWLine;
  IntPatch_ArcFunction: typeof IntPatch_ArcFunction;
  IntPatch_CSFunction: typeof IntPatch_CSFunction;
  IntPatch_CurvIntSurf: typeof IntPatch_CurvIntSurf;
  IntPatch_CurvIntSurf_1: typeof IntPatch_CurvIntSurf_1;
  IntPatch_CurvIntSurf_2: typeof IntPatch_CurvIntSurf_2;
  IntPatch_GLine: typeof IntPatch_GLine;
  IntPatch_GLine_1: typeof IntPatch_GLine_1;
  IntPatch_GLine_2: typeof IntPatch_GLine_2;
  IntPatch_GLine_3: typeof IntPatch_GLine_3;
  IntPatch_GLine_4: typeof IntPatch_GLine_4;
  IntPatch_GLine_5: typeof IntPatch_GLine_5;
  IntPatch_GLine_6: typeof IntPatch_GLine_6;
  IntPatch_GLine_7: typeof IntPatch_GLine_7;
  IntPatch_GLine_8: typeof IntPatch_GLine_8;
  IntPatch_GLine_9: typeof IntPatch_GLine_9;
  IntPatch_GLine_10: typeof IntPatch_GLine_10;
  IntPatch_GLine_11: typeof IntPatch_GLine_11;
  IntPatch_GLine_12: typeof IntPatch_GLine_12;
  IntPatch_GLine_13: typeof IntPatch_GLine_13;
  IntPatch_GLine_14: typeof IntPatch_GLine_14;
  IntPatch_GLine_15: typeof IntPatch_GLine_15;
  IntPatch_HCurve2dTool: typeof IntPatch_HCurve2dTool;
  IntPatch_HInterTool: typeof IntPatch_HInterTool;
  IntPatch_ImpImpIntersection: typeof IntPatch_ImpImpIntersection;
  IntPatch_ImpImpIntersection_1: typeof IntPatch_ImpImpIntersection_1;
  IntPatch_ImpImpIntersection_2: typeof IntPatch_ImpImpIntersection_2;
  IntPatch_ImpPrmIntersection: typeof IntPatch_ImpPrmIntersection;
  IntPatch_ImpPrmIntersection_1: typeof IntPatch_ImpPrmIntersection_1;
  IntPatch_ImpPrmIntersection_2: typeof IntPatch_ImpPrmIntersection_2;
  IntPatch_InterferencePolyhedron: typeof IntPatch_InterferencePolyhedron;
  IntPatch_InterferencePolyhedron_1: typeof IntPatch_InterferencePolyhedron_1;
  IntPatch_InterferencePolyhedron_2: typeof IntPatch_InterferencePolyhedron_2;
  IntPatch_InterferencePolyhedron_3: typeof IntPatch_InterferencePolyhedron_3;
  IntPatch_Intersection: typeof IntPatch_Intersection;
  IntPatch_Intersection_1: typeof IntPatch_Intersection_1;
  IntPatch_Intersection_2: typeof IntPatch_Intersection_2;
  IntPatch_Intersection_3: typeof IntPatch_Intersection_3;
  IntPatch_Line: typeof IntPatch_Line;
  IntPatch_LineConstructor: typeof IntPatch_LineConstructor;
  IntPatch_Point: typeof IntPatch_Point;
  IntPatch_PointLine: typeof IntPatch_PointLine;
  IntPatch_PolyArc: typeof IntPatch_PolyArc;
  IntPatch_PolyLine: typeof IntPatch_PolyLine;
  IntPatch_PolyLine_1: typeof IntPatch_PolyLine_1;
  IntPatch_PolyLine_2: typeof IntPatch_PolyLine_2;
  IntPatch_Polygo: typeof IntPatch_Polygo;
  IntPatch_PolyhedronTool: typeof IntPatch_PolyhedronTool;
  IntPatch_PrmPrmIntersection: typeof IntPatch_PrmPrmIntersection;
  IntPatch_PrmPrmIntersection_T3Bits: typeof IntPatch_PrmPrmIntersection_T3Bits;
  IntPatch_RstInt: typeof IntPatch_RstInt;
  IntPatch_SpecialPoints: typeof IntPatch_SpecialPoints;
  IntPatch_TheIWLineOfTheIWalking: typeof IntPatch_TheIWLineOfTheIWalking;
  IntPatch_TheIWalking: typeof IntPatch_TheIWalking;
  IntPatch_ThePathPointOfTheSOnBounds: typeof IntPatch_ThePathPointOfTheSOnBounds;
  IntPatch_ThePathPointOfTheSOnBounds_1: typeof IntPatch_ThePathPointOfTheSOnBounds_1;
  IntPatch_ThePathPointOfTheSOnBounds_2: typeof IntPatch_ThePathPointOfTheSOnBounds_2;
  IntPatch_ThePathPointOfTheSOnBounds_3: typeof IntPatch_ThePathPointOfTheSOnBounds_3;
  IntPatch_TheSOnBounds: typeof IntPatch_TheSOnBounds;
  IntPatch_TheSearchInside: typeof IntPatch_TheSearchInside;
  IntPatch_TheSearchInside_1: typeof IntPatch_TheSearchInside_1;
  IntPatch_TheSearchInside_2: typeof IntPatch_TheSearchInside_2;
  IntPatch_TheSegmentOfTheSOnBounds: typeof IntPatch_TheSegmentOfTheSOnBounds;
  IntPatch_TheSurfFunction: typeof IntPatch_TheSurfFunction;
  IntPatch_TheSurfFunction_1: typeof IntPatch_TheSurfFunction_1;
  IntPatch_TheSurfFunction_2: typeof IntPatch_TheSurfFunction_2;
  IntPatch_TheSurfFunction_3: typeof IntPatch_TheSurfFunction_3;
  IntPatch_WLine: typeof IntPatch_WLine;
  IntPatch_WLine_1: typeof IntPatch_WLine_1;
  IntPatch_WLine_2: typeof IntPatch_WLine_2;
  IntPatch_WLine_3: typeof IntPatch_WLine_3;
  IntPatch_WLineTool: typeof IntPatch_WLineTool;
  IntPolyh_Couple: typeof IntPolyh_Couple;
  IntPolyh_Couple_1: typeof IntPolyh_Couple_1;
  IntPolyh_Couple_2: typeof IntPolyh_Couple_2;
  IntPolyh_CoupleMapHasher: typeof IntPolyh_CoupleMapHasher;
  IntPolyh_Edge: typeof IntPolyh_Edge;
  IntPolyh_Edge_1: typeof IntPolyh_Edge_1;
  IntPolyh_Edge_2: typeof IntPolyh_Edge_2;
  IntPolyh_Intersection: typeof IntPolyh_Intersection;
  IntPolyh_Intersection_1: typeof IntPolyh_Intersection_1;
  IntPolyh_Intersection_2: typeof IntPolyh_Intersection_2;
  IntPolyh_Intersection_3: typeof IntPolyh_Intersection_3;
  IntPolyh_Point: typeof IntPolyh_Point;
  IntPolyh_Point_1: typeof IntPolyh_Point_1;
  IntPolyh_Point_2: typeof IntPolyh_Point_2;
  IntPolyh_SectionLine: typeof IntPolyh_SectionLine;
  IntPolyh_SectionLine_1: typeof IntPolyh_SectionLine_1;
  IntPolyh_SectionLine_2: typeof IntPolyh_SectionLine_2;
  IntPolyh_StartPoint: typeof IntPolyh_StartPoint;
  IntPolyh_StartPoint_1: typeof IntPolyh_StartPoint_1;
  IntPolyh_StartPoint_2: typeof IntPolyh_StartPoint_2;
  IntPolyh_Tools: typeof IntPolyh_Tools;
  IntPolyh_Triangle: typeof IntPolyh_Triangle;
  IntPolyh_Triangle_1: typeof IntPolyh_Triangle_1;
  IntPolyh_Triangle_2: typeof IntPolyh_Triangle_2;
  IntRes2d_Domain: typeof IntRes2d_Domain;
  IntRes2d_Domain_1: typeof IntRes2d_Domain_1;
  IntRes2d_Domain_2: typeof IntRes2d_Domain_2;
  IntRes2d_Domain_3: typeof IntRes2d_Domain_3;
  IntRes2d_Intersection: typeof IntRes2d_Intersection;
  IntRes2d_IntersectionPoint: typeof IntRes2d_IntersectionPoint;
  IntRes2d_IntersectionPoint_1: typeof IntRes2d_IntersectionPoint_1;
  IntRes2d_IntersectionPoint_2: typeof IntRes2d_IntersectionPoint_2;
  IntRes2d_IntersectionSegment: typeof IntRes2d_IntersectionSegment;
  IntRes2d_IntersectionSegment_1: typeof IntRes2d_IntersectionSegment_1;
  IntRes2d_IntersectionSegment_2: typeof IntRes2d_IntersectionSegment_2;
  IntRes2d_IntersectionSegment_3: typeof IntRes2d_IntersectionSegment_3;
  IntRes2d_IntersectionSegment_4: typeof IntRes2d_IntersectionSegment_4;
  IntRes2d_Transition: typeof IntRes2d_Transition;
  IntRes2d_Transition_1: typeof IntRes2d_Transition_1;
  IntRes2d_Transition_2: typeof IntRes2d_Transition_2;
  IntRes2d_Transition_3: typeof IntRes2d_Transition_3;
  IntRes2d_Transition_4: typeof IntRes2d_Transition_4;
  IntStart_SITopolTool: typeof IntStart_SITopolTool;
  IntSurf: typeof IntSurf;
  IntSurf_Couple: typeof IntSurf_Couple;
  IntSurf_Couple_1: typeof IntSurf_Couple_1;
  IntSurf_Couple_2: typeof IntSurf_Couple_2;
  IntSurf_InteriorPoint: typeof IntSurf_InteriorPoint;
  IntSurf_InteriorPoint_1: typeof IntSurf_InteriorPoint_1;
  IntSurf_InteriorPoint_2: typeof IntSurf_InteriorPoint_2;
  IntSurf_InteriorPointTool: typeof IntSurf_InteriorPointTool;
  IntSurf_LineOn2S: typeof IntSurf_LineOn2S;
  IntSurf_PathPoint: typeof IntSurf_PathPoint;
  IntSurf_PathPoint_1: typeof IntSurf_PathPoint_1;
  IntSurf_PathPoint_2: typeof IntSurf_PathPoint_2;
  IntSurf_PathPointTool: typeof IntSurf_PathPointTool;
  IntSurf_PntOn2S: typeof IntSurf_PntOn2S;
  IntSurf_Quadric: typeof IntSurf_Quadric;
  IntSurf_Quadric_1: typeof IntSurf_Quadric_1;
  IntSurf_Quadric_2: typeof IntSurf_Quadric_2;
  IntSurf_Quadric_3: typeof IntSurf_Quadric_3;
  IntSurf_Quadric_4: typeof IntSurf_Quadric_4;
  IntSurf_Quadric_5: typeof IntSurf_Quadric_5;
  IntSurf_Quadric_6: typeof IntSurf_Quadric_6;
  IntSurf_QuadricTool: typeof IntSurf_QuadricTool;
  IntSurf_Transition: typeof IntSurf_Transition;
  IntSurf_Transition_1: typeof IntSurf_Transition_1;
  IntSurf_Transition_2: typeof IntSurf_Transition_2;
  IntSurf_Transition_3: typeof IntSurf_Transition_3;
  IntTools: typeof IntTools;
  IntTools_BaseRangeSample: typeof IntTools_BaseRangeSample;
  IntTools_BaseRangeSample_1: typeof IntTools_BaseRangeSample_1;
  IntTools_BaseRangeSample_2: typeof IntTools_BaseRangeSample_2;
  IntTools_BeanFaceIntersector: typeof IntTools_BeanFaceIntersector;
  IntTools_BeanFaceIntersector_1: typeof IntTools_BeanFaceIntersector_1;
  IntTools_BeanFaceIntersector_2: typeof IntTools_BeanFaceIntersector_2;
  IntTools_BeanFaceIntersector_3: typeof IntTools_BeanFaceIntersector_3;
  IntTools_BeanFaceIntersector_4: typeof IntTools_BeanFaceIntersector_4;
  IntTools_CArray1OfInteger: typeof IntTools_CArray1OfInteger;
  IntTools_CArray1OfInteger_1: typeof IntTools_CArray1OfInteger_1;
  IntTools_CArray1OfInteger_2: typeof IntTools_CArray1OfInteger_2;
  IntTools_CArray1OfReal: typeof IntTools_CArray1OfReal;
  IntTools_CArray1OfReal_1: typeof IntTools_CArray1OfReal_1;
  IntTools_CArray1OfReal_2: typeof IntTools_CArray1OfReal_2;
  IntTools_CommonPrt: typeof IntTools_CommonPrt;
  IntTools_CommonPrt_1: typeof IntTools_CommonPrt_1;
  IntTools_CommonPrt_2: typeof IntTools_CommonPrt_2;
  IntTools_Curve: typeof IntTools_Curve;
  IntTools_Curve_1: typeof IntTools_Curve_1;
  IntTools_Curve_2: typeof IntTools_Curve_2;
  IntTools_CurveRangeLocalizeData: typeof IntTools_CurveRangeLocalizeData;
  IntTools_CurveRangeSample: typeof IntTools_CurveRangeSample;
  IntTools_CurveRangeSample_1: typeof IntTools_CurveRangeSample_1;
  IntTools_CurveRangeSample_2: typeof IntTools_CurveRangeSample_2;
  IntTools_CurveRangeSampleMapHasher: typeof IntTools_CurveRangeSampleMapHasher;
  IntTools_EdgeEdge: typeof IntTools_EdgeEdge;
  IntTools_EdgeEdge_1: typeof IntTools_EdgeEdge_1;
  IntTools_EdgeEdge_2: typeof IntTools_EdgeEdge_2;
  IntTools_EdgeEdge_3: typeof IntTools_EdgeEdge_3;
  IntTools_EdgeFace: typeof IntTools_EdgeFace;
  IntTools_FClass2d: typeof IntTools_FClass2d;
  IntTools_FClass2d_1: typeof IntTools_FClass2d_1;
  IntTools_FClass2d_2: typeof IntTools_FClass2d_2;
  IntTools_FaceFace: typeof IntTools_FaceFace;
  IntTools_MarkedRangeSet: typeof IntTools_MarkedRangeSet;
  IntTools_MarkedRangeSet_1: typeof IntTools_MarkedRangeSet_1;
  IntTools_MarkedRangeSet_2: typeof IntTools_MarkedRangeSet_2;
  IntTools_MarkedRangeSet_3: typeof IntTools_MarkedRangeSet_3;
  IntTools_PntOn2Faces: typeof IntTools_PntOn2Faces;
  IntTools_PntOn2Faces_1: typeof IntTools_PntOn2Faces_1;
  IntTools_PntOn2Faces_2: typeof IntTools_PntOn2Faces_2;
  IntTools_Range: typeof IntTools_Range;
  IntTools_Range_1: typeof IntTools_Range_1;
  IntTools_Range_2: typeof IntTools_Range_2;
  IntTools_Root: typeof IntTools_Root;
  IntTools_Root_1: typeof IntTools_Root_1;
  IntTools_Root_2: typeof IntTools_Root_2;
  IntTools_ShrunkRange: typeof IntTools_ShrunkRange;
  IntTools_SurfaceRangeLocalizeData: typeof IntTools_SurfaceRangeLocalizeData;
  IntTools_SurfaceRangeLocalizeData_1: typeof IntTools_SurfaceRangeLocalizeData_1;
  IntTools_SurfaceRangeLocalizeData_2: typeof IntTools_SurfaceRangeLocalizeData_2;
  IntTools_SurfaceRangeLocalizeData_3: typeof IntTools_SurfaceRangeLocalizeData_3;
  IntTools_SurfaceRangeSample: typeof IntTools_SurfaceRangeSample;
  IntTools_SurfaceRangeSample_1: typeof IntTools_SurfaceRangeSample_1;
  IntTools_SurfaceRangeSample_2: typeof IntTools_SurfaceRangeSample_2;
  IntTools_SurfaceRangeSample_3: typeof IntTools_SurfaceRangeSample_3;
  IntTools_SurfaceRangeSample_4: typeof IntTools_SurfaceRangeSample_4;
  IntTools_SurfaceRangeSampleMapHasher: typeof IntTools_SurfaceRangeSampleMapHasher;
  IntTools_Tools: typeof IntTools_Tools;
  IntTools_TopolTool: typeof IntTools_TopolTool;
  IntTools_TopolTool_1: typeof IntTools_TopolTool_1;
  IntTools_TopolTool_2: typeof IntTools_TopolTool_2;
  IntTools_WLineTool: typeof IntTools_WLineTool;
  IntWalk_PWalking: typeof IntWalk_PWalking;
  IntWalk_PWalking_1: typeof IntWalk_PWalking_1;
  IntWalk_PWalking_2: typeof IntWalk_PWalking_2;
  IntWalk_TheFunctionOfTheInt2S: typeof IntWalk_TheFunctionOfTheInt2S;
  IntWalk_TheInt2S: typeof IntWalk_TheInt2S;
  IntWalk_TheInt2S_1: typeof IntWalk_TheInt2S_1;
  IntWalk_TheInt2S_2: typeof IntWalk_TheInt2S_2;
  Interface_BitMap: typeof Interface_BitMap;
  Interface_BitMap_1: typeof Interface_BitMap_1;
  Interface_BitMap_2: typeof Interface_BitMap_2;
  Interface_BitMap_3: typeof Interface_BitMap_3;
  Interface_Category: typeof Interface_Category;
  Interface_Category_1: typeof Interface_Category_1;
  Interface_Category_2: typeof Interface_Category_2;
  Interface_Category_3: typeof Interface_Category_3;
  Interface_Check: typeof Interface_Check;
  Interface_Check_1: typeof Interface_Check_1;
  Interface_Check_2: typeof Interface_Check_2;
  Interface_CheckFailure: typeof Interface_CheckFailure;
  Interface_CheckFailure_1: typeof Interface_CheckFailure_1;
  Interface_CheckFailure_2: typeof Interface_CheckFailure_2;
  Interface_CheckIterator: typeof Interface_CheckIterator;
  Interface_CheckIterator_1: typeof Interface_CheckIterator_1;
  Interface_CheckIterator_2: typeof Interface_CheckIterator_2;
  Interface_CheckTool: typeof Interface_CheckTool;
  Interface_CheckTool_1: typeof Interface_CheckTool_1;
  Interface_CheckTool_2: typeof Interface_CheckTool_2;
  Interface_CheckTool_3: typeof Interface_CheckTool_3;
  Interface_CheckTool_4: typeof Interface_CheckTool_4;
  Interface_CopyControl: typeof Interface_CopyControl;
  Interface_CopyMap: typeof Interface_CopyMap;
  Interface_CopyTool: typeof Interface_CopyTool;
  Interface_CopyTool_1: typeof Interface_CopyTool_1;
  Interface_CopyTool_2: typeof Interface_CopyTool_2;
  Interface_CopyTool_3: typeof Interface_CopyTool_3;
  Interface_EntityCluster: typeof Interface_EntityCluster;
  Interface_EntityCluster_1: typeof Interface_EntityCluster_1;
  Interface_EntityCluster_2: typeof Interface_EntityCluster_2;
  Interface_EntityCluster_3: typeof Interface_EntityCluster_3;
  Interface_EntityCluster_4: typeof Interface_EntityCluster_4;
  Interface_EntityIterator: typeof Interface_EntityIterator;
  Interface_EntityIterator_1: typeof Interface_EntityIterator_1;
  Interface_EntityIterator_2: typeof Interface_EntityIterator_2;
  Interface_EntityList: typeof Interface_EntityList;
  Interface_FileParameter: typeof Interface_FileParameter;
  Interface_FileReaderTool: typeof Interface_FileReaderTool;
  Interface_FloatWriter: typeof Interface_FloatWriter;
  Interface_GTool: typeof Interface_GTool;
  Interface_GTool_1: typeof Interface_GTool_1;
  Interface_GTool_2: typeof Interface_GTool_2;
  Interface_GeneralLib: typeof Interface_GeneralLib;
  Interface_GeneralLib_1: typeof Interface_GeneralLib_1;
  Interface_GeneralLib_2: typeof Interface_GeneralLib_2;
  Interface_GlobalNodeOfGeneralLib: typeof Interface_GlobalNodeOfGeneralLib;
  Interface_GlobalNodeOfReaderLib: typeof Interface_GlobalNodeOfReaderLib;
  Interface_GraphContent: typeof Interface_GraphContent;
  Interface_GraphContent_1: typeof Interface_GraphContent_1;
  Interface_GraphContent_2: typeof Interface_GraphContent_2;
  Interface_GraphContent_3: typeof Interface_GraphContent_3;
  Interface_GraphContent_4: typeof Interface_GraphContent_4;
  Interface_IntList: typeof Interface_IntList;
  Interface_IntList_1: typeof Interface_IntList_1;
  Interface_IntList_2: typeof Interface_IntList_2;
  Interface_IntList_3: typeof Interface_IntList_3;
  Interface_IntVal: typeof Interface_IntVal;
  Interface_InterfaceError: typeof Interface_InterfaceError;
  Interface_InterfaceError_1: typeof Interface_InterfaceError_1;
  Interface_InterfaceError_2: typeof Interface_InterfaceError_2;
  Interface_InterfaceMismatch: typeof Interface_InterfaceMismatch;
  Interface_InterfaceMismatch_1: typeof Interface_InterfaceMismatch_1;
  Interface_InterfaceMismatch_2: typeof Interface_InterfaceMismatch_2;
  Interface_InterfaceModel: typeof Interface_InterfaceModel;
  Interface_LineBuffer: typeof Interface_LineBuffer;
  Interface_MSG: typeof Interface_MSG;
  Interface_MSG_1: typeof Interface_MSG_1;
  Interface_MSG_2: typeof Interface_MSG_2;
  Interface_MSG_3: typeof Interface_MSG_3;
  Interface_MSG_4: typeof Interface_MSG_4;
  Interface_MSG_5: typeof Interface_MSG_5;
  Interface_MSG_6: typeof Interface_MSG_6;
  Interface_MapAsciiStringHasher: typeof Interface_MapAsciiStringHasher;
  Interface_NodeOfGeneralLib: typeof Interface_NodeOfGeneralLib;
  Interface_NodeOfReaderLib: typeof Interface_NodeOfReaderLib;
  Interface_ParamList: typeof Interface_ParamList;
  Interface_ParamSet: typeof Interface_ParamSet;
  Interface_Protocol: typeof Interface_Protocol;
  Interface_ReaderLib: typeof Interface_ReaderLib;
  Interface_ReaderLib_1: typeof Interface_ReaderLib_1;
  Interface_ReaderLib_2: typeof Interface_ReaderLib_2;
  Interface_ReaderModule: typeof Interface_ReaderModule;
  Interface_ReportEntity: typeof Interface_ReportEntity;
  Interface_ReportEntity_1: typeof Interface_ReportEntity_1;
  Interface_ReportEntity_2: typeof Interface_ReportEntity_2;
  Interface_STAT: typeof Interface_STAT;
  Interface_STAT_1: typeof Interface_STAT_1;
  Interface_STAT_2: typeof Interface_STAT_2;
  Interface_ShareFlags: typeof Interface_ShareFlags;
  Interface_ShareFlags_1: typeof Interface_ShareFlags_1;
  Interface_ShareFlags_2: typeof Interface_ShareFlags_2;
  Interface_ShareFlags_3: typeof Interface_ShareFlags_3;
  Interface_ShareFlags_4: typeof Interface_ShareFlags_4;
  Interface_ShareFlags_5: typeof Interface_ShareFlags_5;
  Interface_ShareTool: typeof Interface_ShareTool;
  Interface_ShareTool_1: typeof Interface_ShareTool_1;
  Interface_ShareTool_2: typeof Interface_ShareTool_2;
  Interface_ShareTool_3: typeof Interface_ShareTool_3;
  Interface_ShareTool_4: typeof Interface_ShareTool_4;
  Interface_ShareTool_5: typeof Interface_ShareTool_5;
  Interface_ShareTool_6: typeof Interface_ShareTool_6;
  Interface_SignLabel: typeof Interface_SignLabel;
  Interface_SignType: typeof Interface_SignType;
  Interface_Static: typeof Interface_Static;
  Interface_Static_1: typeof Interface_Static_1;
  Interface_Static_2: typeof Interface_Static_2;
  Interface_TypedValue: typeof Interface_TypedValue;
  Interface_UndefinedContent: typeof Interface_UndefinedContent;
  Interval: typeof Interval;
  Interval_1: typeof Interval_1;
  Interval_2: typeof Interval_2;
  Interval_3: typeof Interval_3;
  Interval_4: typeof Interval_4;
  Intf: typeof Intf;
  Intf_Interference: typeof Intf_Interference;
  Intf_InterferencePolygon2d: typeof Intf_InterferencePolygon2d;
  Intf_InterferencePolygon2d_1: typeof Intf_InterferencePolygon2d_1;
  Intf_InterferencePolygon2d_2: typeof Intf_InterferencePolygon2d_2;
  Intf_InterferencePolygon2d_3: typeof Intf_InterferencePolygon2d_3;
  Intf_Polygon2d: typeof Intf_Polygon2d;
  Intf_SectionLine: typeof Intf_SectionLine;
  Intf_SectionLine_1: typeof Intf_SectionLine_1;
  Intf_SectionLine_2: typeof Intf_SectionLine_2;
  Intf_SectionPoint: typeof Intf_SectionPoint;
  Intf_SectionPoint_1: typeof Intf_SectionPoint_1;
  Intf_SectionPoint_2: typeof Intf_SectionPoint_2;
  Intf_SectionPoint_3: typeof Intf_SectionPoint_3;
  Intf_TangentZone: typeof Intf_TangentZone;
  Intf_TangentZone_1: typeof Intf_TangentZone_1;
  Intf_TangentZone_2: typeof Intf_TangentZone_2;
  Intf_Tool: typeof Intf_Tool;
  Intrv_Interval: typeof Intrv_Interval;
  Intrv_Interval_1: typeof Intrv_Interval_1;
  Intrv_Interval_2: typeof Intrv_Interval_2;
  Intrv_Interval_3: typeof Intrv_Interval_3;
  Intrv_Intervals: typeof Intrv_Intervals;
  Intrv_Intervals_1: typeof Intrv_Intervals_1;
  Intrv_Intervals_2: typeof Intrv_Intervals_2;
  Intrv_Intervals_3: typeof Intrv_Intervals_3;
  LDOMBasicString: typeof LDOMBasicString;
  LDOMBasicString_1: typeof LDOMBasicString_1;
  LDOMBasicString_2: typeof LDOMBasicString_2;
  LDOMBasicString_3: typeof LDOMBasicString_3;
  LDOMBasicString_4: typeof LDOMBasicString_4;
  LDOMBasicString_5: typeof LDOMBasicString_5;
  LDOMBasicString_6: typeof LDOMBasicString_6;
  LDOMParser: typeof LDOMParser;
  LDOM_Attr: typeof LDOM_Attr;
  LDOM_Attr_1: typeof LDOM_Attr_1;
  LDOM_Attr_2: typeof LDOM_Attr_2;
  LDOM_BasicAttribute: typeof LDOM_BasicAttribute;
  LDOM_BasicElement: typeof LDOM_BasicElement;
  LDOM_BasicNode: typeof LDOM_BasicNode;
  LDOM_BasicText: typeof LDOM_BasicText;
  LDOM_CDATASection: typeof LDOM_CDATASection;
  LDOM_CDATASection_1: typeof LDOM_CDATASection_1;
  LDOM_CDATASection_2: typeof LDOM_CDATASection_2;
  LDOM_CharReference: typeof LDOM_CharReference;
  LDOM_CharacterData: typeof LDOM_CharacterData;
  LDOM_CharacterData_1: typeof LDOM_CharacterData_1;
  LDOM_CharacterData_2: typeof LDOM_CharacterData_2;
  LDOM_Comment: typeof LDOM_Comment;
  LDOM_Comment_1: typeof LDOM_Comment_1;
  LDOM_Comment_2: typeof LDOM_Comment_2;
  LDOM_Document: typeof LDOM_Document;
  LDOM_Document_1: typeof LDOM_Document_1;
  LDOM_Document_2: typeof LDOM_Document_2;
  LDOM_DocumentType: typeof LDOM_DocumentType;
  LDOM_Element: typeof LDOM_Element;
  LDOM_Element_1: typeof LDOM_Element_1;
  LDOM_Element_2: typeof LDOM_Element_2;
  LDOM_LDOMImplementation: typeof LDOM_LDOMImplementation;
  LDOM_NodeList: typeof LDOM_NodeList;
  LDOM_NodeList_1: typeof LDOM_NodeList_1;
  LDOM_NodeList_2: typeof LDOM_NodeList_2;
  LDOM_OSStream: typeof LDOM_OSStream;
  LDOM_Text: typeof LDOM_Text;
  LDOM_Text_1: typeof LDOM_Text_1;
  LDOM_Text_2: typeof LDOM_Text_2;
  LDOM_XmlReader: typeof LDOM_XmlReader;
  LDOM_XmlWriter: typeof LDOM_XmlWriter;
  LProp3d_CLProps: typeof LProp3d_CLProps;
  LProp3d_CLProps_1: typeof LProp3d_CLProps_1;
  LProp3d_CLProps_2: typeof LProp3d_CLProps_2;
  LProp3d_CLProps_3: typeof LProp3d_CLProps_3;
  LProp3d_CurveTool: typeof LProp3d_CurveTool;
  LProp3d_SLProps: typeof LProp3d_SLProps;
  LProp3d_SLProps_1: typeof LProp3d_SLProps_1;
  LProp3d_SLProps_2: typeof LProp3d_SLProps_2;
  LProp3d_SLProps_3: typeof LProp3d_SLProps_3;
  LProp3d_SurfaceTool: typeof LProp3d_SurfaceTool;
  LProp_AnalyticCurInf: typeof LProp_AnalyticCurInf;
  LProp_BadContinuity: typeof LProp_BadContinuity;
  LProp_BadContinuity_1: typeof LProp_BadContinuity_1;
  LProp_BadContinuity_2: typeof LProp_BadContinuity_2;
  LProp_CurAndInf: typeof LProp_CurAndInf;
  LProp_NotDefined: typeof LProp_NotDefined;
  LProp_NotDefined_1: typeof LProp_NotDefined_1;
  LProp_NotDefined_2: typeof LProp_NotDefined_2;
  Law: typeof Law;
  Law_BSpFunc: typeof Law_BSpFunc;
  Law_BSpFunc_1: typeof Law_BSpFunc_1;
  Law_BSpFunc_2: typeof Law_BSpFunc_2;
  Law_BSpline: typeof Law_BSpline;
  Law_BSpline_1: typeof Law_BSpline_1;
  Law_BSpline_2: typeof Law_BSpline_2;
  Law_BSplineKnotSplitting: typeof Law_BSplineKnotSplitting;
  Law_Composite: typeof Law_Composite;
  Law_Composite_1: typeof Law_Composite_1;
  Law_Composite_2: typeof Law_Composite_2;
  Law_Constant: typeof Law_Constant;
  Law_Function: typeof Law_Function;
  Law_Interpol: typeof Law_Interpol;
  Law_Linear: typeof Law_Linear;
  Law_S: typeof Law_S;
  LocOpe: typeof LocOpe;
  LocOpe_BuildShape: typeof LocOpe_BuildShape;
  LocOpe_BuildShape_1: typeof LocOpe_BuildShape_1;
  LocOpe_BuildShape_2: typeof LocOpe_BuildShape_2;
  LocOpe_BuildWires: typeof LocOpe_BuildWires;
  LocOpe_BuildWires_1: typeof LocOpe_BuildWires_1;
  LocOpe_BuildWires_2: typeof LocOpe_BuildWires_2;
  LocOpe_CSIntersector: typeof LocOpe_CSIntersector;
  LocOpe_CSIntersector_1: typeof LocOpe_CSIntersector_1;
  LocOpe_CSIntersector_2: typeof LocOpe_CSIntersector_2;
  LocOpe_CurveShapeIntersector: typeof LocOpe_CurveShapeIntersector;
  LocOpe_CurveShapeIntersector_1: typeof LocOpe_CurveShapeIntersector_1;
  LocOpe_CurveShapeIntersector_2: typeof LocOpe_CurveShapeIntersector_2;
  LocOpe_CurveShapeIntersector_3: typeof LocOpe_CurveShapeIntersector_3;
  LocOpe_DPrism: typeof LocOpe_DPrism;
  LocOpe_DPrism_1: typeof LocOpe_DPrism_1;
  LocOpe_DPrism_2: typeof LocOpe_DPrism_2;
  LocOpe_FindEdges: typeof LocOpe_FindEdges;
  LocOpe_FindEdges_1: typeof LocOpe_FindEdges_1;
  LocOpe_FindEdges_2: typeof LocOpe_FindEdges_2;
  LocOpe_FindEdgesInFace: typeof LocOpe_FindEdgesInFace;
  LocOpe_FindEdgesInFace_1: typeof LocOpe_FindEdgesInFace_1;
  LocOpe_FindEdgesInFace_2: typeof LocOpe_FindEdgesInFace_2;
  LocOpe_GeneratedShape: typeof LocOpe_GeneratedShape;
  LocOpe_Generator: typeof LocOpe_Generator;
  LocOpe_Generator_1: typeof LocOpe_Generator_1;
  LocOpe_Generator_2: typeof LocOpe_Generator_2;
  LocOpe_GluedShape: typeof LocOpe_GluedShape;
  LocOpe_GluedShape_1: typeof LocOpe_GluedShape_1;
  LocOpe_GluedShape_2: typeof LocOpe_GluedShape_2;
  LocOpe_Gluer: typeof LocOpe_Gluer;
  LocOpe_Gluer_1: typeof LocOpe_Gluer_1;
  LocOpe_Gluer_2: typeof LocOpe_Gluer_2;
  LocOpe_LinearForm: typeof LocOpe_LinearForm;
  LocOpe_LinearForm_1: typeof LocOpe_LinearForm_1;
  LocOpe_LinearForm_2: typeof LocOpe_LinearForm_2;
  LocOpe_LinearForm_3: typeof LocOpe_LinearForm_3;
  LocOpe_Pipe: typeof LocOpe_Pipe;
  LocOpe_PntFace: typeof LocOpe_PntFace;
  LocOpe_PntFace_1: typeof LocOpe_PntFace_1;
  LocOpe_PntFace_2: typeof LocOpe_PntFace_2;
  LocOpe_Prism: typeof LocOpe_Prism;
  LocOpe_Prism_1: typeof LocOpe_Prism_1;
  LocOpe_Prism_2: typeof LocOpe_Prism_2;
  LocOpe_Prism_3: typeof LocOpe_Prism_3;
  LocOpe_SplitDrafts: typeof LocOpe_SplitDrafts;
  LocOpe_SplitDrafts_1: typeof LocOpe_SplitDrafts_1;
  LocOpe_SplitDrafts_2: typeof LocOpe_SplitDrafts_2;
  LocOpe_SplitShape: typeof LocOpe_SplitShape;
  LocOpe_SplitShape_1: typeof LocOpe_SplitShape_1;
  LocOpe_SplitShape_2: typeof LocOpe_SplitShape_2;
  LocOpe_Spliter: typeof LocOpe_Spliter;
  LocOpe_Spliter_1: typeof LocOpe_Spliter_1;
  LocOpe_Spliter_2: typeof LocOpe_Spliter_2;
  LocOpe_WiresOnShape: typeof LocOpe_WiresOnShape;
  LocalAnalysis: typeof LocalAnalysis;
  LocalAnalysis_CurveContinuity: typeof LocalAnalysis_CurveContinuity;
  LocalAnalysis_SurfaceContinuity: typeof LocalAnalysis_SurfaceContinuity;
  LocalAnalysis_SurfaceContinuity_1: typeof LocalAnalysis_SurfaceContinuity_1;
  LocalAnalysis_SurfaceContinuity_2: typeof LocalAnalysis_SurfaceContinuity_2;
  LocalAnalysis_SurfaceContinuity_3: typeof LocalAnalysis_SurfaceContinuity_3;
  MAT2d_BiInt: typeof MAT2d_BiInt;
  MAT2d_Circuit: typeof MAT2d_Circuit;
  MAT2d_Connexion: typeof MAT2d_Connexion;
  MAT2d_Connexion_1: typeof MAT2d_Connexion_1;
  MAT2d_Connexion_2: typeof MAT2d_Connexion_2;
  MAT2d_MapBiIntHasher: typeof MAT2d_MapBiIntHasher;
  MAT2d_Mat2d: typeof MAT2d_Mat2d;
  MAT2d_MiniPath: typeof MAT2d_MiniPath;
  MAT2d_Tool2d: typeof MAT2d_Tool2d;
  MAT_Arc: typeof MAT_Arc;
  MAT_BasicElt: typeof MAT_BasicElt;
  MAT_Bisector: typeof MAT_Bisector;
  MAT_Edge: typeof MAT_Edge;
  MAT_Graph: typeof MAT_Graph;
  MAT_ListOfBisector: typeof MAT_ListOfBisector;
  MAT_ListOfEdge: typeof MAT_ListOfEdge;
  MAT_Node: typeof MAT_Node;
  MAT_TListNodeOfListOfBisector: typeof MAT_TListNodeOfListOfBisector;
  MAT_TListNodeOfListOfBisector_1: typeof MAT_TListNodeOfListOfBisector_1;
  MAT_TListNodeOfListOfBisector_2: typeof MAT_TListNodeOfListOfBisector_2;
  MAT_TListNodeOfListOfEdge: typeof MAT_TListNodeOfListOfEdge;
  MAT_TListNodeOfListOfEdge_1: typeof MAT_TListNodeOfListOfEdge_1;
  MAT_TListNodeOfListOfEdge_2: typeof MAT_TListNodeOfListOfEdge_2;
  MAT_Zone: typeof MAT_Zone;
  MAT_Zone_1: typeof MAT_Zone_1;
  MAT_Zone_2: typeof MAT_Zone_2;
  MeshVS_Buffer: typeof MeshVS_Buffer;
  MeshVS_CommonSensitiveEntity: typeof MeshVS_CommonSensitiveEntity;
  MeshVS_DataSource: typeof MeshVS_DataSource;
  MeshVS_DataSource3D: typeof MeshVS_DataSource3D;
  MeshVS_DeformedDataSource: typeof MeshVS_DeformedDataSource;
  MeshVS_Drawer: typeof MeshVS_Drawer;
  MeshVS_DummySensitiveEntity: typeof MeshVS_DummySensitiveEntity;
  MeshVS_ElementalColorPrsBuilder: typeof MeshVS_ElementalColorPrsBuilder;
  MeshVS_Mesh: typeof MeshVS_Mesh;
  MeshVS_MeshEntityOwner: typeof MeshVS_MeshEntityOwner;
  MeshVS_MeshOwner: typeof MeshVS_MeshOwner;
  MeshVS_MeshPrsBuilder: typeof MeshVS_MeshPrsBuilder;
  MeshVS_NodalColorPrsBuilder: typeof MeshVS_NodalColorPrsBuilder;
  MeshVS_PrsBuilder: typeof MeshVS_PrsBuilder;
  MeshVS_SensitiveFace: typeof MeshVS_SensitiveFace;
  MeshVS_SensitiveMesh: typeof MeshVS_SensitiveMesh;
  MeshVS_SensitivePolyhedron: typeof MeshVS_SensitivePolyhedron;
  MeshVS_SensitiveQuad: typeof MeshVS_SensitiveQuad;
  MeshVS_SensitiveQuad_1: typeof MeshVS_SensitiveQuad_1;
  MeshVS_SensitiveQuad_2: typeof MeshVS_SensitiveQuad_2;
  MeshVS_SensitiveSegment: typeof MeshVS_SensitiveSegment;
  MeshVS_TextPrsBuilder: typeof MeshVS_TextPrsBuilder;
  MeshVS_Tool: typeof MeshVS_Tool;
  MeshVS_VectorPrsBuilder: typeof MeshVS_VectorPrsBuilder;
  Message: typeof Message;
  Message_Alert: typeof Message_Alert;
  Message_Algorithm: typeof Message_Algorithm;
  Message_ExecStatus: typeof Message_ExecStatus;
  Message_ExecStatus_1: typeof Message_ExecStatus_1;
  Message_ExecStatus_2: typeof Message_ExecStatus_2;
  Message_Messenger: typeof Message_Messenger;
  Message_Messenger_1: typeof Message_Messenger_1;
  Message_Messenger_2: typeof Message_Messenger_2;
  Message_Msg: typeof Message_Msg;
  Message_Msg_1: typeof Message_Msg_1;
  Message_Msg_2: typeof Message_Msg_2;
  Message_Msg_3: typeof Message_Msg_3;
  Message_Msg_4: typeof Message_Msg_4;
  Message_MsgFile: typeof Message_MsgFile;
  Message_Printer: typeof Message_Printer;
  Message_PrinterOStream: typeof Message_PrinterOStream;
  Message_PrinterOStream_1: typeof Message_PrinterOStream_1;
  Message_PrinterOStream_2: typeof Message_PrinterOStream_2;
  Message_PrinterSystemLog: typeof Message_PrinterSystemLog;
  Message_ProgressIndicator: typeof Message_ProgressIndicator;
  Message_ProgressScale: typeof Message_ProgressScale;
  Message_ProgressSentry: typeof Message_ProgressSentry;
  Message_ProgressSentry_1: typeof Message_ProgressSentry_1;
  Message_ProgressSentry_2: typeof Message_ProgressSentry_2;
  Message_Report: typeof Message_Report;
  MoniTool_AttrList: typeof MoniTool_AttrList;
  MoniTool_AttrList_1: typeof MoniTool_AttrList_1;
  MoniTool_AttrList_2: typeof MoniTool_AttrList_2;
  MoniTool_CaseData: typeof MoniTool_CaseData;
  MoniTool_DataInfo: typeof MoniTool_DataInfo;
  MoniTool_ElemHasher: typeof MoniTool_ElemHasher;
  MoniTool_Element: typeof MoniTool_Element;
  MoniTool_IntVal: typeof MoniTool_IntVal;
  MoniTool_MTHasher: typeof MoniTool_MTHasher;
  MoniTool_RealVal: typeof MoniTool_RealVal;
  MoniTool_SignShape: typeof MoniTool_SignShape;
  MoniTool_SignText: typeof MoniTool_SignText;
  MoniTool_Stat: typeof MoniTool_Stat;
  MoniTool_Stat_1: typeof MoniTool_Stat_1;
  MoniTool_Stat_2: typeof MoniTool_Stat_2;
  MoniTool_Timer: typeof MoniTool_Timer;
  MoniTool_TimerSentry: typeof MoniTool_TimerSentry;
  MoniTool_TimerSentry_1: typeof MoniTool_TimerSentry_1;
  MoniTool_TimerSentry_2: typeof MoniTool_TimerSentry_2;
  MoniTool_TransientElem: typeof MoniTool_TransientElem;
  MoniTool_TypedValue: typeof MoniTool_TypedValue;
  MoniTool_TypedValue_1: typeof MoniTool_TypedValue_1;
  MoniTool_TypedValue_2: typeof MoniTool_TypedValue_2;
  MyDirectPolynomialRoots: typeof MyDirectPolynomialRoots;
  MyDirectPolynomialRoots_1: typeof MyDirectPolynomialRoots_1;
  MyDirectPolynomialRoots_2: typeof MyDirectPolynomialRoots_2;
  NLPlate_HGPPConstraint: typeof NLPlate_HGPPConstraint;
  NLPlate_HPG0Constraint: typeof NLPlate_HPG0Constraint;
  NLPlate_HPG0G1Constraint: typeof NLPlate_HPG0G1Constraint;
  NLPlate_HPG0G2Constraint: typeof NLPlate_HPG0G2Constraint;
  NLPlate_HPG0G3Constraint: typeof NLPlate_HPG0G3Constraint;
  NLPlate_HPG1Constraint: typeof NLPlate_HPG1Constraint;
  NLPlate_HPG2Constraint: typeof NLPlate_HPG2Constraint;
  NLPlate_HPG3Constraint: typeof NLPlate_HPG3Constraint;
  NLPlate_NLPlate: typeof NLPlate_NLPlate;
  OSD: typeof OSD;
  OSD_Chronometer: typeof OSD_Chronometer;
  OSD_Directory: typeof OSD_Directory;
  OSD_Directory_1: typeof OSD_Directory_1;
  OSD_Directory_2: typeof OSD_Directory_2;
  OSD_DirectoryIterator: typeof OSD_DirectoryIterator;
  OSD_DirectoryIterator_1: typeof OSD_DirectoryIterator_1;
  OSD_DirectoryIterator_2: typeof OSD_DirectoryIterator_2;
  OSD_Disk: typeof OSD_Disk;
  OSD_Disk_1: typeof OSD_Disk_1;
  OSD_Disk_2: typeof OSD_Disk_2;
  OSD_Disk_3: typeof OSD_Disk_3;
  OSD_Environment: typeof OSD_Environment;
  OSD_Environment_1: typeof OSD_Environment_1;
  OSD_Environment_2: typeof OSD_Environment_2;
  OSD_Environment_3: typeof OSD_Environment_3;
  OSD_Error: typeof OSD_Error;
  OSD_Exception: typeof OSD_Exception;
  OSD_Exception_1: typeof OSD_Exception_1;
  OSD_Exception_2: typeof OSD_Exception_2;
  OSD_Exception_ACCESS_VIOLATION: typeof OSD_Exception_ACCESS_VIOLATION;
  OSD_Exception_ACCESS_VIOLATION_1: typeof OSD_Exception_ACCESS_VIOLATION_1;
  OSD_Exception_ACCESS_VIOLATION_2: typeof OSD_Exception_ACCESS_VIOLATION_2;
  OSD_Exception_ARRAY_BOUNDS_EXCEEDED: typeof OSD_Exception_ARRAY_BOUNDS_EXCEEDED;
  OSD_Exception_ARRAY_BOUNDS_EXCEEDED_1: typeof OSD_Exception_ARRAY_BOUNDS_EXCEEDED_1;
  OSD_Exception_ARRAY_BOUNDS_EXCEEDED_2: typeof OSD_Exception_ARRAY_BOUNDS_EXCEEDED_2;
  OSD_Exception_CTRL_BREAK: typeof OSD_Exception_CTRL_BREAK;
  OSD_Exception_CTRL_BREAK_1: typeof OSD_Exception_CTRL_BREAK_1;
  OSD_Exception_CTRL_BREAK_2: typeof OSD_Exception_CTRL_BREAK_2;
  OSD_Exception_FLT_DENORMAL_OPERAND: typeof OSD_Exception_FLT_DENORMAL_OPERAND;
  OSD_Exception_FLT_DENORMAL_OPERAND_1: typeof OSD_Exception_FLT_DENORMAL_OPERAND_1;
  OSD_Exception_FLT_DENORMAL_OPERAND_2: typeof OSD_Exception_FLT_DENORMAL_OPERAND_2;
  OSD_Exception_FLT_DIVIDE_BY_ZERO: typeof OSD_Exception_FLT_DIVIDE_BY_ZERO;
  OSD_Exception_FLT_DIVIDE_BY_ZERO_1: typeof OSD_Exception_FLT_DIVIDE_BY_ZERO_1;
  OSD_Exception_FLT_DIVIDE_BY_ZERO_2: typeof OSD_Exception_FLT_DIVIDE_BY_ZERO_2;
  OSD_Exception_FLT_INEXACT_RESULT: typeof OSD_Exception_FLT_INEXACT_RESULT;
  OSD_Exception_FLT_INEXACT_RESULT_1: typeof OSD_Exception_FLT_INEXACT_RESULT_1;
  OSD_Exception_FLT_INEXACT_RESULT_2: typeof OSD_Exception_FLT_INEXACT_RESULT_2;
  OSD_Exception_FLT_INVALID_OPERATION: typeof OSD_Exception_FLT_INVALID_OPERATION;
  OSD_Exception_FLT_INVALID_OPERATION_1: typeof OSD_Exception_FLT_INVALID_OPERATION_1;
  OSD_Exception_FLT_INVALID_OPERATION_2: typeof OSD_Exception_FLT_INVALID_OPERATION_2;
  OSD_Exception_FLT_OVERFLOW: typeof OSD_Exception_FLT_OVERFLOW;
  OSD_Exception_FLT_OVERFLOW_1: typeof OSD_Exception_FLT_OVERFLOW_1;
  OSD_Exception_FLT_OVERFLOW_2: typeof OSD_Exception_FLT_OVERFLOW_2;
  OSD_Exception_FLT_STACK_CHECK: typeof OSD_Exception_FLT_STACK_CHECK;
  OSD_Exception_FLT_STACK_CHECK_1: typeof OSD_Exception_FLT_STACK_CHECK_1;
  OSD_Exception_FLT_STACK_CHECK_2: typeof OSD_Exception_FLT_STACK_CHECK_2;
  OSD_Exception_FLT_UNDERFLOW: typeof OSD_Exception_FLT_UNDERFLOW;
  OSD_Exception_FLT_UNDERFLOW_1: typeof OSD_Exception_FLT_UNDERFLOW_1;
  OSD_Exception_FLT_UNDERFLOW_2: typeof OSD_Exception_FLT_UNDERFLOW_2;
  OSD_Exception_ILLEGAL_INSTRUCTION: typeof OSD_Exception_ILLEGAL_INSTRUCTION;
  OSD_Exception_ILLEGAL_INSTRUCTION_1: typeof OSD_Exception_ILLEGAL_INSTRUCTION_1;
  OSD_Exception_ILLEGAL_INSTRUCTION_2: typeof OSD_Exception_ILLEGAL_INSTRUCTION_2;
  OSD_Exception_INT_DIVIDE_BY_ZERO: typeof OSD_Exception_INT_DIVIDE_BY_ZERO;
  OSD_Exception_INT_DIVIDE_BY_ZERO_1: typeof OSD_Exception_INT_DIVIDE_BY_ZERO_1;
  OSD_Exception_INT_DIVIDE_BY_ZERO_2: typeof OSD_Exception_INT_DIVIDE_BY_ZERO_2;
  OSD_Exception_INT_OVERFLOW: typeof OSD_Exception_INT_OVERFLOW;
  OSD_Exception_INT_OVERFLOW_1: typeof OSD_Exception_INT_OVERFLOW_1;
  OSD_Exception_INT_OVERFLOW_2: typeof OSD_Exception_INT_OVERFLOW_2;
  OSD_Exception_INVALID_DISPOSITION: typeof OSD_Exception_INVALID_DISPOSITION;
  OSD_Exception_INVALID_DISPOSITION_1: typeof OSD_Exception_INVALID_DISPOSITION_1;
  OSD_Exception_INVALID_DISPOSITION_2: typeof OSD_Exception_INVALID_DISPOSITION_2;
  OSD_Exception_IN_PAGE_ERROR: typeof OSD_Exception_IN_PAGE_ERROR;
  OSD_Exception_IN_PAGE_ERROR_1: typeof OSD_Exception_IN_PAGE_ERROR_1;
  OSD_Exception_IN_PAGE_ERROR_2: typeof OSD_Exception_IN_PAGE_ERROR_2;
  OSD_Exception_NONCONTINUABLE_EXCEPTION: typeof OSD_Exception_NONCONTINUABLE_EXCEPTION;
  OSD_Exception_NONCONTINUABLE_EXCEPTION_1: typeof OSD_Exception_NONCONTINUABLE_EXCEPTION_1;
  OSD_Exception_NONCONTINUABLE_EXCEPTION_2: typeof OSD_Exception_NONCONTINUABLE_EXCEPTION_2;
  OSD_Exception_PRIV_INSTRUCTION: typeof OSD_Exception_PRIV_INSTRUCTION;
  OSD_Exception_PRIV_INSTRUCTION_1: typeof OSD_Exception_PRIV_INSTRUCTION_1;
  OSD_Exception_PRIV_INSTRUCTION_2: typeof OSD_Exception_PRIV_INSTRUCTION_2;
  OSD_Exception_STACK_OVERFLOW: typeof OSD_Exception_STACK_OVERFLOW;
  OSD_Exception_STACK_OVERFLOW_1: typeof OSD_Exception_STACK_OVERFLOW_1;
  OSD_Exception_STACK_OVERFLOW_2: typeof OSD_Exception_STACK_OVERFLOW_2;
  OSD_Exception_STATUS_NO_MEMORY: typeof OSD_Exception_STATUS_NO_MEMORY;
  OSD_Exception_STATUS_NO_MEMORY_1: typeof OSD_Exception_STATUS_NO_MEMORY_1;
  OSD_Exception_STATUS_NO_MEMORY_2: typeof OSD_Exception_STATUS_NO_MEMORY_2;
  OSD_FileIterator: typeof OSD_FileIterator;
  OSD_FileIterator_1: typeof OSD_FileIterator_1;
  OSD_FileIterator_2: typeof OSD_FileIterator_2;
  OSD_Host: typeof OSD_Host;
  OSD_MAllocHook: typeof OSD_MAllocHook;
  OSD_MemInfo: typeof OSD_MemInfo;
  OSD_OSDError: typeof OSD_OSDError;
  OSD_OSDError_1: typeof OSD_OSDError_1;
  OSD_OSDError_2: typeof OSD_OSDError_2;
  OSD_PerfMeter: typeof OSD_PerfMeter;
  OSD_PerfMeter_1: typeof OSD_PerfMeter_1;
  OSD_PerfMeter_2: typeof OSD_PerfMeter_2;
  OSD_Process: typeof OSD_Process;
  OSD_Protection: typeof OSD_Protection;
  OSD_Protection_1: typeof OSD_Protection_1;
  OSD_Protection_2: typeof OSD_Protection_2;
  OSD_SIGBUS: typeof OSD_SIGBUS;
  OSD_SIGBUS_1: typeof OSD_SIGBUS_1;
  OSD_SIGBUS_2: typeof OSD_SIGBUS_2;
  OSD_SIGHUP: typeof OSD_SIGHUP;
  OSD_SIGHUP_1: typeof OSD_SIGHUP_1;
  OSD_SIGHUP_2: typeof OSD_SIGHUP_2;
  OSD_SIGILL: typeof OSD_SIGILL;
  OSD_SIGILL_1: typeof OSD_SIGILL_1;
  OSD_SIGILL_2: typeof OSD_SIGILL_2;
  OSD_SIGINT: typeof OSD_SIGINT;
  OSD_SIGINT_1: typeof OSD_SIGINT_1;
  OSD_SIGINT_2: typeof OSD_SIGINT_2;
  OSD_SIGKILL: typeof OSD_SIGKILL;
  OSD_SIGKILL_1: typeof OSD_SIGKILL_1;
  OSD_SIGKILL_2: typeof OSD_SIGKILL_2;
  OSD_SIGQUIT: typeof OSD_SIGQUIT;
  OSD_SIGQUIT_1: typeof OSD_SIGQUIT_1;
  OSD_SIGQUIT_2: typeof OSD_SIGQUIT_2;
  OSD_SIGSEGV: typeof OSD_SIGSEGV;
  OSD_SIGSEGV_1: typeof OSD_SIGSEGV_1;
  OSD_SIGSEGV_2: typeof OSD_SIGSEGV_2;
  OSD_SIGSYS: typeof OSD_SIGSYS;
  OSD_SIGSYS_1: typeof OSD_SIGSYS_1;
  OSD_SIGSYS_2: typeof OSD_SIGSYS_2;
  OSD_SharedLibrary: typeof OSD_SharedLibrary;
  OSD_SharedLibrary_1: typeof OSD_SharedLibrary_1;
  OSD_SharedLibrary_2: typeof OSD_SharedLibrary_2;
  OSD_Signal: typeof OSD_Signal;
  OSD_Signal_1: typeof OSD_Signal_1;
  OSD_Signal_2: typeof OSD_Signal_2;
  OSD_Thread: typeof OSD_Thread;
  OSD_Thread_1: typeof OSD_Thread_1;
  OSD_Thread_2: typeof OSD_Thread_2;
  OSD_Thread_3: typeof OSD_Thread_3;
  OSD_Timer: typeof OSD_Timer;
  PCDM: typeof PCDM;
  PCDM_DOMHeaderParser: typeof PCDM_DOMHeaderParser;
  PCDM_Document: typeof PCDM_Document;
  PCDM_DriverError: typeof PCDM_DriverError;
  PCDM_DriverError_1: typeof PCDM_DriverError_1;
  PCDM_DriverError_2: typeof PCDM_DriverError_2;
  PCDM_ReadWriter: typeof PCDM_ReadWriter;
  PCDM_ReadWriter_1: typeof PCDM_ReadWriter_1;
  PCDM_Reader: typeof PCDM_Reader;
  PCDM_Reference: typeof PCDM_Reference;
  PCDM_Reference_1: typeof PCDM_Reference_1;
  PCDM_Reference_2: typeof PCDM_Reference_2;
  PCDM_ReferenceIterator: typeof PCDM_ReferenceIterator;
  PCDM_RetrievalDriver: typeof PCDM_RetrievalDriver;
  PCDM_StorageDriver: typeof PCDM_StorageDriver;
  PCDM_Writer: typeof PCDM_Writer;
  PLib: typeof PLib;
  PLib_Base: typeof PLib_Base;
  PLib_DoubleJacobiPolynomial: typeof PLib_DoubleJacobiPolynomial;
  PLib_DoubleJacobiPolynomial_1: typeof PLib_DoubleJacobiPolynomial_1;
  PLib_DoubleJacobiPolynomial_2: typeof PLib_DoubleJacobiPolynomial_2;
  PLib_HermitJacobi: typeof PLib_HermitJacobi;
  PLib_JacobiPolynomial: typeof PLib_JacobiPolynomial;
  PeriodicInterval: typeof PeriodicInterval;
  PeriodicInterval_1: typeof PeriodicInterval_1;
  PeriodicInterval_2: typeof PeriodicInterval_2;
  PeriodicInterval_3: typeof PeriodicInterval_3;
  Plate_D1: typeof Plate_D1;
  Plate_D1_1: typeof Plate_D1_1;
  Plate_D1_2: typeof Plate_D1_2;
  Plate_D2: typeof Plate_D2;
  Plate_D2_1: typeof Plate_D2_1;
  Plate_D2_2: typeof Plate_D2_2;
  Plate_D3: typeof Plate_D3;
  Plate_D3_1: typeof Plate_D3_1;
  Plate_D3_2: typeof Plate_D3_2;
  Plate_FreeGtoCConstraint: typeof Plate_FreeGtoCConstraint;
  Plate_FreeGtoCConstraint_1: typeof Plate_FreeGtoCConstraint_1;
  Plate_FreeGtoCConstraint_2: typeof Plate_FreeGtoCConstraint_2;
  Plate_FreeGtoCConstraint_3: typeof Plate_FreeGtoCConstraint_3;
  Plate_GlobalTranslationConstraint: typeof Plate_GlobalTranslationConstraint;
  Plate_GtoCConstraint: typeof Plate_GtoCConstraint;
  Plate_GtoCConstraint_1: typeof Plate_GtoCConstraint_1;
  Plate_GtoCConstraint_2: typeof Plate_GtoCConstraint_2;
  Plate_GtoCConstraint_3: typeof Plate_GtoCConstraint_3;
  Plate_GtoCConstraint_4: typeof Plate_GtoCConstraint_4;
  Plate_GtoCConstraint_5: typeof Plate_GtoCConstraint_5;
  Plate_GtoCConstraint_6: typeof Plate_GtoCConstraint_6;
  Plate_GtoCConstraint_7: typeof Plate_GtoCConstraint_7;
  Plate_LineConstraint: typeof Plate_LineConstraint;
  Plate_LinearScalarConstraint: typeof Plate_LinearScalarConstraint;
  Plate_LinearScalarConstraint_1: typeof Plate_LinearScalarConstraint_1;
  Plate_LinearScalarConstraint_2: typeof Plate_LinearScalarConstraint_2;
  Plate_LinearScalarConstraint_3: typeof Plate_LinearScalarConstraint_3;
  Plate_LinearScalarConstraint_4: typeof Plate_LinearScalarConstraint_4;
  Plate_LinearScalarConstraint_5: typeof Plate_LinearScalarConstraint_5;
  Plate_LinearXYZConstraint: typeof Plate_LinearXYZConstraint;
  Plate_LinearXYZConstraint_1: typeof Plate_LinearXYZConstraint_1;
  Plate_LinearXYZConstraint_2: typeof Plate_LinearXYZConstraint_2;
  Plate_LinearXYZConstraint_3: typeof Plate_LinearXYZConstraint_3;
  Plate_LinearXYZConstraint_4: typeof Plate_LinearXYZConstraint_4;
  Plate_PinpointConstraint: typeof Plate_PinpointConstraint;
  Plate_PinpointConstraint_1: typeof Plate_PinpointConstraint_1;
  Plate_PinpointConstraint_2: typeof Plate_PinpointConstraint_2;
  Plate_PlaneConstraint: typeof Plate_PlaneConstraint;
  Plate_Plate: typeof Plate_Plate;
  Plate_Plate_1: typeof Plate_Plate_1;
  Plate_Plate_2: typeof Plate_Plate_2;
  Plate_SampledCurveConstraint: typeof Plate_SampledCurveConstraint;
  Plugin: typeof Plugin;
  Plugin_Failure: typeof Plugin_Failure;
  Plugin_Failure_1: typeof Plugin_Failure_1;
  Plugin_Failure_2: typeof Plugin_Failure_2;
  Poly: typeof Poly;
  Poly_CoherentLink: typeof Poly_CoherentLink;
  Poly_CoherentLink_1: typeof Poly_CoherentLink_1;
  Poly_CoherentLink_2: typeof Poly_CoherentLink_2;
  Poly_CoherentLink_3: typeof Poly_CoherentLink_3;
  Poly_CoherentNode: typeof Poly_CoherentNode;
  Poly_CoherentNode_1: typeof Poly_CoherentNode_1;
  Poly_CoherentNode_2: typeof Poly_CoherentNode_2;
  Poly_CoherentTriangle: typeof Poly_CoherentTriangle;
  Poly_CoherentTriangle_1: typeof Poly_CoherentTriangle_1;
  Poly_CoherentTriangle_2: typeof Poly_CoherentTriangle_2;
  Poly_CoherentTriangulation: typeof Poly_CoherentTriangulation;
  Poly_CoherentTriangulation_1: typeof Poly_CoherentTriangulation_1;
  Poly_CoherentTriangulation_2: typeof Poly_CoherentTriangulation_2;
  Poly_Connect: typeof Poly_Connect;
  Poly_Connect_1: typeof Poly_Connect_1;
  Poly_Connect_2: typeof Poly_Connect_2;
  Poly_MakeLoops: typeof Poly_MakeLoops;
  Poly_MakeLoops2D: typeof Poly_MakeLoops2D;
  Poly_MakeLoops3D: typeof Poly_MakeLoops3D;
  Poly_Polygon2D: typeof Poly_Polygon2D;
  Poly_Polygon2D_1: typeof Poly_Polygon2D_1;
  Poly_Polygon2D_2: typeof Poly_Polygon2D_2;
  Poly_Polygon3D: typeof Poly_Polygon3D;
  Poly_Polygon3D_1: typeof Poly_Polygon3D_1;
  Poly_Polygon3D_2: typeof Poly_Polygon3D_2;
  Poly_Polygon3D_3: typeof Poly_Polygon3D_3;
  Poly_PolygonOnTriangulation: typeof Poly_PolygonOnTriangulation;
  Poly_PolygonOnTriangulation_1: typeof Poly_PolygonOnTriangulation_1;
  Poly_PolygonOnTriangulation_2: typeof Poly_PolygonOnTriangulation_2;
  Poly_PolygonOnTriangulation_3: typeof Poly_PolygonOnTriangulation_3;
  Poly_Triangle: typeof Poly_Triangle;
  Poly_Triangle_1: typeof Poly_Triangle_1;
  Poly_Triangle_2: typeof Poly_Triangle_2;
  Poly_Triangulation: typeof Poly_Triangulation;
  Poly_Triangulation_1: typeof Poly_Triangulation_1;
  Poly_Triangulation_2: typeof Poly_Triangulation_2;
  Poly_Triangulation_3: typeof Poly_Triangulation_3;
  Poly_Triangulation_4: typeof Poly_Triangulation_4;
  Precision: typeof Precision;
  ProjLib: typeof ProjLib;
  ProjLib_CompProjectedCurve: typeof ProjLib_CompProjectedCurve;
  ProjLib_CompProjectedCurve_1: typeof ProjLib_CompProjectedCurve_1;
  ProjLib_CompProjectedCurve_2: typeof ProjLib_CompProjectedCurve_2;
  ProjLib_CompProjectedCurve_3: typeof ProjLib_CompProjectedCurve_3;
  ProjLib_ComputeApprox: typeof ProjLib_ComputeApprox;
  ProjLib_ComputeApprox_1: typeof ProjLib_ComputeApprox_1;
  ProjLib_ComputeApprox_2: typeof ProjLib_ComputeApprox_2;
  ProjLib_ComputeApproxOnPolarSurface: typeof ProjLib_ComputeApproxOnPolarSurface;
  ProjLib_ComputeApproxOnPolarSurface_1: typeof ProjLib_ComputeApproxOnPolarSurface_1;
  ProjLib_ComputeApproxOnPolarSurface_2: typeof ProjLib_ComputeApproxOnPolarSurface_2;
  ProjLib_ComputeApproxOnPolarSurface_3: typeof ProjLib_ComputeApproxOnPolarSurface_3;
  ProjLib_ComputeApproxOnPolarSurface_4: typeof ProjLib_ComputeApproxOnPolarSurface_4;
  ProjLib_Cone: typeof ProjLib_Cone;
  ProjLib_Cone_1: typeof ProjLib_Cone_1;
  ProjLib_Cone_2: typeof ProjLib_Cone_2;
  ProjLib_Cone_3: typeof ProjLib_Cone_3;
  ProjLib_Cone_4: typeof ProjLib_Cone_4;
  ProjLib_Cylinder: typeof ProjLib_Cylinder;
  ProjLib_Cylinder_1: typeof ProjLib_Cylinder_1;
  ProjLib_Cylinder_2: typeof ProjLib_Cylinder_2;
  ProjLib_Cylinder_3: typeof ProjLib_Cylinder_3;
  ProjLib_Cylinder_4: typeof ProjLib_Cylinder_4;
  ProjLib_Cylinder_5: typeof ProjLib_Cylinder_5;
  ProjLib_HCompProjectedCurve: typeof ProjLib_HCompProjectedCurve;
  ProjLib_HCompProjectedCurve_1: typeof ProjLib_HCompProjectedCurve_1;
  ProjLib_HCompProjectedCurve_2: typeof ProjLib_HCompProjectedCurve_2;
  ProjLib_HProjectedCurve: typeof ProjLib_HProjectedCurve;
  ProjLib_HProjectedCurve_1: typeof ProjLib_HProjectedCurve_1;
  ProjLib_HProjectedCurve_2: typeof ProjLib_HProjectedCurve_2;
  ProjLib_Plane: typeof ProjLib_Plane;
  ProjLib_Plane_1: typeof ProjLib_Plane_1;
  ProjLib_Plane_2: typeof ProjLib_Plane_2;
  ProjLib_Plane_3: typeof ProjLib_Plane_3;
  ProjLib_Plane_4: typeof ProjLib_Plane_4;
  ProjLib_Plane_5: typeof ProjLib_Plane_5;
  ProjLib_Plane_6: typeof ProjLib_Plane_6;
  ProjLib_Plane_7: typeof ProjLib_Plane_7;
  ProjLib_PrjFunc: typeof ProjLib_PrjFunc;
  ProjLib_PrjResolve: typeof ProjLib_PrjResolve;
  ProjLib_ProjectOnPlane: typeof ProjLib_ProjectOnPlane;
  ProjLib_ProjectOnPlane_1: typeof ProjLib_ProjectOnPlane_1;
  ProjLib_ProjectOnPlane_2: typeof ProjLib_ProjectOnPlane_2;
  ProjLib_ProjectOnPlane_3: typeof ProjLib_ProjectOnPlane_3;
  ProjLib_ProjectedCurve: typeof ProjLib_ProjectedCurve;
  ProjLib_ProjectedCurve_1: typeof ProjLib_ProjectedCurve_1;
  ProjLib_ProjectedCurve_2: typeof ProjLib_ProjectedCurve_2;
  ProjLib_ProjectedCurve_3: typeof ProjLib_ProjectedCurve_3;
  ProjLib_ProjectedCurve_4: typeof ProjLib_ProjectedCurve_4;
  ProjLib_Projector: typeof ProjLib_Projector;
  ProjLib_Sphere: typeof ProjLib_Sphere;
  ProjLib_Sphere_1: typeof ProjLib_Sphere_1;
  ProjLib_Sphere_2: typeof ProjLib_Sphere_2;
  ProjLib_Sphere_3: typeof ProjLib_Sphere_3;
  ProjLib_Torus: typeof ProjLib_Torus;
  ProjLib_Torus_1: typeof ProjLib_Torus_1;
  ProjLib_Torus_2: typeof ProjLib_Torus_2;
  ProjLib_Torus_3: typeof ProjLib_Torus_3;
  Prs3d: typeof Prs3d;
  Prs3d_Arrow: typeof Prs3d_Arrow;
  Prs3d_ArrowAspect: typeof Prs3d_ArrowAspect;
  Prs3d_ArrowAspect_1: typeof Prs3d_ArrowAspect_1;
  Prs3d_ArrowAspect_2: typeof Prs3d_ArrowAspect_2;
  Prs3d_ArrowAspect_3: typeof Prs3d_ArrowAspect_3;
  Prs3d_BasicAspect: typeof Prs3d_BasicAspect;
  Prs3d_DatumAspect: typeof Prs3d_DatumAspect;
  Prs3d_DimensionAspect: typeof Prs3d_DimensionAspect;
  Prs3d_DimensionUnits: typeof Prs3d_DimensionUnits;
  Prs3d_DimensionUnits_1: typeof Prs3d_DimensionUnits_1;
  Prs3d_DimensionUnits_2: typeof Prs3d_DimensionUnits_2;
  Prs3d_Drawer: typeof Prs3d_Drawer;
  Prs3d_InvalidAngle: typeof Prs3d_InvalidAngle;
  Prs3d_InvalidAngle_1: typeof Prs3d_InvalidAngle_1;
  Prs3d_InvalidAngle_2: typeof Prs3d_InvalidAngle_2;
  Prs3d_IsoAspect: typeof Prs3d_IsoAspect;
  Prs3d_LineAspect: typeof Prs3d_LineAspect;
  Prs3d_LineAspect_1: typeof Prs3d_LineAspect_1;
  Prs3d_LineAspect_2: typeof Prs3d_LineAspect_2;
  Prs3d_PlaneAspect: typeof Prs3d_PlaneAspect;
  Prs3d_PointAspect: typeof Prs3d_PointAspect;
  Prs3d_PointAspect_1: typeof Prs3d_PointAspect_1;
  Prs3d_PointAspect_2: typeof Prs3d_PointAspect_2;
  Prs3d_PointAspect_3: typeof Prs3d_PointAspect_3;
  Prs3d_PresentationShadow: typeof Prs3d_PresentationShadow;
  Prs3d_Projector: typeof Prs3d_Projector;
  Prs3d_Projector_1: typeof Prs3d_Projector_1;
  Prs3d_Projector_2: typeof Prs3d_Projector_2;
  Prs3d_Root: typeof Prs3d_Root;
  Prs3d_ShadingAspect: typeof Prs3d_ShadingAspect;
  Prs3d_ShadingAspect_1: typeof Prs3d_ShadingAspect_1;
  Prs3d_ShadingAspect_2: typeof Prs3d_ShadingAspect_2;
  Prs3d_ShapeTool: typeof Prs3d_ShapeTool;
  Prs3d_Text: typeof Prs3d_Text;
  Prs3d_TextAspect: typeof Prs3d_TextAspect;
  Prs3d_TextAspect_1: typeof Prs3d_TextAspect_1;
  Prs3d_TextAspect_2: typeof Prs3d_TextAspect_2;
  Prs3d_ToolCylinder: typeof Prs3d_ToolCylinder;
  Prs3d_ToolDisk: typeof Prs3d_ToolDisk;
  Prs3d_ToolSector: typeof Prs3d_ToolSector;
  Prs3d_ToolSphere: typeof Prs3d_ToolSphere;
  PrsMgr_PresentableObject: typeof PrsMgr_PresentableObject;
  PrsMgr_Presentation: typeof PrsMgr_Presentation;
  PrsMgr_PresentationManager: typeof PrsMgr_PresentationManager;
  Quantity_Color: typeof Quantity_Color;
  Quantity_Color_1: typeof Quantity_Color_1;
  Quantity_Color_2: typeof Quantity_Color_2;
  Quantity_Color_3: typeof Quantity_Color_3;
  Quantity_Color_4: typeof Quantity_Color_4;
  Quantity_ColorRGBA: typeof Quantity_ColorRGBA;
  Quantity_ColorRGBA_1: typeof Quantity_ColorRGBA_1;
  Quantity_ColorRGBA_2: typeof Quantity_ColorRGBA_2;
  Quantity_ColorRGBA_3: typeof Quantity_ColorRGBA_3;
  Quantity_ColorRGBA_4: typeof Quantity_ColorRGBA_4;
  Quantity_ColorRGBA_5: typeof Quantity_ColorRGBA_5;
  Quantity_Date: typeof Quantity_Date;
  Quantity_Date_1: typeof Quantity_Date_1;
  Quantity_Date_2: typeof Quantity_Date_2;
  Quantity_DateDefinitionError: typeof Quantity_DateDefinitionError;
  Quantity_DateDefinitionError_1: typeof Quantity_DateDefinitionError_1;
  Quantity_DateDefinitionError_2: typeof Quantity_DateDefinitionError_2;
  Quantity_Period: typeof Quantity_Period;
  Quantity_Period_1: typeof Quantity_Period_1;
  Quantity_Period_2: typeof Quantity_Period_2;
  Quantity_PeriodDefinitionError: typeof Quantity_PeriodDefinitionError;
  Quantity_PeriodDefinitionError_1: typeof Quantity_PeriodDefinitionError_1;
  Quantity_PeriodDefinitionError_2: typeof Quantity_PeriodDefinitionError_2;
  RWGltf_CafReader: typeof RWGltf_CafReader;
  RWGltf_CafWriter: typeof RWGltf_CafWriter;
  RWGltf_GltfLatePrimitiveArray: typeof RWGltf_GltfLatePrimitiveArray;
  RWGltf_GltfMaterialMap: typeof RWGltf_GltfMaterialMap;
  RWGltf_GltfOStreamWriter: typeof RWGltf_GltfOStreamWriter;
  RWGltf_GltfPrimArrayData: typeof RWGltf_GltfPrimArrayData;
  RWGltf_GltfPrimArrayData_1: typeof RWGltf_GltfPrimArrayData_1;
  RWGltf_GltfPrimArrayData_2: typeof RWGltf_GltfPrimArrayData_2;
  RWGltf_GltfSceneNodeMap: typeof RWGltf_GltfSceneNodeMap;
  RWGltf_MaterialCommon: typeof RWGltf_MaterialCommon;
  RWGltf_MaterialMetallicRoughness: typeof RWGltf_MaterialMetallicRoughness;
  RWGltf_PrimitiveArrayReader: typeof RWGltf_PrimitiveArrayReader;
  RWGltf_TriangulationReader: typeof RWGltf_TriangulationReader;
  RWHeaderSection: typeof RWHeaderSection;
  RWHeaderSection_RWFileDescription: typeof RWHeaderSection_RWFileDescription;
  RWHeaderSection_RWFileName: typeof RWHeaderSection_RWFileName;
  RWHeaderSection_RWFileSchema: typeof RWHeaderSection_RWFileSchema;
  RWHeaderSection_ReadWriteModule: typeof RWHeaderSection_ReadWriteModule;
  RWMesh_CafReader: typeof RWMesh_CafReader;
  RWMesh_CoordinateSystemConverter: typeof RWMesh_CoordinateSystemConverter;
  RWMesh_FaceIterator: typeof RWMesh_FaceIterator;
  RWMesh_MaterialMap: typeof RWMesh_MaterialMap;
  RWObj: typeof RWObj;
  RWObj_CafReader: typeof RWObj_CafReader;
  RWObj_IShapeReceiver: typeof RWObj_IShapeReceiver;
  RWObj_MtlReader: typeof RWObj_MtlReader;
  RWObj_Reader: typeof RWObj_Reader;
  RWObj_TriangulationReader: typeof RWObj_TriangulationReader;
  RWStepAP203_RWCcDesignApproval: typeof RWStepAP203_RWCcDesignApproval;
  RWStepAP203_RWCcDesignCertification: typeof RWStepAP203_RWCcDesignCertification;
  RWStepAP203_RWCcDesignContract: typeof RWStepAP203_RWCcDesignContract;
  RWStepAP203_RWCcDesignDateAndTimeAssignment: typeof RWStepAP203_RWCcDesignDateAndTimeAssignment;
  RWStepAP203_RWCcDesignPersonAndOrganizationAssignment: typeof RWStepAP203_RWCcDesignPersonAndOrganizationAssignment;
  RWStepAP203_RWCcDesignSecurityClassification: typeof RWStepAP203_RWCcDesignSecurityClassification;
  RWStepAP203_RWCcDesignSpecificationReference: typeof RWStepAP203_RWCcDesignSpecificationReference;
  RWStepAP203_RWChange: typeof RWStepAP203_RWChange;
  RWStepAP203_RWChangeRequest: typeof RWStepAP203_RWChangeRequest;
  RWStepAP203_RWStartRequest: typeof RWStepAP203_RWStartRequest;
  RWStepAP203_RWStartWork: typeof RWStepAP203_RWStartWork;
  RWStepAP214: typeof RWStepAP214;
  RWStepAP214_RWAppliedApprovalAssignment: typeof RWStepAP214_RWAppliedApprovalAssignment;
  RWStepAP214_RWAppliedDateAndTimeAssignment: typeof RWStepAP214_RWAppliedDateAndTimeAssignment;
  RWStepAP214_RWAppliedDateAssignment: typeof RWStepAP214_RWAppliedDateAssignment;
  RWStepAP214_RWAppliedDocumentReference: typeof RWStepAP214_RWAppliedDocumentReference;
  RWStepAP214_RWAppliedExternalIdentificationAssignment: typeof RWStepAP214_RWAppliedExternalIdentificationAssignment;
  RWStepAP214_RWAppliedGroupAssignment: typeof RWStepAP214_RWAppliedGroupAssignment;
  RWStepAP214_RWAppliedOrganizationAssignment: typeof RWStepAP214_RWAppliedOrganizationAssignment;
  RWStepAP214_RWAppliedPersonAndOrganizationAssignment: typeof RWStepAP214_RWAppliedPersonAndOrganizationAssignment;
  RWStepAP214_RWAppliedPresentedItem: typeof RWStepAP214_RWAppliedPresentedItem;
  RWStepAP214_RWAppliedSecurityClassificationAssignment: typeof RWStepAP214_RWAppliedSecurityClassificationAssignment;
  RWStepAP214_RWAutoDesignActualDateAndTimeAssignment: typeof RWStepAP214_RWAutoDesignActualDateAndTimeAssignment;
  RWStepAP214_RWAutoDesignActualDateAssignment: typeof RWStepAP214_RWAutoDesignActualDateAssignment;
  RWStepAP214_RWAutoDesignApprovalAssignment: typeof RWStepAP214_RWAutoDesignApprovalAssignment;
  RWStepAP214_RWAutoDesignDateAndPersonAssignment: typeof RWStepAP214_RWAutoDesignDateAndPersonAssignment;
  RWStepAP214_RWAutoDesignDocumentReference: typeof RWStepAP214_RWAutoDesignDocumentReference;
  RWStepAP214_RWAutoDesignGroupAssignment: typeof RWStepAP214_RWAutoDesignGroupAssignment;
  RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment: typeof RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment;
  RWStepAP214_RWAutoDesignNominalDateAssignment: typeof RWStepAP214_RWAutoDesignNominalDateAssignment;
  RWStepAP214_RWAutoDesignOrganizationAssignment: typeof RWStepAP214_RWAutoDesignOrganizationAssignment;
  RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment: typeof RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment;
  RWStepAP214_RWAutoDesignPresentedItem: typeof RWStepAP214_RWAutoDesignPresentedItem;
  RWStepAP214_RWAutoDesignSecurityClassificationAssignment: typeof RWStepAP214_RWAutoDesignSecurityClassificationAssignment;
  RWStepAP214_RWClass: typeof RWStepAP214_RWClass;
  RWStepAP214_RWExternallyDefinedClass: typeof RWStepAP214_RWExternallyDefinedClass;
  RWStepAP214_RWExternallyDefinedGeneralProperty: typeof RWStepAP214_RWExternallyDefinedGeneralProperty;
  RWStepAP214_RWRepItemGroup: typeof RWStepAP214_RWRepItemGroup;
  RWStepAP214_ReadWriteModule: typeof RWStepAP214_ReadWriteModule;
  RWStepAP242_RWDraughtingModelItemAssociation: typeof RWStepAP242_RWDraughtingModelItemAssociation;
  RWStepAP242_RWGeometricItemSpecificUsage: typeof RWStepAP242_RWGeometricItemSpecificUsage;
  RWStepAP242_RWIdAttribute: typeof RWStepAP242_RWIdAttribute;
  RWStepAP242_RWItemIdentifiedRepresentationUsage: typeof RWStepAP242_RWItemIdentifiedRepresentationUsage;
  RWStepBasic_RWAction: typeof RWStepBasic_RWAction;
  RWStepBasic_RWActionAssignment: typeof RWStepBasic_RWActionAssignment;
  RWStepBasic_RWActionMethod: typeof RWStepBasic_RWActionMethod;
  RWStepBasic_RWActionRequestAssignment: typeof RWStepBasic_RWActionRequestAssignment;
  RWStepBasic_RWActionRequestSolution: typeof RWStepBasic_RWActionRequestSolution;
  RWStepBasic_RWAddress: typeof RWStepBasic_RWAddress;
  RWStepBasic_RWApplicationContext: typeof RWStepBasic_RWApplicationContext;
  RWStepBasic_RWApplicationContextElement: typeof RWStepBasic_RWApplicationContextElement;
  RWStepBasic_RWApplicationProtocolDefinition: typeof RWStepBasic_RWApplicationProtocolDefinition;
  RWStepBasic_RWApproval: typeof RWStepBasic_RWApproval;
  RWStepBasic_RWApprovalDateTime: typeof RWStepBasic_RWApprovalDateTime;
  RWStepBasic_RWApprovalPersonOrganization: typeof RWStepBasic_RWApprovalPersonOrganization;
  RWStepBasic_RWApprovalRelationship: typeof RWStepBasic_RWApprovalRelationship;
  RWStepBasic_RWApprovalRole: typeof RWStepBasic_RWApprovalRole;
  RWStepBasic_RWApprovalStatus: typeof RWStepBasic_RWApprovalStatus;
  RWStepBasic_RWCalendarDate: typeof RWStepBasic_RWCalendarDate;
  RWStepBasic_RWCertification: typeof RWStepBasic_RWCertification;
  RWStepBasic_RWCertificationAssignment: typeof RWStepBasic_RWCertificationAssignment;
  RWStepBasic_RWCertificationType: typeof RWStepBasic_RWCertificationType;
  RWStepBasic_RWCharacterizedObject: typeof RWStepBasic_RWCharacterizedObject;
  RWStepBasic_RWContract: typeof RWStepBasic_RWContract;
  RWStepBasic_RWContractAssignment: typeof RWStepBasic_RWContractAssignment;
  RWStepBasic_RWContractType: typeof RWStepBasic_RWContractType;
  RWStepBasic_RWConversionBasedUnit: typeof RWStepBasic_RWConversionBasedUnit;
  RWStepBasic_RWConversionBasedUnitAndAreaUnit: typeof RWStepBasic_RWConversionBasedUnitAndAreaUnit;
  RWStepBasic_RWConversionBasedUnitAndLengthUnit: typeof RWStepBasic_RWConversionBasedUnitAndLengthUnit;
  RWStepBasic_RWConversionBasedUnitAndMassUnit: typeof RWStepBasic_RWConversionBasedUnitAndMassUnit;
  RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit: typeof RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit;
  RWStepBasic_RWConversionBasedUnitAndRatioUnit: typeof RWStepBasic_RWConversionBasedUnitAndRatioUnit;
  RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit: typeof RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit;
  RWStepBasic_RWConversionBasedUnitAndTimeUnit: typeof RWStepBasic_RWConversionBasedUnitAndTimeUnit;
  RWStepBasic_RWConversionBasedUnitAndVolumeUnit: typeof RWStepBasic_RWConversionBasedUnitAndVolumeUnit;
  RWStepBasic_RWCoordinatedUniversalTimeOffset: typeof RWStepBasic_RWCoordinatedUniversalTimeOffset;
  RWStepBasic_RWDate: typeof RWStepBasic_RWDate;
  RWStepBasic_RWDateAndTime: typeof RWStepBasic_RWDateAndTime;
  RWStepBasic_RWDateRole: typeof RWStepBasic_RWDateRole;
  RWStepBasic_RWDateTimeRole: typeof RWStepBasic_RWDateTimeRole;
  RWStepBasic_RWDerivedUnit: typeof RWStepBasic_RWDerivedUnit;
  RWStepBasic_RWDerivedUnitElement: typeof RWStepBasic_RWDerivedUnitElement;
  RWStepBasic_RWDimensionalExponents: typeof RWStepBasic_RWDimensionalExponents;
  RWStepBasic_RWDocument: typeof RWStepBasic_RWDocument;
  RWStepBasic_RWDocumentFile: typeof RWStepBasic_RWDocumentFile;
  RWStepBasic_RWDocumentProductAssociation: typeof RWStepBasic_RWDocumentProductAssociation;
  RWStepBasic_RWDocumentProductEquivalence: typeof RWStepBasic_RWDocumentProductEquivalence;
  RWStepBasic_RWDocumentRelationship: typeof RWStepBasic_RWDocumentRelationship;
  RWStepBasic_RWDocumentRepresentationType: typeof RWStepBasic_RWDocumentRepresentationType;
  RWStepBasic_RWDocumentType: typeof RWStepBasic_RWDocumentType;
  RWStepBasic_RWDocumentUsageConstraint: typeof RWStepBasic_RWDocumentUsageConstraint;
  RWStepBasic_RWEffectivity: typeof RWStepBasic_RWEffectivity;
  RWStepBasic_RWEffectivityAssignment: typeof RWStepBasic_RWEffectivityAssignment;
  RWStepBasic_RWEulerAngles: typeof RWStepBasic_RWEulerAngles;
  RWStepBasic_RWExternalIdentificationAssignment: typeof RWStepBasic_RWExternalIdentificationAssignment;
  RWStepBasic_RWExternalSource: typeof RWStepBasic_RWExternalSource;
  RWStepBasic_RWExternallyDefinedItem: typeof RWStepBasic_RWExternallyDefinedItem;
  RWStepBasic_RWGeneralProperty: typeof RWStepBasic_RWGeneralProperty;
  RWStepBasic_RWGroup: typeof RWStepBasic_RWGroup;
  RWStepBasic_RWGroupAssignment: typeof RWStepBasic_RWGroupAssignment;
  RWStepBasic_RWGroupRelationship: typeof RWStepBasic_RWGroupRelationship;
  RWStepBasic_RWIdentificationAssignment: typeof RWStepBasic_RWIdentificationAssignment;
  RWStepBasic_RWIdentificationRole: typeof RWStepBasic_RWIdentificationRole;
  RWStepBasic_RWLengthMeasureWithUnit: typeof RWStepBasic_RWLengthMeasureWithUnit;
  RWStepBasic_RWLengthUnit: typeof RWStepBasic_RWLengthUnit;
  RWStepBasic_RWLocalTime: typeof RWStepBasic_RWLocalTime;
  RWStepBasic_RWMassMeasureWithUnit: typeof RWStepBasic_RWMassMeasureWithUnit;
  RWStepBasic_RWMassUnit: typeof RWStepBasic_RWMassUnit;
  RWStepBasic_RWMeasureWithUnit: typeof RWStepBasic_RWMeasureWithUnit;
  RWStepBasic_RWMechanicalContext: typeof RWStepBasic_RWMechanicalContext;
  RWStepBasic_RWNameAssignment: typeof RWStepBasic_RWNameAssignment;
  RWStepBasic_RWNamedUnit: typeof RWStepBasic_RWNamedUnit;
  RWStepBasic_RWObjectRole: typeof RWStepBasic_RWObjectRole;
  RWStepBasic_RWOrdinalDate: typeof RWStepBasic_RWOrdinalDate;
  RWStepBasic_RWOrganization: typeof RWStepBasic_RWOrganization;
  RWStepBasic_RWOrganizationRole: typeof RWStepBasic_RWOrganizationRole;
  RWStepBasic_RWOrganizationalAddress: typeof RWStepBasic_RWOrganizationalAddress;
  RWStepBasic_RWPerson: typeof RWStepBasic_RWPerson;
  RWStepBasic_RWPersonAndOrganization: typeof RWStepBasic_RWPersonAndOrganization;
  RWStepBasic_RWPersonAndOrganizationRole: typeof RWStepBasic_RWPersonAndOrganizationRole;
  RWStepBasic_RWPersonalAddress: typeof RWStepBasic_RWPersonalAddress;
  RWStepBasic_RWPlaneAngleMeasureWithUnit: typeof RWStepBasic_RWPlaneAngleMeasureWithUnit;
  RWStepBasic_RWPlaneAngleUnit: typeof RWStepBasic_RWPlaneAngleUnit;
  RWStepBasic_RWProduct: typeof RWStepBasic_RWProduct;
  RWStepBasic_RWProductCategory: typeof RWStepBasic_RWProductCategory;
  RWStepBasic_RWProductCategoryRelationship: typeof RWStepBasic_RWProductCategoryRelationship;
  RWStepBasic_RWProductConceptContext: typeof RWStepBasic_RWProductConceptContext;
  RWStepBasic_RWProductContext: typeof RWStepBasic_RWProductContext;
  RWStepBasic_RWProductDefinition: typeof RWStepBasic_RWProductDefinition;
  RWStepBasic_RWProductDefinitionContext: typeof RWStepBasic_RWProductDefinitionContext;
  RWStepBasic_RWProductDefinitionEffectivity: typeof RWStepBasic_RWProductDefinitionEffectivity;
  RWStepBasic_RWProductDefinitionFormation: typeof RWStepBasic_RWProductDefinitionFormation;
  RWStepBasic_RWProductDefinitionFormationRelationship: typeof RWStepBasic_RWProductDefinitionFormationRelationship;
  RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource: typeof RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource;
  RWStepBasic_RWProductDefinitionReference: typeof RWStepBasic_RWProductDefinitionReference;
  RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation: typeof RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation;
  RWStepBasic_RWProductDefinitionRelationship: typeof RWStepBasic_RWProductDefinitionRelationship;
  RWStepBasic_RWProductDefinitionWithAssociatedDocuments: typeof RWStepBasic_RWProductDefinitionWithAssociatedDocuments;
  RWStepBasic_RWProductRelatedProductCategory: typeof RWStepBasic_RWProductRelatedProductCategory;
  RWStepBasic_RWProductType: typeof RWStepBasic_RWProductType;
  RWStepBasic_RWRatioMeasureWithUnit: typeof RWStepBasic_RWRatioMeasureWithUnit;
  RWStepBasic_RWRoleAssociation: typeof RWStepBasic_RWRoleAssociation;
  RWStepBasic_RWSecurityClassification: typeof RWStepBasic_RWSecurityClassification;
  RWStepBasic_RWSecurityClassificationLevel: typeof RWStepBasic_RWSecurityClassificationLevel;
  RWStepBasic_RWSiUnit: typeof RWStepBasic_RWSiUnit;
  RWStepBasic_RWSiUnitAndAreaUnit: typeof RWStepBasic_RWSiUnitAndAreaUnit;
  RWStepBasic_RWSiUnitAndLengthUnit: typeof RWStepBasic_RWSiUnitAndLengthUnit;
  RWStepBasic_RWSiUnitAndMassUnit: typeof RWStepBasic_RWSiUnitAndMassUnit;
  RWStepBasic_RWSiUnitAndPlaneAngleUnit: typeof RWStepBasic_RWSiUnitAndPlaneAngleUnit;
  RWStepBasic_RWSiUnitAndRatioUnit: typeof RWStepBasic_RWSiUnitAndRatioUnit;
  RWStepBasic_RWSiUnitAndSolidAngleUnit: typeof RWStepBasic_RWSiUnitAndSolidAngleUnit;
  RWStepBasic_RWSiUnitAndThermodynamicTemperatureUnit: typeof RWStepBasic_RWSiUnitAndThermodynamicTemperatureUnit;
  RWStepBasic_RWSiUnitAndTimeUnit: typeof RWStepBasic_RWSiUnitAndTimeUnit;
  RWStepBasic_RWSiUnitAndVolumeUnit: typeof RWStepBasic_RWSiUnitAndVolumeUnit;
  RWStepBasic_RWSolidAngleMeasureWithUnit: typeof RWStepBasic_RWSolidAngleMeasureWithUnit;
  RWStepBasic_RWSolidAngleUnit: typeof RWStepBasic_RWSolidAngleUnit;
  RWStepBasic_RWThermodynamicTemperatureUnit: typeof RWStepBasic_RWThermodynamicTemperatureUnit;
  RWStepBasic_RWUncertaintyMeasureWithUnit: typeof RWStepBasic_RWUncertaintyMeasureWithUnit;
  RWStepBasic_RWVersionedActionRequest: typeof RWStepBasic_RWVersionedActionRequest;
  RWStepBasic_RWWeekOfYearAndDayDate: typeof RWStepBasic_RWWeekOfYearAndDayDate;
  RWStepDimTol_RWAngularityTolerance: typeof RWStepDimTol_RWAngularityTolerance;
  RWStepDimTol_RWCircularRunoutTolerance: typeof RWStepDimTol_RWCircularRunoutTolerance;
  RWStepDimTol_RWCoaxialityTolerance: typeof RWStepDimTol_RWCoaxialityTolerance;
  RWStepDimTol_RWCommonDatum: typeof RWStepDimTol_RWCommonDatum;
  RWStepDimTol_RWConcentricityTolerance: typeof RWStepDimTol_RWConcentricityTolerance;
  RWStepDimTol_RWCylindricityTolerance: typeof RWStepDimTol_RWCylindricityTolerance;
  RWStepDimTol_RWDatum: typeof RWStepDimTol_RWDatum;
  RWStepDimTol_RWDatumFeature: typeof RWStepDimTol_RWDatumFeature;
  RWStepDimTol_RWDatumReference: typeof RWStepDimTol_RWDatumReference;
  RWStepDimTol_RWDatumReferenceCompartment: typeof RWStepDimTol_RWDatumReferenceCompartment;
  RWStepDimTol_RWDatumReferenceElement: typeof RWStepDimTol_RWDatumReferenceElement;
  RWStepDimTol_RWDatumReferenceModifierWithValue: typeof RWStepDimTol_RWDatumReferenceModifierWithValue;
  RWStepDimTol_RWDatumSystem: typeof RWStepDimTol_RWDatumSystem;
  RWStepDimTol_RWDatumTarget: typeof RWStepDimTol_RWDatumTarget;
  RWStepDimTol_RWFlatnessTolerance: typeof RWStepDimTol_RWFlatnessTolerance;
  RWStepDimTol_RWGeneralDatumReference: typeof RWStepDimTol_RWGeneralDatumReference;
  RWStepDimTol_RWGeoTolAndGeoTolWthDatRef: typeof RWStepDimTol_RWGeoTolAndGeoTolWthDatRef;
  RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol: typeof RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol;
  RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod: typeof RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod;
  RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol: typeof RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol;
  RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol: typeof RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol;
  RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol: typeof RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol;
  RWStepDimTol_RWGeoTolAndGeoTolWthMod: typeof RWStepDimTol_RWGeoTolAndGeoTolWthMod;
  RWStepDimTol_RWGeometricTolerance: typeof RWStepDimTol_RWGeometricTolerance;
  RWStepDimTol_RWGeometricToleranceRelationship: typeof RWStepDimTol_RWGeometricToleranceRelationship;
  RWStepDimTol_RWGeometricToleranceWithDatumReference: typeof RWStepDimTol_RWGeometricToleranceWithDatumReference;
  RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit: typeof RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit;
  RWStepDimTol_RWGeometricToleranceWithDefinedUnit: typeof RWStepDimTol_RWGeometricToleranceWithDefinedUnit;
  RWStepDimTol_RWGeometricToleranceWithMaximumTolerance: typeof RWStepDimTol_RWGeometricToleranceWithMaximumTolerance;
  RWStepDimTol_RWGeometricToleranceWithModifiers: typeof RWStepDimTol_RWGeometricToleranceWithModifiers;
  RWStepDimTol_RWLineProfileTolerance: typeof RWStepDimTol_RWLineProfileTolerance;
  RWStepDimTol_RWModifiedGeometricTolerance: typeof RWStepDimTol_RWModifiedGeometricTolerance;
  RWStepDimTol_RWNonUniformZoneDefinition: typeof RWStepDimTol_RWNonUniformZoneDefinition;
  RWStepDimTol_RWParallelismTolerance: typeof RWStepDimTol_RWParallelismTolerance;
  RWStepDimTol_RWPerpendicularityTolerance: typeof RWStepDimTol_RWPerpendicularityTolerance;
  RWStepDimTol_RWPlacedDatumTargetFeature: typeof RWStepDimTol_RWPlacedDatumTargetFeature;
  RWStepDimTol_RWPositionTolerance: typeof RWStepDimTol_RWPositionTolerance;
  RWStepDimTol_RWProjectedZoneDefinition: typeof RWStepDimTol_RWProjectedZoneDefinition;
  RWStepDimTol_RWRoundnessTolerance: typeof RWStepDimTol_RWRoundnessTolerance;
  RWStepDimTol_RWRunoutZoneDefinition: typeof RWStepDimTol_RWRunoutZoneDefinition;
  RWStepDimTol_RWRunoutZoneOrientation: typeof RWStepDimTol_RWRunoutZoneOrientation;
  RWStepDimTol_RWStraightnessTolerance: typeof RWStepDimTol_RWStraightnessTolerance;
  RWStepDimTol_RWSurfaceProfileTolerance: typeof RWStepDimTol_RWSurfaceProfileTolerance;
  RWStepDimTol_RWSymmetryTolerance: typeof RWStepDimTol_RWSymmetryTolerance;
  RWStepDimTol_RWToleranceZone: typeof RWStepDimTol_RWToleranceZone;
  RWStepDimTol_RWToleranceZoneDefinition: typeof RWStepDimTol_RWToleranceZoneDefinition;
  RWStepDimTol_RWToleranceZoneForm: typeof RWStepDimTol_RWToleranceZoneForm;
  RWStepDimTol_RWTotalRunoutTolerance: typeof RWStepDimTol_RWTotalRunoutTolerance;
  RWStepDimTol_RWUnequallyDisposedGeometricTolerance: typeof RWStepDimTol_RWUnequallyDisposedGeometricTolerance;
  RWStepElement_RWAnalysisItemWithinRepresentation: typeof RWStepElement_RWAnalysisItemWithinRepresentation;
  RWStepElement_RWCurve3dElementDescriptor: typeof RWStepElement_RWCurve3dElementDescriptor;
  RWStepElement_RWCurveElementEndReleasePacket: typeof RWStepElement_RWCurveElementEndReleasePacket;
  RWStepElement_RWCurveElementSectionDefinition: typeof RWStepElement_RWCurveElementSectionDefinition;
  RWStepElement_RWCurveElementSectionDerivedDefinitions: typeof RWStepElement_RWCurveElementSectionDerivedDefinitions;
  RWStepElement_RWElementDescriptor: typeof RWStepElement_RWElementDescriptor;
  RWStepElement_RWElementMaterial: typeof RWStepElement_RWElementMaterial;
  RWStepElement_RWSurface3dElementDescriptor: typeof RWStepElement_RWSurface3dElementDescriptor;
  RWStepElement_RWSurfaceElementProperty: typeof RWStepElement_RWSurfaceElementProperty;
  RWStepElement_RWSurfaceSection: typeof RWStepElement_RWSurfaceSection;
  RWStepElement_RWSurfaceSectionField: typeof RWStepElement_RWSurfaceSectionField;
  RWStepElement_RWSurfaceSectionFieldConstant: typeof RWStepElement_RWSurfaceSectionFieldConstant;
  RWStepElement_RWSurfaceSectionFieldVarying: typeof RWStepElement_RWSurfaceSectionFieldVarying;
  RWStepElement_RWUniformSurfaceSection: typeof RWStepElement_RWUniformSurfaceSection;
  RWStepElement_RWVolume3dElementDescriptor: typeof RWStepElement_RWVolume3dElementDescriptor;
  RWStepFEA_RWAlignedCurve3dElementCoordinateSystem: typeof RWStepFEA_RWAlignedCurve3dElementCoordinateSystem;
  RWStepFEA_RWAlignedSurface3dElementCoordinateSystem: typeof RWStepFEA_RWAlignedSurface3dElementCoordinateSystem;
  RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem: typeof RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem;
  RWStepFEA_RWConstantSurface3dElementCoordinateSystem: typeof RWStepFEA_RWConstantSurface3dElementCoordinateSystem;
  RWStepFEA_RWCurve3dElementProperty: typeof RWStepFEA_RWCurve3dElementProperty;
  RWStepFEA_RWCurve3dElementRepresentation: typeof RWStepFEA_RWCurve3dElementRepresentation;
  RWStepFEA_RWCurveElementEndOffset: typeof RWStepFEA_RWCurveElementEndOffset;
  RWStepFEA_RWCurveElementEndRelease: typeof RWStepFEA_RWCurveElementEndRelease;
  RWStepFEA_RWCurveElementInterval: typeof RWStepFEA_RWCurveElementInterval;
  RWStepFEA_RWCurveElementIntervalConstant: typeof RWStepFEA_RWCurveElementIntervalConstant;
  RWStepFEA_RWCurveElementIntervalLinearlyVarying: typeof RWStepFEA_RWCurveElementIntervalLinearlyVarying;
  RWStepFEA_RWCurveElementLocation: typeof RWStepFEA_RWCurveElementLocation;
  RWStepFEA_RWDummyNode: typeof RWStepFEA_RWDummyNode;
  RWStepFEA_RWElementGeometricRelationship: typeof RWStepFEA_RWElementGeometricRelationship;
  RWStepFEA_RWElementGroup: typeof RWStepFEA_RWElementGroup;
  RWStepFEA_RWElementRepresentation: typeof RWStepFEA_RWElementRepresentation;
  RWStepFEA_RWFeaAreaDensity: typeof RWStepFEA_RWFeaAreaDensity;
  RWStepFEA_RWFeaAxis2Placement3d: typeof RWStepFEA_RWFeaAxis2Placement3d;
  RWStepFEA_RWFeaCurveSectionGeometricRelationship: typeof RWStepFEA_RWFeaCurveSectionGeometricRelationship;
  RWStepFEA_RWFeaGroup: typeof RWStepFEA_RWFeaGroup;
  RWStepFEA_RWFeaLinearElasticity: typeof RWStepFEA_RWFeaLinearElasticity;
  RWStepFEA_RWFeaMassDensity: typeof RWStepFEA_RWFeaMassDensity;
  RWStepFEA_RWFeaMaterialPropertyRepresentation: typeof RWStepFEA_RWFeaMaterialPropertyRepresentation;
  RWStepFEA_RWFeaMaterialPropertyRepresentationItem: typeof RWStepFEA_RWFeaMaterialPropertyRepresentationItem;
  RWStepFEA_RWFeaModel: typeof RWStepFEA_RWFeaModel;
  RWStepFEA_RWFeaModel3d: typeof RWStepFEA_RWFeaModel3d;
  RWStepFEA_RWFeaModelDefinition: typeof RWStepFEA_RWFeaModelDefinition;
  RWStepFEA_RWFeaMoistureAbsorption: typeof RWStepFEA_RWFeaMoistureAbsorption;
  RWStepFEA_RWFeaParametricPoint: typeof RWStepFEA_RWFeaParametricPoint;
  RWStepFEA_RWFeaRepresentationItem: typeof RWStepFEA_RWFeaRepresentationItem;
  RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion: typeof RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion;
  RWStepFEA_RWFeaShellBendingStiffness: typeof RWStepFEA_RWFeaShellBendingStiffness;
  RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness: typeof RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness;
  RWStepFEA_RWFeaShellMembraneStiffness: typeof RWStepFEA_RWFeaShellMembraneStiffness;
  RWStepFEA_RWFeaShellShearStiffness: typeof RWStepFEA_RWFeaShellShearStiffness;
  RWStepFEA_RWFeaSurfaceSectionGeometricRelationship: typeof RWStepFEA_RWFeaSurfaceSectionGeometricRelationship;
  RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion: typeof RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion;
  RWStepFEA_RWFreedomAndCoefficient: typeof RWStepFEA_RWFreedomAndCoefficient;
  RWStepFEA_RWFreedomsList: typeof RWStepFEA_RWFreedomsList;
  RWStepFEA_RWGeometricNode: typeof RWStepFEA_RWGeometricNode;
  RWStepFEA_RWNode: typeof RWStepFEA_RWNode;
  RWStepFEA_RWNodeDefinition: typeof RWStepFEA_RWNodeDefinition;
  RWStepFEA_RWNodeGroup: typeof RWStepFEA_RWNodeGroup;
  RWStepFEA_RWNodeRepresentation: typeof RWStepFEA_RWNodeRepresentation;
  RWStepFEA_RWNodeSet: typeof RWStepFEA_RWNodeSet;
  RWStepFEA_RWNodeWithSolutionCoordinateSystem: typeof RWStepFEA_RWNodeWithSolutionCoordinateSystem;
  RWStepFEA_RWNodeWithVector: typeof RWStepFEA_RWNodeWithVector;
  RWStepFEA_RWParametricCurve3dElementCoordinateDirection: typeof RWStepFEA_RWParametricCurve3dElementCoordinateDirection;
  RWStepFEA_RWParametricCurve3dElementCoordinateSystem: typeof RWStepFEA_RWParametricCurve3dElementCoordinateSystem;
  RWStepFEA_RWParametricSurface3dElementCoordinateSystem: typeof RWStepFEA_RWParametricSurface3dElementCoordinateSystem;
  RWStepFEA_RWSurface3dElementRepresentation: typeof RWStepFEA_RWSurface3dElementRepresentation;
  RWStepFEA_RWVolume3dElementRepresentation: typeof RWStepFEA_RWVolume3dElementRepresentation;
  RWStepRepr_RWAllAroundShapeAspect: typeof RWStepRepr_RWAllAroundShapeAspect;
  RWStepRepr_RWApex: typeof RWStepRepr_RWApex;
  RWStepRepr_RWAssemblyComponentUsage: typeof RWStepRepr_RWAssemblyComponentUsage;
  RWStepRepr_RWAssemblyComponentUsageSubstitute: typeof RWStepRepr_RWAssemblyComponentUsageSubstitute;
  RWStepRepr_RWBetweenShapeAspect: typeof RWStepRepr_RWBetweenShapeAspect;
  RWStepRepr_RWCentreOfSymmetry: typeof RWStepRepr_RWCentreOfSymmetry;
  RWStepRepr_RWCharacterizedRepresentation: typeof RWStepRepr_RWCharacterizedRepresentation;
  RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp: typeof RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp;
  RWStepRepr_RWCompShAspAndDatumFeatAndShAsp: typeof RWStepRepr_RWCompShAspAndDatumFeatAndShAsp;
  RWStepRepr_RWCompositeGroupShapeAspect: typeof RWStepRepr_RWCompositeGroupShapeAspect;
  RWStepRepr_RWCompositeShapeAspect: typeof RWStepRepr_RWCompositeShapeAspect;
  RWStepRepr_RWCompoundRepresentationItem: typeof RWStepRepr_RWCompoundRepresentationItem;
  RWStepRepr_RWConfigurationDesign: typeof RWStepRepr_RWConfigurationDesign;
  RWStepRepr_RWConfigurationEffectivity: typeof RWStepRepr_RWConfigurationEffectivity;
  RWStepRepr_RWConfigurationItem: typeof RWStepRepr_RWConfigurationItem;
  RWStepRepr_RWConstructiveGeometryRepresentation: typeof RWStepRepr_RWConstructiveGeometryRepresentation;
  RWStepRepr_RWConstructiveGeometryRepresentationRelationship: typeof RWStepRepr_RWConstructiveGeometryRepresentationRelationship;
  RWStepRepr_RWContinuosShapeAspect: typeof RWStepRepr_RWContinuosShapeAspect;
  RWStepRepr_RWDataEnvironment: typeof RWStepRepr_RWDataEnvironment;
  RWStepRepr_RWDefinitionalRepresentation: typeof RWStepRepr_RWDefinitionalRepresentation;
  RWStepRepr_RWDerivedShapeAspect: typeof RWStepRepr_RWDerivedShapeAspect;
  RWStepRepr_RWDescriptiveRepresentationItem: typeof RWStepRepr_RWDescriptiveRepresentationItem;
  RWStepRepr_RWExtension: typeof RWStepRepr_RWExtension;
  RWStepRepr_RWFeatureForDatumTargetRelationship: typeof RWStepRepr_RWFeatureForDatumTargetRelationship;
  RWStepRepr_RWFunctionallyDefinedTransformation: typeof RWStepRepr_RWFunctionallyDefinedTransformation;
  RWStepRepr_RWGeometricAlignment: typeof RWStepRepr_RWGeometricAlignment;
  RWStepRepr_RWGlobalUncertaintyAssignedContext: typeof RWStepRepr_RWGlobalUncertaintyAssignedContext;
  RWStepRepr_RWGlobalUnitAssignedContext: typeof RWStepRepr_RWGlobalUnitAssignedContext;
  RWStepRepr_RWIntegerRepresentationItem: typeof RWStepRepr_RWIntegerRepresentationItem;
  RWStepRepr_RWItemDefinedTransformation: typeof RWStepRepr_RWItemDefinedTransformation;
  RWStepRepr_RWMakeFromUsageOption: typeof RWStepRepr_RWMakeFromUsageOption;
  RWStepRepr_RWMappedItem: typeof RWStepRepr_RWMappedItem;
  RWStepRepr_RWMaterialDesignation: typeof RWStepRepr_RWMaterialDesignation;
  RWStepRepr_RWMaterialProperty: typeof RWStepRepr_RWMaterialProperty;
  RWStepRepr_RWMaterialPropertyRepresentation: typeof RWStepRepr_RWMaterialPropertyRepresentation;
  RWStepRepr_RWMeasureRepresentationItem: typeof RWStepRepr_RWMeasureRepresentationItem;
  RWStepRepr_RWParallelOffset: typeof RWStepRepr_RWParallelOffset;
  RWStepRepr_RWParametricRepresentationContext: typeof RWStepRepr_RWParametricRepresentationContext;
  RWStepRepr_RWPerpendicularTo: typeof RWStepRepr_RWPerpendicularTo;
  RWStepRepr_RWProductConcept: typeof RWStepRepr_RWProductConcept;
  RWStepRepr_RWProductDefinitionShape: typeof RWStepRepr_RWProductDefinitionShape;
  RWStepRepr_RWPropertyDefinition: typeof RWStepRepr_RWPropertyDefinition;
  RWStepRepr_RWPropertyDefinitionRelationship: typeof RWStepRepr_RWPropertyDefinitionRelationship;
  RWStepRepr_RWPropertyDefinitionRepresentation: typeof RWStepRepr_RWPropertyDefinitionRepresentation;
  RWStepRepr_RWQuantifiedAssemblyComponentUsage: typeof RWStepRepr_RWQuantifiedAssemblyComponentUsage;
  RWStepRepr_RWReprItemAndLengthMeasureWithUnit: typeof RWStepRepr_RWReprItemAndLengthMeasureWithUnit;
  RWStepRepr_RWReprItemAndLengthMeasureWithUnitAndQRI: typeof RWStepRepr_RWReprItemAndLengthMeasureWithUnitAndQRI;
  RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnit: typeof RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnit;
  RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnitAndQRI: typeof RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnitAndQRI;
  RWStepRepr_RWRepresentation: typeof RWStepRepr_RWRepresentation;
  RWStepRepr_RWRepresentationContext: typeof RWStepRepr_RWRepresentationContext;
  RWStepRepr_RWRepresentationItem: typeof RWStepRepr_RWRepresentationItem;
  RWStepRepr_RWRepresentationMap: typeof RWStepRepr_RWRepresentationMap;
  RWStepRepr_RWRepresentationRelationship: typeof RWStepRepr_RWRepresentationRelationship;
  RWStepRepr_RWRepresentationRelationshipWithTransformation: typeof RWStepRepr_RWRepresentationRelationshipWithTransformation;
  RWStepRepr_RWShapeAspect: typeof RWStepRepr_RWShapeAspect;
  RWStepRepr_RWShapeAspectDerivingRelationship: typeof RWStepRepr_RWShapeAspectDerivingRelationship;
  RWStepRepr_RWShapeAspectRelationship: typeof RWStepRepr_RWShapeAspectRelationship;
  RWStepRepr_RWShapeAspectTransition: typeof RWStepRepr_RWShapeAspectTransition;
  RWStepRepr_RWShapeRepresentationRelationshipWithTransformation: typeof RWStepRepr_RWShapeRepresentationRelationshipWithTransformation;
  RWStepRepr_RWSpecifiedHigherUsageOccurrence: typeof RWStepRepr_RWSpecifiedHigherUsageOccurrence;
  RWStepRepr_RWStructuralResponseProperty: typeof RWStepRepr_RWStructuralResponseProperty;
  RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation: typeof RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation;
  RWStepRepr_RWTangent: typeof RWStepRepr_RWTangent;
  RWStepRepr_RWValueRepresentationItem: typeof RWStepRepr_RWValueRepresentationItem;
  RWStepShape_RWAdvancedBrepShapeRepresentation: typeof RWStepShape_RWAdvancedBrepShapeRepresentation;
  RWStepShape_RWAdvancedFace: typeof RWStepShape_RWAdvancedFace;
  RWStepShape_RWAngularLocation: typeof RWStepShape_RWAngularLocation;
  RWStepShape_RWAngularSize: typeof RWStepShape_RWAngularSize;
  RWStepShape_RWBlock: typeof RWStepShape_RWBlock;
  RWStepShape_RWBooleanResult: typeof RWStepShape_RWBooleanResult;
  RWStepShape_RWBoxDomain: typeof RWStepShape_RWBoxDomain;
  RWStepShape_RWBoxedHalfSpace: typeof RWStepShape_RWBoxedHalfSpace;
  RWStepShape_RWClosedShell: typeof RWStepShape_RWClosedShell;
  RWStepShape_RWCompoundShapeRepresentation: typeof RWStepShape_RWCompoundShapeRepresentation;
  RWStepShape_RWConnectedEdgeSet: typeof RWStepShape_RWConnectedEdgeSet;
  RWStepShape_RWConnectedFaceSet: typeof RWStepShape_RWConnectedFaceSet;
  RWStepShape_RWConnectedFaceShapeRepresentation: typeof RWStepShape_RWConnectedFaceShapeRepresentation;
  RWStepShape_RWConnectedFaceSubSet: typeof RWStepShape_RWConnectedFaceSubSet;
  RWStepShape_RWContextDependentShapeRepresentation: typeof RWStepShape_RWContextDependentShapeRepresentation;
  RWStepShape_RWCsgShapeRepresentation: typeof RWStepShape_RWCsgShapeRepresentation;
  RWStepShape_RWCsgSolid: typeof RWStepShape_RWCsgSolid;
  RWStepShape_RWDefinitionalRepresentationAndShapeRepresentation: typeof RWStepShape_RWDefinitionalRepresentationAndShapeRepresentation;
  RWStepShape_RWDimensionalCharacteristicRepresentation: typeof RWStepShape_RWDimensionalCharacteristicRepresentation;
  RWStepShape_RWDimensionalLocation: typeof RWStepShape_RWDimensionalLocation;
  RWStepShape_RWDimensionalLocationWithPath: typeof RWStepShape_RWDimensionalLocationWithPath;
  RWStepShape_RWDimensionalSize: typeof RWStepShape_RWDimensionalSize;
  RWStepShape_RWDimensionalSizeWithPath: typeof RWStepShape_RWDimensionalSizeWithPath;
  RWStepShape_RWEdge: typeof RWStepShape_RWEdge;
  RWStepShape_RWEdgeBasedWireframeModel: typeof RWStepShape_RWEdgeBasedWireframeModel;
  RWStepShape_RWEdgeBasedWireframeShapeRepresentation: typeof RWStepShape_RWEdgeBasedWireframeShapeRepresentation;
  RWStepShape_RWExtrudedAreaSolid: typeof RWStepShape_RWExtrudedAreaSolid;
  RWStepShape_RWExtrudedFaceSolid: typeof RWStepShape_RWExtrudedFaceSolid;
  RWStepShape_RWFace: typeof RWStepShape_RWFace;
  RWStepShape_RWFaceBasedSurfaceModel: typeof RWStepShape_RWFaceBasedSurfaceModel;
  RWStepShape_RWFaceOuterBound: typeof RWStepShape_RWFaceOuterBound;
  RWStepShape_RWFaceSurface: typeof RWStepShape_RWFaceSurface;
  RWStepShape_RWFacetedBrep: typeof RWStepShape_RWFacetedBrep;
  RWStepShape_RWFacetedBrepAndBrepWithVoids: typeof RWStepShape_RWFacetedBrepAndBrepWithVoids;
  RWStepShape_RWFacetedBrepShapeRepresentation: typeof RWStepShape_RWFacetedBrepShapeRepresentation;
  RWStepShape_RWGeometricCurveSet: typeof RWStepShape_RWGeometricCurveSet;
  RWStepShape_RWGeometricSet: typeof RWStepShape_RWGeometricSet;
  RWStepShape_RWGeometricallyBoundedSurfaceShapeRepresentation: typeof RWStepShape_RWGeometricallyBoundedSurfaceShapeRepresentation;
  RWStepShape_RWGeometricallyBoundedWireframeShapeRepresentation: typeof RWStepShape_RWGeometricallyBoundedWireframeShapeRepresentation;
  RWStepShape_RWHalfSpaceSolid: typeof RWStepShape_RWHalfSpaceSolid;
  RWStepShape_RWLimitsAndFits: typeof RWStepShape_RWLimitsAndFits;
  RWStepShape_RWLoop: typeof RWStepShape_RWLoop;
  RWStepShape_RWLoopAndPath: typeof RWStepShape_RWLoopAndPath;
  RWStepShape_RWManifoldSolidBrep: typeof RWStepShape_RWManifoldSolidBrep;
  RWStepShape_RWManifoldSurfaceShapeRepresentation: typeof RWStepShape_RWManifoldSurfaceShapeRepresentation;
  RWStepShape_RWMeasureQualification: typeof RWStepShape_RWMeasureQualification;
  RWStepShape_RWMeasureRepresentationItemAndQualifiedRepresentationItem: typeof RWStepShape_RWMeasureRepresentationItemAndQualifiedRepresentationItem;
  RWStepShape_RWNonManifoldSurfaceShapeRepresentation: typeof RWStepShape_RWNonManifoldSurfaceShapeRepresentation;
  RWStepShape_RWOpenShell: typeof RWStepShape_RWOpenShell;
  RWStepShape_RWOrientedClosedShell: typeof RWStepShape_RWOrientedClosedShell;
  RWStepShape_RWOrientedEdge: typeof RWStepShape_RWOrientedEdge;
  RWStepShape_RWOrientedFace: typeof RWStepShape_RWOrientedFace;
  RWStepShape_RWOrientedOpenShell: typeof RWStepShape_RWOrientedOpenShell;
  RWStepShape_RWOrientedPath: typeof RWStepShape_RWOrientedPath;
  RWStepShape_RWPath: typeof RWStepShape_RWPath;
  RWStepShape_RWPlusMinusTolerance: typeof RWStepShape_RWPlusMinusTolerance;
  RWStepShape_RWPointRepresentation: typeof RWStepShape_RWPointRepresentation;
  RWStepShape_RWPolyLoop: typeof RWStepShape_RWPolyLoop;
  RWStepShape_RWPrecisionQualifier: typeof RWStepShape_RWPrecisionQualifier;
  RWStepShape_RWQualifiedRepresentationItem: typeof RWStepShape_RWQualifiedRepresentationItem;
  RWStepShape_RWRevolvedAreaSolid: typeof RWStepShape_RWRevolvedAreaSolid;
  RWStepShape_RWRevolvedFaceSolid: typeof RWStepShape_RWRevolvedFaceSolid;
  RWStepShape_RWRightAngularWedge: typeof RWStepShape_RWRightAngularWedge;
  RWStepShape_RWRightCircularCone: typeof RWStepShape_RWRightCircularCone;
  RWStepShape_RWRightCircularCylinder: typeof RWStepShape_RWRightCircularCylinder;
  RWStepShape_RWSeamEdge: typeof RWStepShape_RWSeamEdge;
  RWStepShape_RWShapeDefinitionRepresentation: typeof RWStepShape_RWShapeDefinitionRepresentation;
  RWStepShape_RWShapeDimensionRepresentation: typeof RWStepShape_RWShapeDimensionRepresentation;
  RWStepShape_RWShapeRepresentation: typeof RWStepShape_RWShapeRepresentation;
  RWStepShape_RWShapeRepresentationWithParameters: typeof RWStepShape_RWShapeRepresentationWithParameters;
  RWStepShape_RWShellBasedSurfaceModel: typeof RWStepShape_RWShellBasedSurfaceModel;
  RWStepShape_RWSolidModel: typeof RWStepShape_RWSolidModel;
  RWStepShape_RWSolidReplica: typeof RWStepShape_RWSolidReplica;
  RWStepShape_RWSphere: typeof RWStepShape_RWSphere;
  RWStepShape_RWSubedge: typeof RWStepShape_RWSubedge;
  RWStepShape_RWSubface: typeof RWStepShape_RWSubface;
  RWStepShape_RWSweptAreaSolid: typeof RWStepShape_RWSweptAreaSolid;
  RWStepShape_RWSweptFaceSolid: typeof RWStepShape_RWSweptFaceSolid;
  RWStepShape_RWToleranceValue: typeof RWStepShape_RWToleranceValue;
  RWStepShape_RWTopologicalRepresentationItem: typeof RWStepShape_RWTopologicalRepresentationItem;
  RWStepShape_RWTorus: typeof RWStepShape_RWTorus;
  RWStepShape_RWTransitionalShapeRepresentation: typeof RWStepShape_RWTransitionalShapeRepresentation;
  RWStepShape_RWTypeQualifier: typeof RWStepShape_RWTypeQualifier;
  RWStepShape_RWValueFormatTypeQualifier: typeof RWStepShape_RWValueFormatTypeQualifier;
  RWStepShape_RWVertex: typeof RWStepShape_RWVertex;
  RWStepShape_RWVertexLoop: typeof RWStepShape_RWVertexLoop;
  RWStepShape_RWVertexPoint: typeof RWStepShape_RWVertexPoint;
  RWStepVisual_RWAnnotationCurveOccurrence: typeof RWStepVisual_RWAnnotationCurveOccurrence;
  RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem: typeof RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem;
  RWStepVisual_RWAnnotationFillArea: typeof RWStepVisual_RWAnnotationFillArea;
  RWStepVisual_RWAnnotationFillAreaOccurrence: typeof RWStepVisual_RWAnnotationFillAreaOccurrence;
  RWStepVisual_RWAnnotationOccurrence: typeof RWStepVisual_RWAnnotationOccurrence;
  RWStepVisual_RWAnnotationPlane: typeof RWStepVisual_RWAnnotationPlane;
  RWStepVisual_RWAreaInSet: typeof RWStepVisual_RWAreaInSet;
  RWStepVisual_RWBackgroundColour: typeof RWStepVisual_RWBackgroundColour;
  RWStepVisual_RWCameraImage: typeof RWStepVisual_RWCameraImage;
  RWStepVisual_RWCameraModel: typeof RWStepVisual_RWCameraModel;
  RWStepVisual_RWCameraModelD2: typeof RWStepVisual_RWCameraModelD2;
  RWStepVisual_RWCameraModelD3: typeof RWStepVisual_RWCameraModelD3;
  RWStepVisual_RWCameraModelD3MultiClipping: typeof RWStepVisual_RWCameraModelD3MultiClipping;
  RWStepVisual_RWCameraModelD3MultiClippingIntersection: typeof RWStepVisual_RWCameraModelD3MultiClippingIntersection;
  RWStepVisual_RWCameraModelD3MultiClippingUnion: typeof RWStepVisual_RWCameraModelD3MultiClippingUnion;
  RWStepVisual_RWCameraUsage: typeof RWStepVisual_RWCameraUsage;
  RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation: typeof RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation;
  RWStepVisual_RWColour: typeof RWStepVisual_RWColour;
  RWStepVisual_RWColourRgb: typeof RWStepVisual_RWColourRgb;
  RWStepVisual_RWColourSpecification: typeof RWStepVisual_RWColourSpecification;
  RWStepVisual_RWCompositeText: typeof RWStepVisual_RWCompositeText;
  RWStepVisual_RWCompositeTextWithExtent: typeof RWStepVisual_RWCompositeTextWithExtent;
  RWStepVisual_RWContextDependentInvisibility: typeof RWStepVisual_RWContextDependentInvisibility;
  RWStepVisual_RWContextDependentOverRidingStyledItem: typeof RWStepVisual_RWContextDependentOverRidingStyledItem;
  RWStepVisual_RWCoordinatesList: typeof RWStepVisual_RWCoordinatesList;
  RWStepVisual_RWCurveStyle: typeof RWStepVisual_RWCurveStyle;
  RWStepVisual_RWCurveStyleFont: typeof RWStepVisual_RWCurveStyleFont;
  RWStepVisual_RWCurveStyleFontPattern: typeof RWStepVisual_RWCurveStyleFontPattern;
  RWStepVisual_RWDraughtingCallout: typeof RWStepVisual_RWDraughtingCallout;
  RWStepVisual_RWDraughtingModel: typeof RWStepVisual_RWDraughtingModel;
  RWStepVisual_RWDraughtingPreDefinedColour: typeof RWStepVisual_RWDraughtingPreDefinedColour;
  RWStepVisual_RWDraughtingPreDefinedCurveFont: typeof RWStepVisual_RWDraughtingPreDefinedCurveFont;
  RWStepVisual_RWExternallyDefinedCurveFont: typeof RWStepVisual_RWExternallyDefinedCurveFont;
  RWStepVisual_RWFillAreaStyle: typeof RWStepVisual_RWFillAreaStyle;
  RWStepVisual_RWFillAreaStyleColour: typeof RWStepVisual_RWFillAreaStyleColour;
  RWStepVisual_RWInvisibility: typeof RWStepVisual_RWInvisibility;
  RWStepVisual_RWMechanicalDesignGeometricPresentationArea: typeof RWStepVisual_RWMechanicalDesignGeometricPresentationArea;
  RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation: typeof RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation;
  RWStepVisual_RWOverRidingStyledItem: typeof RWStepVisual_RWOverRidingStyledItem;
  RWStepVisual_RWPlanarBox: typeof RWStepVisual_RWPlanarBox;
  RWStepVisual_RWPlanarExtent: typeof RWStepVisual_RWPlanarExtent;
  RWStepVisual_RWPointStyle: typeof RWStepVisual_RWPointStyle;
  RWStepVisual_RWPreDefinedColour: typeof RWStepVisual_RWPreDefinedColour;
  RWStepVisual_RWPreDefinedCurveFont: typeof RWStepVisual_RWPreDefinedCurveFont;
  RWStepVisual_RWPreDefinedItem: typeof RWStepVisual_RWPreDefinedItem;
  RWStepVisual_RWPresentationArea: typeof RWStepVisual_RWPresentationArea;
  RWStepVisual_RWPresentationLayerAssignment: typeof RWStepVisual_RWPresentationLayerAssignment;
  RWStepVisual_RWPresentationLayerUsage: typeof RWStepVisual_RWPresentationLayerUsage;
  RWStepVisual_RWPresentationRepresentation: typeof RWStepVisual_RWPresentationRepresentation;
  RWStepVisual_RWPresentationSet: typeof RWStepVisual_RWPresentationSet;
  RWStepVisual_RWPresentationSize: typeof RWStepVisual_RWPresentationSize;
  RWStepVisual_RWPresentationStyleAssignment: typeof RWStepVisual_RWPresentationStyleAssignment;
  RWStepVisual_RWPresentationStyleByContext: typeof RWStepVisual_RWPresentationStyleByContext;
  RWStepVisual_RWPresentationView: typeof RWStepVisual_RWPresentationView;
  RWStepVisual_RWPresentedItemRepresentation: typeof RWStepVisual_RWPresentedItemRepresentation;
  RWStepVisual_RWStyledItem: typeof RWStepVisual_RWStyledItem;
  RWStepVisual_RWSurfaceSideStyle: typeof RWStepVisual_RWSurfaceSideStyle;
  RWStepVisual_RWSurfaceStyleBoundary: typeof RWStepVisual_RWSurfaceStyleBoundary;
  RWStepVisual_RWSurfaceStyleControlGrid: typeof RWStepVisual_RWSurfaceStyleControlGrid;
  RWStepVisual_RWSurfaceStyleFillArea: typeof RWStepVisual_RWSurfaceStyleFillArea;
  RWStepVisual_RWSurfaceStyleParameterLine: typeof RWStepVisual_RWSurfaceStyleParameterLine;
  RWStepVisual_RWSurfaceStyleSegmentationCurve: typeof RWStepVisual_RWSurfaceStyleSegmentationCurve;
  RWStepVisual_RWSurfaceStyleSilhouette: typeof RWStepVisual_RWSurfaceStyleSilhouette;
  RWStepVisual_RWSurfaceStyleUsage: typeof RWStepVisual_RWSurfaceStyleUsage;
  RWStepVisual_RWTemplate: typeof RWStepVisual_RWTemplate;
  RWStepVisual_RWTemplateInstance: typeof RWStepVisual_RWTemplateInstance;
  RWStepVisual_RWTessellatedAnnotationOccurrence: typeof RWStepVisual_RWTessellatedAnnotationOccurrence;
  RWStepVisual_RWTessellatedCurveSet: typeof RWStepVisual_RWTessellatedCurveSet;
  RWStepVisual_RWTessellatedGeometricSet: typeof RWStepVisual_RWTessellatedGeometricSet;
  RWStepVisual_RWTessellatedItem: typeof RWStepVisual_RWTessellatedItem;
  RWStepVisual_RWTextLiteral: typeof RWStepVisual_RWTextLiteral;
  RWStepVisual_RWTextStyle: typeof RWStepVisual_RWTextStyle;
  RWStepVisual_RWTextStyleForDefinedFont: typeof RWStepVisual_RWTextStyleForDefinedFont;
  RWStepVisual_RWTextStyleWithBoxCharacteristics: typeof RWStepVisual_RWTextStyleWithBoxCharacteristics;
  RWStepVisual_RWViewVolume: typeof RWStepVisual_RWViewVolume;
  RWStl: typeof RWStl;
  RWStl_Reader: typeof RWStl_Reader;
  Resource_LexicalCompare: typeof Resource_LexicalCompare;
  Resource_Manager: typeof Resource_Manager;
  Resource_Manager_1: typeof Resource_Manager_1;
  Resource_Manager_2: typeof Resource_Manager_2;
  Resource_NoSuchResource: typeof Resource_NoSuchResource;
  Resource_NoSuchResource_1: typeof Resource_NoSuchResource_1;
  Resource_NoSuchResource_2: typeof Resource_NoSuchResource_2;
  Resource_Unicode: typeof Resource_Unicode;
  STEPCAFControl_ActorWrite: typeof STEPCAFControl_ActorWrite;
  STEPCAFControl_Controller: typeof STEPCAFControl_Controller;
  STEPCAFControl_ExternFile: typeof STEPCAFControl_ExternFile;
  STEPCAFControl_GDTProperty: typeof STEPCAFControl_GDTProperty;
  STEPCAFControl_Reader: typeof STEPCAFControl_Reader;
  STEPCAFControl_Reader_1: typeof STEPCAFControl_Reader_1;
  STEPCAFControl_Reader_2: typeof STEPCAFControl_Reader_2;
  STEPCAFControl_Writer: typeof STEPCAFControl_Writer;
  STEPCAFControl_Writer_1: typeof STEPCAFControl_Writer_1;
  STEPCAFControl_Writer_2: typeof STEPCAFControl_Writer_2;
  STEPConstruct: typeof STEPConstruct;
  STEPConstruct_AP203Context: typeof STEPConstruct_AP203Context;
  STEPConstruct_Assembly: typeof STEPConstruct_Assembly;
  STEPConstruct_ContextTool: typeof STEPConstruct_ContextTool;
  STEPConstruct_ContextTool_1: typeof STEPConstruct_ContextTool_1;
  STEPConstruct_ContextTool_2: typeof STEPConstruct_ContextTool_2;
  STEPConstruct_ExternRefs: typeof STEPConstruct_ExternRefs;
  STEPConstruct_ExternRefs_1: typeof STEPConstruct_ExternRefs_1;
  STEPConstruct_ExternRefs_2: typeof STEPConstruct_ExternRefs_2;
  STEPConstruct_Part: typeof STEPConstruct_Part;
  STEPConstruct_PointHasher: typeof STEPConstruct_PointHasher;
  STEPConstruct_Styles: typeof STEPConstruct_Styles;
  STEPConstruct_Styles_1: typeof STEPConstruct_Styles_1;
  STEPConstruct_Styles_2: typeof STEPConstruct_Styles_2;
  STEPConstruct_Tool: typeof STEPConstruct_Tool;
  STEPConstruct_Tool_1: typeof STEPConstruct_Tool_1;
  STEPConstruct_Tool_2: typeof STEPConstruct_Tool_2;
  STEPConstruct_UnitContext: typeof STEPConstruct_UnitContext;
  STEPConstruct_ValidationProps: typeof STEPConstruct_ValidationProps;
  STEPConstruct_ValidationProps_1: typeof STEPConstruct_ValidationProps_1;
  STEPConstruct_ValidationProps_2: typeof STEPConstruct_ValidationProps_2;
  STEPControl_ActorRead: typeof STEPControl_ActorRead;
  STEPControl_ActorWrite: typeof STEPControl_ActorWrite;
  STEPControl_Controller: typeof STEPControl_Controller;
  STEPControl_Reader: typeof STEPControl_Reader;
  STEPControl_Reader_1: typeof STEPControl_Reader_1;
  STEPControl_Reader_2: typeof STEPControl_Reader_2;
  STEPControl_Writer: typeof STEPControl_Writer;
  STEPControl_Writer_1: typeof STEPControl_Writer_1;
  STEPControl_Writer_2: typeof STEPControl_Writer_2;
  STEPEdit: typeof STEPEdit;
  STEPEdit_EditContext: typeof STEPEdit_EditContext;
  STEPEdit_EditSDR: typeof STEPEdit_EditSDR;
  STEPSelections_AssemblyComponent: typeof STEPSelections_AssemblyComponent;
  STEPSelections_AssemblyComponent_1: typeof STEPSelections_AssemblyComponent_1;
  STEPSelections_AssemblyComponent_2: typeof STEPSelections_AssemblyComponent_2;
  STEPSelections_AssemblyExplorer: typeof STEPSelections_AssemblyExplorer;
  STEPSelections_AssemblyLink: typeof STEPSelections_AssemblyLink;
  STEPSelections_AssemblyLink_1: typeof STEPSelections_AssemblyLink_1;
  STEPSelections_AssemblyLink_2: typeof STEPSelections_AssemblyLink_2;
  STEPSelections_HSequenceOfAssemblyLink: typeof STEPSelections_HSequenceOfAssemblyLink;
  STEPSelections_HSequenceOfAssemblyLink_1: typeof STEPSelections_HSequenceOfAssemblyLink_1;
  STEPSelections_HSequenceOfAssemblyLink_2: typeof STEPSelections_HSequenceOfAssemblyLink_2;
  STEPSelections_SelectAssembly: typeof STEPSelections_SelectAssembly;
  STEPSelections_SelectDerived: typeof STEPSelections_SelectDerived;
  STEPSelections_SelectFaces: typeof STEPSelections_SelectFaces;
  STEPSelections_SelectForTransfer: typeof STEPSelections_SelectForTransfer;
  STEPSelections_SelectForTransfer_1: typeof STEPSelections_SelectForTransfer_1;
  STEPSelections_SelectForTransfer_2: typeof STEPSelections_SelectForTransfer_2;
  STEPSelections_SelectGSCurves: typeof STEPSelections_SelectGSCurves;
  STEPSelections_SelectInstances: typeof STEPSelections_SelectInstances;
  Select3D_BVHIndexBuffer: typeof Select3D_BVHIndexBuffer;
  Select3D_InteriorSensitivePointSet: typeof Select3D_InteriorSensitivePointSet;
  Select3D_PointData: typeof Select3D_PointData;
  Select3D_SensitiveBox: typeof Select3D_SensitiveBox;
  Select3D_SensitiveBox_1: typeof Select3D_SensitiveBox_1;
  Select3D_SensitiveBox_2: typeof Select3D_SensitiveBox_2;
  Select3D_SensitiveCircle: typeof Select3D_SensitiveCircle;
  Select3D_SensitiveCircle_1: typeof Select3D_SensitiveCircle_1;
  Select3D_SensitiveCircle_2: typeof Select3D_SensitiveCircle_2;
  Select3D_SensitiveCircle_3: typeof Select3D_SensitiveCircle_3;
  Select3D_SensitiveCircle_4: typeof Select3D_SensitiveCircle_4;
  Select3D_SensitiveCurve: typeof Select3D_SensitiveCurve;
  Select3D_SensitiveCurve_1: typeof Select3D_SensitiveCurve_1;
  Select3D_SensitiveCurve_2: typeof Select3D_SensitiveCurve_2;
  Select3D_SensitiveCurve_3: typeof Select3D_SensitiveCurve_3;
  Select3D_SensitiveEntity: typeof Select3D_SensitiveEntity;
  Select3D_SensitiveFace: typeof Select3D_SensitiveFace;
  Select3D_SensitiveFace_1: typeof Select3D_SensitiveFace_1;
  Select3D_SensitiveFace_2: typeof Select3D_SensitiveFace_2;
  Select3D_SensitiveGroup: typeof Select3D_SensitiveGroup;
  Select3D_SensitiveGroup_1: typeof Select3D_SensitiveGroup_1;
  Select3D_SensitiveGroup_2: typeof Select3D_SensitiveGroup_2;
  Select3D_SensitivePoint: typeof Select3D_SensitivePoint;
  Select3D_SensitivePoly: typeof Select3D_SensitivePoly;
  Select3D_SensitivePoly_1: typeof Select3D_SensitivePoly_1;
  Select3D_SensitivePoly_2: typeof Select3D_SensitivePoly_2;
  Select3D_SensitivePoly_3: typeof Select3D_SensitivePoly_3;
  Select3D_SensitivePrimitiveArray: typeof Select3D_SensitivePrimitiveArray;
  Select3D_SensitiveSegment: typeof Select3D_SensitiveSegment;
  Select3D_SensitiveSet: typeof Select3D_SensitiveSet;
  Select3D_SensitiveTriangle: typeof Select3D_SensitiveTriangle;
  Select3D_SensitiveTriangulation: typeof Select3D_SensitiveTriangulation;
  Select3D_SensitiveTriangulation_1: typeof Select3D_SensitiveTriangulation_1;
  Select3D_SensitiveTriangulation_2: typeof Select3D_SensitiveTriangulation_2;
  Select3D_SensitiveWire: typeof Select3D_SensitiveWire;
  SelectBasics: typeof SelectBasics;
  SelectBasics_SelectingVolumeManager: typeof SelectBasics_SelectingVolumeManager;
  SelectMgr_AndFilter: typeof SelectMgr_AndFilter;
  SelectMgr_BaseFrustum: typeof SelectMgr_BaseFrustum;
  SelectMgr_CompositionFilter: typeof SelectMgr_CompositionFilter;
  SelectMgr_EntityOwner: typeof SelectMgr_EntityOwner;
  SelectMgr_EntityOwner_1: typeof SelectMgr_EntityOwner_1;
  SelectMgr_EntityOwner_2: typeof SelectMgr_EntityOwner_2;
  SelectMgr_EntityOwner_3: typeof SelectMgr_EntityOwner_3;
  SelectMgr_Filter: typeof SelectMgr_Filter;
  SelectMgr_FrustumBuilder: typeof SelectMgr_FrustumBuilder;
  SelectMgr_OrFilter: typeof SelectMgr_OrFilter;
  SelectMgr_SelectableObject: typeof SelectMgr_SelectableObject;
  SelectMgr_SelectableObjectSet: typeof SelectMgr_SelectableObjectSet;
  SelectMgr_SelectingVolumeManager: typeof SelectMgr_SelectingVolumeManager;
  SelectMgr_Selection: typeof SelectMgr_Selection;
  SelectMgr_SelectionManager: typeof SelectMgr_SelectionManager;
  SelectMgr_SensitiveEntity: typeof SelectMgr_SensitiveEntity;
  SelectMgr_SensitiveEntitySet: typeof SelectMgr_SensitiveEntitySet;
  SelectMgr_SortCriterion: typeof SelectMgr_SortCriterion;
  SelectMgr_ToleranceMap: typeof SelectMgr_ToleranceMap;
  SelectMgr_TriangularFrustumSet: typeof SelectMgr_TriangularFrustumSet;
  SelectMgr_ViewClipRange: typeof SelectMgr_ViewClipRange;
  SelectMgr_ViewerSelector: typeof SelectMgr_ViewerSelector;
  ShapeAlgo: typeof ShapeAlgo;
  ShapeAlgo_AlgoContainer: typeof ShapeAlgo_AlgoContainer;
  ShapeAlgo_ToolContainer: typeof ShapeAlgo_ToolContainer;
  ShapeAnalysis: typeof ShapeAnalysis;
  ShapeAnalysis_CheckSmallFace: typeof ShapeAnalysis_CheckSmallFace;
  ShapeAnalysis_Curve: typeof ShapeAnalysis_Curve;
  ShapeAnalysis_Edge: typeof ShapeAnalysis_Edge;
  ShapeAnalysis_FreeBoundData: typeof ShapeAnalysis_FreeBoundData;
  ShapeAnalysis_FreeBoundData_1: typeof ShapeAnalysis_FreeBoundData_1;
  ShapeAnalysis_FreeBoundData_2: typeof ShapeAnalysis_FreeBoundData_2;
  ShapeAnalysis_FreeBounds: typeof ShapeAnalysis_FreeBounds;
  ShapeAnalysis_FreeBounds_1: typeof ShapeAnalysis_FreeBounds_1;
  ShapeAnalysis_FreeBounds_2: typeof ShapeAnalysis_FreeBounds_2;
  ShapeAnalysis_FreeBounds_3: typeof ShapeAnalysis_FreeBounds_3;
  ShapeAnalysis_FreeBoundsProperties: typeof ShapeAnalysis_FreeBoundsProperties;
  ShapeAnalysis_FreeBoundsProperties_1: typeof ShapeAnalysis_FreeBoundsProperties_1;
  ShapeAnalysis_FreeBoundsProperties_2: typeof ShapeAnalysis_FreeBoundsProperties_2;
  ShapeAnalysis_FreeBoundsProperties_3: typeof ShapeAnalysis_FreeBoundsProperties_3;
  ShapeAnalysis_Geom: typeof ShapeAnalysis_Geom;
  ShapeAnalysis_HSequenceOfFreeBounds: typeof ShapeAnalysis_HSequenceOfFreeBounds;
  ShapeAnalysis_HSequenceOfFreeBounds_1: typeof ShapeAnalysis_HSequenceOfFreeBounds_1;
  ShapeAnalysis_HSequenceOfFreeBounds_2: typeof ShapeAnalysis_HSequenceOfFreeBounds_2;
  ShapeAnalysis_ShapeContents: typeof ShapeAnalysis_ShapeContents;
  ShapeAnalysis_ShapeTolerance: typeof ShapeAnalysis_ShapeTolerance;
  ShapeAnalysis_Shell: typeof ShapeAnalysis_Shell;
  ShapeAnalysis_Surface: typeof ShapeAnalysis_Surface;
  ShapeAnalysis_TransferParameters: typeof ShapeAnalysis_TransferParameters;
  ShapeAnalysis_TransferParameters_1: typeof ShapeAnalysis_TransferParameters_1;
  ShapeAnalysis_TransferParameters_2: typeof ShapeAnalysis_TransferParameters_2;
  ShapeAnalysis_TransferParametersProj: typeof ShapeAnalysis_TransferParametersProj;
  ShapeAnalysis_TransferParametersProj_1: typeof ShapeAnalysis_TransferParametersProj_1;
  ShapeAnalysis_TransferParametersProj_2: typeof ShapeAnalysis_TransferParametersProj_2;
  ShapeAnalysis_Wire: typeof ShapeAnalysis_Wire;
  ShapeAnalysis_Wire_1: typeof ShapeAnalysis_Wire_1;
  ShapeAnalysis_Wire_2: typeof ShapeAnalysis_Wire_2;
  ShapeAnalysis_Wire_3: typeof ShapeAnalysis_Wire_3;
  ShapeAnalysis_WireOrder: typeof ShapeAnalysis_WireOrder;
  ShapeAnalysis_WireOrder_1: typeof ShapeAnalysis_WireOrder_1;
  ShapeAnalysis_WireOrder_2: typeof ShapeAnalysis_WireOrder_2;
  ShapeAnalysis_WireVertex: typeof ShapeAnalysis_WireVertex;
  ShapeBuild: typeof ShapeBuild;
  ShapeBuild_Edge: typeof ShapeBuild_Edge;
  ShapeBuild_ReShape: typeof ShapeBuild_ReShape;
  ShapeBuild_Vertex: typeof ShapeBuild_Vertex;
  ShapeConstruct: typeof ShapeConstruct;
  ShapeConstruct_Curve: typeof ShapeConstruct_Curve;
  ShapeConstruct_MakeTriangulation: typeof ShapeConstruct_MakeTriangulation;
  ShapeConstruct_MakeTriangulation_1: typeof ShapeConstruct_MakeTriangulation_1;
  ShapeConstruct_MakeTriangulation_2: typeof ShapeConstruct_MakeTriangulation_2;
  ShapeConstruct_ProjectCurveOnSurface: typeof ShapeConstruct_ProjectCurveOnSurface;
  ShapeCustom: typeof ShapeCustom;
  ShapeCustom_BSplineRestriction: typeof ShapeCustom_BSplineRestriction;
  ShapeCustom_BSplineRestriction_1: typeof ShapeCustom_BSplineRestriction_1;
  ShapeCustom_BSplineRestriction_2: typeof ShapeCustom_BSplineRestriction_2;
  ShapeCustom_BSplineRestriction_3: typeof ShapeCustom_BSplineRestriction_3;
  ShapeCustom_ConvertToBSpline: typeof ShapeCustom_ConvertToBSpline;
  ShapeCustom_ConvertToRevolution: typeof ShapeCustom_ConvertToRevolution;
  ShapeCustom_Curve: typeof ShapeCustom_Curve;
  ShapeCustom_Curve_1: typeof ShapeCustom_Curve_1;
  ShapeCustom_Curve_2: typeof ShapeCustom_Curve_2;
  ShapeCustom_Curve2d: typeof ShapeCustom_Curve2d;
  ShapeCustom_DirectModification: typeof ShapeCustom_DirectModification;
  ShapeCustom_Modification: typeof ShapeCustom_Modification;
  ShapeCustom_RestrictionParameters: typeof ShapeCustom_RestrictionParameters;
  ShapeCustom_Surface: typeof ShapeCustom_Surface;
  ShapeCustom_Surface_1: typeof ShapeCustom_Surface_1;
  ShapeCustom_Surface_2: typeof ShapeCustom_Surface_2;
  ShapeCustom_SweptToElementary: typeof ShapeCustom_SweptToElementary;
  ShapeCustom_TrsfModification: typeof ShapeCustom_TrsfModification;
  ShapeExtend: typeof ShapeExtend;
  ShapeExtend_BasicMsgRegistrator: typeof ShapeExtend_BasicMsgRegistrator;
  ShapeExtend_ComplexCurve: typeof ShapeExtend_ComplexCurve;
  ShapeExtend_CompositeSurface: typeof ShapeExtend_CompositeSurface;
  ShapeExtend_CompositeSurface_1: typeof ShapeExtend_CompositeSurface_1;
  ShapeExtend_CompositeSurface_2: typeof ShapeExtend_CompositeSurface_2;
  ShapeExtend_CompositeSurface_3: typeof ShapeExtend_CompositeSurface_3;
  ShapeExtend_Explorer: typeof ShapeExtend_Explorer;
  ShapeExtend_MsgRegistrator: typeof ShapeExtend_MsgRegistrator;
  ShapeExtend_WireData: typeof ShapeExtend_WireData;
  ShapeExtend_WireData_1: typeof ShapeExtend_WireData_1;
  ShapeExtend_WireData_2: typeof ShapeExtend_WireData_2;
  ShapeFix: typeof ShapeFix;
  ShapeFix_ComposeShell: typeof ShapeFix_ComposeShell;
  ShapeFix_EdgeConnect: typeof ShapeFix_EdgeConnect;
  ShapeFix_EdgeProjAux: typeof ShapeFix_EdgeProjAux;
  ShapeFix_EdgeProjAux_1: typeof ShapeFix_EdgeProjAux_1;
  ShapeFix_EdgeProjAux_2: typeof ShapeFix_EdgeProjAux_2;
  ShapeFix_Face: typeof ShapeFix_Face;
  ShapeFix_Face_1: typeof ShapeFix_Face_1;
  ShapeFix_Face_2: typeof ShapeFix_Face_2;
  ShapeFix_FaceConnect: typeof ShapeFix_FaceConnect;
  ShapeFix_FixSmallFace: typeof ShapeFix_FixSmallFace;
  ShapeFix_FixSmallSolid: typeof ShapeFix_FixSmallSolid;
  ShapeFix_FreeBounds: typeof ShapeFix_FreeBounds;
  ShapeFix_FreeBounds_1: typeof ShapeFix_FreeBounds_1;
  ShapeFix_FreeBounds_2: typeof ShapeFix_FreeBounds_2;
  ShapeFix_FreeBounds_3: typeof ShapeFix_FreeBounds_3;
  ShapeFix_IntersectionTool: typeof ShapeFix_IntersectionTool;
  ShapeFix_Root: typeof ShapeFix_Root;
  ShapeFix_Shape: typeof ShapeFix_Shape;
  ShapeFix_Shape_1: typeof ShapeFix_Shape_1;
  ShapeFix_Shape_2: typeof ShapeFix_Shape_2;
  ShapeFix_ShapeTolerance: typeof ShapeFix_ShapeTolerance;
  ShapeFix_Shell: typeof ShapeFix_Shell;
  ShapeFix_Shell_1: typeof ShapeFix_Shell_1;
  ShapeFix_Shell_2: typeof ShapeFix_Shell_2;
  ShapeFix_Solid: typeof ShapeFix_Solid;
  ShapeFix_Solid_1: typeof ShapeFix_Solid_1;
  ShapeFix_Solid_2: typeof ShapeFix_Solid_2;
  ShapeFix_SplitCommonVertex: typeof ShapeFix_SplitCommonVertex;
  ShapeFix_SplitTool: typeof ShapeFix_SplitTool;
  ShapeFix_Wire: typeof ShapeFix_Wire;
  ShapeFix_Wire_1: typeof ShapeFix_Wire_1;
  ShapeFix_Wire_2: typeof ShapeFix_Wire_2;
  ShapeFix_WireVertex: typeof ShapeFix_WireVertex;
  ShapeFix_Wireframe: typeof ShapeFix_Wireframe;
  ShapeFix_Wireframe_1: typeof ShapeFix_Wireframe_1;
  ShapeFix_Wireframe_2: typeof ShapeFix_Wireframe_2;
  ShapePersistent: typeof ShapePersistent;
  ShapePersistent_HArray1: typeof ShapePersistent_HArray1;
  ShapePersistent_HArray2: typeof ShapePersistent_HArray2;
  ShapePersistent_HSequence: typeof ShapePersistent_HSequence;
  ShapeProcess: typeof ShapeProcess;
  ShapeProcessAPI_ApplySequence: typeof ShapeProcessAPI_ApplySequence;
  ShapeProcess_Context: typeof ShapeProcess_Context;
  ShapeProcess_Context_1: typeof ShapeProcess_Context_1;
  ShapeProcess_Context_2: typeof ShapeProcess_Context_2;
  ShapeProcess_OperLibrary: typeof ShapeProcess_OperLibrary;
  ShapeProcess_Operator: typeof ShapeProcess_Operator;
  ShapeProcess_ShapeContext: typeof ShapeProcess_ShapeContext;
  ShapeProcess_ShapeContext_1: typeof ShapeProcess_ShapeContext_1;
  ShapeProcess_ShapeContext_2: typeof ShapeProcess_ShapeContext_2;
  ShapeProcess_UOperator: typeof ShapeProcess_UOperator;
  ShapeUpgrade: typeof ShapeUpgrade;
  ShapeUpgrade_ClosedEdgeDivide: typeof ShapeUpgrade_ClosedEdgeDivide;
  ShapeUpgrade_ClosedFaceDivide: typeof ShapeUpgrade_ClosedFaceDivide;
  ShapeUpgrade_ClosedFaceDivide_1: typeof ShapeUpgrade_ClosedFaceDivide_1;
  ShapeUpgrade_ClosedFaceDivide_2: typeof ShapeUpgrade_ClosedFaceDivide_2;
  ShapeUpgrade_ConvertCurve2dToBezier: typeof ShapeUpgrade_ConvertCurve2dToBezier;
  ShapeUpgrade_ConvertCurve3dToBezier: typeof ShapeUpgrade_ConvertCurve3dToBezier;
  ShapeUpgrade_ConvertSurfaceToBezierBasis: typeof ShapeUpgrade_ConvertSurfaceToBezierBasis;
  ShapeUpgrade_EdgeDivide: typeof ShapeUpgrade_EdgeDivide;
  ShapeUpgrade_FaceDivide: typeof ShapeUpgrade_FaceDivide;
  ShapeUpgrade_FaceDivide_1: typeof ShapeUpgrade_FaceDivide_1;
  ShapeUpgrade_FaceDivide_2: typeof ShapeUpgrade_FaceDivide_2;
  ShapeUpgrade_FaceDivideArea: typeof ShapeUpgrade_FaceDivideArea;
  ShapeUpgrade_FaceDivideArea_1: typeof ShapeUpgrade_FaceDivideArea_1;
  ShapeUpgrade_FaceDivideArea_2: typeof ShapeUpgrade_FaceDivideArea_2;
  ShapeUpgrade_FixSmallBezierCurves: typeof ShapeUpgrade_FixSmallBezierCurves;
  ShapeUpgrade_FixSmallCurves: typeof ShapeUpgrade_FixSmallCurves;
  ShapeUpgrade_RemoveInternalWires: typeof ShapeUpgrade_RemoveInternalWires;
  ShapeUpgrade_RemoveInternalWires_1: typeof ShapeUpgrade_RemoveInternalWires_1;
  ShapeUpgrade_RemoveInternalWires_2: typeof ShapeUpgrade_RemoveInternalWires_2;
  ShapeUpgrade_RemoveLocations: typeof ShapeUpgrade_RemoveLocations;
  ShapeUpgrade_ShapeConvertToBezier: typeof ShapeUpgrade_ShapeConvertToBezier;
  ShapeUpgrade_ShapeConvertToBezier_1: typeof ShapeUpgrade_ShapeConvertToBezier_1;
  ShapeUpgrade_ShapeConvertToBezier_2: typeof ShapeUpgrade_ShapeConvertToBezier_2;
  ShapeUpgrade_ShapeDivide: typeof ShapeUpgrade_ShapeDivide;
  ShapeUpgrade_ShapeDivide_1: typeof ShapeUpgrade_ShapeDivide_1;
  ShapeUpgrade_ShapeDivide_2: typeof ShapeUpgrade_ShapeDivide_2;
  ShapeUpgrade_ShapeDivideAngle: typeof ShapeUpgrade_ShapeDivideAngle;
  ShapeUpgrade_ShapeDivideAngle_1: typeof ShapeUpgrade_ShapeDivideAngle_1;
  ShapeUpgrade_ShapeDivideAngle_2: typeof ShapeUpgrade_ShapeDivideAngle_2;
  ShapeUpgrade_ShapeDivideArea: typeof ShapeUpgrade_ShapeDivideArea;
  ShapeUpgrade_ShapeDivideArea_1: typeof ShapeUpgrade_ShapeDivideArea_1;
  ShapeUpgrade_ShapeDivideArea_2: typeof ShapeUpgrade_ShapeDivideArea_2;
  ShapeUpgrade_ShapeDivideClosed: typeof ShapeUpgrade_ShapeDivideClosed;
  ShapeUpgrade_ShapeDivideClosedEdges: typeof ShapeUpgrade_ShapeDivideClosedEdges;
  ShapeUpgrade_ShapeDivideContinuity: typeof ShapeUpgrade_ShapeDivideContinuity;
  ShapeUpgrade_ShapeDivideContinuity_1: typeof ShapeUpgrade_ShapeDivideContinuity_1;
  ShapeUpgrade_ShapeDivideContinuity_2: typeof ShapeUpgrade_ShapeDivideContinuity_2;
  ShapeUpgrade_ShellSewing: typeof ShapeUpgrade_ShellSewing;
  ShapeUpgrade_SplitCurve: typeof ShapeUpgrade_SplitCurve;
  ShapeUpgrade_SplitCurve2d: typeof ShapeUpgrade_SplitCurve2d;
  ShapeUpgrade_SplitCurve2dContinuity: typeof ShapeUpgrade_SplitCurve2dContinuity;
  ShapeUpgrade_SplitCurve3d: typeof ShapeUpgrade_SplitCurve3d;
  ShapeUpgrade_SplitCurve3dContinuity: typeof ShapeUpgrade_SplitCurve3dContinuity;
  ShapeUpgrade_SplitSurface: typeof ShapeUpgrade_SplitSurface;
  ShapeUpgrade_SplitSurfaceAngle: typeof ShapeUpgrade_SplitSurfaceAngle;
  ShapeUpgrade_SplitSurfaceArea: typeof ShapeUpgrade_SplitSurfaceArea;
  ShapeUpgrade_SplitSurfaceContinuity: typeof ShapeUpgrade_SplitSurfaceContinuity;
  ShapeUpgrade_Tool: typeof ShapeUpgrade_Tool;
  ShapeUpgrade_UnifySameDomain: typeof ShapeUpgrade_UnifySameDomain;
  ShapeUpgrade_UnifySameDomain_1: typeof ShapeUpgrade_UnifySameDomain_1;
  ShapeUpgrade_UnifySameDomain_2: typeof ShapeUpgrade_UnifySameDomain_2;
  ShapeUpgrade_WireDivide: typeof ShapeUpgrade_WireDivide;
  Standard: typeof Standard;
  Standard_AbortiveTransaction: typeof Standard_AbortiveTransaction;
  Standard_AbortiveTransaction_1: typeof Standard_AbortiveTransaction_1;
  Standard_AbortiveTransaction_2: typeof Standard_AbortiveTransaction_2;
  Standard_CLocaleSentry: typeof Standard_CLocaleSentry;
  Standard_Condition: typeof Standard_Condition;
  Standard_ConstructionError: typeof Standard_ConstructionError;
  Standard_ConstructionError_1: typeof Standard_ConstructionError_1;
  Standard_ConstructionError_2: typeof Standard_ConstructionError_2;
  Standard_DimensionError: typeof Standard_DimensionError;
  Standard_DimensionError_1: typeof Standard_DimensionError_1;
  Standard_DimensionError_2: typeof Standard_DimensionError_2;
  Standard_DimensionMismatch: typeof Standard_DimensionMismatch;
  Standard_DimensionMismatch_1: typeof Standard_DimensionMismatch_1;
  Standard_DimensionMismatch_2: typeof Standard_DimensionMismatch_2;
  Standard_DivideByZero: typeof Standard_DivideByZero;
  Standard_DivideByZero_1: typeof Standard_DivideByZero_1;
  Standard_DivideByZero_2: typeof Standard_DivideByZero_2;
  Standard_DomainError: typeof Standard_DomainError;
  Standard_DomainError_1: typeof Standard_DomainError_1;
  Standard_DomainError_2: typeof Standard_DomainError_2;
  Standard_Dump: typeof Standard_Dump;
  Standard_DumpSentry: typeof Standard_DumpSentry;
  Standard_Failure: typeof Standard_Failure;
  Standard_Failure_1: typeof Standard_Failure_1;
  Standard_Failure_2: typeof Standard_Failure_2;
  Standard_Failure_3: typeof Standard_Failure_3;
  Standard_GUID: typeof Standard_GUID;
  Standard_GUID_1: typeof Standard_GUID_1;
  Standard_GUID_2: typeof Standard_GUID_2;
  Standard_GUID_3: typeof Standard_GUID_3;
  Standard_GUID_4: typeof Standard_GUID_4;
  Standard_GUID_5: typeof Standard_GUID_5;
  Standard_GUID_6: typeof Standard_GUID_6;
  Standard_ImmutableObject: typeof Standard_ImmutableObject;
  Standard_ImmutableObject_1: typeof Standard_ImmutableObject_1;
  Standard_ImmutableObject_2: typeof Standard_ImmutableObject_2;
  Standard_LicenseError: typeof Standard_LicenseError;
  Standard_LicenseError_1: typeof Standard_LicenseError_1;
  Standard_LicenseError_2: typeof Standard_LicenseError_2;
  Standard_LicenseNotFound: typeof Standard_LicenseNotFound;
  Standard_LicenseNotFound_1: typeof Standard_LicenseNotFound_1;
  Standard_LicenseNotFound_2: typeof Standard_LicenseNotFound_2;
  Standard_MMgrOpt: typeof Standard_MMgrOpt;
  Standard_MMgrRaw: typeof Standard_MMgrRaw;
  Standard_MMgrRoot: typeof Standard_MMgrRoot;
  Standard_MMgrTBBalloc: typeof Standard_MMgrTBBalloc;
  Standard_MultiplyDefined: typeof Standard_MultiplyDefined;
  Standard_MultiplyDefined_1: typeof Standard_MultiplyDefined_1;
  Standard_MultiplyDefined_2: typeof Standard_MultiplyDefined_2;
  Standard_NegativeValue: typeof Standard_NegativeValue;
  Standard_NegativeValue_1: typeof Standard_NegativeValue_1;
  Standard_NegativeValue_2: typeof Standard_NegativeValue_2;
  Standard_NoMoreObject: typeof Standard_NoMoreObject;
  Standard_NoMoreObject_1: typeof Standard_NoMoreObject_1;
  Standard_NoMoreObject_2: typeof Standard_NoMoreObject_2;
  Standard_NoSuchObject: typeof Standard_NoSuchObject;
  Standard_NoSuchObject_1: typeof Standard_NoSuchObject_1;
  Standard_NoSuchObject_2: typeof Standard_NoSuchObject_2;
  Standard_NotImplemented: typeof Standard_NotImplemented;
  Standard_NotImplemented_1: typeof Standard_NotImplemented_1;
  Standard_NotImplemented_2: typeof Standard_NotImplemented_2;
  Standard_NullObject: typeof Standard_NullObject;
  Standard_NullObject_1: typeof Standard_NullObject_1;
  Standard_NullObject_2: typeof Standard_NullObject_2;
  Standard_NullValue: typeof Standard_NullValue;
  Standard_NullValue_1: typeof Standard_NullValue_1;
  Standard_NullValue_2: typeof Standard_NullValue_2;
  Standard_NumericError: typeof Standard_NumericError;
  Standard_NumericError_1: typeof Standard_NumericError_1;
  Standard_NumericError_2: typeof Standard_NumericError_2;
  Standard_OutOfMemory: typeof Standard_OutOfMemory;
  Standard_OutOfRange: typeof Standard_OutOfRange;
  Standard_OutOfRange_1: typeof Standard_OutOfRange_1;
  Standard_OutOfRange_2: typeof Standard_OutOfRange_2;
  Standard_Overflow: typeof Standard_Overflow;
  Standard_Overflow_1: typeof Standard_Overflow_1;
  Standard_Overflow_2: typeof Standard_Overflow_2;
  Standard_Persistent: typeof Standard_Persistent;
  Standard_ProgramError: typeof Standard_ProgramError;
  Standard_ProgramError_1: typeof Standard_ProgramError_1;
  Standard_ProgramError_2: typeof Standard_ProgramError_2;
  Standard_RangeError: typeof Standard_RangeError;
  Standard_RangeError_1: typeof Standard_RangeError_1;
  Standard_RangeError_2: typeof Standard_RangeError_2;
  Standard_ReadBuffer: typeof Standard_ReadBuffer;
  Standard_ReadLineBuffer: typeof Standard_ReadLineBuffer;
  Standard_TooManyUsers: typeof Standard_TooManyUsers;
  Standard_TooManyUsers_1: typeof Standard_TooManyUsers_1;
  Standard_TooManyUsers_2: typeof Standard_TooManyUsers_2;
  Standard_Transient: typeof Standard_Transient;
  Standard_Transient_1: typeof Standard_Transient_1;
  Standard_Transient_2: typeof Standard_Transient_2;
  Standard_Type: typeof Standard_Type;
  Standard_TypeMismatch: typeof Standard_TypeMismatch;
  Standard_TypeMismatch_1: typeof Standard_TypeMismatch_1;
  Standard_TypeMismatch_2: typeof Standard_TypeMismatch_2;
  Standard_Underflow: typeof Standard_Underflow;
  Standard_Underflow_1: typeof Standard_Underflow_1;
  Standard_Underflow_2: typeof Standard_Underflow_2;
  StdDrivers: typeof StdDrivers;
  StdDrivers_DocumentRetrievalDriver: typeof StdDrivers_DocumentRetrievalDriver;
  StdFail_InfiniteSolutions: typeof StdFail_InfiniteSolutions;
  StdFail_InfiniteSolutions_1: typeof StdFail_InfiniteSolutions_1;
  StdFail_InfiniteSolutions_2: typeof StdFail_InfiniteSolutions_2;
  StdFail_NotDone: typeof StdFail_NotDone;
  StdFail_NotDone_1: typeof StdFail_NotDone_1;
  StdFail_NotDone_2: typeof StdFail_NotDone_2;
  StdFail_Undefined: typeof StdFail_Undefined;
  StdFail_Undefined_1: typeof StdFail_Undefined_1;
  StdFail_Undefined_2: typeof StdFail_Undefined_2;
  StdFail_UndefinedDerivative: typeof StdFail_UndefinedDerivative;
  StdFail_UndefinedDerivative_1: typeof StdFail_UndefinedDerivative_1;
  StdFail_UndefinedDerivative_2: typeof StdFail_UndefinedDerivative_2;
  StdFail_UndefinedValue: typeof StdFail_UndefinedValue;
  StdFail_UndefinedValue_1: typeof StdFail_UndefinedValue_1;
  StdFail_UndefinedValue_2: typeof StdFail_UndefinedValue_2;
  StdLDrivers: typeof StdLDrivers;
  StdLDrivers_DocumentRetrievalDriver: typeof StdLDrivers_DocumentRetrievalDriver;
  StdLPersistent: typeof StdLPersistent;
  StdLPersistent_Collection: typeof StdLPersistent_Collection;
  StdLPersistent_Data: typeof StdLPersistent_Data;
  StdLPersistent_Dependency: typeof StdLPersistent_Dependency;
  StdLPersistent_Document: typeof StdLPersistent_Document;
  StdLPersistent_Function: typeof StdLPersistent_Function;
  StdLPersistent_HArray1: typeof StdLPersistent_HArray1;
  StdLPersistent_HArray1OfPersistent: typeof StdLPersistent_HArray1OfPersistent;
  StdLPersistent_HArray1OfPersistent_1: typeof StdLPersistent_HArray1OfPersistent_1;
  StdLPersistent_HArray1OfPersistent_2: typeof StdLPersistent_HArray1OfPersistent_2;
  StdLPersistent_HArray1OfPersistent_3: typeof StdLPersistent_HArray1OfPersistent_3;
  StdLPersistent_HArray1OfPersistent_4: typeof StdLPersistent_HArray1OfPersistent_4;
  StdLPersistent_HArray2: typeof StdLPersistent_HArray2;
  StdLPersistent_HArray2OfPersistent: typeof StdLPersistent_HArray2OfPersistent;
  StdLPersistent_HArray2OfPersistent_1: typeof StdLPersistent_HArray2OfPersistent_1;
  StdLPersistent_HArray2OfPersistent_2: typeof StdLPersistent_HArray2OfPersistent_2;
  StdLPersistent_HArray2OfPersistent_3: typeof StdLPersistent_HArray2OfPersistent_3;
  StdLPersistent_HString: typeof StdLPersistent_HString;
  StdLPersistent_NamedData: typeof StdLPersistent_NamedData;
  StdLPersistent_Real: typeof StdLPersistent_Real;
  StdLPersistent_TreeNode: typeof StdLPersistent_TreeNode;
  StdLPersistent_Value: typeof StdLPersistent_Value;
  StdLPersistent_Variable: typeof StdLPersistent_Variable;
  StdLPersistent_Void: typeof StdLPersistent_Void;
  StdLPersistent_XLink: typeof StdLPersistent_XLink;
  StdObjMgt_MapOfInstantiators: typeof StdObjMgt_MapOfInstantiators;
  StdObjMgt_Persistent: typeof StdObjMgt_Persistent;
  StdObjMgt_ReadData: typeof StdObjMgt_ReadData;
  StdObjMgt_SharedObject: typeof StdObjMgt_SharedObject;
  StdObjMgt_WriteData: typeof StdObjMgt_WriteData;
  StdObject_Location: typeof StdObject_Location;
  StdObject_Shape: typeof StdObject_Shape;
  StdPersistent: typeof StdPersistent;
  StdPersistent_DataXtd: typeof StdPersistent_DataXtd;
  StdPersistent_DataXtd_Constraint: typeof StdPersistent_DataXtd_Constraint;
  StdPersistent_DataXtd_PatternStd: typeof StdPersistent_DataXtd_PatternStd;
  StdPersistent_HArray1: typeof StdPersistent_HArray1;
  StdPersistent_HArray1OfShape1: typeof StdPersistent_HArray1OfShape1;
  StdPersistent_HArray1OfShape1_1: typeof StdPersistent_HArray1OfShape1_1;
  StdPersistent_HArray1OfShape1_2: typeof StdPersistent_HArray1OfShape1_2;
  StdPersistent_HArray1OfShape1_3: typeof StdPersistent_HArray1OfShape1_3;
  StdPersistent_HArray1OfShape1_4: typeof StdPersistent_HArray1OfShape1_4;
  StdPersistent_Naming: typeof StdPersistent_Naming;
  StdPersistent_PPrsStd: typeof StdPersistent_PPrsStd;
  StdPersistent_TopoDS: typeof StdPersistent_TopoDS;
  StdPrs_BndBox: typeof StdPrs_BndBox;
  StdPrs_Curve: typeof StdPrs_Curve;
  StdPrs_DeflectionCurve: typeof StdPrs_DeflectionCurve;
  StdPrs_HLRPolyShape: typeof StdPrs_HLRPolyShape;
  StdPrs_HLRShape: typeof StdPrs_HLRShape;
  StdPrs_HLRToolShape: typeof StdPrs_HLRToolShape;
  StdPrs_Isolines: typeof StdPrs_Isolines;
  StdPrs_Plane: typeof StdPrs_Plane;
  StdPrs_PoleCurve: typeof StdPrs_PoleCurve;
  StdPrs_ShadedShape: typeof StdPrs_ShadedShape;
  StdPrs_ShadedSurface: typeof StdPrs_ShadedSurface;
  StdPrs_ToolPoint: typeof StdPrs_ToolPoint;
  StdPrs_ToolRFace: typeof StdPrs_ToolRFace;
  StdPrs_ToolRFace_1: typeof StdPrs_ToolRFace_1;
  StdPrs_ToolRFace_2: typeof StdPrs_ToolRFace_2;
  StdPrs_ToolTriangulatedShape: typeof StdPrs_ToolTriangulatedShape;
  StdPrs_ToolVertex: typeof StdPrs_ToolVertex;
  StdPrs_WFDeflectionRestrictedFace: typeof StdPrs_WFDeflectionRestrictedFace;
  StdPrs_WFDeflectionSurface: typeof StdPrs_WFDeflectionSurface;
  StdPrs_WFPoleSurface: typeof StdPrs_WFPoleSurface;
  StdPrs_WFRestrictedFace: typeof StdPrs_WFRestrictedFace;
  StdPrs_WFShape: typeof StdPrs_WFShape;
  StdPrs_WFSurface: typeof StdPrs_WFSurface;
  StdSelect: typeof StdSelect;
  StdSelect_BRepOwner: typeof StdSelect_BRepOwner;
  StdSelect_BRepOwner_1: typeof StdSelect_BRepOwner_1;
  StdSelect_BRepOwner_2: typeof StdSelect_BRepOwner_2;
  StdSelect_BRepOwner_3: typeof StdSelect_BRepOwner_3;
  StdSelect_BRepSelectionTool: typeof StdSelect_BRepSelectionTool;
  StdSelect_EdgeFilter: typeof StdSelect_EdgeFilter;
  StdSelect_FaceFilter: typeof StdSelect_FaceFilter;
  StdSelect_Prs: typeof StdSelect_Prs;
  StdSelect_Shape: typeof StdSelect_Shape;
  StdSelect_ShapeTypeFilter: typeof StdSelect_ShapeTypeFilter;
  StdSelect_ViewerSelector3d: typeof StdSelect_ViewerSelector3d;
  StdStorage: typeof StdStorage;
  StdStorage_Bucket: typeof StdStorage_Bucket;
  StdStorage_Bucket_1: typeof StdStorage_Bucket_1;
  StdStorage_Bucket_2: typeof StdStorage_Bucket_2;
  StdStorage_BucketIterator: typeof StdStorage_BucketIterator;
  StdStorage_BucketOfPersistent: typeof StdStorage_BucketOfPersistent;
  StdStorage_Data: typeof StdStorage_Data;
  StdStorage_HSequenceOfRoots: typeof StdStorage_HSequenceOfRoots;
  StdStorage_HSequenceOfRoots_1: typeof StdStorage_HSequenceOfRoots_1;
  StdStorage_HSequenceOfRoots_2: typeof StdStorage_HSequenceOfRoots_2;
  StdStorage_HeaderData: typeof StdStorage_HeaderData;
  StdStorage_Root: typeof StdStorage_Root;
  StdStorage_Root_1: typeof StdStorage_Root_1;
  StdStorage_Root_2: typeof StdStorage_Root_2;
  StdStorage_RootData: typeof StdStorage_RootData;
  StdStorage_TypeData: typeof StdStorage_TypeData;
  StepAP203_ApprovedItem: typeof StepAP203_ApprovedItem;
  StepAP203_CcDesignApproval: typeof StepAP203_CcDesignApproval;
  StepAP203_CcDesignCertification: typeof StepAP203_CcDesignCertification;
  StepAP203_CcDesignContract: typeof StepAP203_CcDesignContract;
  StepAP203_CcDesignDateAndTimeAssignment: typeof StepAP203_CcDesignDateAndTimeAssignment;
  StepAP203_CcDesignPersonAndOrganizationAssignment: typeof StepAP203_CcDesignPersonAndOrganizationAssignment;
  StepAP203_CcDesignSecurityClassification: typeof StepAP203_CcDesignSecurityClassification;
  StepAP203_CcDesignSpecificationReference: typeof StepAP203_CcDesignSpecificationReference;
  StepAP203_CertifiedItem: typeof StepAP203_CertifiedItem;
  StepAP203_Change: typeof StepAP203_Change;
  StepAP203_ChangeRequest: typeof StepAP203_ChangeRequest;
  StepAP203_ChangeRequestItem: typeof StepAP203_ChangeRequestItem;
  StepAP203_ClassifiedItem: typeof StepAP203_ClassifiedItem;
  StepAP203_ContractedItem: typeof StepAP203_ContractedItem;
  StepAP203_DateTimeItem: typeof StepAP203_DateTimeItem;
  StepAP203_HArray1OfApprovedItem: typeof StepAP203_HArray1OfApprovedItem;
  StepAP203_HArray1OfApprovedItem_1: typeof StepAP203_HArray1OfApprovedItem_1;
  StepAP203_HArray1OfApprovedItem_2: typeof StepAP203_HArray1OfApprovedItem_2;
  StepAP203_HArray1OfApprovedItem_3: typeof StepAP203_HArray1OfApprovedItem_3;
  StepAP203_HArray1OfApprovedItem_4: typeof StepAP203_HArray1OfApprovedItem_4;
  StepAP203_HArray1OfCertifiedItem: typeof StepAP203_HArray1OfCertifiedItem;
  StepAP203_HArray1OfCertifiedItem_1: typeof StepAP203_HArray1OfCertifiedItem_1;
  StepAP203_HArray1OfCertifiedItem_2: typeof StepAP203_HArray1OfCertifiedItem_2;
  StepAP203_HArray1OfCertifiedItem_3: typeof StepAP203_HArray1OfCertifiedItem_3;
  StepAP203_HArray1OfCertifiedItem_4: typeof StepAP203_HArray1OfCertifiedItem_4;
  StepAP203_HArray1OfChangeRequestItem: typeof StepAP203_HArray1OfChangeRequestItem;
  StepAP203_HArray1OfChangeRequestItem_1: typeof StepAP203_HArray1OfChangeRequestItem_1;
  StepAP203_HArray1OfChangeRequestItem_2: typeof StepAP203_HArray1OfChangeRequestItem_2;
  StepAP203_HArray1OfChangeRequestItem_3: typeof StepAP203_HArray1OfChangeRequestItem_3;
  StepAP203_HArray1OfChangeRequestItem_4: typeof StepAP203_HArray1OfChangeRequestItem_4;
  StepAP203_HArray1OfClassifiedItem: typeof StepAP203_HArray1OfClassifiedItem;
  StepAP203_HArray1OfClassifiedItem_1: typeof StepAP203_HArray1OfClassifiedItem_1;
  StepAP203_HArray1OfClassifiedItem_2: typeof StepAP203_HArray1OfClassifiedItem_2;
  StepAP203_HArray1OfClassifiedItem_3: typeof StepAP203_HArray1OfClassifiedItem_3;
  StepAP203_HArray1OfClassifiedItem_4: typeof StepAP203_HArray1OfClassifiedItem_4;
  StepAP203_HArray1OfContractedItem: typeof StepAP203_HArray1OfContractedItem;
  StepAP203_HArray1OfContractedItem_1: typeof StepAP203_HArray1OfContractedItem_1;
  StepAP203_HArray1OfContractedItem_2: typeof StepAP203_HArray1OfContractedItem_2;
  StepAP203_HArray1OfContractedItem_3: typeof StepAP203_HArray1OfContractedItem_3;
  StepAP203_HArray1OfContractedItem_4: typeof StepAP203_HArray1OfContractedItem_4;
  StepAP203_HArray1OfDateTimeItem: typeof StepAP203_HArray1OfDateTimeItem;
  StepAP203_HArray1OfDateTimeItem_1: typeof StepAP203_HArray1OfDateTimeItem_1;
  StepAP203_HArray1OfDateTimeItem_2: typeof StepAP203_HArray1OfDateTimeItem_2;
  StepAP203_HArray1OfDateTimeItem_3: typeof StepAP203_HArray1OfDateTimeItem_3;
  StepAP203_HArray1OfDateTimeItem_4: typeof StepAP203_HArray1OfDateTimeItem_4;
  StepAP203_HArray1OfPersonOrganizationItem: typeof StepAP203_HArray1OfPersonOrganizationItem;
  StepAP203_HArray1OfPersonOrganizationItem_1: typeof StepAP203_HArray1OfPersonOrganizationItem_1;
  StepAP203_HArray1OfPersonOrganizationItem_2: typeof StepAP203_HArray1OfPersonOrganizationItem_2;
  StepAP203_HArray1OfPersonOrganizationItem_3: typeof StepAP203_HArray1OfPersonOrganizationItem_3;
  StepAP203_HArray1OfPersonOrganizationItem_4: typeof StepAP203_HArray1OfPersonOrganizationItem_4;
  StepAP203_HArray1OfSpecifiedItem: typeof StepAP203_HArray1OfSpecifiedItem;
  StepAP203_HArray1OfSpecifiedItem_1: typeof StepAP203_HArray1OfSpecifiedItem_1;
  StepAP203_HArray1OfSpecifiedItem_2: typeof StepAP203_HArray1OfSpecifiedItem_2;
  StepAP203_HArray1OfSpecifiedItem_3: typeof StepAP203_HArray1OfSpecifiedItem_3;
  StepAP203_HArray1OfSpecifiedItem_4: typeof StepAP203_HArray1OfSpecifiedItem_4;
  StepAP203_HArray1OfStartRequestItem: typeof StepAP203_HArray1OfStartRequestItem;
  StepAP203_HArray1OfStartRequestItem_1: typeof StepAP203_HArray1OfStartRequestItem_1;
  StepAP203_HArray1OfStartRequestItem_2: typeof StepAP203_HArray1OfStartRequestItem_2;
  StepAP203_HArray1OfStartRequestItem_3: typeof StepAP203_HArray1OfStartRequestItem_3;
  StepAP203_HArray1OfStartRequestItem_4: typeof StepAP203_HArray1OfStartRequestItem_4;
  StepAP203_HArray1OfWorkItem: typeof StepAP203_HArray1OfWorkItem;
  StepAP203_HArray1OfWorkItem_1: typeof StepAP203_HArray1OfWorkItem_1;
  StepAP203_HArray1OfWorkItem_2: typeof StepAP203_HArray1OfWorkItem_2;
  StepAP203_HArray1OfWorkItem_3: typeof StepAP203_HArray1OfWorkItem_3;
  StepAP203_HArray1OfWorkItem_4: typeof StepAP203_HArray1OfWorkItem_4;
  StepAP203_PersonOrganizationItem: typeof StepAP203_PersonOrganizationItem;
  StepAP203_SpecifiedItem: typeof StepAP203_SpecifiedItem;
  StepAP203_StartRequest: typeof StepAP203_StartRequest;
  StepAP203_StartRequestItem: typeof StepAP203_StartRequestItem;
  StepAP203_StartWork: typeof StepAP203_StartWork;
  StepAP203_WorkItem: typeof StepAP203_WorkItem;
  StepAP209_Construct: typeof StepAP209_Construct;
  StepAP209_Construct_1: typeof StepAP209_Construct_1;
  StepAP209_Construct_2: typeof StepAP209_Construct_2;
  StepAP214: typeof StepAP214;
  StepAP214_AppliedApprovalAssignment: typeof StepAP214_AppliedApprovalAssignment;
  StepAP214_AppliedDateAndTimeAssignment: typeof StepAP214_AppliedDateAndTimeAssignment;
  StepAP214_AppliedDateAssignment: typeof StepAP214_AppliedDateAssignment;
  StepAP214_AppliedDocumentReference: typeof StepAP214_AppliedDocumentReference;
  StepAP214_AppliedExternalIdentificationAssignment: typeof StepAP214_AppliedExternalIdentificationAssignment;
  StepAP214_AppliedGroupAssignment: typeof StepAP214_AppliedGroupAssignment;
  StepAP214_AppliedOrganizationAssignment: typeof StepAP214_AppliedOrganizationAssignment;
  StepAP214_AppliedPersonAndOrganizationAssignment: typeof StepAP214_AppliedPersonAndOrganizationAssignment;
  StepAP214_AppliedPresentedItem: typeof StepAP214_AppliedPresentedItem;
  StepAP214_AppliedSecurityClassificationAssignment: typeof StepAP214_AppliedSecurityClassificationAssignment;
  StepAP214_ApprovalItem: typeof StepAP214_ApprovalItem;
  StepAP214_AutoDesignActualDateAndTimeAssignment: typeof StepAP214_AutoDesignActualDateAndTimeAssignment;
  StepAP214_AutoDesignActualDateAssignment: typeof StepAP214_AutoDesignActualDateAssignment;
  StepAP214_AutoDesignApprovalAssignment: typeof StepAP214_AutoDesignApprovalAssignment;
  StepAP214_AutoDesignDateAndPersonAssignment: typeof StepAP214_AutoDesignDateAndPersonAssignment;
  StepAP214_AutoDesignDateAndPersonItem: typeof StepAP214_AutoDesignDateAndPersonItem;
  StepAP214_AutoDesignDateAndTimeItem: typeof StepAP214_AutoDesignDateAndTimeItem;
  StepAP214_AutoDesignDatedItem: typeof StepAP214_AutoDesignDatedItem;
  StepAP214_AutoDesignDocumentReference: typeof StepAP214_AutoDesignDocumentReference;
  StepAP214_AutoDesignGeneralOrgItem: typeof StepAP214_AutoDesignGeneralOrgItem;
  StepAP214_AutoDesignGroupAssignment: typeof StepAP214_AutoDesignGroupAssignment;
  StepAP214_AutoDesignGroupedItem: typeof StepAP214_AutoDesignGroupedItem;
  StepAP214_AutoDesignNominalDateAndTimeAssignment: typeof StepAP214_AutoDesignNominalDateAndTimeAssignment;
  StepAP214_AutoDesignNominalDateAssignment: typeof StepAP214_AutoDesignNominalDateAssignment;
  StepAP214_AutoDesignOrganizationAssignment: typeof StepAP214_AutoDesignOrganizationAssignment;
  StepAP214_AutoDesignOrganizationItem: typeof StepAP214_AutoDesignOrganizationItem;
  StepAP214_AutoDesignPersonAndOrganizationAssignment: typeof StepAP214_AutoDesignPersonAndOrganizationAssignment;
  StepAP214_AutoDesignPresentedItem: typeof StepAP214_AutoDesignPresentedItem;
  StepAP214_AutoDesignPresentedItemSelect: typeof StepAP214_AutoDesignPresentedItemSelect;
  StepAP214_AutoDesignReferencingItem: typeof StepAP214_AutoDesignReferencingItem;
  StepAP214_AutoDesignSecurityClassificationAssignment: typeof StepAP214_AutoDesignSecurityClassificationAssignment;
  StepAP214_Class: typeof StepAP214_Class;
  StepAP214_DateAndTimeItem: typeof StepAP214_DateAndTimeItem;
  StepAP214_DateItem: typeof StepAP214_DateItem;
  StepAP214_DocumentReferenceItem: typeof StepAP214_DocumentReferenceItem;
  StepAP214_ExternalIdentificationItem: typeof StepAP214_ExternalIdentificationItem;
  StepAP214_ExternallyDefinedClass: typeof StepAP214_ExternallyDefinedClass;
  StepAP214_ExternallyDefinedGeneralProperty: typeof StepAP214_ExternallyDefinedGeneralProperty;
  StepAP214_GroupItem: typeof StepAP214_GroupItem;
  StepAP214_HArray1OfApprovalItem: typeof StepAP214_HArray1OfApprovalItem;
  StepAP214_HArray1OfApprovalItem_1: typeof StepAP214_HArray1OfApprovalItem_1;
  StepAP214_HArray1OfApprovalItem_2: typeof StepAP214_HArray1OfApprovalItem_2;
  StepAP214_HArray1OfApprovalItem_3: typeof StepAP214_HArray1OfApprovalItem_3;
  StepAP214_HArray1OfApprovalItem_4: typeof StepAP214_HArray1OfApprovalItem_4;
  StepAP214_HArray1OfAutoDesignDateAndPersonItem: typeof StepAP214_HArray1OfAutoDesignDateAndPersonItem;
  StepAP214_HArray1OfAutoDesignDateAndPersonItem_1: typeof StepAP214_HArray1OfAutoDesignDateAndPersonItem_1;
  StepAP214_HArray1OfAutoDesignDateAndPersonItem_2: typeof StepAP214_HArray1OfAutoDesignDateAndPersonItem_2;
  StepAP214_HArray1OfAutoDesignDateAndPersonItem_3: typeof StepAP214_HArray1OfAutoDesignDateAndPersonItem_3;
  StepAP214_HArray1OfAutoDesignDateAndPersonItem_4: typeof StepAP214_HArray1OfAutoDesignDateAndPersonItem_4;
  StepAP214_HArray1OfAutoDesignDateAndTimeItem: typeof StepAP214_HArray1OfAutoDesignDateAndTimeItem;
  StepAP214_HArray1OfAutoDesignDateAndTimeItem_1: typeof StepAP214_HArray1OfAutoDesignDateAndTimeItem_1;
  StepAP214_HArray1OfAutoDesignDateAndTimeItem_2: typeof StepAP214_HArray1OfAutoDesignDateAndTimeItem_2;
  StepAP214_HArray1OfAutoDesignDateAndTimeItem_3: typeof StepAP214_HArray1OfAutoDesignDateAndTimeItem_3;
  StepAP214_HArray1OfAutoDesignDateAndTimeItem_4: typeof StepAP214_HArray1OfAutoDesignDateAndTimeItem_4;
  StepAP214_HArray1OfAutoDesignDatedItem: typeof StepAP214_HArray1OfAutoDesignDatedItem;
  StepAP214_HArray1OfAutoDesignDatedItem_1: typeof StepAP214_HArray1OfAutoDesignDatedItem_1;
  StepAP214_HArray1OfAutoDesignDatedItem_2: typeof StepAP214_HArray1OfAutoDesignDatedItem_2;
  StepAP214_HArray1OfAutoDesignDatedItem_3: typeof StepAP214_HArray1OfAutoDesignDatedItem_3;
  StepAP214_HArray1OfAutoDesignDatedItem_4: typeof StepAP214_HArray1OfAutoDesignDatedItem_4;
  StepAP214_HArray1OfAutoDesignGeneralOrgItem: typeof StepAP214_HArray1OfAutoDesignGeneralOrgItem;
  StepAP214_HArray1OfAutoDesignGeneralOrgItem_1: typeof StepAP214_HArray1OfAutoDesignGeneralOrgItem_1;
  StepAP214_HArray1OfAutoDesignGeneralOrgItem_2: typeof StepAP214_HArray1OfAutoDesignGeneralOrgItem_2;
  StepAP214_HArray1OfAutoDesignGeneralOrgItem_3: typeof StepAP214_HArray1OfAutoDesignGeneralOrgItem_3;
  StepAP214_HArray1OfAutoDesignGeneralOrgItem_4: typeof StepAP214_HArray1OfAutoDesignGeneralOrgItem_4;
  StepAP214_HArray1OfAutoDesignGroupedItem: typeof StepAP214_HArray1OfAutoDesignGroupedItem;
  StepAP214_HArray1OfAutoDesignGroupedItem_1: typeof StepAP214_HArray1OfAutoDesignGroupedItem_1;
  StepAP214_HArray1OfAutoDesignGroupedItem_2: typeof StepAP214_HArray1OfAutoDesignGroupedItem_2;
  StepAP214_HArray1OfAutoDesignGroupedItem_3: typeof StepAP214_HArray1OfAutoDesignGroupedItem_3;
  StepAP214_HArray1OfAutoDesignGroupedItem_4: typeof StepAP214_HArray1OfAutoDesignGroupedItem_4;
  StepAP214_HArray1OfAutoDesignPresentedItemSelect: typeof StepAP214_HArray1OfAutoDesignPresentedItemSelect;
  StepAP214_HArray1OfAutoDesignPresentedItemSelect_1: typeof StepAP214_HArray1OfAutoDesignPresentedItemSelect_1;
  StepAP214_HArray1OfAutoDesignPresentedItemSelect_2: typeof StepAP214_HArray1OfAutoDesignPresentedItemSelect_2;
  StepAP214_HArray1OfAutoDesignPresentedItemSelect_3: typeof StepAP214_HArray1OfAutoDesignPresentedItemSelect_3;
  StepAP214_HArray1OfAutoDesignPresentedItemSelect_4: typeof StepAP214_HArray1OfAutoDesignPresentedItemSelect_4;
  StepAP214_HArray1OfAutoDesignReferencingItem: typeof StepAP214_HArray1OfAutoDesignReferencingItem;
  StepAP214_HArray1OfAutoDesignReferencingItem_1: typeof StepAP214_HArray1OfAutoDesignReferencingItem_1;
  StepAP214_HArray1OfAutoDesignReferencingItem_2: typeof StepAP214_HArray1OfAutoDesignReferencingItem_2;
  StepAP214_HArray1OfAutoDesignReferencingItem_3: typeof StepAP214_HArray1OfAutoDesignReferencingItem_3;
  StepAP214_HArray1OfAutoDesignReferencingItem_4: typeof StepAP214_HArray1OfAutoDesignReferencingItem_4;
  StepAP214_HArray1OfDateAndTimeItem: typeof StepAP214_HArray1OfDateAndTimeItem;
  StepAP214_HArray1OfDateAndTimeItem_1: typeof StepAP214_HArray1OfDateAndTimeItem_1;
  StepAP214_HArray1OfDateAndTimeItem_2: typeof StepAP214_HArray1OfDateAndTimeItem_2;
  StepAP214_HArray1OfDateAndTimeItem_3: typeof StepAP214_HArray1OfDateAndTimeItem_3;
  StepAP214_HArray1OfDateAndTimeItem_4: typeof StepAP214_HArray1OfDateAndTimeItem_4;
  StepAP214_HArray1OfDateItem: typeof StepAP214_HArray1OfDateItem;
  StepAP214_HArray1OfDateItem_1: typeof StepAP214_HArray1OfDateItem_1;
  StepAP214_HArray1OfDateItem_2: typeof StepAP214_HArray1OfDateItem_2;
  StepAP214_HArray1OfDateItem_3: typeof StepAP214_HArray1OfDateItem_3;
  StepAP214_HArray1OfDateItem_4: typeof StepAP214_HArray1OfDateItem_4;
  StepAP214_HArray1OfDocumentReferenceItem: typeof StepAP214_HArray1OfDocumentReferenceItem;
  StepAP214_HArray1OfDocumentReferenceItem_1: typeof StepAP214_HArray1OfDocumentReferenceItem_1;
  StepAP214_HArray1OfDocumentReferenceItem_2: typeof StepAP214_HArray1OfDocumentReferenceItem_2;
  StepAP214_HArray1OfDocumentReferenceItem_3: typeof StepAP214_HArray1OfDocumentReferenceItem_3;
  StepAP214_HArray1OfDocumentReferenceItem_4: typeof StepAP214_HArray1OfDocumentReferenceItem_4;
  StepAP214_HArray1OfExternalIdentificationItem: typeof StepAP214_HArray1OfExternalIdentificationItem;
  StepAP214_HArray1OfExternalIdentificationItem_1: typeof StepAP214_HArray1OfExternalIdentificationItem_1;
  StepAP214_HArray1OfExternalIdentificationItem_2: typeof StepAP214_HArray1OfExternalIdentificationItem_2;
  StepAP214_HArray1OfExternalIdentificationItem_3: typeof StepAP214_HArray1OfExternalIdentificationItem_3;
  StepAP214_HArray1OfExternalIdentificationItem_4: typeof StepAP214_HArray1OfExternalIdentificationItem_4;
  StepAP214_HArray1OfGroupItem: typeof StepAP214_HArray1OfGroupItem;
  StepAP214_HArray1OfGroupItem_1: typeof StepAP214_HArray1OfGroupItem_1;
  StepAP214_HArray1OfGroupItem_2: typeof StepAP214_HArray1OfGroupItem_2;
  StepAP214_HArray1OfGroupItem_3: typeof StepAP214_HArray1OfGroupItem_3;
  StepAP214_HArray1OfGroupItem_4: typeof StepAP214_HArray1OfGroupItem_4;
  StepAP214_HArray1OfOrganizationItem: typeof StepAP214_HArray1OfOrganizationItem;
  StepAP214_HArray1OfOrganizationItem_1: typeof StepAP214_HArray1OfOrganizationItem_1;
  StepAP214_HArray1OfOrganizationItem_2: typeof StepAP214_HArray1OfOrganizationItem_2;
  StepAP214_HArray1OfOrganizationItem_3: typeof StepAP214_HArray1OfOrganizationItem_3;
  StepAP214_HArray1OfOrganizationItem_4: typeof StepAP214_HArray1OfOrganizationItem_4;
  StepAP214_HArray1OfPersonAndOrganizationItem: typeof StepAP214_HArray1OfPersonAndOrganizationItem;
  StepAP214_HArray1OfPersonAndOrganizationItem_1: typeof StepAP214_HArray1OfPersonAndOrganizationItem_1;
  StepAP214_HArray1OfPersonAndOrganizationItem_2: typeof StepAP214_HArray1OfPersonAndOrganizationItem_2;
  StepAP214_HArray1OfPersonAndOrganizationItem_3: typeof StepAP214_HArray1OfPersonAndOrganizationItem_3;
  StepAP214_HArray1OfPersonAndOrganizationItem_4: typeof StepAP214_HArray1OfPersonAndOrganizationItem_4;
  StepAP214_HArray1OfPresentedItemSelect: typeof StepAP214_HArray1OfPresentedItemSelect;
  StepAP214_HArray1OfPresentedItemSelect_1: typeof StepAP214_HArray1OfPresentedItemSelect_1;
  StepAP214_HArray1OfPresentedItemSelect_2: typeof StepAP214_HArray1OfPresentedItemSelect_2;
  StepAP214_HArray1OfPresentedItemSelect_3: typeof StepAP214_HArray1OfPresentedItemSelect_3;
  StepAP214_HArray1OfPresentedItemSelect_4: typeof StepAP214_HArray1OfPresentedItemSelect_4;
  StepAP214_HArray1OfSecurityClassificationItem: typeof StepAP214_HArray1OfSecurityClassificationItem;
  StepAP214_HArray1OfSecurityClassificationItem_1: typeof StepAP214_HArray1OfSecurityClassificationItem_1;
  StepAP214_HArray1OfSecurityClassificationItem_2: typeof StepAP214_HArray1OfSecurityClassificationItem_2;
  StepAP214_HArray1OfSecurityClassificationItem_3: typeof StepAP214_HArray1OfSecurityClassificationItem_3;
  StepAP214_HArray1OfSecurityClassificationItem_4: typeof StepAP214_HArray1OfSecurityClassificationItem_4;
  StepAP214_OrganizationItem: typeof StepAP214_OrganizationItem;
  StepAP214_PersonAndOrganizationItem: typeof StepAP214_PersonAndOrganizationItem;
  StepAP214_PresentedItemSelect: typeof StepAP214_PresentedItemSelect;
  StepAP214_Protocol: typeof StepAP214_Protocol;
  StepAP214_RepItemGroup: typeof StepAP214_RepItemGroup;
  StepAP214_SecurityClassificationItem: typeof StepAP214_SecurityClassificationItem;
  StepAP242_DraughtingModelItemAssociation: typeof StepAP242_DraughtingModelItemAssociation;
  StepAP242_GeometricItemSpecificUsage: typeof StepAP242_GeometricItemSpecificUsage;
  StepAP242_IdAttribute: typeof StepAP242_IdAttribute;
  StepAP242_IdAttributeSelect: typeof StepAP242_IdAttributeSelect;
  StepAP242_ItemIdentifiedRepresentationUsage: typeof StepAP242_ItemIdentifiedRepresentationUsage;
  StepAP242_ItemIdentifiedRepresentationUsageDefinition: typeof StepAP242_ItemIdentifiedRepresentationUsageDefinition;
  StepBasic_Action: typeof StepBasic_Action;
  StepBasic_ActionAssignment: typeof StepBasic_ActionAssignment;
  StepBasic_ActionMethod: typeof StepBasic_ActionMethod;
  StepBasic_ActionRequestAssignment: typeof StepBasic_ActionRequestAssignment;
  StepBasic_ActionRequestSolution: typeof StepBasic_ActionRequestSolution;
  StepBasic_Address: typeof StepBasic_Address;
  StepBasic_ApplicationContext: typeof StepBasic_ApplicationContext;
  StepBasic_ApplicationContextElement: typeof StepBasic_ApplicationContextElement;
  StepBasic_ApplicationProtocolDefinition: typeof StepBasic_ApplicationProtocolDefinition;
  StepBasic_Approval: typeof StepBasic_Approval;
  StepBasic_ApprovalAssignment: typeof StepBasic_ApprovalAssignment;
  StepBasic_ApprovalDateTime: typeof StepBasic_ApprovalDateTime;
  StepBasic_ApprovalPersonOrganization: typeof StepBasic_ApprovalPersonOrganization;
  StepBasic_ApprovalRelationship: typeof StepBasic_ApprovalRelationship;
  StepBasic_ApprovalRole: typeof StepBasic_ApprovalRole;
  StepBasic_ApprovalStatus: typeof StepBasic_ApprovalStatus;
  StepBasic_AreaUnit: typeof StepBasic_AreaUnit;
  StepBasic_CalendarDate: typeof StepBasic_CalendarDate;
  StepBasic_Certification: typeof StepBasic_Certification;
  StepBasic_CertificationAssignment: typeof StepBasic_CertificationAssignment;
  StepBasic_CertificationType: typeof StepBasic_CertificationType;
  StepBasic_CharacterizedObject: typeof StepBasic_CharacterizedObject;
  StepBasic_Contract: typeof StepBasic_Contract;
  StepBasic_ContractAssignment: typeof StepBasic_ContractAssignment;
  StepBasic_ContractType: typeof StepBasic_ContractType;
  StepBasic_ConversionBasedUnit: typeof StepBasic_ConversionBasedUnit;
  StepBasic_ConversionBasedUnitAndAreaUnit: typeof StepBasic_ConversionBasedUnitAndAreaUnit;
  StepBasic_ConversionBasedUnitAndLengthUnit: typeof StepBasic_ConversionBasedUnitAndLengthUnit;
  StepBasic_ConversionBasedUnitAndMassUnit: typeof StepBasic_ConversionBasedUnitAndMassUnit;
  StepBasic_ConversionBasedUnitAndPlaneAngleUnit: typeof StepBasic_ConversionBasedUnitAndPlaneAngleUnit;
  StepBasic_ConversionBasedUnitAndRatioUnit: typeof StepBasic_ConversionBasedUnitAndRatioUnit;
  StepBasic_ConversionBasedUnitAndSolidAngleUnit: typeof StepBasic_ConversionBasedUnitAndSolidAngleUnit;
  StepBasic_ConversionBasedUnitAndTimeUnit: typeof StepBasic_ConversionBasedUnitAndTimeUnit;
  StepBasic_ConversionBasedUnitAndVolumeUnit: typeof StepBasic_ConversionBasedUnitAndVolumeUnit;
  StepBasic_CoordinatedUniversalTimeOffset: typeof StepBasic_CoordinatedUniversalTimeOffset;
  StepBasic_Date: typeof StepBasic_Date;
  StepBasic_DateAndTime: typeof StepBasic_DateAndTime;
  StepBasic_DateAndTimeAssignment: typeof StepBasic_DateAndTimeAssignment;
  StepBasic_DateAssignment: typeof StepBasic_DateAssignment;
  StepBasic_DateRole: typeof StepBasic_DateRole;
  StepBasic_DateTimeRole: typeof StepBasic_DateTimeRole;
  StepBasic_DateTimeSelect: typeof StepBasic_DateTimeSelect;
  StepBasic_DerivedUnit: typeof StepBasic_DerivedUnit;
  StepBasic_DerivedUnitElement: typeof StepBasic_DerivedUnitElement;
  StepBasic_DesignContext: typeof StepBasic_DesignContext;
  StepBasic_DigitalDocument: typeof StepBasic_DigitalDocument;
  StepBasic_DimensionalExponents: typeof StepBasic_DimensionalExponents;
  StepBasic_Document: typeof StepBasic_Document;
  StepBasic_DocumentFile: typeof StepBasic_DocumentFile;
  StepBasic_DocumentProductAssociation: typeof StepBasic_DocumentProductAssociation;
  StepBasic_DocumentProductEquivalence: typeof StepBasic_DocumentProductEquivalence;
  StepBasic_DocumentReference: typeof StepBasic_DocumentReference;
  StepBasic_DocumentRelationship: typeof StepBasic_DocumentRelationship;
  StepBasic_DocumentRepresentationType: typeof StepBasic_DocumentRepresentationType;
  StepBasic_DocumentType: typeof StepBasic_DocumentType;
  StepBasic_DocumentUsageConstraint: typeof StepBasic_DocumentUsageConstraint;
  StepBasic_Effectivity: typeof StepBasic_Effectivity;
  StepBasic_EffectivityAssignment: typeof StepBasic_EffectivityAssignment;
  StepBasic_EulerAngles: typeof StepBasic_EulerAngles;
  StepBasic_ExternalIdentificationAssignment: typeof StepBasic_ExternalIdentificationAssignment;
  StepBasic_ExternalSource: typeof StepBasic_ExternalSource;
  StepBasic_ExternallyDefinedItem: typeof StepBasic_ExternallyDefinedItem;
  StepBasic_GeneralProperty: typeof StepBasic_GeneralProperty;
  StepBasic_Group: typeof StepBasic_Group;
  StepBasic_GroupAssignment: typeof StepBasic_GroupAssignment;
  StepBasic_GroupRelationship: typeof StepBasic_GroupRelationship;
  StepBasic_HArray1OfApproval: typeof StepBasic_HArray1OfApproval;
  StepBasic_HArray1OfApproval_1: typeof StepBasic_HArray1OfApproval_1;
  StepBasic_HArray1OfApproval_2: typeof StepBasic_HArray1OfApproval_2;
  StepBasic_HArray1OfApproval_3: typeof StepBasic_HArray1OfApproval_3;
  StepBasic_HArray1OfApproval_4: typeof StepBasic_HArray1OfApproval_4;
  StepBasic_HArray1OfDerivedUnitElement: typeof StepBasic_HArray1OfDerivedUnitElement;
  StepBasic_HArray1OfDerivedUnitElement_1: typeof StepBasic_HArray1OfDerivedUnitElement_1;
  StepBasic_HArray1OfDerivedUnitElement_2: typeof StepBasic_HArray1OfDerivedUnitElement_2;
  StepBasic_HArray1OfDerivedUnitElement_3: typeof StepBasic_HArray1OfDerivedUnitElement_3;
  StepBasic_HArray1OfDerivedUnitElement_4: typeof StepBasic_HArray1OfDerivedUnitElement_4;
  StepBasic_HArray1OfDocument: typeof StepBasic_HArray1OfDocument;
  StepBasic_HArray1OfDocument_1: typeof StepBasic_HArray1OfDocument_1;
  StepBasic_HArray1OfDocument_2: typeof StepBasic_HArray1OfDocument_2;
  StepBasic_HArray1OfDocument_3: typeof StepBasic_HArray1OfDocument_3;
  StepBasic_HArray1OfDocument_4: typeof StepBasic_HArray1OfDocument_4;
  StepBasic_HArray1OfNamedUnit: typeof StepBasic_HArray1OfNamedUnit;
  StepBasic_HArray1OfNamedUnit_1: typeof StepBasic_HArray1OfNamedUnit_1;
  StepBasic_HArray1OfNamedUnit_2: typeof StepBasic_HArray1OfNamedUnit_2;
  StepBasic_HArray1OfNamedUnit_3: typeof StepBasic_HArray1OfNamedUnit_3;
  StepBasic_HArray1OfNamedUnit_4: typeof StepBasic_HArray1OfNamedUnit_4;
  StepBasic_HArray1OfOrganization: typeof StepBasic_HArray1OfOrganization;
  StepBasic_HArray1OfOrganization_1: typeof StepBasic_HArray1OfOrganization_1;
  StepBasic_HArray1OfOrganization_2: typeof StepBasic_HArray1OfOrganization_2;
  StepBasic_HArray1OfOrganization_3: typeof StepBasic_HArray1OfOrganization_3;
  StepBasic_HArray1OfOrganization_4: typeof StepBasic_HArray1OfOrganization_4;
  StepBasic_HArray1OfPerson: typeof StepBasic_HArray1OfPerson;
  StepBasic_HArray1OfPerson_1: typeof StepBasic_HArray1OfPerson_1;
  StepBasic_HArray1OfPerson_2: typeof StepBasic_HArray1OfPerson_2;
  StepBasic_HArray1OfPerson_3: typeof StepBasic_HArray1OfPerson_3;
  StepBasic_HArray1OfPerson_4: typeof StepBasic_HArray1OfPerson_4;
  StepBasic_HArray1OfProduct: typeof StepBasic_HArray1OfProduct;
  StepBasic_HArray1OfProduct_1: typeof StepBasic_HArray1OfProduct_1;
  StepBasic_HArray1OfProduct_2: typeof StepBasic_HArray1OfProduct_2;
  StepBasic_HArray1OfProduct_3: typeof StepBasic_HArray1OfProduct_3;
  StepBasic_HArray1OfProduct_4: typeof StepBasic_HArray1OfProduct_4;
  StepBasic_HArray1OfProductContext: typeof StepBasic_HArray1OfProductContext;
  StepBasic_HArray1OfProductContext_1: typeof StepBasic_HArray1OfProductContext_1;
  StepBasic_HArray1OfProductContext_2: typeof StepBasic_HArray1OfProductContext_2;
  StepBasic_HArray1OfProductContext_3: typeof StepBasic_HArray1OfProductContext_3;
  StepBasic_HArray1OfProductContext_4: typeof StepBasic_HArray1OfProductContext_4;
  StepBasic_HArray1OfProductDefinition: typeof StepBasic_HArray1OfProductDefinition;
  StepBasic_HArray1OfProductDefinition_1: typeof StepBasic_HArray1OfProductDefinition_1;
  StepBasic_HArray1OfProductDefinition_2: typeof StepBasic_HArray1OfProductDefinition_2;
  StepBasic_HArray1OfProductDefinition_3: typeof StepBasic_HArray1OfProductDefinition_3;
  StepBasic_HArray1OfProductDefinition_4: typeof StepBasic_HArray1OfProductDefinition_4;
  StepBasic_HArray1OfUncertaintyMeasureWithUnit: typeof StepBasic_HArray1OfUncertaintyMeasureWithUnit;
  StepBasic_HArray1OfUncertaintyMeasureWithUnit_1: typeof StepBasic_HArray1OfUncertaintyMeasureWithUnit_1;
  StepBasic_HArray1OfUncertaintyMeasureWithUnit_2: typeof StepBasic_HArray1OfUncertaintyMeasureWithUnit_2;
  StepBasic_HArray1OfUncertaintyMeasureWithUnit_3: typeof StepBasic_HArray1OfUncertaintyMeasureWithUnit_3;
  StepBasic_HArray1OfUncertaintyMeasureWithUnit_4: typeof StepBasic_HArray1OfUncertaintyMeasureWithUnit_4;
  StepBasic_IdentificationAssignment: typeof StepBasic_IdentificationAssignment;
  StepBasic_IdentificationRole: typeof StepBasic_IdentificationRole;
  StepBasic_LengthMeasureWithUnit: typeof StepBasic_LengthMeasureWithUnit;
  StepBasic_LengthUnit: typeof StepBasic_LengthUnit;
  StepBasic_LocalTime: typeof StepBasic_LocalTime;
  StepBasic_MassMeasureWithUnit: typeof StepBasic_MassMeasureWithUnit;
  StepBasic_MassUnit: typeof StepBasic_MassUnit;
  StepBasic_MeasureValueMember: typeof StepBasic_MeasureValueMember;
  StepBasic_MeasureWithUnit: typeof StepBasic_MeasureWithUnit;
  StepBasic_MechanicalContext: typeof StepBasic_MechanicalContext;
  StepBasic_NameAssignment: typeof StepBasic_NameAssignment;
  StepBasic_NamedUnit: typeof StepBasic_NamedUnit;
  StepBasic_ObjectRole: typeof StepBasic_ObjectRole;
  StepBasic_OrdinalDate: typeof StepBasic_OrdinalDate;
  StepBasic_Organization: typeof StepBasic_Organization;
  StepBasic_OrganizationAssignment: typeof StepBasic_OrganizationAssignment;
  StepBasic_OrganizationRole: typeof StepBasic_OrganizationRole;
  StepBasic_OrganizationalAddress: typeof StepBasic_OrganizationalAddress;
  StepBasic_Person: typeof StepBasic_Person;
  StepBasic_PersonAndOrganization: typeof StepBasic_PersonAndOrganization;
  StepBasic_PersonAndOrganizationAssignment: typeof StepBasic_PersonAndOrganizationAssignment;
  StepBasic_PersonAndOrganizationRole: typeof StepBasic_PersonAndOrganizationRole;
  StepBasic_PersonOrganizationSelect: typeof StepBasic_PersonOrganizationSelect;
  StepBasic_PersonalAddress: typeof StepBasic_PersonalAddress;
  StepBasic_PhysicallyModeledProductDefinition: typeof StepBasic_PhysicallyModeledProductDefinition;
  StepBasic_PlaneAngleMeasureWithUnit: typeof StepBasic_PlaneAngleMeasureWithUnit;
  StepBasic_PlaneAngleUnit: typeof StepBasic_PlaneAngleUnit;
  StepBasic_Product: typeof StepBasic_Product;
  StepBasic_ProductCategory: typeof StepBasic_ProductCategory;
  StepBasic_ProductCategoryRelationship: typeof StepBasic_ProductCategoryRelationship;
  StepBasic_ProductConceptContext: typeof StepBasic_ProductConceptContext;
  StepBasic_ProductContext: typeof StepBasic_ProductContext;
  StepBasic_ProductDefinition: typeof StepBasic_ProductDefinition;
  StepBasic_ProductDefinitionContext: typeof StepBasic_ProductDefinitionContext;
  StepBasic_ProductDefinitionEffectivity: typeof StepBasic_ProductDefinitionEffectivity;
  StepBasic_ProductDefinitionFormation: typeof StepBasic_ProductDefinitionFormation;
  StepBasic_ProductDefinitionFormationRelationship: typeof StepBasic_ProductDefinitionFormationRelationship;
  StepBasic_ProductDefinitionFormationWithSpecifiedSource: typeof StepBasic_ProductDefinitionFormationWithSpecifiedSource;
  StepBasic_ProductDefinitionOrReference: typeof StepBasic_ProductDefinitionOrReference;
  StepBasic_ProductDefinitionReference: typeof StepBasic_ProductDefinitionReference;
  StepBasic_ProductDefinitionReferenceWithLocalRepresentation: typeof StepBasic_ProductDefinitionReferenceWithLocalRepresentation;
  StepBasic_ProductDefinitionRelationship: typeof StepBasic_ProductDefinitionRelationship;
  StepBasic_ProductDefinitionWithAssociatedDocuments: typeof StepBasic_ProductDefinitionWithAssociatedDocuments;
  StepBasic_ProductOrFormationOrDefinition: typeof StepBasic_ProductOrFormationOrDefinition;
  StepBasic_ProductRelatedProductCategory: typeof StepBasic_ProductRelatedProductCategory;
  StepBasic_ProductType: typeof StepBasic_ProductType;
  StepBasic_RatioMeasureWithUnit: typeof StepBasic_RatioMeasureWithUnit;
  StepBasic_RatioUnit: typeof StepBasic_RatioUnit;
  StepBasic_RoleAssociation: typeof StepBasic_RoleAssociation;
  StepBasic_RoleSelect: typeof StepBasic_RoleSelect;
  StepBasic_SecurityClassification: typeof StepBasic_SecurityClassification;
  StepBasic_SecurityClassificationAssignment: typeof StepBasic_SecurityClassificationAssignment;
  StepBasic_SecurityClassificationLevel: typeof StepBasic_SecurityClassificationLevel;
  StepBasic_SiUnit: typeof StepBasic_SiUnit;
  StepBasic_SiUnitAndAreaUnit: typeof StepBasic_SiUnitAndAreaUnit;
  StepBasic_SiUnitAndLengthUnit: typeof StepBasic_SiUnitAndLengthUnit;
  StepBasic_SiUnitAndMassUnit: typeof StepBasic_SiUnitAndMassUnit;
  StepBasic_SiUnitAndPlaneAngleUnit: typeof StepBasic_SiUnitAndPlaneAngleUnit;
  StepBasic_SiUnitAndRatioUnit: typeof StepBasic_SiUnitAndRatioUnit;
  StepBasic_SiUnitAndSolidAngleUnit: typeof StepBasic_SiUnitAndSolidAngleUnit;
  StepBasic_SiUnitAndThermodynamicTemperatureUnit: typeof StepBasic_SiUnitAndThermodynamicTemperatureUnit;
  StepBasic_SiUnitAndTimeUnit: typeof StepBasic_SiUnitAndTimeUnit;
  StepBasic_SiUnitAndVolumeUnit: typeof StepBasic_SiUnitAndVolumeUnit;
  StepBasic_SizeMember: typeof StepBasic_SizeMember;
  StepBasic_SizeSelect: typeof StepBasic_SizeSelect;
  StepBasic_SolidAngleMeasureWithUnit: typeof StepBasic_SolidAngleMeasureWithUnit;
  StepBasic_SolidAngleUnit: typeof StepBasic_SolidAngleUnit;
  StepBasic_SourceItem: typeof StepBasic_SourceItem;
  StepBasic_ThermodynamicTemperatureUnit: typeof StepBasic_ThermodynamicTemperatureUnit;
  StepBasic_TimeMeasureWithUnit: typeof StepBasic_TimeMeasureWithUnit;
  StepBasic_TimeUnit: typeof StepBasic_TimeUnit;
  StepBasic_UncertaintyMeasureWithUnit: typeof StepBasic_UncertaintyMeasureWithUnit;
  StepBasic_Unit: typeof StepBasic_Unit;
  StepBasic_VersionedActionRequest: typeof StepBasic_VersionedActionRequest;
  StepBasic_VolumeUnit: typeof StepBasic_VolumeUnit;
  StepBasic_WeekOfYearAndDayDate: typeof StepBasic_WeekOfYearAndDayDate;
  StepData: typeof StepData;
  StepData_Described: typeof StepData_Described;
  StepData_ECDescr: typeof StepData_ECDescr;
  StepData_EDescr: typeof StepData_EDescr;
  StepData_ESDescr: typeof StepData_ESDescr;
  StepData_EnumTool: typeof StepData_EnumTool;
  StepData_Field: typeof StepData_Field;
  StepData_Field_1: typeof StepData_Field_1;
  StepData_Field_2: typeof StepData_Field_2;
  StepData_FieldList: typeof StepData_FieldList;
  StepData_FieldList1: typeof StepData_FieldList1;
  StepData_FieldListD: typeof StepData_FieldListD;
  StepData_FieldListN: typeof StepData_FieldListN;
  StepData_FileProtocol: typeof StepData_FileProtocol;
  StepData_FileRecognizer: typeof StepData_FileRecognizer;
  StepData_GlobalNodeOfWriterLib: typeof StepData_GlobalNodeOfWriterLib;
  StepData_HArray1OfField: typeof StepData_HArray1OfField;
  StepData_HArray1OfField_1: typeof StepData_HArray1OfField_1;
  StepData_HArray1OfField_2: typeof StepData_HArray1OfField_2;
  StepData_HArray1OfField_3: typeof StepData_HArray1OfField_3;
  StepData_HArray1OfField_4: typeof StepData_HArray1OfField_4;
  StepData_NodeOfWriterLib: typeof StepData_NodeOfWriterLib;
  StepData_PDescr: typeof StepData_PDescr;
  StepData_Plex: typeof StepData_Plex;
  StepData_Protocol: typeof StepData_Protocol;
  StepData_ReadWriteModule: typeof StepData_ReadWriteModule;
  StepData_SelectArrReal: typeof StepData_SelectArrReal;
  StepData_SelectInt: typeof StepData_SelectInt;
  StepData_SelectMember: typeof StepData_SelectMember;
  StepData_SelectNamed: typeof StepData_SelectNamed;
  StepData_SelectReal: typeof StepData_SelectReal;
  StepData_SelectType: typeof StepData_SelectType;
  StepData_Simple: typeof StepData_Simple;
  StepData_StepDumper: typeof StepData_StepDumper;
  StepData_StepModel: typeof StepData_StepModel;
  StepData_StepReaderData: typeof StepData_StepReaderData;
  StepData_StepReaderTool: typeof StepData_StepReaderTool;
  StepData_StepWriter: typeof StepData_StepWriter;
  StepData_WriterLib: typeof StepData_WriterLib;
  StepData_WriterLib_1: typeof StepData_WriterLib_1;
  StepData_WriterLib_2: typeof StepData_WriterLib_2;
  StepDimTol_AngularityTolerance: typeof StepDimTol_AngularityTolerance;
  StepDimTol_CircularRunoutTolerance: typeof StepDimTol_CircularRunoutTolerance;
  StepDimTol_CoaxialityTolerance: typeof StepDimTol_CoaxialityTolerance;
  StepDimTol_CommonDatum: typeof StepDimTol_CommonDatum;
  StepDimTol_ConcentricityTolerance: typeof StepDimTol_ConcentricityTolerance;
  StepDimTol_CylindricityTolerance: typeof StepDimTol_CylindricityTolerance;
  StepDimTol_Datum: typeof StepDimTol_Datum;
  StepDimTol_DatumFeature: typeof StepDimTol_DatumFeature;
  StepDimTol_DatumOrCommonDatum: typeof StepDimTol_DatumOrCommonDatum;
  StepDimTol_DatumReference: typeof StepDimTol_DatumReference;
  StepDimTol_DatumReferenceCompartment: typeof StepDimTol_DatumReferenceCompartment;
  StepDimTol_DatumReferenceElement: typeof StepDimTol_DatumReferenceElement;
  StepDimTol_DatumReferenceModifier: typeof StepDimTol_DatumReferenceModifier;
  StepDimTol_DatumReferenceModifierWithValue: typeof StepDimTol_DatumReferenceModifierWithValue;
  StepDimTol_DatumSystem: typeof StepDimTol_DatumSystem;
  StepDimTol_DatumSystemOrReference: typeof StepDimTol_DatumSystemOrReference;
  StepDimTol_DatumTarget: typeof StepDimTol_DatumTarget;
  StepDimTol_FlatnessTolerance: typeof StepDimTol_FlatnessTolerance;
  StepDimTol_GeneralDatumReference: typeof StepDimTol_GeneralDatumReference;
  StepDimTol_GeoTolAndGeoTolWthDatRef: typeof StepDimTol_GeoTolAndGeoTolWthDatRef;
  StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol: typeof StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol;
  StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod: typeof StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod;
  StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol: typeof StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol;
  StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol: typeof StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol;
  StepDimTol_GeoTolAndGeoTolWthMaxTol: typeof StepDimTol_GeoTolAndGeoTolWthMaxTol;
  StepDimTol_GeoTolAndGeoTolWthMod: typeof StepDimTol_GeoTolAndGeoTolWthMod;
  StepDimTol_GeometricTolerance: typeof StepDimTol_GeometricTolerance;
  StepDimTol_GeometricToleranceRelationship: typeof StepDimTol_GeometricToleranceRelationship;
  StepDimTol_GeometricToleranceTarget: typeof StepDimTol_GeometricToleranceTarget;
  StepDimTol_GeometricToleranceWithDatumReference: typeof StepDimTol_GeometricToleranceWithDatumReference;
  StepDimTol_GeometricToleranceWithDefinedAreaUnit: typeof StepDimTol_GeometricToleranceWithDefinedAreaUnit;
  StepDimTol_GeometricToleranceWithDefinedUnit: typeof StepDimTol_GeometricToleranceWithDefinedUnit;
  StepDimTol_GeometricToleranceWithMaximumTolerance: typeof StepDimTol_GeometricToleranceWithMaximumTolerance;
  StepDimTol_GeometricToleranceWithModifiers: typeof StepDimTol_GeometricToleranceWithModifiers;
  StepDimTol_HArray1OfDatumReference: typeof StepDimTol_HArray1OfDatumReference;
  StepDimTol_HArray1OfDatumReference_1: typeof StepDimTol_HArray1OfDatumReference_1;
  StepDimTol_HArray1OfDatumReference_2: typeof StepDimTol_HArray1OfDatumReference_2;
  StepDimTol_HArray1OfDatumReference_3: typeof StepDimTol_HArray1OfDatumReference_3;
  StepDimTol_HArray1OfDatumReference_4: typeof StepDimTol_HArray1OfDatumReference_4;
  StepDimTol_HArray1OfDatumReferenceCompartment: typeof StepDimTol_HArray1OfDatumReferenceCompartment;
  StepDimTol_HArray1OfDatumReferenceCompartment_1: typeof StepDimTol_HArray1OfDatumReferenceCompartment_1;
  StepDimTol_HArray1OfDatumReferenceCompartment_2: typeof StepDimTol_HArray1OfDatumReferenceCompartment_2;
  StepDimTol_HArray1OfDatumReferenceCompartment_3: typeof StepDimTol_HArray1OfDatumReferenceCompartment_3;
  StepDimTol_HArray1OfDatumReferenceCompartment_4: typeof StepDimTol_HArray1OfDatumReferenceCompartment_4;
  StepDimTol_HArray1OfDatumReferenceElement: typeof StepDimTol_HArray1OfDatumReferenceElement;
  StepDimTol_HArray1OfDatumReferenceElement_1: typeof StepDimTol_HArray1OfDatumReferenceElement_1;
  StepDimTol_HArray1OfDatumReferenceElement_2: typeof StepDimTol_HArray1OfDatumReferenceElement_2;
  StepDimTol_HArray1OfDatumReferenceElement_3: typeof StepDimTol_HArray1OfDatumReferenceElement_3;
  StepDimTol_HArray1OfDatumReferenceElement_4: typeof StepDimTol_HArray1OfDatumReferenceElement_4;
  StepDimTol_HArray1OfDatumReferenceModifier: typeof StepDimTol_HArray1OfDatumReferenceModifier;
  StepDimTol_HArray1OfDatumReferenceModifier_1: typeof StepDimTol_HArray1OfDatumReferenceModifier_1;
  StepDimTol_HArray1OfDatumReferenceModifier_2: typeof StepDimTol_HArray1OfDatumReferenceModifier_2;
  StepDimTol_HArray1OfDatumReferenceModifier_3: typeof StepDimTol_HArray1OfDatumReferenceModifier_3;
  StepDimTol_HArray1OfDatumReferenceModifier_4: typeof StepDimTol_HArray1OfDatumReferenceModifier_4;
  StepDimTol_HArray1OfDatumSystemOrReference: typeof StepDimTol_HArray1OfDatumSystemOrReference;
  StepDimTol_HArray1OfDatumSystemOrReference_1: typeof StepDimTol_HArray1OfDatumSystemOrReference_1;
  StepDimTol_HArray1OfDatumSystemOrReference_2: typeof StepDimTol_HArray1OfDatumSystemOrReference_2;
  StepDimTol_HArray1OfDatumSystemOrReference_3: typeof StepDimTol_HArray1OfDatumSystemOrReference_3;
  StepDimTol_HArray1OfDatumSystemOrReference_4: typeof StepDimTol_HArray1OfDatumSystemOrReference_4;
  StepDimTol_HArray1OfGeometricToleranceModifier: typeof StepDimTol_HArray1OfGeometricToleranceModifier;
  StepDimTol_HArray1OfGeometricToleranceModifier_1: typeof StepDimTol_HArray1OfGeometricToleranceModifier_1;
  StepDimTol_HArray1OfGeometricToleranceModifier_2: typeof StepDimTol_HArray1OfGeometricToleranceModifier_2;
  StepDimTol_HArray1OfGeometricToleranceModifier_3: typeof StepDimTol_HArray1OfGeometricToleranceModifier_3;
  StepDimTol_HArray1OfGeometricToleranceModifier_4: typeof StepDimTol_HArray1OfGeometricToleranceModifier_4;
  StepDimTol_HArray1OfToleranceZoneTarget: typeof StepDimTol_HArray1OfToleranceZoneTarget;
  StepDimTol_HArray1OfToleranceZoneTarget_1: typeof StepDimTol_HArray1OfToleranceZoneTarget_1;
  StepDimTol_HArray1OfToleranceZoneTarget_2: typeof StepDimTol_HArray1OfToleranceZoneTarget_2;
  StepDimTol_HArray1OfToleranceZoneTarget_3: typeof StepDimTol_HArray1OfToleranceZoneTarget_3;
  StepDimTol_HArray1OfToleranceZoneTarget_4: typeof StepDimTol_HArray1OfToleranceZoneTarget_4;
  StepDimTol_LineProfileTolerance: typeof StepDimTol_LineProfileTolerance;
  StepDimTol_ModifiedGeometricTolerance: typeof StepDimTol_ModifiedGeometricTolerance;
  StepDimTol_NonUniformZoneDefinition: typeof StepDimTol_NonUniformZoneDefinition;
  StepDimTol_ParallelismTolerance: typeof StepDimTol_ParallelismTolerance;
  StepDimTol_PerpendicularityTolerance: typeof StepDimTol_PerpendicularityTolerance;
  StepDimTol_PlacedDatumTargetFeature: typeof StepDimTol_PlacedDatumTargetFeature;
  StepDimTol_PositionTolerance: typeof StepDimTol_PositionTolerance;
  StepDimTol_ProjectedZoneDefinition: typeof StepDimTol_ProjectedZoneDefinition;
  StepDimTol_RoundnessTolerance: typeof StepDimTol_RoundnessTolerance;
  StepDimTol_RunoutZoneDefinition: typeof StepDimTol_RunoutZoneDefinition;
  StepDimTol_RunoutZoneOrientation: typeof StepDimTol_RunoutZoneOrientation;
  StepDimTol_ShapeToleranceSelect: typeof StepDimTol_ShapeToleranceSelect;
  StepDimTol_SimpleDatumReferenceModifierMember: typeof StepDimTol_SimpleDatumReferenceModifierMember;
  StepDimTol_StraightnessTolerance: typeof StepDimTol_StraightnessTolerance;
  StepDimTol_SurfaceProfileTolerance: typeof StepDimTol_SurfaceProfileTolerance;
  StepDimTol_SymmetryTolerance: typeof StepDimTol_SymmetryTolerance;
  StepDimTol_ToleranceZone: typeof StepDimTol_ToleranceZone;
  StepDimTol_ToleranceZoneDefinition: typeof StepDimTol_ToleranceZoneDefinition;
  StepDimTol_ToleranceZoneForm: typeof StepDimTol_ToleranceZoneForm;
  StepDimTol_ToleranceZoneTarget: typeof StepDimTol_ToleranceZoneTarget;
  StepDimTol_TotalRunoutTolerance: typeof StepDimTol_TotalRunoutTolerance;
  StepDimTol_UnequallyDisposedGeometricTolerance: typeof StepDimTol_UnequallyDisposedGeometricTolerance;
  StepElement_AnalysisItemWithinRepresentation: typeof StepElement_AnalysisItemWithinRepresentation;
  StepElement_Curve3dElementDescriptor: typeof StepElement_Curve3dElementDescriptor;
  StepElement_CurveElementEndReleasePacket: typeof StepElement_CurveElementEndReleasePacket;
  StepElement_CurveElementFreedom: typeof StepElement_CurveElementFreedom;
  StepElement_CurveElementFreedomMember: typeof StepElement_CurveElementFreedomMember;
  StepElement_CurveElementPurpose: typeof StepElement_CurveElementPurpose;
  StepElement_CurveElementPurposeMember: typeof StepElement_CurveElementPurposeMember;
  StepElement_CurveElementSectionDefinition: typeof StepElement_CurveElementSectionDefinition;
  StepElement_CurveElementSectionDerivedDefinitions: typeof StepElement_CurveElementSectionDerivedDefinitions;
  StepElement_ElementAspect: typeof StepElement_ElementAspect;
  StepElement_ElementAspectMember: typeof StepElement_ElementAspectMember;
  StepElement_ElementDescriptor: typeof StepElement_ElementDescriptor;
  StepElement_ElementMaterial: typeof StepElement_ElementMaterial;
  StepElement_HArray1OfCurveElementEndReleasePacket: typeof StepElement_HArray1OfCurveElementEndReleasePacket;
  StepElement_HArray1OfCurveElementEndReleasePacket_1: typeof StepElement_HArray1OfCurveElementEndReleasePacket_1;
  StepElement_HArray1OfCurveElementEndReleasePacket_2: typeof StepElement_HArray1OfCurveElementEndReleasePacket_2;
  StepElement_HArray1OfCurveElementEndReleasePacket_3: typeof StepElement_HArray1OfCurveElementEndReleasePacket_3;
  StepElement_HArray1OfCurveElementEndReleasePacket_4: typeof StepElement_HArray1OfCurveElementEndReleasePacket_4;
  StepElement_HArray1OfCurveElementSectionDefinition: typeof StepElement_HArray1OfCurveElementSectionDefinition;
  StepElement_HArray1OfCurveElementSectionDefinition_1: typeof StepElement_HArray1OfCurveElementSectionDefinition_1;
  StepElement_HArray1OfCurveElementSectionDefinition_2: typeof StepElement_HArray1OfCurveElementSectionDefinition_2;
  StepElement_HArray1OfCurveElementSectionDefinition_3: typeof StepElement_HArray1OfCurveElementSectionDefinition_3;
  StepElement_HArray1OfCurveElementSectionDefinition_4: typeof StepElement_HArray1OfCurveElementSectionDefinition_4;
  StepElement_HArray1OfHSequenceOfCurveElementPurposeMember: typeof StepElement_HArray1OfHSequenceOfCurveElementPurposeMember;
  StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_1: typeof StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_1;
  StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_2: typeof StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_2;
  StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_3: typeof StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_3;
  StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_4: typeof StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_4;
  StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember: typeof StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember;
  StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_1: typeof StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_1;
  StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_2: typeof StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_2;
  StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_3: typeof StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_3;
  StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_4: typeof StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_4;
  StepElement_HArray1OfMeasureOrUnspecifiedValue: typeof StepElement_HArray1OfMeasureOrUnspecifiedValue;
  StepElement_HArray1OfMeasureOrUnspecifiedValue_1: typeof StepElement_HArray1OfMeasureOrUnspecifiedValue_1;
  StepElement_HArray1OfMeasureOrUnspecifiedValue_2: typeof StepElement_HArray1OfMeasureOrUnspecifiedValue_2;
  StepElement_HArray1OfMeasureOrUnspecifiedValue_3: typeof StepElement_HArray1OfMeasureOrUnspecifiedValue_3;
  StepElement_HArray1OfMeasureOrUnspecifiedValue_4: typeof StepElement_HArray1OfMeasureOrUnspecifiedValue_4;
  StepElement_HArray1OfSurfaceSection: typeof StepElement_HArray1OfSurfaceSection;
  StepElement_HArray1OfSurfaceSection_1: typeof StepElement_HArray1OfSurfaceSection_1;
  StepElement_HArray1OfSurfaceSection_2: typeof StepElement_HArray1OfSurfaceSection_2;
  StepElement_HArray1OfSurfaceSection_3: typeof StepElement_HArray1OfSurfaceSection_3;
  StepElement_HArray1OfSurfaceSection_4: typeof StepElement_HArray1OfSurfaceSection_4;
  StepElement_HArray1OfVolumeElementPurpose: typeof StepElement_HArray1OfVolumeElementPurpose;
  StepElement_HArray1OfVolumeElementPurpose_1: typeof StepElement_HArray1OfVolumeElementPurpose_1;
  StepElement_HArray1OfVolumeElementPurpose_2: typeof StepElement_HArray1OfVolumeElementPurpose_2;
  StepElement_HArray1OfVolumeElementPurpose_3: typeof StepElement_HArray1OfVolumeElementPurpose_3;
  StepElement_HArray1OfVolumeElementPurpose_4: typeof StepElement_HArray1OfVolumeElementPurpose_4;
  StepElement_HArray1OfVolumeElementPurposeMember: typeof StepElement_HArray1OfVolumeElementPurposeMember;
  StepElement_HArray1OfVolumeElementPurposeMember_1: typeof StepElement_HArray1OfVolumeElementPurposeMember_1;
  StepElement_HArray1OfVolumeElementPurposeMember_2: typeof StepElement_HArray1OfVolumeElementPurposeMember_2;
  StepElement_HArray1OfVolumeElementPurposeMember_3: typeof StepElement_HArray1OfVolumeElementPurposeMember_3;
  StepElement_HArray1OfVolumeElementPurposeMember_4: typeof StepElement_HArray1OfVolumeElementPurposeMember_4;
  StepElement_HArray2OfCurveElementPurposeMember: typeof StepElement_HArray2OfCurveElementPurposeMember;
  StepElement_HArray2OfCurveElementPurposeMember_1: typeof StepElement_HArray2OfCurveElementPurposeMember_1;
  StepElement_HArray2OfCurveElementPurposeMember_2: typeof StepElement_HArray2OfCurveElementPurposeMember_2;
  StepElement_HArray2OfCurveElementPurposeMember_3: typeof StepElement_HArray2OfCurveElementPurposeMember_3;
  StepElement_HArray2OfSurfaceElementPurpose: typeof StepElement_HArray2OfSurfaceElementPurpose;
  StepElement_HArray2OfSurfaceElementPurpose_1: typeof StepElement_HArray2OfSurfaceElementPurpose_1;
  StepElement_HArray2OfSurfaceElementPurpose_2: typeof StepElement_HArray2OfSurfaceElementPurpose_2;
  StepElement_HArray2OfSurfaceElementPurpose_3: typeof StepElement_HArray2OfSurfaceElementPurpose_3;
  StepElement_HArray2OfSurfaceElementPurposeMember: typeof StepElement_HArray2OfSurfaceElementPurposeMember;
  StepElement_HArray2OfSurfaceElementPurposeMember_1: typeof StepElement_HArray2OfSurfaceElementPurposeMember_1;
  StepElement_HArray2OfSurfaceElementPurposeMember_2: typeof StepElement_HArray2OfSurfaceElementPurposeMember_2;
  StepElement_HArray2OfSurfaceElementPurposeMember_3: typeof StepElement_HArray2OfSurfaceElementPurposeMember_3;
  StepElement_HSequenceOfCurveElementPurposeMember: typeof StepElement_HSequenceOfCurveElementPurposeMember;
  StepElement_HSequenceOfCurveElementPurposeMember_1: typeof StepElement_HSequenceOfCurveElementPurposeMember_1;
  StepElement_HSequenceOfCurveElementPurposeMember_2: typeof StepElement_HSequenceOfCurveElementPurposeMember_2;
  StepElement_HSequenceOfCurveElementSectionDefinition: typeof StepElement_HSequenceOfCurveElementSectionDefinition;
  StepElement_HSequenceOfCurveElementSectionDefinition_1: typeof StepElement_HSequenceOfCurveElementSectionDefinition_1;
  StepElement_HSequenceOfCurveElementSectionDefinition_2: typeof StepElement_HSequenceOfCurveElementSectionDefinition_2;
  StepElement_HSequenceOfElementMaterial: typeof StepElement_HSequenceOfElementMaterial;
  StepElement_HSequenceOfElementMaterial_1: typeof StepElement_HSequenceOfElementMaterial_1;
  StepElement_HSequenceOfElementMaterial_2: typeof StepElement_HSequenceOfElementMaterial_2;
  StepElement_HSequenceOfSurfaceElementPurposeMember: typeof StepElement_HSequenceOfSurfaceElementPurposeMember;
  StepElement_HSequenceOfSurfaceElementPurposeMember_1: typeof StepElement_HSequenceOfSurfaceElementPurposeMember_1;
  StepElement_HSequenceOfSurfaceElementPurposeMember_2: typeof StepElement_HSequenceOfSurfaceElementPurposeMember_2;
  StepElement_MeasureOrUnspecifiedValue: typeof StepElement_MeasureOrUnspecifiedValue;
  StepElement_MeasureOrUnspecifiedValueMember: typeof StepElement_MeasureOrUnspecifiedValueMember;
  StepElement_Surface3dElementDescriptor: typeof StepElement_Surface3dElementDescriptor;
  StepElement_SurfaceElementProperty: typeof StepElement_SurfaceElementProperty;
  StepElement_SurfaceElementPurpose: typeof StepElement_SurfaceElementPurpose;
  StepElement_SurfaceElementPurposeMember: typeof StepElement_SurfaceElementPurposeMember;
  StepElement_SurfaceSection: typeof StepElement_SurfaceSection;
  StepElement_SurfaceSectionField: typeof StepElement_SurfaceSectionField;
  StepElement_SurfaceSectionFieldConstant: typeof StepElement_SurfaceSectionFieldConstant;
  StepElement_SurfaceSectionFieldVarying: typeof StepElement_SurfaceSectionFieldVarying;
  StepElement_UniformSurfaceSection: typeof StepElement_UniformSurfaceSection;
  StepElement_Volume3dElementDescriptor: typeof StepElement_Volume3dElementDescriptor;
  StepElement_VolumeElementPurpose: typeof StepElement_VolumeElementPurpose;
  StepElement_VolumeElementPurposeMember: typeof StepElement_VolumeElementPurposeMember;
  StepFEA_AlignedCurve3dElementCoordinateSystem: typeof StepFEA_AlignedCurve3dElementCoordinateSystem;
  StepFEA_AlignedSurface3dElementCoordinateSystem: typeof StepFEA_AlignedSurface3dElementCoordinateSystem;
  StepFEA_ArbitraryVolume3dElementCoordinateSystem: typeof StepFEA_ArbitraryVolume3dElementCoordinateSystem;
  StepFEA_ConstantSurface3dElementCoordinateSystem: typeof StepFEA_ConstantSurface3dElementCoordinateSystem;
  StepFEA_Curve3dElementProperty: typeof StepFEA_Curve3dElementProperty;
  StepFEA_Curve3dElementRepresentation: typeof StepFEA_Curve3dElementRepresentation;
  StepFEA_CurveElementEndCoordinateSystem: typeof StepFEA_CurveElementEndCoordinateSystem;
  StepFEA_CurveElementEndOffset: typeof StepFEA_CurveElementEndOffset;
  StepFEA_CurveElementEndRelease: typeof StepFEA_CurveElementEndRelease;
  StepFEA_CurveElementInterval: typeof StepFEA_CurveElementInterval;
  StepFEA_CurveElementIntervalConstant: typeof StepFEA_CurveElementIntervalConstant;
  StepFEA_CurveElementIntervalLinearlyVarying: typeof StepFEA_CurveElementIntervalLinearlyVarying;
  StepFEA_CurveElementLocation: typeof StepFEA_CurveElementLocation;
  StepFEA_DegreeOfFreedom: typeof StepFEA_DegreeOfFreedom;
  StepFEA_DegreeOfFreedomMember: typeof StepFEA_DegreeOfFreedomMember;
  StepFEA_DummyNode: typeof StepFEA_DummyNode;
  StepFEA_ElementGeometricRelationship: typeof StepFEA_ElementGeometricRelationship;
  StepFEA_ElementGroup: typeof StepFEA_ElementGroup;
  StepFEA_ElementOrElementGroup: typeof StepFEA_ElementOrElementGroup;
  StepFEA_ElementRepresentation: typeof StepFEA_ElementRepresentation;
  StepFEA_FeaAreaDensity: typeof StepFEA_FeaAreaDensity;
  StepFEA_FeaAxis2Placement3d: typeof StepFEA_FeaAxis2Placement3d;
  StepFEA_FeaCurveSectionGeometricRelationship: typeof StepFEA_FeaCurveSectionGeometricRelationship;
  StepFEA_FeaGroup: typeof StepFEA_FeaGroup;
  StepFEA_FeaLinearElasticity: typeof StepFEA_FeaLinearElasticity;
  StepFEA_FeaMassDensity: typeof StepFEA_FeaMassDensity;
  StepFEA_FeaMaterialPropertyRepresentation: typeof StepFEA_FeaMaterialPropertyRepresentation;
  StepFEA_FeaMaterialPropertyRepresentationItem: typeof StepFEA_FeaMaterialPropertyRepresentationItem;
  StepFEA_FeaModel: typeof StepFEA_FeaModel;
  StepFEA_FeaModel3d: typeof StepFEA_FeaModel3d;
  StepFEA_FeaModelDefinition: typeof StepFEA_FeaModelDefinition;
  StepFEA_FeaMoistureAbsorption: typeof StepFEA_FeaMoistureAbsorption;
  StepFEA_FeaParametricPoint: typeof StepFEA_FeaParametricPoint;
  StepFEA_FeaRepresentationItem: typeof StepFEA_FeaRepresentationItem;
  StepFEA_FeaSecantCoefficientOfLinearThermalExpansion: typeof StepFEA_FeaSecantCoefficientOfLinearThermalExpansion;
  StepFEA_FeaShellBendingStiffness: typeof StepFEA_FeaShellBendingStiffness;
  StepFEA_FeaShellMembraneBendingCouplingStiffness: typeof StepFEA_FeaShellMembraneBendingCouplingStiffness;
  StepFEA_FeaShellMembraneStiffness: typeof StepFEA_FeaShellMembraneStiffness;
  StepFEA_FeaShellShearStiffness: typeof StepFEA_FeaShellShearStiffness;
  StepFEA_FeaSurfaceSectionGeometricRelationship: typeof StepFEA_FeaSurfaceSectionGeometricRelationship;
  StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion: typeof StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion;
  StepFEA_FreedomAndCoefficient: typeof StepFEA_FreedomAndCoefficient;
  StepFEA_FreedomsList: typeof StepFEA_FreedomsList;
  StepFEA_GeometricNode: typeof StepFEA_GeometricNode;
  StepFEA_HArray1OfCurveElementEndOffset: typeof StepFEA_HArray1OfCurveElementEndOffset;
  StepFEA_HArray1OfCurveElementEndOffset_1: typeof StepFEA_HArray1OfCurveElementEndOffset_1;
  StepFEA_HArray1OfCurveElementEndOffset_2: typeof StepFEA_HArray1OfCurveElementEndOffset_2;
  StepFEA_HArray1OfCurveElementEndOffset_3: typeof StepFEA_HArray1OfCurveElementEndOffset_3;
  StepFEA_HArray1OfCurveElementEndOffset_4: typeof StepFEA_HArray1OfCurveElementEndOffset_4;
  StepFEA_HArray1OfCurveElementEndRelease: typeof StepFEA_HArray1OfCurveElementEndRelease;
  StepFEA_HArray1OfCurveElementEndRelease_1: typeof StepFEA_HArray1OfCurveElementEndRelease_1;
  StepFEA_HArray1OfCurveElementEndRelease_2: typeof StepFEA_HArray1OfCurveElementEndRelease_2;
  StepFEA_HArray1OfCurveElementEndRelease_3: typeof StepFEA_HArray1OfCurveElementEndRelease_3;
  StepFEA_HArray1OfCurveElementEndRelease_4: typeof StepFEA_HArray1OfCurveElementEndRelease_4;
  StepFEA_HArray1OfCurveElementInterval: typeof StepFEA_HArray1OfCurveElementInterval;
  StepFEA_HArray1OfCurveElementInterval_1: typeof StepFEA_HArray1OfCurveElementInterval_1;
  StepFEA_HArray1OfCurveElementInterval_2: typeof StepFEA_HArray1OfCurveElementInterval_2;
  StepFEA_HArray1OfCurveElementInterval_3: typeof StepFEA_HArray1OfCurveElementInterval_3;
  StepFEA_HArray1OfCurveElementInterval_4: typeof StepFEA_HArray1OfCurveElementInterval_4;
  StepFEA_HArray1OfDegreeOfFreedom: typeof StepFEA_HArray1OfDegreeOfFreedom;
  StepFEA_HArray1OfDegreeOfFreedom_1: typeof StepFEA_HArray1OfDegreeOfFreedom_1;
  StepFEA_HArray1OfDegreeOfFreedom_2: typeof StepFEA_HArray1OfDegreeOfFreedom_2;
  StepFEA_HArray1OfDegreeOfFreedom_3: typeof StepFEA_HArray1OfDegreeOfFreedom_3;
  StepFEA_HArray1OfDegreeOfFreedom_4: typeof StepFEA_HArray1OfDegreeOfFreedom_4;
  StepFEA_HArray1OfElementRepresentation: typeof StepFEA_HArray1OfElementRepresentation;
  StepFEA_HArray1OfElementRepresentation_1: typeof StepFEA_HArray1OfElementRepresentation_1;
  StepFEA_HArray1OfElementRepresentation_2: typeof StepFEA_HArray1OfElementRepresentation_2;
  StepFEA_HArray1OfElementRepresentation_3: typeof StepFEA_HArray1OfElementRepresentation_3;
  StepFEA_HArray1OfElementRepresentation_4: typeof StepFEA_HArray1OfElementRepresentation_4;
  StepFEA_HArray1OfNodeRepresentation: typeof StepFEA_HArray1OfNodeRepresentation;
  StepFEA_HArray1OfNodeRepresentation_1: typeof StepFEA_HArray1OfNodeRepresentation_1;
  StepFEA_HArray1OfNodeRepresentation_2: typeof StepFEA_HArray1OfNodeRepresentation_2;
  StepFEA_HArray1OfNodeRepresentation_3: typeof StepFEA_HArray1OfNodeRepresentation_3;
  StepFEA_HArray1OfNodeRepresentation_4: typeof StepFEA_HArray1OfNodeRepresentation_4;
  StepFEA_HSequenceOfCurve3dElementProperty: typeof StepFEA_HSequenceOfCurve3dElementProperty;
  StepFEA_HSequenceOfCurve3dElementProperty_1: typeof StepFEA_HSequenceOfCurve3dElementProperty_1;
  StepFEA_HSequenceOfCurve3dElementProperty_2: typeof StepFEA_HSequenceOfCurve3dElementProperty_2;
  StepFEA_HSequenceOfElementGeometricRelationship: typeof StepFEA_HSequenceOfElementGeometricRelationship;
  StepFEA_HSequenceOfElementGeometricRelationship_1: typeof StepFEA_HSequenceOfElementGeometricRelationship_1;
  StepFEA_HSequenceOfElementGeometricRelationship_2: typeof StepFEA_HSequenceOfElementGeometricRelationship_2;
  StepFEA_HSequenceOfElementRepresentation: typeof StepFEA_HSequenceOfElementRepresentation;
  StepFEA_HSequenceOfElementRepresentation_1: typeof StepFEA_HSequenceOfElementRepresentation_1;
  StepFEA_HSequenceOfElementRepresentation_2: typeof StepFEA_HSequenceOfElementRepresentation_2;
  StepFEA_HSequenceOfNodeRepresentation: typeof StepFEA_HSequenceOfNodeRepresentation;
  StepFEA_HSequenceOfNodeRepresentation_1: typeof StepFEA_HSequenceOfNodeRepresentation_1;
  StepFEA_HSequenceOfNodeRepresentation_2: typeof StepFEA_HSequenceOfNodeRepresentation_2;
  StepFEA_Node: typeof StepFEA_Node;
  StepFEA_NodeDefinition: typeof StepFEA_NodeDefinition;
  StepFEA_NodeGroup: typeof StepFEA_NodeGroup;
  StepFEA_NodeRepresentation: typeof StepFEA_NodeRepresentation;
  StepFEA_NodeSet: typeof StepFEA_NodeSet;
  StepFEA_NodeWithSolutionCoordinateSystem: typeof StepFEA_NodeWithSolutionCoordinateSystem;
  StepFEA_NodeWithVector: typeof StepFEA_NodeWithVector;
  StepFEA_ParametricCurve3dElementCoordinateDirection: typeof StepFEA_ParametricCurve3dElementCoordinateDirection;
  StepFEA_ParametricCurve3dElementCoordinateSystem: typeof StepFEA_ParametricCurve3dElementCoordinateSystem;
  StepFEA_ParametricSurface3dElementCoordinateSystem: typeof StepFEA_ParametricSurface3dElementCoordinateSystem;
  StepFEA_Surface3dElementRepresentation: typeof StepFEA_Surface3dElementRepresentation;
  StepFEA_SymmetricTensor22d: typeof StepFEA_SymmetricTensor22d;
  StepFEA_SymmetricTensor23d: typeof StepFEA_SymmetricTensor23d;
  StepFEA_SymmetricTensor23dMember: typeof StepFEA_SymmetricTensor23dMember;
  StepFEA_SymmetricTensor42d: typeof StepFEA_SymmetricTensor42d;
  StepFEA_SymmetricTensor43dMember: typeof StepFEA_SymmetricTensor43dMember;
  StepFEA_Volume3dElementRepresentation: typeof StepFEA_Volume3dElementRepresentation;
  StepGeom_Axis1Placement: typeof StepGeom_Axis1Placement;
  StepGeom_Axis2Placement: typeof StepGeom_Axis2Placement;
  StepGeom_Axis2Placement2d: typeof StepGeom_Axis2Placement2d;
  StepGeom_Axis2Placement3d: typeof StepGeom_Axis2Placement3d;
  StepGeom_BSplineCurve: typeof StepGeom_BSplineCurve;
  StepGeom_BSplineCurveWithKnots: typeof StepGeom_BSplineCurveWithKnots;
  StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve: typeof StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve;
  StepGeom_BSplineSurface: typeof StepGeom_BSplineSurface;
  StepGeom_BSplineSurfaceWithKnots: typeof StepGeom_BSplineSurfaceWithKnots;
  StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface: typeof StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface;
  StepGeom_BezierCurve: typeof StepGeom_BezierCurve;
  StepGeom_BezierCurveAndRationalBSplineCurve: typeof StepGeom_BezierCurveAndRationalBSplineCurve;
  StepGeom_BezierSurface: typeof StepGeom_BezierSurface;
  StepGeom_BezierSurfaceAndRationalBSplineSurface: typeof StepGeom_BezierSurfaceAndRationalBSplineSurface;
  StepGeom_BoundaryCurve: typeof StepGeom_BoundaryCurve;
  StepGeom_BoundedCurve: typeof StepGeom_BoundedCurve;
  StepGeom_BoundedSurface: typeof StepGeom_BoundedSurface;
  StepGeom_CartesianPoint: typeof StepGeom_CartesianPoint;
  StepGeom_CartesianTransformationOperator: typeof StepGeom_CartesianTransformationOperator;
  StepGeom_CartesianTransformationOperator2d: typeof StepGeom_CartesianTransformationOperator2d;
  StepGeom_CartesianTransformationOperator3d: typeof StepGeom_CartesianTransformationOperator3d;
  StepGeom_Circle: typeof StepGeom_Circle;
  StepGeom_CompositeCurve: typeof StepGeom_CompositeCurve;
  StepGeom_CompositeCurveOnSurface: typeof StepGeom_CompositeCurveOnSurface;
  StepGeom_CompositeCurveSegment: typeof StepGeom_CompositeCurveSegment;
  StepGeom_Conic: typeof StepGeom_Conic;
  StepGeom_ConicalSurface: typeof StepGeom_ConicalSurface;
  StepGeom_Curve: typeof StepGeom_Curve;
  StepGeom_CurveBoundedSurface: typeof StepGeom_CurveBoundedSurface;
  StepGeom_CurveOnSurface: typeof StepGeom_CurveOnSurface;
  StepGeom_CurveReplica: typeof StepGeom_CurveReplica;
  StepGeom_CylindricalSurface: typeof StepGeom_CylindricalSurface;
  StepGeom_DegeneratePcurve: typeof StepGeom_DegeneratePcurve;
  StepGeom_DegenerateToroidalSurface: typeof StepGeom_DegenerateToroidalSurface;
  StepGeom_Direction: typeof StepGeom_Direction;
  StepGeom_ElementarySurface: typeof StepGeom_ElementarySurface;
  StepGeom_Ellipse: typeof StepGeom_Ellipse;
  StepGeom_EvaluatedDegeneratePcurve: typeof StepGeom_EvaluatedDegeneratePcurve;
  StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx: typeof StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx;
  StepGeom_GeometricRepresentationContext: typeof StepGeom_GeometricRepresentationContext;
  StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext: typeof StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext;
  StepGeom_GeometricRepresentationContextAndParametricRepresentationContext: typeof StepGeom_GeometricRepresentationContextAndParametricRepresentationContext;
  StepGeom_GeometricRepresentationItem: typeof StepGeom_GeometricRepresentationItem;
  StepGeom_HArray1OfBoundaryCurve: typeof StepGeom_HArray1OfBoundaryCurve;
  StepGeom_HArray1OfBoundaryCurve_1: typeof StepGeom_HArray1OfBoundaryCurve_1;
  StepGeom_HArray1OfBoundaryCurve_2: typeof StepGeom_HArray1OfBoundaryCurve_2;
  StepGeom_HArray1OfBoundaryCurve_3: typeof StepGeom_HArray1OfBoundaryCurve_3;
  StepGeom_HArray1OfBoundaryCurve_4: typeof StepGeom_HArray1OfBoundaryCurve_4;
  StepGeom_HArray1OfCartesianPoint: typeof StepGeom_HArray1OfCartesianPoint;
  StepGeom_HArray1OfCartesianPoint_1: typeof StepGeom_HArray1OfCartesianPoint_1;
  StepGeom_HArray1OfCartesianPoint_2: typeof StepGeom_HArray1OfCartesianPoint_2;
  StepGeom_HArray1OfCartesianPoint_3: typeof StepGeom_HArray1OfCartesianPoint_3;
  StepGeom_HArray1OfCartesianPoint_4: typeof StepGeom_HArray1OfCartesianPoint_4;
  StepGeom_HArray1OfCompositeCurveSegment: typeof StepGeom_HArray1OfCompositeCurveSegment;
  StepGeom_HArray1OfCompositeCurveSegment_1: typeof StepGeom_HArray1OfCompositeCurveSegment_1;
  StepGeom_HArray1OfCompositeCurveSegment_2: typeof StepGeom_HArray1OfCompositeCurveSegment_2;
  StepGeom_HArray1OfCompositeCurveSegment_3: typeof StepGeom_HArray1OfCompositeCurveSegment_3;
  StepGeom_HArray1OfCompositeCurveSegment_4: typeof StepGeom_HArray1OfCompositeCurveSegment_4;
  StepGeom_HArray1OfCurve: typeof StepGeom_HArray1OfCurve;
  StepGeom_HArray1OfCurve_1: typeof StepGeom_HArray1OfCurve_1;
  StepGeom_HArray1OfCurve_2: typeof StepGeom_HArray1OfCurve_2;
  StepGeom_HArray1OfCurve_3: typeof StepGeom_HArray1OfCurve_3;
  StepGeom_HArray1OfCurve_4: typeof StepGeom_HArray1OfCurve_4;
  StepGeom_HArray1OfPcurveOrSurface: typeof StepGeom_HArray1OfPcurveOrSurface;
  StepGeom_HArray1OfPcurveOrSurface_1: typeof StepGeom_HArray1OfPcurveOrSurface_1;
  StepGeom_HArray1OfPcurveOrSurface_2: typeof StepGeom_HArray1OfPcurveOrSurface_2;
  StepGeom_HArray1OfPcurveOrSurface_3: typeof StepGeom_HArray1OfPcurveOrSurface_3;
  StepGeom_HArray1OfPcurveOrSurface_4: typeof StepGeom_HArray1OfPcurveOrSurface_4;
  StepGeom_HArray1OfSurfaceBoundary: typeof StepGeom_HArray1OfSurfaceBoundary;
  StepGeom_HArray1OfSurfaceBoundary_1: typeof StepGeom_HArray1OfSurfaceBoundary_1;
  StepGeom_HArray1OfSurfaceBoundary_2: typeof StepGeom_HArray1OfSurfaceBoundary_2;
  StepGeom_HArray1OfSurfaceBoundary_3: typeof StepGeom_HArray1OfSurfaceBoundary_3;
  StepGeom_HArray1OfSurfaceBoundary_4: typeof StepGeom_HArray1OfSurfaceBoundary_4;
  StepGeom_HArray1OfTrimmingSelect: typeof StepGeom_HArray1OfTrimmingSelect;
  StepGeom_HArray1OfTrimmingSelect_1: typeof StepGeom_HArray1OfTrimmingSelect_1;
  StepGeom_HArray1OfTrimmingSelect_2: typeof StepGeom_HArray1OfTrimmingSelect_2;
  StepGeom_HArray1OfTrimmingSelect_3: typeof StepGeom_HArray1OfTrimmingSelect_3;
  StepGeom_HArray1OfTrimmingSelect_4: typeof StepGeom_HArray1OfTrimmingSelect_4;
  StepGeom_HArray2OfCartesianPoint: typeof StepGeom_HArray2OfCartesianPoint;
  StepGeom_HArray2OfCartesianPoint_1: typeof StepGeom_HArray2OfCartesianPoint_1;
  StepGeom_HArray2OfCartesianPoint_2: typeof StepGeom_HArray2OfCartesianPoint_2;
  StepGeom_HArray2OfCartesianPoint_3: typeof StepGeom_HArray2OfCartesianPoint_3;
  StepGeom_HArray2OfSurfacePatch: typeof StepGeom_HArray2OfSurfacePatch;
  StepGeom_HArray2OfSurfacePatch_1: typeof StepGeom_HArray2OfSurfacePatch_1;
  StepGeom_HArray2OfSurfacePatch_2: typeof StepGeom_HArray2OfSurfacePatch_2;
  StepGeom_HArray2OfSurfacePatch_3: typeof StepGeom_HArray2OfSurfacePatch_3;
  StepGeom_Hyperbola: typeof StepGeom_Hyperbola;
  StepGeom_IntersectionCurve: typeof StepGeom_IntersectionCurve;
  StepGeom_Line: typeof StepGeom_Line;
  StepGeom_OffsetCurve3d: typeof StepGeom_OffsetCurve3d;
  StepGeom_OffsetSurface: typeof StepGeom_OffsetSurface;
  StepGeom_OrientedSurface: typeof StepGeom_OrientedSurface;
  StepGeom_OuterBoundaryCurve: typeof StepGeom_OuterBoundaryCurve;
  StepGeom_Parabola: typeof StepGeom_Parabola;
  StepGeom_Pcurve: typeof StepGeom_Pcurve;
  StepGeom_PcurveOrSurface: typeof StepGeom_PcurveOrSurface;
  StepGeom_Placement: typeof StepGeom_Placement;
  StepGeom_Plane: typeof StepGeom_Plane;
  StepGeom_Point: typeof StepGeom_Point;
  StepGeom_PointOnCurve: typeof StepGeom_PointOnCurve;
  StepGeom_PointOnSurface: typeof StepGeom_PointOnSurface;
  StepGeom_PointReplica: typeof StepGeom_PointReplica;
  StepGeom_Polyline: typeof StepGeom_Polyline;
  StepGeom_QuasiUniformCurve: typeof StepGeom_QuasiUniformCurve;
  StepGeom_QuasiUniformCurveAndRationalBSplineCurve: typeof StepGeom_QuasiUniformCurveAndRationalBSplineCurve;
  StepGeom_QuasiUniformSurface: typeof StepGeom_QuasiUniformSurface;
  StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface: typeof StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface;
  StepGeom_RationalBSplineCurve: typeof StepGeom_RationalBSplineCurve;
  StepGeom_RationalBSplineSurface: typeof StepGeom_RationalBSplineSurface;
  StepGeom_RectangularCompositeSurface: typeof StepGeom_RectangularCompositeSurface;
  StepGeom_RectangularTrimmedSurface: typeof StepGeom_RectangularTrimmedSurface;
  StepGeom_ReparametrisedCompositeCurveSegment: typeof StepGeom_ReparametrisedCompositeCurveSegment;
  StepGeom_SeamCurve: typeof StepGeom_SeamCurve;
  StepGeom_SphericalSurface: typeof StepGeom_SphericalSurface;
  StepGeom_Surface: typeof StepGeom_Surface;
  StepGeom_SurfaceBoundary: typeof StepGeom_SurfaceBoundary;
  StepGeom_SurfaceCurve: typeof StepGeom_SurfaceCurve;
  StepGeom_SurfaceCurveAndBoundedCurve: typeof StepGeom_SurfaceCurveAndBoundedCurve;
  StepGeom_SurfaceOfLinearExtrusion: typeof StepGeom_SurfaceOfLinearExtrusion;
  StepGeom_SurfaceOfRevolution: typeof StepGeom_SurfaceOfRevolution;
  StepGeom_SurfacePatch: typeof StepGeom_SurfacePatch;
  StepGeom_SurfaceReplica: typeof StepGeom_SurfaceReplica;
  StepGeom_SweptSurface: typeof StepGeom_SweptSurface;
  StepGeom_ToroidalSurface: typeof StepGeom_ToroidalSurface;
  StepGeom_TrimmedCurve: typeof StepGeom_TrimmedCurve;
  StepGeom_TrimmingMember: typeof StepGeom_TrimmingMember;
  StepGeom_TrimmingSelect: typeof StepGeom_TrimmingSelect;
  StepGeom_UniformCurve: typeof StepGeom_UniformCurve;
  StepGeom_UniformCurveAndRationalBSplineCurve: typeof StepGeom_UniformCurveAndRationalBSplineCurve;
  StepGeom_UniformSurface: typeof StepGeom_UniformSurface;
  StepGeom_UniformSurfaceAndRationalBSplineSurface: typeof StepGeom_UniformSurfaceAndRationalBSplineSurface;
  StepGeom_Vector: typeof StepGeom_Vector;
  StepGeom_VectorOrDirection: typeof StepGeom_VectorOrDirection;
  StepRepr_AllAroundShapeAspect: typeof StepRepr_AllAroundShapeAspect;
  StepRepr_Apex: typeof StepRepr_Apex;
  StepRepr_AssemblyComponentUsage: typeof StepRepr_AssemblyComponentUsage;
  StepRepr_AssemblyComponentUsageSubstitute: typeof StepRepr_AssemblyComponentUsageSubstitute;
  StepRepr_BetweenShapeAspect: typeof StepRepr_BetweenShapeAspect;
  StepRepr_CentreOfSymmetry: typeof StepRepr_CentreOfSymmetry;
  StepRepr_CharacterizedDefinition: typeof StepRepr_CharacterizedDefinition;
  StepRepr_CharacterizedRepresentation: typeof StepRepr_CharacterizedRepresentation;
  StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp: typeof StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp;
  StepRepr_CompShAspAndDatumFeatAndShAsp: typeof StepRepr_CompShAspAndDatumFeatAndShAsp;
  StepRepr_CompositeGroupShapeAspect: typeof StepRepr_CompositeGroupShapeAspect;
  StepRepr_CompositeShapeAspect: typeof StepRepr_CompositeShapeAspect;
  StepRepr_CompoundRepresentationItem: typeof StepRepr_CompoundRepresentationItem;
  StepRepr_ConfigurationDesign: typeof StepRepr_ConfigurationDesign;
  StepRepr_ConfigurationDesignItem: typeof StepRepr_ConfigurationDesignItem;
  StepRepr_ConfigurationEffectivity: typeof StepRepr_ConfigurationEffectivity;
  StepRepr_ConfigurationItem: typeof StepRepr_ConfigurationItem;
  StepRepr_ConstructiveGeometryRepresentation: typeof StepRepr_ConstructiveGeometryRepresentation;
  StepRepr_ConstructiveGeometryRepresentationRelationship: typeof StepRepr_ConstructiveGeometryRepresentationRelationship;
  StepRepr_ContinuosShapeAspect: typeof StepRepr_ContinuosShapeAspect;
  StepRepr_DataEnvironment: typeof StepRepr_DataEnvironment;
  StepRepr_DefinitionalRepresentation: typeof StepRepr_DefinitionalRepresentation;
  StepRepr_DerivedShapeAspect: typeof StepRepr_DerivedShapeAspect;
  StepRepr_DescriptiveRepresentationItem: typeof StepRepr_DescriptiveRepresentationItem;
  StepRepr_Extension: typeof StepRepr_Extension;
  StepRepr_ExternallyDefinedRepresentation: typeof StepRepr_ExternallyDefinedRepresentation;
  StepRepr_FeatureForDatumTargetRelationship: typeof StepRepr_FeatureForDatumTargetRelationship;
  StepRepr_FunctionallyDefinedTransformation: typeof StepRepr_FunctionallyDefinedTransformation;
  StepRepr_GeometricAlignment: typeof StepRepr_GeometricAlignment;
  StepRepr_GlobalUncertaintyAssignedContext: typeof StepRepr_GlobalUncertaintyAssignedContext;
  StepRepr_GlobalUnitAssignedContext: typeof StepRepr_GlobalUnitAssignedContext;
  StepRepr_HArray1OfMaterialPropertyRepresentation: typeof StepRepr_HArray1OfMaterialPropertyRepresentation;
  StepRepr_HArray1OfMaterialPropertyRepresentation_1: typeof StepRepr_HArray1OfMaterialPropertyRepresentation_1;
  StepRepr_HArray1OfMaterialPropertyRepresentation_2: typeof StepRepr_HArray1OfMaterialPropertyRepresentation_2;
  StepRepr_HArray1OfMaterialPropertyRepresentation_3: typeof StepRepr_HArray1OfMaterialPropertyRepresentation_3;
  StepRepr_HArray1OfMaterialPropertyRepresentation_4: typeof StepRepr_HArray1OfMaterialPropertyRepresentation_4;
  StepRepr_HArray1OfPropertyDefinitionRepresentation: typeof StepRepr_HArray1OfPropertyDefinitionRepresentation;
  StepRepr_HArray1OfPropertyDefinitionRepresentation_1: typeof StepRepr_HArray1OfPropertyDefinitionRepresentation_1;
  StepRepr_HArray1OfPropertyDefinitionRepresentation_2: typeof StepRepr_HArray1OfPropertyDefinitionRepresentation_2;
  StepRepr_HArray1OfPropertyDefinitionRepresentation_3: typeof StepRepr_HArray1OfPropertyDefinitionRepresentation_3;
  StepRepr_HArray1OfPropertyDefinitionRepresentation_4: typeof StepRepr_HArray1OfPropertyDefinitionRepresentation_4;
  StepRepr_HArray1OfRepresentationItem: typeof StepRepr_HArray1OfRepresentationItem;
  StepRepr_HArray1OfRepresentationItem_1: typeof StepRepr_HArray1OfRepresentationItem_1;
  StepRepr_HArray1OfRepresentationItem_2: typeof StepRepr_HArray1OfRepresentationItem_2;
  StepRepr_HArray1OfRepresentationItem_3: typeof StepRepr_HArray1OfRepresentationItem_3;
  StepRepr_HArray1OfRepresentationItem_4: typeof StepRepr_HArray1OfRepresentationItem_4;
  StepRepr_HArray1OfShapeAspect: typeof StepRepr_HArray1OfShapeAspect;
  StepRepr_HArray1OfShapeAspect_1: typeof StepRepr_HArray1OfShapeAspect_1;
  StepRepr_HArray1OfShapeAspect_2: typeof StepRepr_HArray1OfShapeAspect_2;
  StepRepr_HArray1OfShapeAspect_3: typeof StepRepr_HArray1OfShapeAspect_3;
  StepRepr_HArray1OfShapeAspect_4: typeof StepRepr_HArray1OfShapeAspect_4;
  StepRepr_HSequenceOfMaterialPropertyRepresentation: typeof StepRepr_HSequenceOfMaterialPropertyRepresentation;
  StepRepr_HSequenceOfMaterialPropertyRepresentation_1: typeof StepRepr_HSequenceOfMaterialPropertyRepresentation_1;
  StepRepr_HSequenceOfMaterialPropertyRepresentation_2: typeof StepRepr_HSequenceOfMaterialPropertyRepresentation_2;
  StepRepr_HSequenceOfRepresentationItem: typeof StepRepr_HSequenceOfRepresentationItem;
  StepRepr_HSequenceOfRepresentationItem_1: typeof StepRepr_HSequenceOfRepresentationItem_1;
  StepRepr_HSequenceOfRepresentationItem_2: typeof StepRepr_HSequenceOfRepresentationItem_2;
  StepRepr_IntegerRepresentationItem: typeof StepRepr_IntegerRepresentationItem;
  StepRepr_ItemDefinedTransformation: typeof StepRepr_ItemDefinedTransformation;
  StepRepr_MakeFromUsageOption: typeof StepRepr_MakeFromUsageOption;
  StepRepr_MappedItem: typeof StepRepr_MappedItem;
  StepRepr_MaterialDesignation: typeof StepRepr_MaterialDesignation;
  StepRepr_MaterialProperty: typeof StepRepr_MaterialProperty;
  StepRepr_MaterialPropertyRepresentation: typeof StepRepr_MaterialPropertyRepresentation;
  StepRepr_MeasureRepresentationItem: typeof StepRepr_MeasureRepresentationItem;
  StepRepr_NextAssemblyUsageOccurrence: typeof StepRepr_NextAssemblyUsageOccurrence;
  StepRepr_ParallelOffset: typeof StepRepr_ParallelOffset;
  StepRepr_ParametricRepresentationContext: typeof StepRepr_ParametricRepresentationContext;
  StepRepr_PerpendicularTo: typeof StepRepr_PerpendicularTo;
  StepRepr_ProductConcept: typeof StepRepr_ProductConcept;
  StepRepr_ProductDefinitionShape: typeof StepRepr_ProductDefinitionShape;
  StepRepr_ProductDefinitionUsage: typeof StepRepr_ProductDefinitionUsage;
  StepRepr_PromissoryUsageOccurrence: typeof StepRepr_PromissoryUsageOccurrence;
  StepRepr_PropertyDefinition: typeof StepRepr_PropertyDefinition;
  StepRepr_PropertyDefinitionRelationship: typeof StepRepr_PropertyDefinitionRelationship;
  StepRepr_PropertyDefinitionRepresentation: typeof StepRepr_PropertyDefinitionRepresentation;
  StepRepr_QuantifiedAssemblyComponentUsage: typeof StepRepr_QuantifiedAssemblyComponentUsage;
  StepRepr_ReprItemAndLengthMeasureWithUnit: typeof StepRepr_ReprItemAndLengthMeasureWithUnit;
  StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI: typeof StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI;
  StepRepr_ReprItemAndMeasureWithUnit: typeof StepRepr_ReprItemAndMeasureWithUnit;
  StepRepr_ReprItemAndMeasureWithUnitAndQRI: typeof StepRepr_ReprItemAndMeasureWithUnitAndQRI;
  StepRepr_ReprItemAndPlaneAngleMeasureWithUnit: typeof StepRepr_ReprItemAndPlaneAngleMeasureWithUnit;
  StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI: typeof StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI;
  StepRepr_Representation: typeof StepRepr_Representation;
  StepRepr_RepresentationContext: typeof StepRepr_RepresentationContext;
  StepRepr_RepresentationItem: typeof StepRepr_RepresentationItem;
  StepRepr_RepresentationMap: typeof StepRepr_RepresentationMap;
  StepRepr_RepresentationRelationship: typeof StepRepr_RepresentationRelationship;
  StepRepr_RepresentationRelationshipWithTransformation: typeof StepRepr_RepresentationRelationshipWithTransformation;
  StepRepr_RepresentedDefinition: typeof StepRepr_RepresentedDefinition;
  StepRepr_ShapeAspect: typeof StepRepr_ShapeAspect;
  StepRepr_ShapeAspectDerivingRelationship: typeof StepRepr_ShapeAspectDerivingRelationship;
  StepRepr_ShapeAspectRelationship: typeof StepRepr_ShapeAspectRelationship;
  StepRepr_ShapeAspectTransition: typeof StepRepr_ShapeAspectTransition;
  StepRepr_ShapeDefinition: typeof StepRepr_ShapeDefinition;
  StepRepr_ShapeRepresentationRelationship: typeof StepRepr_ShapeRepresentationRelationship;
  StepRepr_ShapeRepresentationRelationshipWithTransformation: typeof StepRepr_ShapeRepresentationRelationshipWithTransformation;
  StepRepr_SpecifiedHigherUsageOccurrence: typeof StepRepr_SpecifiedHigherUsageOccurrence;
  StepRepr_StructuralResponseProperty: typeof StepRepr_StructuralResponseProperty;
  StepRepr_StructuralResponsePropertyDefinitionRepresentation: typeof StepRepr_StructuralResponsePropertyDefinitionRepresentation;
  StepRepr_SuppliedPartRelationship: typeof StepRepr_SuppliedPartRelationship;
  StepRepr_Tangent: typeof StepRepr_Tangent;
  StepRepr_Transformation: typeof StepRepr_Transformation;
  StepRepr_ValueRange: typeof StepRepr_ValueRange;
  StepRepr_ValueRepresentationItem: typeof StepRepr_ValueRepresentationItem;
  StepSelect_Activator: typeof StepSelect_Activator;
  StepSelect_FileModifier: typeof StepSelect_FileModifier;
  StepSelect_FloatFormat: typeof StepSelect_FloatFormat;
  StepSelect_ModelModifier: typeof StepSelect_ModelModifier;
  StepSelect_StepType: typeof StepSelect_StepType;
  StepSelect_WorkLibrary: typeof StepSelect_WorkLibrary;
  StepShape_AdvancedBrepShapeRepresentation: typeof StepShape_AdvancedBrepShapeRepresentation;
  StepShape_AdvancedFace: typeof StepShape_AdvancedFace;
  StepShape_AngularLocation: typeof StepShape_AngularLocation;
  StepShape_AngularSize: typeof StepShape_AngularSize;
  StepShape_Block: typeof StepShape_Block;
  StepShape_BooleanOperand: typeof StepShape_BooleanOperand;
  StepShape_BooleanResult: typeof StepShape_BooleanResult;
  StepShape_BoxDomain: typeof StepShape_BoxDomain;
  StepShape_BoxedHalfSpace: typeof StepShape_BoxedHalfSpace;
  StepShape_BrepWithVoids: typeof StepShape_BrepWithVoids;
  StepShape_ClosedShell: typeof StepShape_ClosedShell;
  StepShape_CompoundShapeRepresentation: typeof StepShape_CompoundShapeRepresentation;
  StepShape_ConnectedEdgeSet: typeof StepShape_ConnectedEdgeSet;
  StepShape_ConnectedFaceSet: typeof StepShape_ConnectedFaceSet;
  StepShape_ConnectedFaceShapeRepresentation: typeof StepShape_ConnectedFaceShapeRepresentation;
  StepShape_ConnectedFaceSubSet: typeof StepShape_ConnectedFaceSubSet;
  StepShape_ContextDependentShapeRepresentation: typeof StepShape_ContextDependentShapeRepresentation;
  StepShape_CsgPrimitive: typeof StepShape_CsgPrimitive;
  StepShape_CsgSelect: typeof StepShape_CsgSelect;
  StepShape_CsgShapeRepresentation: typeof StepShape_CsgShapeRepresentation;
  StepShape_CsgSolid: typeof StepShape_CsgSolid;
  StepShape_DefinitionalRepresentationAndShapeRepresentation: typeof StepShape_DefinitionalRepresentationAndShapeRepresentation;
  StepShape_DimensionalCharacteristic: typeof StepShape_DimensionalCharacteristic;
  StepShape_DimensionalCharacteristicRepresentation: typeof StepShape_DimensionalCharacteristicRepresentation;
  StepShape_DimensionalLocation: typeof StepShape_DimensionalLocation;
  StepShape_DimensionalLocationWithPath: typeof StepShape_DimensionalLocationWithPath;
  StepShape_DimensionalSize: typeof StepShape_DimensionalSize;
  StepShape_DimensionalSizeWithPath: typeof StepShape_DimensionalSizeWithPath;
  StepShape_DirectedDimensionalLocation: typeof StepShape_DirectedDimensionalLocation;
  StepShape_Edge: typeof StepShape_Edge;
  StepShape_EdgeBasedWireframeModel: typeof StepShape_EdgeBasedWireframeModel;
  StepShape_EdgeBasedWireframeShapeRepresentation: typeof StepShape_EdgeBasedWireframeShapeRepresentation;
  StepShape_EdgeCurve: typeof StepShape_EdgeCurve;
  StepShape_EdgeLoop: typeof StepShape_EdgeLoop;
  StepShape_ExtrudedAreaSolid: typeof StepShape_ExtrudedAreaSolid;
  StepShape_ExtrudedFaceSolid: typeof StepShape_ExtrudedFaceSolid;
  StepShape_Face: typeof StepShape_Face;
  StepShape_FaceBasedSurfaceModel: typeof StepShape_FaceBasedSurfaceModel;
  StepShape_FaceBound: typeof StepShape_FaceBound;
  StepShape_FaceOuterBound: typeof StepShape_FaceOuterBound;
  StepShape_FaceSurface: typeof StepShape_FaceSurface;
  StepShape_FacetedBrep: typeof StepShape_FacetedBrep;
  StepShape_FacetedBrepAndBrepWithVoids: typeof StepShape_FacetedBrepAndBrepWithVoids;
  StepShape_FacetedBrepShapeRepresentation: typeof StepShape_FacetedBrepShapeRepresentation;
  StepShape_GeometricCurveSet: typeof StepShape_GeometricCurveSet;
  StepShape_GeometricSet: typeof StepShape_GeometricSet;
  StepShape_GeometricSetSelect: typeof StepShape_GeometricSetSelect;
  StepShape_GeometricallyBoundedSurfaceShapeRepresentation: typeof StepShape_GeometricallyBoundedSurfaceShapeRepresentation;
  StepShape_GeometricallyBoundedWireframeShapeRepresentation: typeof StepShape_GeometricallyBoundedWireframeShapeRepresentation;
  StepShape_HArray1OfConnectedEdgeSet: typeof StepShape_HArray1OfConnectedEdgeSet;
  StepShape_HArray1OfConnectedEdgeSet_1: typeof StepShape_HArray1OfConnectedEdgeSet_1;
  StepShape_HArray1OfConnectedEdgeSet_2: typeof StepShape_HArray1OfConnectedEdgeSet_2;
  StepShape_HArray1OfConnectedEdgeSet_3: typeof StepShape_HArray1OfConnectedEdgeSet_3;
  StepShape_HArray1OfConnectedEdgeSet_4: typeof StepShape_HArray1OfConnectedEdgeSet_4;
  StepShape_HArray1OfConnectedFaceSet: typeof StepShape_HArray1OfConnectedFaceSet;
  StepShape_HArray1OfConnectedFaceSet_1: typeof StepShape_HArray1OfConnectedFaceSet_1;
  StepShape_HArray1OfConnectedFaceSet_2: typeof StepShape_HArray1OfConnectedFaceSet_2;
  StepShape_HArray1OfConnectedFaceSet_3: typeof StepShape_HArray1OfConnectedFaceSet_3;
  StepShape_HArray1OfConnectedFaceSet_4: typeof StepShape_HArray1OfConnectedFaceSet_4;
  StepShape_HArray1OfEdge: typeof StepShape_HArray1OfEdge;
  StepShape_HArray1OfEdge_1: typeof StepShape_HArray1OfEdge_1;
  StepShape_HArray1OfEdge_2: typeof StepShape_HArray1OfEdge_2;
  StepShape_HArray1OfEdge_3: typeof StepShape_HArray1OfEdge_3;
  StepShape_HArray1OfEdge_4: typeof StepShape_HArray1OfEdge_4;
  StepShape_HArray1OfFace: typeof StepShape_HArray1OfFace;
  StepShape_HArray1OfFace_1: typeof StepShape_HArray1OfFace_1;
  StepShape_HArray1OfFace_2: typeof StepShape_HArray1OfFace_2;
  StepShape_HArray1OfFace_3: typeof StepShape_HArray1OfFace_3;
  StepShape_HArray1OfFace_4: typeof StepShape_HArray1OfFace_4;
  StepShape_HArray1OfFaceBound: typeof StepShape_HArray1OfFaceBound;
  StepShape_HArray1OfFaceBound_1: typeof StepShape_HArray1OfFaceBound_1;
  StepShape_HArray1OfFaceBound_2: typeof StepShape_HArray1OfFaceBound_2;
  StepShape_HArray1OfFaceBound_3: typeof StepShape_HArray1OfFaceBound_3;
  StepShape_HArray1OfFaceBound_4: typeof StepShape_HArray1OfFaceBound_4;
  StepShape_HArray1OfGeometricSetSelect: typeof StepShape_HArray1OfGeometricSetSelect;
  StepShape_HArray1OfGeometricSetSelect_1: typeof StepShape_HArray1OfGeometricSetSelect_1;
  StepShape_HArray1OfGeometricSetSelect_2: typeof StepShape_HArray1OfGeometricSetSelect_2;
  StepShape_HArray1OfGeometricSetSelect_3: typeof StepShape_HArray1OfGeometricSetSelect_3;
  StepShape_HArray1OfGeometricSetSelect_4: typeof StepShape_HArray1OfGeometricSetSelect_4;
  StepShape_HArray1OfOrientedClosedShell: typeof StepShape_HArray1OfOrientedClosedShell;
  StepShape_HArray1OfOrientedClosedShell_1: typeof StepShape_HArray1OfOrientedClosedShell_1;
  StepShape_HArray1OfOrientedClosedShell_2: typeof StepShape_HArray1OfOrientedClosedShell_2;
  StepShape_HArray1OfOrientedClosedShell_3: typeof StepShape_HArray1OfOrientedClosedShell_3;
  StepShape_HArray1OfOrientedClosedShell_4: typeof StepShape_HArray1OfOrientedClosedShell_4;
  StepShape_HArray1OfOrientedEdge: typeof StepShape_HArray1OfOrientedEdge;
  StepShape_HArray1OfOrientedEdge_1: typeof StepShape_HArray1OfOrientedEdge_1;
  StepShape_HArray1OfOrientedEdge_2: typeof StepShape_HArray1OfOrientedEdge_2;
  StepShape_HArray1OfOrientedEdge_3: typeof StepShape_HArray1OfOrientedEdge_3;
  StepShape_HArray1OfOrientedEdge_4: typeof StepShape_HArray1OfOrientedEdge_4;
  StepShape_HArray1OfShapeDimensionRepresentationItem: typeof StepShape_HArray1OfShapeDimensionRepresentationItem;
  StepShape_HArray1OfShapeDimensionRepresentationItem_1: typeof StepShape_HArray1OfShapeDimensionRepresentationItem_1;
  StepShape_HArray1OfShapeDimensionRepresentationItem_2: typeof StepShape_HArray1OfShapeDimensionRepresentationItem_2;
  StepShape_HArray1OfShapeDimensionRepresentationItem_3: typeof StepShape_HArray1OfShapeDimensionRepresentationItem_3;
  StepShape_HArray1OfShapeDimensionRepresentationItem_4: typeof StepShape_HArray1OfShapeDimensionRepresentationItem_4;
  StepShape_HArray1OfShell: typeof StepShape_HArray1OfShell;
  StepShape_HArray1OfShell_1: typeof StepShape_HArray1OfShell_1;
  StepShape_HArray1OfShell_2: typeof StepShape_HArray1OfShell_2;
  StepShape_HArray1OfShell_3: typeof StepShape_HArray1OfShell_3;
  StepShape_HArray1OfShell_4: typeof StepShape_HArray1OfShell_4;
  StepShape_HArray1OfValueQualifier: typeof StepShape_HArray1OfValueQualifier;
  StepShape_HArray1OfValueQualifier_1: typeof StepShape_HArray1OfValueQualifier_1;
  StepShape_HArray1OfValueQualifier_2: typeof StepShape_HArray1OfValueQualifier_2;
  StepShape_HArray1OfValueQualifier_3: typeof StepShape_HArray1OfValueQualifier_3;
  StepShape_HArray1OfValueQualifier_4: typeof StepShape_HArray1OfValueQualifier_4;
  StepShape_HalfSpaceSolid: typeof StepShape_HalfSpaceSolid;
  StepShape_LimitsAndFits: typeof StepShape_LimitsAndFits;
  StepShape_Loop: typeof StepShape_Loop;
  StepShape_LoopAndPath: typeof StepShape_LoopAndPath;
  StepShape_ManifoldSolidBrep: typeof StepShape_ManifoldSolidBrep;
  StepShape_ManifoldSurfaceShapeRepresentation: typeof StepShape_ManifoldSurfaceShapeRepresentation;
  StepShape_MeasureQualification: typeof StepShape_MeasureQualification;
  StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem: typeof StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem;
  StepShape_NonManifoldSurfaceShapeRepresentation: typeof StepShape_NonManifoldSurfaceShapeRepresentation;
  StepShape_OpenShell: typeof StepShape_OpenShell;
  StepShape_OrientedClosedShell: typeof StepShape_OrientedClosedShell;
  StepShape_OrientedEdge: typeof StepShape_OrientedEdge;
  StepShape_OrientedFace: typeof StepShape_OrientedFace;
  StepShape_OrientedOpenShell: typeof StepShape_OrientedOpenShell;
  StepShape_OrientedPath: typeof StepShape_OrientedPath;
  StepShape_Path: typeof StepShape_Path;
  StepShape_PlusMinusTolerance: typeof StepShape_PlusMinusTolerance;
  StepShape_PointRepresentation: typeof StepShape_PointRepresentation;
  StepShape_PolyLoop: typeof StepShape_PolyLoop;
  StepShape_PrecisionQualifier: typeof StepShape_PrecisionQualifier;
  StepShape_QualifiedRepresentationItem: typeof StepShape_QualifiedRepresentationItem;
  StepShape_ReversibleTopologyItem: typeof StepShape_ReversibleTopologyItem;
  StepShape_RevolvedAreaSolid: typeof StepShape_RevolvedAreaSolid;
  StepShape_RevolvedFaceSolid: typeof StepShape_RevolvedFaceSolid;
  StepShape_RightAngularWedge: typeof StepShape_RightAngularWedge;
  StepShape_RightCircularCone: typeof StepShape_RightCircularCone;
  StepShape_RightCircularCylinder: typeof StepShape_RightCircularCylinder;
  StepShape_SeamEdge: typeof StepShape_SeamEdge;
  StepShape_ShapeDefinitionRepresentation: typeof StepShape_ShapeDefinitionRepresentation;
  StepShape_ShapeDimensionRepresentation: typeof StepShape_ShapeDimensionRepresentation;
  StepShape_ShapeDimensionRepresentationItem: typeof StepShape_ShapeDimensionRepresentationItem;
  StepShape_ShapeRepresentation: typeof StepShape_ShapeRepresentation;
  StepShape_ShapeRepresentationWithParameters: typeof StepShape_ShapeRepresentationWithParameters;
  StepShape_Shell: typeof StepShape_Shell;
  StepShape_ShellBasedSurfaceModel: typeof StepShape_ShellBasedSurfaceModel;
  StepShape_SolidModel: typeof StepShape_SolidModel;
  StepShape_SolidReplica: typeof StepShape_SolidReplica;
  StepShape_Sphere: typeof StepShape_Sphere;
  StepShape_Subedge: typeof StepShape_Subedge;
  StepShape_Subface: typeof StepShape_Subface;
  StepShape_SurfaceModel: typeof StepShape_SurfaceModel;
  StepShape_SweptAreaSolid: typeof StepShape_SweptAreaSolid;
  StepShape_SweptFaceSolid: typeof StepShape_SweptFaceSolid;
  StepShape_ToleranceMethodDefinition: typeof StepShape_ToleranceMethodDefinition;
  StepShape_ToleranceValue: typeof StepShape_ToleranceValue;
  StepShape_TopologicalRepresentationItem: typeof StepShape_TopologicalRepresentationItem;
  StepShape_Torus: typeof StepShape_Torus;
  StepShape_TransitionalShapeRepresentation: typeof StepShape_TransitionalShapeRepresentation;
  StepShape_TypeQualifier: typeof StepShape_TypeQualifier;
  StepShape_ValueFormatTypeQualifier: typeof StepShape_ValueFormatTypeQualifier;
  StepShape_ValueQualifier: typeof StepShape_ValueQualifier;
  StepShape_Vertex: typeof StepShape_Vertex;
  StepShape_VertexLoop: typeof StepShape_VertexLoop;
  StepShape_VertexPoint: typeof StepShape_VertexPoint;
  StepToGeom: typeof StepToGeom;
  StepToTopoDS: typeof StepToTopoDS;
  StepToTopoDS_CartesianPointHasher: typeof StepToTopoDS_CartesianPointHasher;
  StepToTopoDS_GeometricTool: typeof StepToTopoDS_GeometricTool;
  StepToTopoDS_MakeTransformed: typeof StepToTopoDS_MakeTransformed;
  StepToTopoDS_NMTool: typeof StepToTopoDS_NMTool;
  StepToTopoDS_NMTool_1: typeof StepToTopoDS_NMTool_1;
  StepToTopoDS_NMTool_2: typeof StepToTopoDS_NMTool_2;
  StepToTopoDS_PointPair: typeof StepToTopoDS_PointPair;
  StepToTopoDS_PointPairHasher: typeof StepToTopoDS_PointPairHasher;
  StepToTopoDS_Root: typeof StepToTopoDS_Root;
  StepToTopoDS_Tool: typeof StepToTopoDS_Tool;
  StepToTopoDS_Tool_1: typeof StepToTopoDS_Tool_1;
  StepToTopoDS_Tool_2: typeof StepToTopoDS_Tool_2;
  StepToTopoDS_TranslateCompositeCurve: typeof StepToTopoDS_TranslateCompositeCurve;
  StepToTopoDS_TranslateCompositeCurve_1: typeof StepToTopoDS_TranslateCompositeCurve_1;
  StepToTopoDS_TranslateCompositeCurve_2: typeof StepToTopoDS_TranslateCompositeCurve_2;
  StepToTopoDS_TranslateCompositeCurve_3: typeof StepToTopoDS_TranslateCompositeCurve_3;
  StepToTopoDS_TranslateCurveBoundedSurface: typeof StepToTopoDS_TranslateCurveBoundedSurface;
  StepToTopoDS_TranslateCurveBoundedSurface_1: typeof StepToTopoDS_TranslateCurveBoundedSurface_1;
  StepToTopoDS_TranslateCurveBoundedSurface_2: typeof StepToTopoDS_TranslateCurveBoundedSurface_2;
  StepToTopoDS_TranslateEdge: typeof StepToTopoDS_TranslateEdge;
  StepToTopoDS_TranslateEdge_1: typeof StepToTopoDS_TranslateEdge_1;
  StepToTopoDS_TranslateEdge_2: typeof StepToTopoDS_TranslateEdge_2;
  StepToTopoDS_TranslateEdgeLoop: typeof StepToTopoDS_TranslateEdgeLoop;
  StepToTopoDS_TranslateEdgeLoop_1: typeof StepToTopoDS_TranslateEdgeLoop_1;
  StepToTopoDS_TranslateEdgeLoop_2: typeof StepToTopoDS_TranslateEdgeLoop_2;
  StepToTopoDS_TranslateFace: typeof StepToTopoDS_TranslateFace;
  StepToTopoDS_TranslateFace_1: typeof StepToTopoDS_TranslateFace_1;
  StepToTopoDS_TranslateFace_2: typeof StepToTopoDS_TranslateFace_2;
  StepToTopoDS_TranslatePolyLoop: typeof StepToTopoDS_TranslatePolyLoop;
  StepToTopoDS_TranslatePolyLoop_1: typeof StepToTopoDS_TranslatePolyLoop_1;
  StepToTopoDS_TranslatePolyLoop_2: typeof StepToTopoDS_TranslatePolyLoop_2;
  StepToTopoDS_TranslateShell: typeof StepToTopoDS_TranslateShell;
  StepToTopoDS_TranslateShell_1: typeof StepToTopoDS_TranslateShell_1;
  StepToTopoDS_TranslateShell_2: typeof StepToTopoDS_TranslateShell_2;
  StepToTopoDS_TranslateVertex: typeof StepToTopoDS_TranslateVertex;
  StepToTopoDS_TranslateVertex_1: typeof StepToTopoDS_TranslateVertex_1;
  StepToTopoDS_TranslateVertex_2: typeof StepToTopoDS_TranslateVertex_2;
  StepToTopoDS_TranslateVertexLoop: typeof StepToTopoDS_TranslateVertexLoop;
  StepToTopoDS_TranslateVertexLoop_1: typeof StepToTopoDS_TranslateVertexLoop_1;
  StepToTopoDS_TranslateVertexLoop_2: typeof StepToTopoDS_TranslateVertexLoop_2;
  StepVisual_AnnotationCurveOccurrence: typeof StepVisual_AnnotationCurveOccurrence;
  StepVisual_AnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem: typeof StepVisual_AnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem;
  StepVisual_AnnotationFillArea: typeof StepVisual_AnnotationFillArea;
  StepVisual_AnnotationFillAreaOccurrence: typeof StepVisual_AnnotationFillAreaOccurrence;
  StepVisual_AnnotationOccurrence: typeof StepVisual_AnnotationOccurrence;
  StepVisual_AnnotationPlane: typeof StepVisual_AnnotationPlane;
  StepVisual_AnnotationPlaneElement: typeof StepVisual_AnnotationPlaneElement;
  StepVisual_AnnotationText: typeof StepVisual_AnnotationText;
  StepVisual_AnnotationTextOccurrence: typeof StepVisual_AnnotationTextOccurrence;
  StepVisual_AreaInSet: typeof StepVisual_AreaInSet;
  StepVisual_AreaOrView: typeof StepVisual_AreaOrView;
  StepVisual_BackgroundColour: typeof StepVisual_BackgroundColour;
  StepVisual_BoxCharacteristicSelect: typeof StepVisual_BoxCharacteristicSelect;
  StepVisual_CameraImage: typeof StepVisual_CameraImage;
  StepVisual_CameraImage2dWithScale: typeof StepVisual_CameraImage2dWithScale;
  StepVisual_CameraImage3dWithScale: typeof StepVisual_CameraImage3dWithScale;
  StepVisual_CameraModel: typeof StepVisual_CameraModel;
  StepVisual_CameraModelD2: typeof StepVisual_CameraModelD2;
  StepVisual_CameraModelD3: typeof StepVisual_CameraModelD3;
  StepVisual_CameraModelD3MultiClipping: typeof StepVisual_CameraModelD3MultiClipping;
  StepVisual_CameraModelD3MultiClippingInterectionSelect: typeof StepVisual_CameraModelD3MultiClippingInterectionSelect;
  StepVisual_CameraModelD3MultiClippingIntersection: typeof StepVisual_CameraModelD3MultiClippingIntersection;
  StepVisual_CameraModelD3MultiClippingUnion: typeof StepVisual_CameraModelD3MultiClippingUnion;
  StepVisual_CameraModelD3MultiClippingUnionSelect: typeof StepVisual_CameraModelD3MultiClippingUnionSelect;
  StepVisual_CameraUsage: typeof StepVisual_CameraUsage;
  StepVisual_CharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation: typeof StepVisual_CharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation;
  StepVisual_Colour: typeof StepVisual_Colour;
  StepVisual_ColourRgb: typeof StepVisual_ColourRgb;
  StepVisual_ColourSpecification: typeof StepVisual_ColourSpecification;
  StepVisual_CompositeText: typeof StepVisual_CompositeText;
  StepVisual_CompositeTextWithExtent: typeof StepVisual_CompositeTextWithExtent;
  StepVisual_ContextDependentInvisibility: typeof StepVisual_ContextDependentInvisibility;
  StepVisual_ContextDependentOverRidingStyledItem: typeof StepVisual_ContextDependentOverRidingStyledItem;
  StepVisual_CoordinatesList: typeof StepVisual_CoordinatesList;
  StepVisual_CurveStyle: typeof StepVisual_CurveStyle;
  StepVisual_CurveStyleFont: typeof StepVisual_CurveStyleFont;
  StepVisual_CurveStyleFontPattern: typeof StepVisual_CurveStyleFontPattern;
  StepVisual_CurveStyleFontSelect: typeof StepVisual_CurveStyleFontSelect;
  StepVisual_DirectionCountSelect: typeof StepVisual_DirectionCountSelect;
  StepVisual_DraughtingAnnotationOccurrence: typeof StepVisual_DraughtingAnnotationOccurrence;
  StepVisual_DraughtingCallout: typeof StepVisual_DraughtingCallout;
  StepVisual_DraughtingCalloutElement: typeof StepVisual_DraughtingCalloutElement;
  StepVisual_DraughtingModel: typeof StepVisual_DraughtingModel;
  StepVisual_DraughtingPreDefinedColour: typeof StepVisual_DraughtingPreDefinedColour;
  StepVisual_DraughtingPreDefinedCurveFont: typeof StepVisual_DraughtingPreDefinedCurveFont;
  StepVisual_ExternallyDefinedCurveFont: typeof StepVisual_ExternallyDefinedCurveFont;
  StepVisual_ExternallyDefinedTextFont: typeof StepVisual_ExternallyDefinedTextFont;
  StepVisual_FillAreaStyle: typeof StepVisual_FillAreaStyle;
  StepVisual_FillAreaStyleColour: typeof StepVisual_FillAreaStyleColour;
  StepVisual_FillStyleSelect: typeof StepVisual_FillStyleSelect;
  StepVisual_FontSelect: typeof StepVisual_FontSelect;
  StepVisual_HArray1OfAnnotationPlaneElement: typeof StepVisual_HArray1OfAnnotationPlaneElement;
  StepVisual_HArray1OfAnnotationPlaneElement_1: typeof StepVisual_HArray1OfAnnotationPlaneElement_1;
  StepVisual_HArray1OfAnnotationPlaneElement_2: typeof StepVisual_HArray1OfAnnotationPlaneElement_2;
  StepVisual_HArray1OfAnnotationPlaneElement_3: typeof StepVisual_HArray1OfAnnotationPlaneElement_3;
  StepVisual_HArray1OfAnnotationPlaneElement_4: typeof StepVisual_HArray1OfAnnotationPlaneElement_4;
  StepVisual_HArray1OfBoxCharacteristicSelect: typeof StepVisual_HArray1OfBoxCharacteristicSelect;
  StepVisual_HArray1OfBoxCharacteristicSelect_1: typeof StepVisual_HArray1OfBoxCharacteristicSelect_1;
  StepVisual_HArray1OfBoxCharacteristicSelect_2: typeof StepVisual_HArray1OfBoxCharacteristicSelect_2;
  StepVisual_HArray1OfBoxCharacteristicSelect_3: typeof StepVisual_HArray1OfBoxCharacteristicSelect_3;
  StepVisual_HArray1OfBoxCharacteristicSelect_4: typeof StepVisual_HArray1OfBoxCharacteristicSelect_4;
  StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect: typeof StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect;
  StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_1: typeof StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_1;
  StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_2: typeof StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_2;
  StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_3: typeof StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_3;
  StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_4: typeof StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_4;
  StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect: typeof StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect;
  StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_1: typeof StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_1;
  StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_2: typeof StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_2;
  StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_3: typeof StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_3;
  StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_4: typeof StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_4;
  StepVisual_HArray1OfCurveStyleFontPattern: typeof StepVisual_HArray1OfCurveStyleFontPattern;
  StepVisual_HArray1OfCurveStyleFontPattern_1: typeof StepVisual_HArray1OfCurveStyleFontPattern_1;
  StepVisual_HArray1OfCurveStyleFontPattern_2: typeof StepVisual_HArray1OfCurveStyleFontPattern_2;
  StepVisual_HArray1OfCurveStyleFontPattern_3: typeof StepVisual_HArray1OfCurveStyleFontPattern_3;
  StepVisual_HArray1OfCurveStyleFontPattern_4: typeof StepVisual_HArray1OfCurveStyleFontPattern_4;
  StepVisual_HArray1OfDirectionCountSelect: typeof StepVisual_HArray1OfDirectionCountSelect;
  StepVisual_HArray1OfDirectionCountSelect_1: typeof StepVisual_HArray1OfDirectionCountSelect_1;
  StepVisual_HArray1OfDirectionCountSelect_2: typeof StepVisual_HArray1OfDirectionCountSelect_2;
  StepVisual_HArray1OfDirectionCountSelect_3: typeof StepVisual_HArray1OfDirectionCountSelect_3;
  StepVisual_HArray1OfDirectionCountSelect_4: typeof StepVisual_HArray1OfDirectionCountSelect_4;
  StepVisual_HArray1OfDraughtingCalloutElement: typeof StepVisual_HArray1OfDraughtingCalloutElement;
  StepVisual_HArray1OfDraughtingCalloutElement_1: typeof StepVisual_HArray1OfDraughtingCalloutElement_1;
  StepVisual_HArray1OfDraughtingCalloutElement_2: typeof StepVisual_HArray1OfDraughtingCalloutElement_2;
  StepVisual_HArray1OfDraughtingCalloutElement_3: typeof StepVisual_HArray1OfDraughtingCalloutElement_3;
  StepVisual_HArray1OfDraughtingCalloutElement_4: typeof StepVisual_HArray1OfDraughtingCalloutElement_4;
  StepVisual_HArray1OfFillStyleSelect: typeof StepVisual_HArray1OfFillStyleSelect;
  StepVisual_HArray1OfFillStyleSelect_1: typeof StepVisual_HArray1OfFillStyleSelect_1;
  StepVisual_HArray1OfFillStyleSelect_2: typeof StepVisual_HArray1OfFillStyleSelect_2;
  StepVisual_HArray1OfFillStyleSelect_3: typeof StepVisual_HArray1OfFillStyleSelect_3;
  StepVisual_HArray1OfFillStyleSelect_4: typeof StepVisual_HArray1OfFillStyleSelect_4;
  StepVisual_HArray1OfInvisibleItem: typeof StepVisual_HArray1OfInvisibleItem;
  StepVisual_HArray1OfInvisibleItem_1: typeof StepVisual_HArray1OfInvisibleItem_1;
  StepVisual_HArray1OfInvisibleItem_2: typeof StepVisual_HArray1OfInvisibleItem_2;
  StepVisual_HArray1OfInvisibleItem_3: typeof StepVisual_HArray1OfInvisibleItem_3;
  StepVisual_HArray1OfInvisibleItem_4: typeof StepVisual_HArray1OfInvisibleItem_4;
  StepVisual_HArray1OfLayeredItem: typeof StepVisual_HArray1OfLayeredItem;
  StepVisual_HArray1OfLayeredItem_1: typeof StepVisual_HArray1OfLayeredItem_1;
  StepVisual_HArray1OfLayeredItem_2: typeof StepVisual_HArray1OfLayeredItem_2;
  StepVisual_HArray1OfLayeredItem_3: typeof StepVisual_HArray1OfLayeredItem_3;
  StepVisual_HArray1OfLayeredItem_4: typeof StepVisual_HArray1OfLayeredItem_4;
  StepVisual_HArray1OfPresentationStyleAssignment: typeof StepVisual_HArray1OfPresentationStyleAssignment;
  StepVisual_HArray1OfPresentationStyleAssignment_1: typeof StepVisual_HArray1OfPresentationStyleAssignment_1;
  StepVisual_HArray1OfPresentationStyleAssignment_2: typeof StepVisual_HArray1OfPresentationStyleAssignment_2;
  StepVisual_HArray1OfPresentationStyleAssignment_3: typeof StepVisual_HArray1OfPresentationStyleAssignment_3;
  StepVisual_HArray1OfPresentationStyleAssignment_4: typeof StepVisual_HArray1OfPresentationStyleAssignment_4;
  StepVisual_HArray1OfPresentationStyleSelect: typeof StepVisual_HArray1OfPresentationStyleSelect;
  StepVisual_HArray1OfPresentationStyleSelect_1: typeof StepVisual_HArray1OfPresentationStyleSelect_1;
  StepVisual_HArray1OfPresentationStyleSelect_2: typeof StepVisual_HArray1OfPresentationStyleSelect_2;
  StepVisual_HArray1OfPresentationStyleSelect_3: typeof StepVisual_HArray1OfPresentationStyleSelect_3;
  StepVisual_HArray1OfPresentationStyleSelect_4: typeof StepVisual_HArray1OfPresentationStyleSelect_4;
  StepVisual_HArray1OfStyleContextSelect: typeof StepVisual_HArray1OfStyleContextSelect;
  StepVisual_HArray1OfStyleContextSelect_1: typeof StepVisual_HArray1OfStyleContextSelect_1;
  StepVisual_HArray1OfStyleContextSelect_2: typeof StepVisual_HArray1OfStyleContextSelect_2;
  StepVisual_HArray1OfStyleContextSelect_3: typeof StepVisual_HArray1OfStyleContextSelect_3;
  StepVisual_HArray1OfStyleContextSelect_4: typeof StepVisual_HArray1OfStyleContextSelect_4;
  StepVisual_HArray1OfSurfaceStyleElementSelect: typeof StepVisual_HArray1OfSurfaceStyleElementSelect;
  StepVisual_HArray1OfSurfaceStyleElementSelect_1: typeof StepVisual_HArray1OfSurfaceStyleElementSelect_1;
  StepVisual_HArray1OfSurfaceStyleElementSelect_2: typeof StepVisual_HArray1OfSurfaceStyleElementSelect_2;
  StepVisual_HArray1OfSurfaceStyleElementSelect_3: typeof StepVisual_HArray1OfSurfaceStyleElementSelect_3;
  StepVisual_HArray1OfSurfaceStyleElementSelect_4: typeof StepVisual_HArray1OfSurfaceStyleElementSelect_4;
  StepVisual_HArray1OfTextOrCharacter: typeof StepVisual_HArray1OfTextOrCharacter;
  StepVisual_HArray1OfTextOrCharacter_1: typeof StepVisual_HArray1OfTextOrCharacter_1;
  StepVisual_HArray1OfTextOrCharacter_2: typeof StepVisual_HArray1OfTextOrCharacter_2;
  StepVisual_HArray1OfTextOrCharacter_3: typeof StepVisual_HArray1OfTextOrCharacter_3;
  StepVisual_HArray1OfTextOrCharacter_4: typeof StepVisual_HArray1OfTextOrCharacter_4;
  StepVisual_Invisibility: typeof StepVisual_Invisibility;
  StepVisual_InvisibilityContext: typeof StepVisual_InvisibilityContext;
  StepVisual_InvisibleItem: typeof StepVisual_InvisibleItem;
  StepVisual_LayeredItem: typeof StepVisual_LayeredItem;
  StepVisual_MarkerMember: typeof StepVisual_MarkerMember;
  StepVisual_MarkerSelect: typeof StepVisual_MarkerSelect;
  StepVisual_MechanicalDesignGeometricPresentationArea: typeof StepVisual_MechanicalDesignGeometricPresentationArea;
  StepVisual_MechanicalDesignGeometricPresentationRepresentation: typeof StepVisual_MechanicalDesignGeometricPresentationRepresentation;
  StepVisual_NullStyleMember: typeof StepVisual_NullStyleMember;
  StepVisual_OverRidingStyledItem: typeof StepVisual_OverRidingStyledItem;
  StepVisual_PlanarBox: typeof StepVisual_PlanarBox;
  StepVisual_PlanarExtent: typeof StepVisual_PlanarExtent;
  StepVisual_PointStyle: typeof StepVisual_PointStyle;
  StepVisual_PreDefinedColour: typeof StepVisual_PreDefinedColour;
  StepVisual_PreDefinedCurveFont: typeof StepVisual_PreDefinedCurveFont;
  StepVisual_PreDefinedItem: typeof StepVisual_PreDefinedItem;
  StepVisual_PreDefinedTextFont: typeof StepVisual_PreDefinedTextFont;
  StepVisual_PresentationArea: typeof StepVisual_PresentationArea;
  StepVisual_PresentationLayerAssignment: typeof StepVisual_PresentationLayerAssignment;
  StepVisual_PresentationLayerUsage: typeof StepVisual_PresentationLayerUsage;
  StepVisual_PresentationRepresentation: typeof StepVisual_PresentationRepresentation;
  StepVisual_PresentationRepresentationSelect: typeof StepVisual_PresentationRepresentationSelect;
  StepVisual_PresentationSet: typeof StepVisual_PresentationSet;
  StepVisual_PresentationSize: typeof StepVisual_PresentationSize;
  StepVisual_PresentationSizeAssignmentSelect: typeof StepVisual_PresentationSizeAssignmentSelect;
  StepVisual_PresentationStyleAssignment: typeof StepVisual_PresentationStyleAssignment;
  StepVisual_PresentationStyleByContext: typeof StepVisual_PresentationStyleByContext;
  StepVisual_PresentationStyleSelect: typeof StepVisual_PresentationStyleSelect;
  StepVisual_PresentationView: typeof StepVisual_PresentationView;
  StepVisual_PresentedItem: typeof StepVisual_PresentedItem;
  StepVisual_PresentedItemRepresentation: typeof StepVisual_PresentedItemRepresentation;
  StepVisual_StyleContextSelect: typeof StepVisual_StyleContextSelect;
  StepVisual_StyledItem: typeof StepVisual_StyledItem;
  StepVisual_StyledItemTarget: typeof StepVisual_StyledItemTarget;
  StepVisual_SurfaceSideStyle: typeof StepVisual_SurfaceSideStyle;
  StepVisual_SurfaceStyleBoundary: typeof StepVisual_SurfaceStyleBoundary;
  StepVisual_SurfaceStyleControlGrid: typeof StepVisual_SurfaceStyleControlGrid;
  StepVisual_SurfaceStyleElementSelect: typeof StepVisual_SurfaceStyleElementSelect;
  StepVisual_SurfaceStyleFillArea: typeof StepVisual_SurfaceStyleFillArea;
  StepVisual_SurfaceStyleParameterLine: typeof StepVisual_SurfaceStyleParameterLine;
  StepVisual_SurfaceStyleSegmentationCurve: typeof StepVisual_SurfaceStyleSegmentationCurve;
  StepVisual_SurfaceStyleSilhouette: typeof StepVisual_SurfaceStyleSilhouette;
  StepVisual_SurfaceStyleUsage: typeof StepVisual_SurfaceStyleUsage;
  StepVisual_Template: typeof StepVisual_Template;
  StepVisual_TemplateInstance: typeof StepVisual_TemplateInstance;
  StepVisual_TessellatedAnnotationOccurrence: typeof StepVisual_TessellatedAnnotationOccurrence;
  StepVisual_TessellatedCurveSet: typeof StepVisual_TessellatedCurveSet;
  StepVisual_TessellatedGeometricSet: typeof StepVisual_TessellatedGeometricSet;
  StepVisual_TessellatedItem: typeof StepVisual_TessellatedItem;
  StepVisual_TextLiteral: typeof StepVisual_TextLiteral;
  StepVisual_TextOrCharacter: typeof StepVisual_TextOrCharacter;
  StepVisual_TextStyle: typeof StepVisual_TextStyle;
  StepVisual_TextStyleForDefinedFont: typeof StepVisual_TextStyleForDefinedFont;
  StepVisual_TextStyleWithBoxCharacteristics: typeof StepVisual_TextStyleWithBoxCharacteristics;
  StepVisual_ViewVolume: typeof StepVisual_ViewVolume;
  StlAPI: typeof StlAPI;
  StlAPI_Reader: typeof StlAPI_Reader;
  StlAPI_Writer: typeof StlAPI_Writer;
  Storage: typeof Storage;
  Storage_Bucket: typeof Storage_Bucket;
  Storage_Bucket_1: typeof Storage_Bucket_1;
  Storage_Bucket_2: typeof Storage_Bucket_2;
  Storage_BucketIterator: typeof Storage_BucketIterator;
  Storage_BucketOfPersistent: typeof Storage_BucketOfPersistent;
  Storage_CallBack: typeof Storage_CallBack;
  Storage_Data: typeof Storage_Data;
  Storage_DefaultCallBack: typeof Storage_DefaultCallBack;
  Storage_HArrayOfCallBack: typeof Storage_HArrayOfCallBack;
  Storage_HArrayOfCallBack_1: typeof Storage_HArrayOfCallBack_1;
  Storage_HArrayOfCallBack_2: typeof Storage_HArrayOfCallBack_2;
  Storage_HArrayOfCallBack_3: typeof Storage_HArrayOfCallBack_3;
  Storage_HArrayOfCallBack_4: typeof Storage_HArrayOfCallBack_4;
  Storage_HArrayOfSchema: typeof Storage_HArrayOfSchema;
  Storage_HArrayOfSchema_1: typeof Storage_HArrayOfSchema_1;
  Storage_HArrayOfSchema_2: typeof Storage_HArrayOfSchema_2;
  Storage_HArrayOfSchema_3: typeof Storage_HArrayOfSchema_3;
  Storage_HArrayOfSchema_4: typeof Storage_HArrayOfSchema_4;
  Storage_HPArray: typeof Storage_HPArray;
  Storage_HPArray_1: typeof Storage_HPArray_1;
  Storage_HPArray_2: typeof Storage_HPArray_2;
  Storage_HPArray_3: typeof Storage_HPArray_3;
  Storage_HPArray_4: typeof Storage_HPArray_4;
  Storage_HeaderData: typeof Storage_HeaderData;
  Storage_InternalData: typeof Storage_InternalData;
  Storage_Root: typeof Storage_Root;
  Storage_Root_1: typeof Storage_Root_1;
  Storage_Root_2: typeof Storage_Root_2;
  Storage_Root_3: typeof Storage_Root_3;
  Storage_RootData: typeof Storage_RootData;
  Storage_Schema: typeof Storage_Schema;
  Storage_StreamExtCharParityError: typeof Storage_StreamExtCharParityError;
  Storage_StreamExtCharParityError_1: typeof Storage_StreamExtCharParityError_1;
  Storage_StreamExtCharParityError_2: typeof Storage_StreamExtCharParityError_2;
  Storage_StreamFormatError: typeof Storage_StreamFormatError;
  Storage_StreamFormatError_1: typeof Storage_StreamFormatError_1;
  Storage_StreamFormatError_2: typeof Storage_StreamFormatError_2;
  Storage_StreamModeError: typeof Storage_StreamModeError;
  Storage_StreamModeError_1: typeof Storage_StreamModeError_1;
  Storage_StreamModeError_2: typeof Storage_StreamModeError_2;
  Storage_StreamReadError: typeof Storage_StreamReadError;
  Storage_StreamReadError_1: typeof Storage_StreamReadError_1;
  Storage_StreamReadError_2: typeof Storage_StreamReadError_2;
  Storage_StreamTypeMismatchError: typeof Storage_StreamTypeMismatchError;
  Storage_StreamTypeMismatchError_1: typeof Storage_StreamTypeMismatchError_1;
  Storage_StreamTypeMismatchError_2: typeof Storage_StreamTypeMismatchError_2;
  Storage_StreamUnknownTypeError: typeof Storage_StreamUnknownTypeError;
  Storage_StreamUnknownTypeError_1: typeof Storage_StreamUnknownTypeError_1;
  Storage_StreamUnknownTypeError_2: typeof Storage_StreamUnknownTypeError_2;
  Storage_StreamWriteError: typeof Storage_StreamWriteError;
  Storage_StreamWriteError_1: typeof Storage_StreamWriteError_1;
  Storage_StreamWriteError_2: typeof Storage_StreamWriteError_2;
  Storage_TypeData: typeof Storage_TypeData;
  Storage_TypedCallBack: typeof Storage_TypedCallBack;
  Storage_TypedCallBack_1: typeof Storage_TypedCallBack_1;
  Storage_TypedCallBack_2: typeof Storage_TypedCallBack_2;
  Sweep_NumShape: typeof Sweep_NumShape;
  Sweep_NumShape_1: typeof Sweep_NumShape_1;
  Sweep_NumShape_2: typeof Sweep_NumShape_2;
  Sweep_NumShapeIterator: typeof Sweep_NumShapeIterator;
  Sweep_NumShapeTool: typeof Sweep_NumShapeTool;
  TColGeom2d_HArray1OfBezierCurve: typeof TColGeom2d_HArray1OfBezierCurve;
  TColGeom2d_HArray1OfBezierCurve_1: typeof TColGeom2d_HArray1OfBezierCurve_1;
  TColGeom2d_HArray1OfBezierCurve_2: typeof TColGeom2d_HArray1OfBezierCurve_2;
  TColGeom2d_HArray1OfBezierCurve_3: typeof TColGeom2d_HArray1OfBezierCurve_3;
  TColGeom2d_HArray1OfBezierCurve_4: typeof TColGeom2d_HArray1OfBezierCurve_4;
  TColGeom2d_HSequenceOfBoundedCurve: typeof TColGeom2d_HSequenceOfBoundedCurve;
  TColGeom2d_HSequenceOfBoundedCurve_1: typeof TColGeom2d_HSequenceOfBoundedCurve_1;
  TColGeom2d_HSequenceOfBoundedCurve_2: typeof TColGeom2d_HSequenceOfBoundedCurve_2;
  TColGeom_HArray1OfBezierCurve: typeof TColGeom_HArray1OfBezierCurve;
  TColGeom_HArray1OfBezierCurve_1: typeof TColGeom_HArray1OfBezierCurve_1;
  TColGeom_HArray1OfBezierCurve_2: typeof TColGeom_HArray1OfBezierCurve_2;
  TColGeom_HArray1OfBezierCurve_3: typeof TColGeom_HArray1OfBezierCurve_3;
  TColGeom_HArray1OfBezierCurve_4: typeof TColGeom_HArray1OfBezierCurve_4;
  TColGeom_HArray1OfCurve: typeof TColGeom_HArray1OfCurve;
  TColGeom_HArray1OfCurve_1: typeof TColGeom_HArray1OfCurve_1;
  TColGeom_HArray1OfCurve_2: typeof TColGeom_HArray1OfCurve_2;
  TColGeom_HArray1OfCurve_3: typeof TColGeom_HArray1OfCurve_3;
  TColGeom_HArray1OfCurve_4: typeof TColGeom_HArray1OfCurve_4;
  TColGeom_HArray2OfSurface: typeof TColGeom_HArray2OfSurface;
  TColGeom_HArray2OfSurface_1: typeof TColGeom_HArray2OfSurface_1;
  TColGeom_HArray2OfSurface_2: typeof TColGeom_HArray2OfSurface_2;
  TColGeom_HArray2OfSurface_3: typeof TColGeom_HArray2OfSurface_3;
  TColGeom_HSequenceOfBoundedCurve: typeof TColGeom_HSequenceOfBoundedCurve;
  TColGeom_HSequenceOfBoundedCurve_1: typeof TColGeom_HSequenceOfBoundedCurve_1;
  TColGeom_HSequenceOfBoundedCurve_2: typeof TColGeom_HSequenceOfBoundedCurve_2;
  TColStd_HArray1OfExtendedString: typeof TColStd_HArray1OfExtendedString;
  TColStd_HArray1OfExtendedString_1: typeof TColStd_HArray1OfExtendedString_1;
  TColStd_HArray1OfExtendedString_2: typeof TColStd_HArray1OfExtendedString_2;
  TColStd_HArray1OfExtendedString_3: typeof TColStd_HArray1OfExtendedString_3;
  TColStd_HArray1OfExtendedString_4: typeof TColStd_HArray1OfExtendedString_4;
  TColStd_HArray2OfCharacter: typeof TColStd_HArray2OfCharacter;
  TColStd_HArray2OfCharacter_1: typeof TColStd_HArray2OfCharacter_1;
  TColStd_HArray2OfCharacter_2: typeof TColStd_HArray2OfCharacter_2;
  TColStd_HArray2OfCharacter_3: typeof TColStd_HArray2OfCharacter_3;
  TColStd_HPackedMapOfInteger: typeof TColStd_HPackedMapOfInteger;
  TColStd_HPackedMapOfInteger_1: typeof TColStd_HPackedMapOfInteger_1;
  TColStd_HPackedMapOfInteger_2: typeof TColStd_HPackedMapOfInteger_2;
  TColStd_PackedMapOfInteger: typeof TColStd_PackedMapOfInteger;
  TColStd_PackedMapOfInteger_1: typeof TColStd_PackedMapOfInteger_1;
  TColStd_PackedMapOfInteger_2: typeof TColStd_PackedMapOfInteger_2;
  TColgp_HArray1OfDir2d: typeof TColgp_HArray1OfDir2d;
  TColgp_HArray1OfDir2d_1: typeof TColgp_HArray1OfDir2d_1;
  TColgp_HArray1OfDir2d_2: typeof TColgp_HArray1OfDir2d_2;
  TColgp_HArray1OfDir2d_3: typeof TColgp_HArray1OfDir2d_3;
  TColgp_HArray1OfDir2d_4: typeof TColgp_HArray1OfDir2d_4;
  TColgp_HArray2OfCirc2d: typeof TColgp_HArray2OfCirc2d;
  TColgp_HArray2OfCirc2d_1: typeof TColgp_HArray2OfCirc2d_1;
  TColgp_HArray2OfCirc2d_2: typeof TColgp_HArray2OfCirc2d_2;
  TColgp_HArray2OfCirc2d_3: typeof TColgp_HArray2OfCirc2d_3;
  TColgp_HArray2OfDir: typeof TColgp_HArray2OfDir;
  TColgp_HArray2OfDir_1: typeof TColgp_HArray2OfDir_1;
  TColgp_HArray2OfDir_2: typeof TColgp_HArray2OfDir_2;
  TColgp_HArray2OfDir_3: typeof TColgp_HArray2OfDir_3;
  TColgp_HArray2OfDir2d: typeof TColgp_HArray2OfDir2d;
  TColgp_HArray2OfDir2d_1: typeof TColgp_HArray2OfDir2d_1;
  TColgp_HArray2OfDir2d_2: typeof TColgp_HArray2OfDir2d_2;
  TColgp_HArray2OfDir2d_3: typeof TColgp_HArray2OfDir2d_3;
  TColgp_HArray2OfLin2d: typeof TColgp_HArray2OfLin2d;
  TColgp_HArray2OfLin2d_1: typeof TColgp_HArray2OfLin2d_1;
  TColgp_HArray2OfLin2d_2: typeof TColgp_HArray2OfLin2d_2;
  TColgp_HArray2OfLin2d_3: typeof TColgp_HArray2OfLin2d_3;
  TColgp_HArray2OfVec: typeof TColgp_HArray2OfVec;
  TColgp_HArray2OfVec_1: typeof TColgp_HArray2OfVec_1;
  TColgp_HArray2OfVec_2: typeof TColgp_HArray2OfVec_2;
  TColgp_HArray2OfVec_3: typeof TColgp_HArray2OfVec_3;
  TColgp_HArray2OfVec2d: typeof TColgp_HArray2OfVec2d;
  TColgp_HArray2OfVec2d_1: typeof TColgp_HArray2OfVec2d_1;
  TColgp_HArray2OfVec2d_2: typeof TColgp_HArray2OfVec2d_2;
  TColgp_HArray2OfVec2d_3: typeof TColgp_HArray2OfVec2d_3;
  TColgp_HArray2OfXY: typeof TColgp_HArray2OfXY;
  TColgp_HArray2OfXY_1: typeof TColgp_HArray2OfXY_1;
  TColgp_HArray2OfXY_2: typeof TColgp_HArray2OfXY_2;
  TColgp_HArray2OfXY_3: typeof TColgp_HArray2OfXY_3;
  TColgp_HSequenceOfDir: typeof TColgp_HSequenceOfDir;
  TColgp_HSequenceOfDir_1: typeof TColgp_HSequenceOfDir_1;
  TColgp_HSequenceOfDir_2: typeof TColgp_HSequenceOfDir_2;
  TColgp_HSequenceOfDir2d: typeof TColgp_HSequenceOfDir2d;
  TColgp_HSequenceOfDir2d_1: typeof TColgp_HSequenceOfDir2d_1;
  TColgp_HSequenceOfDir2d_2: typeof TColgp_HSequenceOfDir2d_2;
  TColgp_HSequenceOfVec: typeof TColgp_HSequenceOfVec;
  TColgp_HSequenceOfVec_1: typeof TColgp_HSequenceOfVec_1;
  TColgp_HSequenceOfVec_2: typeof TColgp_HSequenceOfVec_2;
  TColgp_HSequenceOfVec2d: typeof TColgp_HSequenceOfVec2d;
  TColgp_HSequenceOfVec2d_1: typeof TColgp_HSequenceOfVec2d_1;
  TColgp_HSequenceOfVec2d_2: typeof TColgp_HSequenceOfVec2d_2;
  TCollection: typeof TCollection;
  TCollection_AsciiString: typeof TCollection_AsciiString;
  TCollection_AsciiString_1: typeof TCollection_AsciiString_1;
  TCollection_AsciiString_2: typeof TCollection_AsciiString_2;
  TCollection_AsciiString_3: typeof TCollection_AsciiString_3;
  TCollection_AsciiString_4: typeof TCollection_AsciiString_4;
  TCollection_AsciiString_5: typeof TCollection_AsciiString_5;
  TCollection_AsciiString_6: typeof TCollection_AsciiString_6;
  TCollection_AsciiString_7: typeof TCollection_AsciiString_7;
  TCollection_AsciiString_8: typeof TCollection_AsciiString_8;
  TCollection_AsciiString_9: typeof TCollection_AsciiString_9;
  TCollection_AsciiString_10: typeof TCollection_AsciiString_10;
  TCollection_AsciiString_11: typeof TCollection_AsciiString_11;
  TCollection_AsciiString_12: typeof TCollection_AsciiString_12;
  TCollection_AsciiString_13: typeof TCollection_AsciiString_13;
  TCollection_AsciiString_14: typeof TCollection_AsciiString_14;
  TCollection_BaseSequence: typeof TCollection_BaseSequence;
  TCollection_BasicMap: typeof TCollection_BasicMap;
  TCollection_BasicMapIterator: typeof TCollection_BasicMapIterator;
  TCollection_ExtendedString: typeof TCollection_ExtendedString;
  TCollection_ExtendedString_1: typeof TCollection_ExtendedString_1;
  TCollection_ExtendedString_2: typeof TCollection_ExtendedString_2;
  TCollection_ExtendedString_3: typeof TCollection_ExtendedString_3;
  TCollection_ExtendedString_4: typeof TCollection_ExtendedString_4;
  TCollection_ExtendedString_5: typeof TCollection_ExtendedString_5;
  TCollection_ExtendedString_6: typeof TCollection_ExtendedString_6;
  TCollection_ExtendedString_7: typeof TCollection_ExtendedString_7;
  TCollection_ExtendedString_8: typeof TCollection_ExtendedString_8;
  TCollection_ExtendedString_9: typeof TCollection_ExtendedString_9;
  TCollection_ExtendedString_10: typeof TCollection_ExtendedString_10;
  TCollection_ExtendedString_11: typeof TCollection_ExtendedString_11;
  TCollection_ExtendedString_12: typeof TCollection_ExtendedString_12;
  TCollection_HAsciiString: typeof TCollection_HAsciiString;
  TCollection_HAsciiString_1: typeof TCollection_HAsciiString_1;
  TCollection_HAsciiString_2: typeof TCollection_HAsciiString_2;
  TCollection_HAsciiString_3: typeof TCollection_HAsciiString_3;
  TCollection_HAsciiString_4: typeof TCollection_HAsciiString_4;
  TCollection_HAsciiString_5: typeof TCollection_HAsciiString_5;
  TCollection_HAsciiString_6: typeof TCollection_HAsciiString_6;
  TCollection_HAsciiString_7: typeof TCollection_HAsciiString_7;
  TCollection_HAsciiString_8: typeof TCollection_HAsciiString_8;
  TCollection_HAsciiString_9: typeof TCollection_HAsciiString_9;
  TCollection_HExtendedString: typeof TCollection_HExtendedString;
  TCollection_HExtendedString_1: typeof TCollection_HExtendedString_1;
  TCollection_HExtendedString_2: typeof TCollection_HExtendedString_2;
  TCollection_HExtendedString_3: typeof TCollection_HExtendedString_3;
  TCollection_HExtendedString_4: typeof TCollection_HExtendedString_4;
  TCollection_HExtendedString_5: typeof TCollection_HExtendedString_5;
  TCollection_HExtendedString_6: typeof TCollection_HExtendedString_6;
  TCollection_HExtendedString_7: typeof TCollection_HExtendedString_7;
  TCollection_HExtendedString_8: typeof TCollection_HExtendedString_8;
  TCollection_MapNode: typeof TCollection_MapNode;
  TCollection_SeqNode: typeof TCollection_SeqNode;
  TDF: typeof TDF;
  TDF_Attribute: typeof TDF_Attribute;
  TDF_AttributeDelta: typeof TDF_AttributeDelta;
  TDF_AttributeIterator: typeof TDF_AttributeIterator;
  TDF_AttributeIterator_1: typeof TDF_AttributeIterator_1;
  TDF_AttributeIterator_2: typeof TDF_AttributeIterator_2;
  TDF_AttributeIterator_3: typeof TDF_AttributeIterator_3;
  TDF_ChildIDIterator: typeof TDF_ChildIDIterator;
  TDF_ChildIDIterator_1: typeof TDF_ChildIDIterator_1;
  TDF_ChildIDIterator_2: typeof TDF_ChildIDIterator_2;
  TDF_ChildIterator: typeof TDF_ChildIterator;
  TDF_ChildIterator_1: typeof TDF_ChildIterator_1;
  TDF_ChildIterator_2: typeof TDF_ChildIterator_2;
  TDF_ClosureMode: typeof TDF_ClosureMode;
  TDF_ClosureTool: typeof TDF_ClosureTool;
  TDF_ComparisonTool: typeof TDF_ComparisonTool;
  TDF_CopyLabel: typeof TDF_CopyLabel;
  TDF_CopyLabel_1: typeof TDF_CopyLabel_1;
  TDF_CopyLabel_2: typeof TDF_CopyLabel_2;
  TDF_CopyTool: typeof TDF_CopyTool;
  TDF_Data: typeof TDF_Data;
  TDF_DataSet: typeof TDF_DataSet;
  TDF_DefaultDeltaOnModification: typeof TDF_DefaultDeltaOnModification;
  TDF_DefaultDeltaOnRemoval: typeof TDF_DefaultDeltaOnRemoval;
  TDF_Delta: typeof TDF_Delta;
  TDF_DeltaOnAddition: typeof TDF_DeltaOnAddition;
  TDF_DeltaOnForget: typeof TDF_DeltaOnForget;
  TDF_DeltaOnModification: typeof TDF_DeltaOnModification;
  TDF_DeltaOnRemoval: typeof TDF_DeltaOnRemoval;
  TDF_DeltaOnResume: typeof TDF_DeltaOnResume;
  TDF_HAttributeArray1: typeof TDF_HAttributeArray1;
  TDF_HAttributeArray1_1: typeof TDF_HAttributeArray1_1;
  TDF_HAttributeArray1_2: typeof TDF_HAttributeArray1_2;
  TDF_HAttributeArray1_3: typeof TDF_HAttributeArray1_3;
  TDF_HAttributeArray1_4: typeof TDF_HAttributeArray1_4;
  TDF_IDFilter: typeof TDF_IDFilter;
  TDF_Label: typeof TDF_Label;
  TDF_LabelMapHasher: typeof TDF_LabelMapHasher;
  TDF_Reference: typeof TDF_Reference;
  TDF_RelocationTable: typeof TDF_RelocationTable;
  TDF_TagSource: typeof TDF_TagSource;
  TDF_Tool: typeof TDF_Tool;
  TDF_Transaction: typeof TDF_Transaction;
  TDF_Transaction_1: typeof TDF_Transaction_1;
  TDF_Transaction_2: typeof TDF_Transaction_2;
  TDataStd: typeof TDataStd;
  TDataStd_AsciiString: typeof TDataStd_AsciiString;
  TDataStd_BooleanArray: typeof TDataStd_BooleanArray;
  TDataStd_BooleanList: typeof TDataStd_BooleanList;
  TDataStd_ByteArray: typeof TDataStd_ByteArray;
  TDataStd_ChildNodeIterator: typeof TDataStd_ChildNodeIterator;
  TDataStd_ChildNodeIterator_1: typeof TDataStd_ChildNodeIterator_1;
  TDataStd_ChildNodeIterator_2: typeof TDataStd_ChildNodeIterator_2;
  TDataStd_Comment: typeof TDataStd_Comment;
  TDataStd_Current: typeof TDataStd_Current;
  TDataStd_DeltaOnModificationOfByteArray: typeof TDataStd_DeltaOnModificationOfByteArray;
  TDataStd_DeltaOnModificationOfExtStringArray: typeof TDataStd_DeltaOnModificationOfExtStringArray;
  TDataStd_DeltaOnModificationOfIntArray: typeof TDataStd_DeltaOnModificationOfIntArray;
  TDataStd_DeltaOnModificationOfIntPackedMap: typeof TDataStd_DeltaOnModificationOfIntPackedMap;
  TDataStd_DeltaOnModificationOfRealArray: typeof TDataStd_DeltaOnModificationOfRealArray;
  TDataStd_Directory: typeof TDataStd_Directory;
  TDataStd_Expression: typeof TDataStd_Expression;
  TDataStd_ExtStringArray: typeof TDataStd_ExtStringArray;
  TDataStd_ExtStringList: typeof TDataStd_ExtStringList;
  TDataStd_HDataMapOfStringByte: typeof TDataStd_HDataMapOfStringByte;
  TDataStd_HDataMapOfStringByte_1: typeof TDataStd_HDataMapOfStringByte_1;
  TDataStd_HDataMapOfStringByte_2: typeof TDataStd_HDataMapOfStringByte_2;
  TDataStd_HDataMapOfStringHArray1OfInteger: typeof TDataStd_HDataMapOfStringHArray1OfInteger;
  TDataStd_HDataMapOfStringHArray1OfInteger_1: typeof TDataStd_HDataMapOfStringHArray1OfInteger_1;
  TDataStd_HDataMapOfStringHArray1OfInteger_2: typeof TDataStd_HDataMapOfStringHArray1OfInteger_2;
  TDataStd_HDataMapOfStringHArray1OfReal: typeof TDataStd_HDataMapOfStringHArray1OfReal;
  TDataStd_HDataMapOfStringHArray1OfReal_1: typeof TDataStd_HDataMapOfStringHArray1OfReal_1;
  TDataStd_HDataMapOfStringHArray1OfReal_2: typeof TDataStd_HDataMapOfStringHArray1OfReal_2;
  TDataStd_HDataMapOfStringInteger: typeof TDataStd_HDataMapOfStringInteger;
  TDataStd_HDataMapOfStringInteger_1: typeof TDataStd_HDataMapOfStringInteger_1;
  TDataStd_HDataMapOfStringInteger_2: typeof TDataStd_HDataMapOfStringInteger_2;
  TDataStd_HDataMapOfStringReal: typeof TDataStd_HDataMapOfStringReal;
  TDataStd_HDataMapOfStringReal_1: typeof TDataStd_HDataMapOfStringReal_1;
  TDataStd_HDataMapOfStringReal_2: typeof TDataStd_HDataMapOfStringReal_2;
  TDataStd_HDataMapOfStringString: typeof TDataStd_HDataMapOfStringString;
  TDataStd_HDataMapOfStringString_1: typeof TDataStd_HDataMapOfStringString_1;
  TDataStd_HDataMapOfStringString_2: typeof TDataStd_HDataMapOfStringString_2;
  TDataStd_HLabelArray1: typeof TDataStd_HLabelArray1;
  TDataStd_HLabelArray1_1: typeof TDataStd_HLabelArray1_1;
  TDataStd_HLabelArray1_2: typeof TDataStd_HLabelArray1_2;
  TDataStd_HLabelArray1_3: typeof TDataStd_HLabelArray1_3;
  TDataStd_HLabelArray1_4: typeof TDataStd_HLabelArray1_4;
  TDataStd_IntPackedMap: typeof TDataStd_IntPackedMap;
  TDataStd_Integer: typeof TDataStd_Integer;
  TDataStd_IntegerArray: typeof TDataStd_IntegerArray;
  TDataStd_IntegerList: typeof TDataStd_IntegerList;
  TDataStd_Name: typeof TDataStd_Name;
  TDataStd_NamedData: typeof TDataStd_NamedData;
  TDataStd_NoteBook: typeof TDataStd_NoteBook;
  TDataStd_Real: typeof TDataStd_Real;
  TDataStd_RealArray: typeof TDataStd_RealArray;
  TDataStd_RealList: typeof TDataStd_RealList;
  TDataStd_ReferenceArray: typeof TDataStd_ReferenceArray;
  TDataStd_ReferenceList: typeof TDataStd_ReferenceList;
  TDataStd_Relation: typeof TDataStd_Relation;
  TDataStd_Tick: typeof TDataStd_Tick;
  TDataStd_TreeNode: typeof TDataStd_TreeNode;
  TDataStd_UAttribute: typeof TDataStd_UAttribute;
  TDataStd_Variable: typeof TDataStd_Variable;
  TDataXtd: typeof TDataXtd;
  TDataXtd_Axis: typeof TDataXtd_Axis;
  TDataXtd_Constraint: typeof TDataXtd_Constraint;
  TDataXtd_Geometry: typeof TDataXtd_Geometry;
  TDataXtd_HArray1OfTrsf: typeof TDataXtd_HArray1OfTrsf;
  TDataXtd_HArray1OfTrsf_1: typeof TDataXtd_HArray1OfTrsf_1;
  TDataXtd_HArray1OfTrsf_2: typeof TDataXtd_HArray1OfTrsf_2;
  TDataXtd_HArray1OfTrsf_3: typeof TDataXtd_HArray1OfTrsf_3;
  TDataXtd_HArray1OfTrsf_4: typeof TDataXtd_HArray1OfTrsf_4;
  TDataXtd_Pattern: typeof TDataXtd_Pattern;
  TDataXtd_PatternStd: typeof TDataXtd_PatternStd;
  TDataXtd_Placement: typeof TDataXtd_Placement;
  TDataXtd_Plane: typeof TDataXtd_Plane;
  TDataXtd_Point: typeof TDataXtd_Point;
  TDataXtd_Position: typeof TDataXtd_Position;
  TDataXtd_Presentation: typeof TDataXtd_Presentation;
  TDataXtd_Shape: typeof TDataXtd_Shape;
  TDataXtd_Triangulation: typeof TDataXtd_Triangulation;
  TDocStd: typeof TDocStd;
  TDocStd_Application: typeof TDocStd_Application;
  TDocStd_ApplicationDelta: typeof TDocStd_ApplicationDelta;
  TDocStd_CompoundDelta: typeof TDocStd_CompoundDelta;
  TDocStd_Context: typeof TDocStd_Context;
  TDocStd_Document: typeof TDocStd_Document;
  TDocStd_Modified: typeof TDocStd_Modified;
  TDocStd_MultiTransactionManager: typeof TDocStd_MultiTransactionManager;
  TDocStd_Owner: typeof TDocStd_Owner;
  TDocStd_PathParser: typeof TDocStd_PathParser;
  TDocStd_XLink: typeof TDocStd_XLink;
  TDocStd_XLinkIterator: typeof TDocStd_XLinkIterator;
  TDocStd_XLinkIterator_1: typeof TDocStd_XLinkIterator_1;
  TDocStd_XLinkIterator_2: typeof TDocStd_XLinkIterator_2;
  TDocStd_XLinkRoot: typeof TDocStd_XLinkRoot;
  TDocStd_XLinkTool: typeof TDocStd_XLinkTool;
  TFunction_Driver: typeof TFunction_Driver;
  TFunction_DriverTable: typeof TFunction_DriverTable;
  TFunction_Function: typeof TFunction_Function;
  TFunction_GraphNode: typeof TFunction_GraphNode;
  TFunction_HArray1OfDataMapOfGUIDDriver: typeof TFunction_HArray1OfDataMapOfGUIDDriver;
  TFunction_HArray1OfDataMapOfGUIDDriver_1: typeof TFunction_HArray1OfDataMapOfGUIDDriver_1;
  TFunction_HArray1OfDataMapOfGUIDDriver_2: typeof TFunction_HArray1OfDataMapOfGUIDDriver_2;
  TFunction_HArray1OfDataMapOfGUIDDriver_3: typeof TFunction_HArray1OfDataMapOfGUIDDriver_3;
  TFunction_HArray1OfDataMapOfGUIDDriver_4: typeof TFunction_HArray1OfDataMapOfGUIDDriver_4;
  TFunction_IFunction: typeof TFunction_IFunction;
  TFunction_IFunction_1: typeof TFunction_IFunction_1;
  TFunction_IFunction_2: typeof TFunction_IFunction_2;
  TFunction_Iterator: typeof TFunction_Iterator;
  TFunction_Iterator_1: typeof TFunction_Iterator_1;
  TFunction_Iterator_2: typeof TFunction_Iterator_2;
  TFunction_Logbook: typeof TFunction_Logbook;
  TFunction_Scope: typeof TFunction_Scope;
  TNaming: typeof TNaming;
  TNaming_Builder: typeof TNaming_Builder;
  TNaming_CopyShape: typeof TNaming_CopyShape;
  TNaming_DeltaOnModification: typeof TNaming_DeltaOnModification;
  TNaming_DeltaOnRemoval: typeof TNaming_DeltaOnRemoval;
  TNaming_Identifier: typeof TNaming_Identifier;
  TNaming_Identifier_1: typeof TNaming_Identifier_1;
  TNaming_Identifier_2: typeof TNaming_Identifier_2;
  TNaming_Iterator: typeof TNaming_Iterator;
  TNaming_Iterator_1: typeof TNaming_Iterator_1;
  TNaming_Iterator_2: typeof TNaming_Iterator_2;
  TNaming_Iterator_3: typeof TNaming_Iterator_3;
  TNaming_IteratorOnShapesSet: typeof TNaming_IteratorOnShapesSet;
  TNaming_IteratorOnShapesSet_1: typeof TNaming_IteratorOnShapesSet_1;
  TNaming_IteratorOnShapesSet_2: typeof TNaming_IteratorOnShapesSet_2;
  TNaming_Localizer: typeof TNaming_Localizer;
  TNaming_Name: typeof TNaming_Name;
  TNaming_NamedShape: typeof TNaming_NamedShape;
  TNaming_Naming: typeof TNaming_Naming;
  TNaming_NamingTool: typeof TNaming_NamingTool;
  TNaming_NewShapeIterator: typeof TNaming_NewShapeIterator;
  TNaming_NewShapeIterator_1: typeof TNaming_NewShapeIterator_1;
  TNaming_NewShapeIterator_2: typeof TNaming_NewShapeIterator_2;
  TNaming_NewShapeIterator_3: typeof TNaming_NewShapeIterator_3;
  TNaming_NewShapeIterator_4: typeof TNaming_NewShapeIterator_4;
  TNaming_OldShapeIterator: typeof TNaming_OldShapeIterator;
  TNaming_OldShapeIterator_1: typeof TNaming_OldShapeIterator_1;
  TNaming_OldShapeIterator_2: typeof TNaming_OldShapeIterator_2;
  TNaming_OldShapeIterator_3: typeof TNaming_OldShapeIterator_3;
  TNaming_OldShapeIterator_4: typeof TNaming_OldShapeIterator_4;
  TNaming_RefShape: typeof TNaming_RefShape;
  TNaming_RefShape_1: typeof TNaming_RefShape_1;
  TNaming_RefShape_2: typeof TNaming_RefShape_2;
  TNaming_SameShapeIterator: typeof TNaming_SameShapeIterator;
  TNaming_Scope: typeof TNaming_Scope;
  TNaming_Scope_1: typeof TNaming_Scope_1;
  TNaming_Scope_2: typeof TNaming_Scope_2;
  TNaming_Scope_3: typeof TNaming_Scope_3;
  TNaming_Selector: typeof TNaming_Selector;
  TNaming_ShapesSet: typeof TNaming_ShapesSet;
  TNaming_ShapesSet_1: typeof TNaming_ShapesSet_1;
  TNaming_ShapesSet_2: typeof TNaming_ShapesSet_2;
  TNaming_Tool: typeof TNaming_Tool;
  TNaming_TranslateTool: typeof TNaming_TranslateTool;
  TNaming_Translator: typeof TNaming_Translator;
  TNaming_UsedShapes: typeof TNaming_UsedShapes;
  TObj_Application: typeof TObj_Application;
  TObj_Assistant: typeof TObj_Assistant;
  TObj_CheckModel: typeof TObj_CheckModel;
  TObj_HSequenceOfObject: typeof TObj_HSequenceOfObject;
  TObj_HSequenceOfObject_1: typeof TObj_HSequenceOfObject_1;
  TObj_HSequenceOfObject_2: typeof TObj_HSequenceOfObject_2;
  TObj_HiddenPartition: typeof TObj_HiddenPartition;
  TObj_LabelIterator: typeof TObj_LabelIterator;
  TObj_Model: typeof TObj_Model;
  TObj_ModelIterator: typeof TObj_ModelIterator;
  TObj_Object: typeof TObj_Object;
  TObj_ObjectIterator: typeof TObj_ObjectIterator;
  TObj_OcafObjectIterator: typeof TObj_OcafObjectIterator;
  TObj_Partition: typeof TObj_Partition;
  TObj_Persistence: typeof TObj_Persistence;
  TObj_ReferenceIterator: typeof TObj_ReferenceIterator;
  TObj_SequenceIterator: typeof TObj_SequenceIterator;
  TObj_TIntSparseArray: typeof TObj_TIntSparseArray;
  TObj_TModel: typeof TObj_TModel;
  TObj_TNameContainer: typeof TObj_TNameContainer;
  TObj_TObject: typeof TObj_TObject;
  TObj_TReference: typeof TObj_TReference;
  TObj_TXYZ: typeof TObj_TXYZ;
  TShort_HArray2OfShortReal: typeof TShort_HArray2OfShortReal;
  TShort_HArray2OfShortReal_1: typeof TShort_HArray2OfShortReal_1;
  TShort_HArray2OfShortReal_2: typeof TShort_HArray2OfShortReal_2;
  TShort_HArray2OfShortReal_3: typeof TShort_HArray2OfShortReal_3;
  TShort_HSequenceOfShortReal: typeof TShort_HSequenceOfShortReal;
  TShort_HSequenceOfShortReal_1: typeof TShort_HSequenceOfShortReal_1;
  TShort_HSequenceOfShortReal_2: typeof TShort_HSequenceOfShortReal_2;
  TopAbs: typeof TopAbs;
  TopBas_TestInterference: typeof TopBas_TestInterference;
  TopBas_TestInterference_1: typeof TopBas_TestInterference_1;
  TopBas_TestInterference_2: typeof TopBas_TestInterference_2;
  TopCnx_EdgeFaceTransition: typeof TopCnx_EdgeFaceTransition;
  TopExp: typeof TopExp;
  TopExp_Explorer: typeof TopExp_Explorer;
  TopExp_Explorer_1: typeof TopExp_Explorer_1;
  TopExp_Explorer_2: typeof TopExp_Explorer_2;
  TopLoc_Datum3D: typeof TopLoc_Datum3D;
  TopLoc_Datum3D_1: typeof TopLoc_Datum3D_1;
  TopLoc_Datum3D_2: typeof TopLoc_Datum3D_2;
  TopLoc_ItemLocation: typeof TopLoc_ItemLocation;
  TopLoc_Location: typeof TopLoc_Location;
  TopLoc_Location_1: typeof TopLoc_Location_1;
  TopLoc_Location_2: typeof TopLoc_Location_2;
  TopLoc_Location_3: typeof TopLoc_Location_3;
  TopLoc_SListNodeOfItemLocation: typeof TopLoc_SListNodeOfItemLocation;
  TopLoc_SListOfItemLocation: typeof TopLoc_SListOfItemLocation;
  TopLoc_SListOfItemLocation_1: typeof TopLoc_SListOfItemLocation_1;
  TopLoc_SListOfItemLocation_2: typeof TopLoc_SListOfItemLocation_2;
  TopLoc_SListOfItemLocation_3: typeof TopLoc_SListOfItemLocation_3;
  TopLoc_SListOfItemLocation_4: typeof TopLoc_SListOfItemLocation_4;
  TopOpeBRep: typeof TopOpeBRep;
  TopOpeBRepBuild_Area1dBuilder: typeof TopOpeBRepBuild_Area1dBuilder;
  TopOpeBRepBuild_Area1dBuilder_1: typeof TopOpeBRepBuild_Area1dBuilder_1;
  TopOpeBRepBuild_Area1dBuilder_2: typeof TopOpeBRepBuild_Area1dBuilder_2;
  TopOpeBRepBuild_Area2dBuilder: typeof TopOpeBRepBuild_Area2dBuilder;
  TopOpeBRepBuild_Area2dBuilder_1: typeof TopOpeBRepBuild_Area2dBuilder_1;
  TopOpeBRepBuild_Area2dBuilder_2: typeof TopOpeBRepBuild_Area2dBuilder_2;
  TopOpeBRepBuild_Area3dBuilder: typeof TopOpeBRepBuild_Area3dBuilder;
  TopOpeBRepBuild_Area3dBuilder_1: typeof TopOpeBRepBuild_Area3dBuilder_1;
  TopOpeBRepBuild_Area3dBuilder_2: typeof TopOpeBRepBuild_Area3dBuilder_2;
  TopOpeBRepBuild_AreaBuilder: typeof TopOpeBRepBuild_AreaBuilder;
  TopOpeBRepBuild_AreaBuilder_1: typeof TopOpeBRepBuild_AreaBuilder_1;
  TopOpeBRepBuild_AreaBuilder_2: typeof TopOpeBRepBuild_AreaBuilder_2;
  TopOpeBRepBuild_BlockBuilder: typeof TopOpeBRepBuild_BlockBuilder;
  TopOpeBRepBuild_BlockBuilder_1: typeof TopOpeBRepBuild_BlockBuilder_1;
  TopOpeBRepBuild_BlockBuilder_2: typeof TopOpeBRepBuild_BlockBuilder_2;
  TopOpeBRepBuild_BlockIterator: typeof TopOpeBRepBuild_BlockIterator;
  TopOpeBRepBuild_BlockIterator_1: typeof TopOpeBRepBuild_BlockIterator_1;
  TopOpeBRepBuild_BlockIterator_2: typeof TopOpeBRepBuild_BlockIterator_2;
  TopOpeBRepBuild_BuilderON: typeof TopOpeBRepBuild_BuilderON;
  TopOpeBRepBuild_BuilderON_1: typeof TopOpeBRepBuild_BuilderON_1;
  TopOpeBRepBuild_BuilderON_2: typeof TopOpeBRepBuild_BuilderON_2;
  TopOpeBRepBuild_CompositeClassifier: typeof TopOpeBRepBuild_CompositeClassifier;
  TopOpeBRepBuild_CorrectFace2d: typeof TopOpeBRepBuild_CorrectFace2d;
  TopOpeBRepBuild_CorrectFace2d_1: typeof TopOpeBRepBuild_CorrectFace2d_1;
  TopOpeBRepBuild_CorrectFace2d_2: typeof TopOpeBRepBuild_CorrectFace2d_2;
  TopOpeBRepBuild_EdgeBuilder: typeof TopOpeBRepBuild_EdgeBuilder;
  TopOpeBRepBuild_EdgeBuilder_1: typeof TopOpeBRepBuild_EdgeBuilder_1;
  TopOpeBRepBuild_EdgeBuilder_2: typeof TopOpeBRepBuild_EdgeBuilder_2;
  TopOpeBRepBuild_FaceAreaBuilder: typeof TopOpeBRepBuild_FaceAreaBuilder;
  TopOpeBRepBuild_FaceAreaBuilder_1: typeof TopOpeBRepBuild_FaceAreaBuilder_1;
  TopOpeBRepBuild_FaceAreaBuilder_2: typeof TopOpeBRepBuild_FaceAreaBuilder_2;
  TopOpeBRepBuild_FaceBuilder: typeof TopOpeBRepBuild_FaceBuilder;
  TopOpeBRepBuild_FaceBuilder_1: typeof TopOpeBRepBuild_FaceBuilder_1;
  TopOpeBRepBuild_FaceBuilder_2: typeof TopOpeBRepBuild_FaceBuilder_2;
  TopOpeBRepBuild_FuseFace: typeof TopOpeBRepBuild_FuseFace;
  TopOpeBRepBuild_FuseFace_1: typeof TopOpeBRepBuild_FuseFace_1;
  TopOpeBRepBuild_FuseFace_2: typeof TopOpeBRepBuild_FuseFace_2;
  TopOpeBRepBuild_GIter: typeof TopOpeBRepBuild_GIter;
  TopOpeBRepBuild_GIter_1: typeof TopOpeBRepBuild_GIter_1;
  TopOpeBRepBuild_GIter_2: typeof TopOpeBRepBuild_GIter_2;
  TopOpeBRepBuild_GTool: typeof TopOpeBRepBuild_GTool;
  TopOpeBRepBuild_GTopo: typeof TopOpeBRepBuild_GTopo;
  TopOpeBRepBuild_GTopo_1: typeof TopOpeBRepBuild_GTopo_1;
  TopOpeBRepBuild_GTopo_2: typeof TopOpeBRepBuild_GTopo_2;
  TopOpeBRepBuild_HBuilder: typeof TopOpeBRepBuild_HBuilder;
  TopOpeBRepBuild_Loop: typeof TopOpeBRepBuild_Loop;
  TopOpeBRepBuild_Loop_1: typeof TopOpeBRepBuild_Loop_1;
  TopOpeBRepBuild_Loop_2: typeof TopOpeBRepBuild_Loop_2;
  TopOpeBRepBuild_LoopClassifier: typeof TopOpeBRepBuild_LoopClassifier;
  TopOpeBRepBuild_LoopSet: typeof TopOpeBRepBuild_LoopSet;
  TopOpeBRepBuild_Pave: typeof TopOpeBRepBuild_Pave;
  TopOpeBRepBuild_PaveClassifier: typeof TopOpeBRepBuild_PaveClassifier;
  TopOpeBRepBuild_PaveSet: typeof TopOpeBRepBuild_PaveSet;
  TopOpeBRepBuild_ShapeListOfShape: typeof TopOpeBRepBuild_ShapeListOfShape;
  TopOpeBRepBuild_ShapeListOfShape_1: typeof TopOpeBRepBuild_ShapeListOfShape_1;
  TopOpeBRepBuild_ShapeListOfShape_2: typeof TopOpeBRepBuild_ShapeListOfShape_2;
  TopOpeBRepBuild_ShapeListOfShape_3: typeof TopOpeBRepBuild_ShapeListOfShape_3;
  TopOpeBRepBuild_ShapeSet: typeof TopOpeBRepBuild_ShapeSet;
  TopOpeBRepBuild_ShellFaceClassifier: typeof TopOpeBRepBuild_ShellFaceClassifier;
  TopOpeBRepBuild_ShellFaceSet: typeof TopOpeBRepBuild_ShellFaceSet;
  TopOpeBRepBuild_ShellFaceSet_1: typeof TopOpeBRepBuild_ShellFaceSet_1;
  TopOpeBRepBuild_ShellFaceSet_2: typeof TopOpeBRepBuild_ShellFaceSet_2;
  TopOpeBRepBuild_ShellToSolid: typeof TopOpeBRepBuild_ShellToSolid;
  TopOpeBRepBuild_SolidAreaBuilder: typeof TopOpeBRepBuild_SolidAreaBuilder;
  TopOpeBRepBuild_SolidAreaBuilder_1: typeof TopOpeBRepBuild_SolidAreaBuilder_1;
  TopOpeBRepBuild_SolidAreaBuilder_2: typeof TopOpeBRepBuild_SolidAreaBuilder_2;
  TopOpeBRepBuild_SolidBuilder: typeof TopOpeBRepBuild_SolidBuilder;
  TopOpeBRepBuild_SolidBuilder_1: typeof TopOpeBRepBuild_SolidBuilder_1;
  TopOpeBRepBuild_SolidBuilder_2: typeof TopOpeBRepBuild_SolidBuilder_2;
  TopOpeBRepBuild_Tools: typeof TopOpeBRepBuild_Tools;
  TopOpeBRepBuild_Tools2d: typeof TopOpeBRepBuild_Tools2d;
  TopOpeBRepBuild_VertexInfo: typeof TopOpeBRepBuild_VertexInfo;
  TopOpeBRepBuild_WireEdgeClassifier: typeof TopOpeBRepBuild_WireEdgeClassifier;
  TopOpeBRepBuild_WireEdgeSet: typeof TopOpeBRepBuild_WireEdgeSet;
  TopOpeBRepBuild_WireToFace: typeof TopOpeBRepBuild_WireToFace;
  TopOpeBRepDS: typeof TopOpeBRepDS;
  TopOpeBRepDS_Association: typeof TopOpeBRepDS_Association;
  TopOpeBRepDS_BuildTool: typeof TopOpeBRepDS_BuildTool;
  TopOpeBRepDS_BuildTool_1: typeof TopOpeBRepDS_BuildTool_1;
  TopOpeBRepDS_BuildTool_2: typeof TopOpeBRepDS_BuildTool_2;
  TopOpeBRepDS_BuildTool_3: typeof TopOpeBRepDS_BuildTool_3;
  TopOpeBRepDS_Check: typeof TopOpeBRepDS_Check;
  TopOpeBRepDS_Check_1: typeof TopOpeBRepDS_Check_1;
  TopOpeBRepDS_Check_2: typeof TopOpeBRepDS_Check_2;
  TopOpeBRepDS_Curve: typeof TopOpeBRepDS_Curve;
  TopOpeBRepDS_Curve_1: typeof TopOpeBRepDS_Curve_1;
  TopOpeBRepDS_Curve_2: typeof TopOpeBRepDS_Curve_2;
  TopOpeBRepDS_CurveData: typeof TopOpeBRepDS_CurveData;
  TopOpeBRepDS_CurveData_1: typeof TopOpeBRepDS_CurveData_1;
  TopOpeBRepDS_CurveData_2: typeof TopOpeBRepDS_CurveData_2;
  TopOpeBRepDS_CurveExplorer: typeof TopOpeBRepDS_CurveExplorer;
  TopOpeBRepDS_CurveExplorer_1: typeof TopOpeBRepDS_CurveExplorer_1;
  TopOpeBRepDS_CurveExplorer_2: typeof TopOpeBRepDS_CurveExplorer_2;
  TopOpeBRepDS_CurveIterator: typeof TopOpeBRepDS_CurveIterator;
  TopOpeBRepDS_CurvePointInterference: typeof TopOpeBRepDS_CurvePointInterference;
  TopOpeBRepDS_DataStructure: typeof TopOpeBRepDS_DataStructure;
  TopOpeBRepDS_Dumper: typeof TopOpeBRepDS_Dumper;
  TopOpeBRepDS_EIR: typeof TopOpeBRepDS_EIR;
  TopOpeBRepDS_Edge3dInterferenceTool: typeof TopOpeBRepDS_Edge3dInterferenceTool;
  TopOpeBRepDS_EdgeInterferenceTool: typeof TopOpeBRepDS_EdgeInterferenceTool;
  TopOpeBRepDS_EdgeVertexInterference: typeof TopOpeBRepDS_EdgeVertexInterference;
  TopOpeBRepDS_EdgeVertexInterference_1: typeof TopOpeBRepDS_EdgeVertexInterference_1;
  TopOpeBRepDS_EdgeVertexInterference_2: typeof TopOpeBRepDS_EdgeVertexInterference_2;
  TopOpeBRepDS_Explorer: typeof TopOpeBRepDS_Explorer;
  TopOpeBRepDS_Explorer_1: typeof TopOpeBRepDS_Explorer_1;
  TopOpeBRepDS_Explorer_2: typeof TopOpeBRepDS_Explorer_2;
  TopOpeBRepDS_FIR: typeof TopOpeBRepDS_FIR;
  TopOpeBRepDS_FaceEdgeInterference: typeof TopOpeBRepDS_FaceEdgeInterference;
  TopOpeBRepDS_FaceInterferenceTool: typeof TopOpeBRepDS_FaceInterferenceTool;
  TopOpeBRepDS_Filter: typeof TopOpeBRepDS_Filter;
  TopOpeBRepDS_GapFiller: typeof TopOpeBRepDS_GapFiller;
  TopOpeBRepDS_GapTool: typeof TopOpeBRepDS_GapTool;
  TopOpeBRepDS_GapTool_1: typeof TopOpeBRepDS_GapTool_1;
  TopOpeBRepDS_GapTool_2: typeof TopOpeBRepDS_GapTool_2;
  TopOpeBRepDS_GeometryData: typeof TopOpeBRepDS_GeometryData;
  TopOpeBRepDS_GeometryData_1: typeof TopOpeBRepDS_GeometryData_1;
  TopOpeBRepDS_GeometryData_2: typeof TopOpeBRepDS_GeometryData_2;
  TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference: typeof TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference;
  TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference_1: typeof TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference_1;
  TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference_2: typeof TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference_2;
  TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference_3: typeof TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference_3;
  TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference_4: typeof TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference_4;
  TopOpeBRepDS_HDataStructure: typeof TopOpeBRepDS_HDataStructure;
  TopOpeBRepDS_Interference: typeof TopOpeBRepDS_Interference;
  TopOpeBRepDS_Interference_1: typeof TopOpeBRepDS_Interference_1;
  TopOpeBRepDS_Interference_2: typeof TopOpeBRepDS_Interference_2;
  TopOpeBRepDS_Interference_3: typeof TopOpeBRepDS_Interference_3;
  TopOpeBRepDS_InterferenceIterator: typeof TopOpeBRepDS_InterferenceIterator;
  TopOpeBRepDS_InterferenceIterator_1: typeof TopOpeBRepDS_InterferenceIterator_1;
  TopOpeBRepDS_InterferenceIterator_2: typeof TopOpeBRepDS_InterferenceIterator_2;
  TopOpeBRepDS_InterferenceTool: typeof TopOpeBRepDS_InterferenceTool;
  TopOpeBRepDS_ListOfShapeOn1State: typeof TopOpeBRepDS_ListOfShapeOn1State;
  TopOpeBRepDS_Marker: typeof TopOpeBRepDS_Marker;
  TopOpeBRepDS_Point: typeof TopOpeBRepDS_Point;
  TopOpeBRepDS_Point_1: typeof TopOpeBRepDS_Point_1;
  TopOpeBRepDS_Point_2: typeof TopOpeBRepDS_Point_2;
  TopOpeBRepDS_Point_3: typeof TopOpeBRepDS_Point_3;
  TopOpeBRepDS_PointData: typeof TopOpeBRepDS_PointData;
  TopOpeBRepDS_PointData_1: typeof TopOpeBRepDS_PointData_1;
  TopOpeBRepDS_PointData_2: typeof TopOpeBRepDS_PointData_2;
  TopOpeBRepDS_PointData_3: typeof TopOpeBRepDS_PointData_3;
  TopOpeBRepDS_PointExplorer: typeof TopOpeBRepDS_PointExplorer;
  TopOpeBRepDS_PointExplorer_1: typeof TopOpeBRepDS_PointExplorer_1;
  TopOpeBRepDS_PointExplorer_2: typeof TopOpeBRepDS_PointExplorer_2;
  TopOpeBRepDS_PointIterator: typeof TopOpeBRepDS_PointIterator;
  TopOpeBRepDS_Reducer: typeof TopOpeBRepDS_Reducer;
  TopOpeBRepDS_ShapeData: typeof TopOpeBRepDS_ShapeData;
  TopOpeBRepDS_ShapeShapeInterference: typeof TopOpeBRepDS_ShapeShapeInterference;
  TopOpeBRepDS_ShapeWithState: typeof TopOpeBRepDS_ShapeWithState;
  TopOpeBRepDS_SolidSurfaceInterference: typeof TopOpeBRepDS_SolidSurfaceInterference;
  TopOpeBRepDS_Surface: typeof TopOpeBRepDS_Surface;
  TopOpeBRepDS_Surface_1: typeof TopOpeBRepDS_Surface_1;
  TopOpeBRepDS_Surface_2: typeof TopOpeBRepDS_Surface_2;
  TopOpeBRepDS_Surface_3: typeof TopOpeBRepDS_Surface_3;
  TopOpeBRepDS_SurfaceCurveInterference: typeof TopOpeBRepDS_SurfaceCurveInterference;
  TopOpeBRepDS_SurfaceCurveInterference_1: typeof TopOpeBRepDS_SurfaceCurveInterference_1;
  TopOpeBRepDS_SurfaceCurveInterference_2: typeof TopOpeBRepDS_SurfaceCurveInterference_2;
  TopOpeBRepDS_SurfaceCurveInterference_3: typeof TopOpeBRepDS_SurfaceCurveInterference_3;
  TopOpeBRepDS_SurfaceData: typeof TopOpeBRepDS_SurfaceData;
  TopOpeBRepDS_SurfaceData_1: typeof TopOpeBRepDS_SurfaceData_1;
  TopOpeBRepDS_SurfaceData_2: typeof TopOpeBRepDS_SurfaceData_2;
  TopOpeBRepDS_SurfaceExplorer: typeof TopOpeBRepDS_SurfaceExplorer;
  TopOpeBRepDS_SurfaceExplorer_1: typeof TopOpeBRepDS_SurfaceExplorer_1;
  TopOpeBRepDS_SurfaceExplorer_2: typeof TopOpeBRepDS_SurfaceExplorer_2;
  TopOpeBRepDS_SurfaceIterator: typeof TopOpeBRepDS_SurfaceIterator;
  TopOpeBRepDS_TKI: typeof TopOpeBRepDS_TKI;
  TopOpeBRepDS_TOOL: typeof TopOpeBRepDS_TOOL;
  TopOpeBRepDS_Transition: typeof TopOpeBRepDS_Transition;
  TopOpeBRepDS_Transition_1: typeof TopOpeBRepDS_Transition_1;
  TopOpeBRepDS_Transition_2: typeof TopOpeBRepDS_Transition_2;
  TopOpeBRepDS_Transition_3: typeof TopOpeBRepDS_Transition_3;
  TopOpeBRepTool: typeof TopOpeBRepTool;
  TopOpeBRepTool_AncestorsTool: typeof TopOpeBRepTool_AncestorsTool;
  TopOpeBRepTool_BoxSort: typeof TopOpeBRepTool_BoxSort;
  TopOpeBRepTool_BoxSort_1: typeof TopOpeBRepTool_BoxSort_1;
  TopOpeBRepTool_BoxSort_2: typeof TopOpeBRepTool_BoxSort_2;
  TopOpeBRepTool_C2DF: typeof TopOpeBRepTool_C2DF;
  TopOpeBRepTool_C2DF_1: typeof TopOpeBRepTool_C2DF_1;
  TopOpeBRepTool_C2DF_2: typeof TopOpeBRepTool_C2DF_2;
  TopOpeBRepTool_CLASSI: typeof TopOpeBRepTool_CLASSI;
  TopOpeBRepTool_CORRISO: typeof TopOpeBRepTool_CORRISO;
  TopOpeBRepTool_CORRISO_1: typeof TopOpeBRepTool_CORRISO_1;
  TopOpeBRepTool_CORRISO_2: typeof TopOpeBRepTool_CORRISO_2;
  TopOpeBRepTool_CurveTool: typeof TopOpeBRepTool_CurveTool;
  TopOpeBRepTool_CurveTool_1: typeof TopOpeBRepTool_CurveTool_1;
  TopOpeBRepTool_CurveTool_2: typeof TopOpeBRepTool_CurveTool_2;
  TopOpeBRepTool_CurveTool_3: typeof TopOpeBRepTool_CurveTool_3;
  TopOpeBRepTool_FuseEdges: typeof TopOpeBRepTool_FuseEdges;
  TopOpeBRepTool_GeomTool: typeof TopOpeBRepTool_GeomTool;
  TopOpeBRepTool_HBoxTool: typeof TopOpeBRepTool_HBoxTool;
  TopOpeBRepTool_PurgeInternalEdges: typeof TopOpeBRepTool_PurgeInternalEdges;
  TopOpeBRepTool_REGUS: typeof TopOpeBRepTool_REGUS;
  TopOpeBRepTool_REGUW: typeof TopOpeBRepTool_REGUW;
  TopOpeBRepTool_ShapeClassifier: typeof TopOpeBRepTool_ShapeClassifier;
  TopOpeBRepTool_ShapeClassifier_1: typeof TopOpeBRepTool_ShapeClassifier_1;
  TopOpeBRepTool_ShapeClassifier_2: typeof TopOpeBRepTool_ShapeClassifier_2;
  TopOpeBRepTool_ShapeExplorer: typeof TopOpeBRepTool_ShapeExplorer;
  TopOpeBRepTool_ShapeExplorer_1: typeof TopOpeBRepTool_ShapeExplorer_1;
  TopOpeBRepTool_ShapeExplorer_2: typeof TopOpeBRepTool_ShapeExplorer_2;
  TopOpeBRepTool_ShapeTool: typeof TopOpeBRepTool_ShapeTool;
  TopOpeBRepTool_SolidClassifier: typeof TopOpeBRepTool_SolidClassifier;
  TopOpeBRepTool_TOOL: typeof TopOpeBRepTool_TOOL;
  TopOpeBRepTool_connexity: typeof TopOpeBRepTool_connexity;
  TopOpeBRepTool_connexity_1: typeof TopOpeBRepTool_connexity_1;
  TopOpeBRepTool_connexity_2: typeof TopOpeBRepTool_connexity_2;
  TopOpeBRepTool_face: typeof TopOpeBRepTool_face;
  TopOpeBRepTool_makeTransition: typeof TopOpeBRepTool_makeTransition;
  TopOpeBRepTool_mkTondgE: typeof TopOpeBRepTool_mkTondgE;
  TopOpeBRep_Bipoint: typeof TopOpeBRep_Bipoint;
  TopOpeBRep_Bipoint_1: typeof TopOpeBRep_Bipoint_1;
  TopOpeBRep_Bipoint_2: typeof TopOpeBRep_Bipoint_2;
  TopOpeBRep_DSFiller: typeof TopOpeBRep_DSFiller;
  TopOpeBRep_EdgesFiller: typeof TopOpeBRep_EdgesFiller;
  TopOpeBRep_EdgesIntersector: typeof TopOpeBRep_EdgesIntersector;
  TopOpeBRep_FFDumper: typeof TopOpeBRep_FFDumper;
  TopOpeBRep_FFTransitionTool: typeof TopOpeBRep_FFTransitionTool;
  TopOpeBRep_FaceEdgeFiller: typeof TopOpeBRep_FaceEdgeFiller;
  TopOpeBRep_FaceEdgeIntersector: typeof TopOpeBRep_FaceEdgeIntersector;
  TopOpeBRep_FacesFiller: typeof TopOpeBRep_FacesFiller;
  TopOpeBRep_FacesIntersector: typeof TopOpeBRep_FacesIntersector;
  TopOpeBRep_GeomTool: typeof TopOpeBRep_GeomTool;
  TopOpeBRep_HArray1OfLineInter: typeof TopOpeBRep_HArray1OfLineInter;
  TopOpeBRep_HArray1OfLineInter_1: typeof TopOpeBRep_HArray1OfLineInter_1;
  TopOpeBRep_HArray1OfLineInter_2: typeof TopOpeBRep_HArray1OfLineInter_2;
  TopOpeBRep_HArray1OfLineInter_3: typeof TopOpeBRep_HArray1OfLineInter_3;
  TopOpeBRep_HArray1OfLineInter_4: typeof TopOpeBRep_HArray1OfLineInter_4;
  TopOpeBRep_HArray1OfVPointInter: typeof TopOpeBRep_HArray1OfVPointInter;
  TopOpeBRep_HArray1OfVPointInter_1: typeof TopOpeBRep_HArray1OfVPointInter_1;
  TopOpeBRep_HArray1OfVPointInter_2: typeof TopOpeBRep_HArray1OfVPointInter_2;
  TopOpeBRep_HArray1OfVPointInter_3: typeof TopOpeBRep_HArray1OfVPointInter_3;
  TopOpeBRep_HArray1OfVPointInter_4: typeof TopOpeBRep_HArray1OfVPointInter_4;
  TopOpeBRep_Hctxee2d: typeof TopOpeBRep_Hctxee2d;
  TopOpeBRep_Hctxff2d: typeof TopOpeBRep_Hctxff2d;
  TopOpeBRep_LineInter: typeof TopOpeBRep_LineInter;
  TopOpeBRep_Point2d: typeof TopOpeBRep_Point2d;
  TopOpeBRep_PointClassifier: typeof TopOpeBRep_PointClassifier;
  TopOpeBRep_PointGeomTool: typeof TopOpeBRep_PointGeomTool;
  TopOpeBRep_ShapeIntersector: typeof TopOpeBRep_ShapeIntersector;
  TopOpeBRep_ShapeIntersector2d: typeof TopOpeBRep_ShapeIntersector2d;
  TopOpeBRep_ShapeScanner: typeof TopOpeBRep_ShapeScanner;
  TopOpeBRep_VPointInter: typeof TopOpeBRep_VPointInter;
  TopOpeBRep_VPointInterClassifier: typeof TopOpeBRep_VPointInterClassifier;
  TopOpeBRep_VPointInterIterator: typeof TopOpeBRep_VPointInterIterator;
  TopOpeBRep_VPointInterIterator_1: typeof TopOpeBRep_VPointInterIterator_1;
  TopOpeBRep_VPointInterIterator_2: typeof TopOpeBRep_VPointInterIterator_2;
  TopOpeBRep_WPointInter: typeof TopOpeBRep_WPointInter;
  TopOpeBRep_WPointInterIterator: typeof TopOpeBRep_WPointInterIterator;
  TopOpeBRep_WPointInterIterator_1: typeof TopOpeBRep_WPointInterIterator_1;
  TopOpeBRep_WPointInterIterator_2: typeof TopOpeBRep_WPointInterIterator_2;
  TopTools: typeof TopTools;
  TopTools_HArray1OfListOfShape: typeof TopTools_HArray1OfListOfShape;
  TopTools_HArray1OfListOfShape_1: typeof TopTools_HArray1OfListOfShape_1;
  TopTools_HArray1OfListOfShape_2: typeof TopTools_HArray1OfListOfShape_2;
  TopTools_HArray1OfListOfShape_3: typeof TopTools_HArray1OfListOfShape_3;
  TopTools_HArray1OfListOfShape_4: typeof TopTools_HArray1OfListOfShape_4;
  TopTools_LocationSet: typeof TopTools_LocationSet;
  TopTools_MutexForShapeProvider: typeof TopTools_MutexForShapeProvider;
  TopTools_OrientedShapeMapHasher: typeof TopTools_OrientedShapeMapHasher;
  TopTools_ShapeMapHasher: typeof TopTools_ShapeMapHasher;
  TopTools_ShapeSet: typeof TopTools_ShapeSet;
  TopTrans_CurveTransition: typeof TopTrans_CurveTransition;
  TopTrans_SurfaceTransition: typeof TopTrans_SurfaceTransition;
  TopoDS: typeof TopoDS;
  TopoDSToStep: typeof TopoDSToStep;
  TopoDSToStep_Builder: typeof TopoDSToStep_Builder;
  TopoDSToStep_Builder_1: typeof TopoDSToStep_Builder_1;
  TopoDSToStep_Builder_2: typeof TopoDSToStep_Builder_2;
  TopoDSToStep_FacetedTool: typeof TopoDSToStep_FacetedTool;
  TopoDSToStep_MakeBrepWithVoids: typeof TopoDSToStep_MakeBrepWithVoids;
  TopoDSToStep_MakeFacetedBrep: typeof TopoDSToStep_MakeFacetedBrep;
  TopoDSToStep_MakeFacetedBrep_1: typeof TopoDSToStep_MakeFacetedBrep_1;
  TopoDSToStep_MakeFacetedBrep_2: typeof TopoDSToStep_MakeFacetedBrep_2;
  TopoDSToStep_MakeFacetedBrepAndBrepWithVoids: typeof TopoDSToStep_MakeFacetedBrepAndBrepWithVoids;
  TopoDSToStep_MakeGeometricCurveSet: typeof TopoDSToStep_MakeGeometricCurveSet;
  TopoDSToStep_MakeManifoldSolidBrep: typeof TopoDSToStep_MakeManifoldSolidBrep;
  TopoDSToStep_MakeManifoldSolidBrep_1: typeof TopoDSToStep_MakeManifoldSolidBrep_1;
  TopoDSToStep_MakeManifoldSolidBrep_2: typeof TopoDSToStep_MakeManifoldSolidBrep_2;
  TopoDSToStep_MakeShellBasedSurfaceModel: typeof TopoDSToStep_MakeShellBasedSurfaceModel;
  TopoDSToStep_MakeShellBasedSurfaceModel_1: typeof TopoDSToStep_MakeShellBasedSurfaceModel_1;
  TopoDSToStep_MakeShellBasedSurfaceModel_2: typeof TopoDSToStep_MakeShellBasedSurfaceModel_2;
  TopoDSToStep_MakeShellBasedSurfaceModel_3: typeof TopoDSToStep_MakeShellBasedSurfaceModel_3;
  TopoDSToStep_MakeStepEdge: typeof TopoDSToStep_MakeStepEdge;
  TopoDSToStep_MakeStepEdge_1: typeof TopoDSToStep_MakeStepEdge_1;
  TopoDSToStep_MakeStepEdge_2: typeof TopoDSToStep_MakeStepEdge_2;
  TopoDSToStep_MakeStepFace: typeof TopoDSToStep_MakeStepFace;
  TopoDSToStep_MakeStepFace_1: typeof TopoDSToStep_MakeStepFace_1;
  TopoDSToStep_MakeStepFace_2: typeof TopoDSToStep_MakeStepFace_2;
  TopoDSToStep_MakeStepVertex: typeof TopoDSToStep_MakeStepVertex;
  TopoDSToStep_MakeStepVertex_1: typeof TopoDSToStep_MakeStepVertex_1;
  TopoDSToStep_MakeStepVertex_2: typeof TopoDSToStep_MakeStepVertex_2;
  TopoDSToStep_MakeStepWire: typeof TopoDSToStep_MakeStepWire;
  TopoDSToStep_MakeStepWire_1: typeof TopoDSToStep_MakeStepWire_1;
  TopoDSToStep_MakeStepWire_2: typeof TopoDSToStep_MakeStepWire_2;
  TopoDSToStep_Root: typeof TopoDSToStep_Root;
  TopoDSToStep_Tool: typeof TopoDSToStep_Tool;
  TopoDSToStep_Tool_1: typeof TopoDSToStep_Tool_1;
  TopoDSToStep_Tool_2: typeof TopoDSToStep_Tool_2;
  TopoDSToStep_WireframeBuilder: typeof TopoDSToStep_WireframeBuilder;
  TopoDSToStep_WireframeBuilder_1: typeof TopoDSToStep_WireframeBuilder_1;
  TopoDSToStep_WireframeBuilder_2: typeof TopoDSToStep_WireframeBuilder_2;
  TopoDS_AlertWithShape: typeof TopoDS_AlertWithShape;
  TopoDS_Builder: typeof TopoDS_Builder;
  TopoDS_CompSolid: typeof TopoDS_CompSolid;
  TopoDS_Compound: typeof TopoDS_Compound;
  TopoDS_Edge: typeof TopoDS_Edge;
  TopoDS_Face: typeof TopoDS_Face;
  TopoDS_FrozenShape: typeof TopoDS_FrozenShape;
  TopoDS_FrozenShape_1: typeof TopoDS_FrozenShape_1;
  TopoDS_FrozenShape_2: typeof TopoDS_FrozenShape_2;
  TopoDS_HShape: typeof TopoDS_HShape;
  TopoDS_HShape_1: typeof TopoDS_HShape_1;
  TopoDS_HShape_2: typeof TopoDS_HShape_2;
  TopoDS_Iterator: typeof TopoDS_Iterator;
  TopoDS_Iterator_1: typeof TopoDS_Iterator_1;
  TopoDS_Iterator_2: typeof TopoDS_Iterator_2;
  TopoDS_LockedShape: typeof TopoDS_LockedShape;
  TopoDS_LockedShape_1: typeof TopoDS_LockedShape_1;
  TopoDS_LockedShape_2: typeof TopoDS_LockedShape_2;
  TopoDS_Shape: typeof TopoDS_Shape;
  TopoDS_Shell: typeof TopoDS_Shell;
  TopoDS_Solid: typeof TopoDS_Solid;
  TopoDS_TCompSolid: typeof TopoDS_TCompSolid;
  TopoDS_TCompound: typeof TopoDS_TCompound;
  TopoDS_TEdge: typeof TopoDS_TEdge;
  TopoDS_TFace: typeof TopoDS_TFace;
  TopoDS_TShape: typeof TopoDS_TShape;
  TopoDS_TShell: typeof TopoDS_TShell;
  TopoDS_TSolid: typeof TopoDS_TSolid;
  TopoDS_TVertex: typeof TopoDS_TVertex;
  TopoDS_TWire: typeof TopoDS_TWire;
  TopoDS_UnCompatibleShapes: typeof TopoDS_UnCompatibleShapes;
  TopoDS_UnCompatibleShapes_1: typeof TopoDS_UnCompatibleShapes_1;
  TopoDS_UnCompatibleShapes_2: typeof TopoDS_UnCompatibleShapes_2;
  TopoDS_Vertex: typeof TopoDS_Vertex;
  TopoDS_Wire: typeof TopoDS_Wire;
  TransferBRep_BinderOfShape: typeof TransferBRep_BinderOfShape;
  TransferBRep_BinderOfShape_1: typeof TransferBRep_BinderOfShape_1;
  TransferBRep_BinderOfShape_2: typeof TransferBRep_BinderOfShape_2;
  TransferBRep_HSequenceOfTransferResultInfo: typeof TransferBRep_HSequenceOfTransferResultInfo;
  TransferBRep_HSequenceOfTransferResultInfo_1: typeof TransferBRep_HSequenceOfTransferResultInfo_1;
  TransferBRep_HSequenceOfTransferResultInfo_2: typeof TransferBRep_HSequenceOfTransferResultInfo_2;
  TransferBRep_OrientedShapeMapper: typeof TransferBRep_OrientedShapeMapper;
  TransferBRep_Reader: typeof TransferBRep_Reader;
  TransferBRep_ShapeBinder: typeof TransferBRep_ShapeBinder;
  TransferBRep_ShapeBinder_1: typeof TransferBRep_ShapeBinder_1;
  TransferBRep_ShapeBinder_2: typeof TransferBRep_ShapeBinder_2;
  TransferBRep_ShapeInfo: typeof TransferBRep_ShapeInfo;
  TransferBRep_ShapeListBinder: typeof TransferBRep_ShapeListBinder;
  TransferBRep_ShapeListBinder_1: typeof TransferBRep_ShapeListBinder_1;
  TransferBRep_ShapeListBinder_2: typeof TransferBRep_ShapeListBinder_2;
  TransferBRep_ShapeMapper: typeof TransferBRep_ShapeMapper;
  TransferBRep_TransferResultInfo: typeof TransferBRep_TransferResultInfo;
  Transfer_ActorDispatch: typeof Transfer_ActorDispatch;
  Transfer_ActorDispatch_1: typeof Transfer_ActorDispatch_1;
  Transfer_ActorDispatch_2: typeof Transfer_ActorDispatch_2;
  Transfer_ActorDispatch_3: typeof Transfer_ActorDispatch_3;
  Transfer_ActorOfFinderProcess: typeof Transfer_ActorOfFinderProcess;
  Transfer_ActorOfProcessForFinder: typeof Transfer_ActorOfProcessForFinder;
  Transfer_ActorOfProcessForTransient: typeof Transfer_ActorOfProcessForTransient;
  Transfer_ActorOfTransientProcess: typeof Transfer_ActorOfTransientProcess;
  Transfer_Binder: typeof Transfer_Binder;
  Transfer_BinderOfTransientInteger: typeof Transfer_BinderOfTransientInteger;
  Transfer_DataInfo: typeof Transfer_DataInfo;
  Transfer_DispatchControl: typeof Transfer_DispatchControl;
  Transfer_FindHasher: typeof Transfer_FindHasher;
  Transfer_Finder: typeof Transfer_Finder;
  Transfer_FinderProcess: typeof Transfer_FinderProcess;
  Transfer_HSequenceOfBinder: typeof Transfer_HSequenceOfBinder;
  Transfer_HSequenceOfBinder_1: typeof Transfer_HSequenceOfBinder_1;
  Transfer_HSequenceOfBinder_2: typeof Transfer_HSequenceOfBinder_2;
  Transfer_IteratorOfProcessForFinder: typeof Transfer_IteratorOfProcessForFinder;
  Transfer_IteratorOfProcessForTransient: typeof Transfer_IteratorOfProcessForTransient;
  Transfer_MapContainer: typeof Transfer_MapContainer;
  Transfer_MultipleBinder: typeof Transfer_MultipleBinder;
  Transfer_ProcessForFinder: typeof Transfer_ProcessForFinder;
  Transfer_ProcessForFinder_1: typeof Transfer_ProcessForFinder_1;
  Transfer_ProcessForFinder_2: typeof Transfer_ProcessForFinder_2;
  Transfer_ProcessForTransient: typeof Transfer_ProcessForTransient;
  Transfer_ProcessForTransient_1: typeof Transfer_ProcessForTransient_1;
  Transfer_ProcessForTransient_2: typeof Transfer_ProcessForTransient_2;
  Transfer_ResultFromModel: typeof Transfer_ResultFromModel;
  Transfer_ResultFromTransient: typeof Transfer_ResultFromTransient;
  Transfer_SimpleBinderOfTransient: typeof Transfer_SimpleBinderOfTransient;
  Transfer_TransferDeadLoop: typeof Transfer_TransferDeadLoop;
  Transfer_TransferDeadLoop_1: typeof Transfer_TransferDeadLoop_1;
  Transfer_TransferDeadLoop_2: typeof Transfer_TransferDeadLoop_2;
  Transfer_TransferDispatch: typeof Transfer_TransferDispatch;
  Transfer_TransferDispatch_1: typeof Transfer_TransferDispatch_1;
  Transfer_TransferDispatch_2: typeof Transfer_TransferDispatch_2;
  Transfer_TransferDispatch_3: typeof Transfer_TransferDispatch_3;
  Transfer_TransferFailure: typeof Transfer_TransferFailure;
  Transfer_TransferFailure_1: typeof Transfer_TransferFailure_1;
  Transfer_TransferFailure_2: typeof Transfer_TransferFailure_2;
  Transfer_TransferInput: typeof Transfer_TransferInput;
  Transfer_TransferIterator: typeof Transfer_TransferIterator;
  Transfer_TransferOutput: typeof Transfer_TransferOutput;
  Transfer_TransferOutput_1: typeof Transfer_TransferOutput_1;
  Transfer_TransferOutput_2: typeof Transfer_TransferOutput_2;
  Transfer_TransientListBinder: typeof Transfer_TransientListBinder;
  Transfer_TransientListBinder_1: typeof Transfer_TransientListBinder_1;
  Transfer_TransientListBinder_2: typeof Transfer_TransientListBinder_2;
  Transfer_TransientMapper: typeof Transfer_TransientMapper;
  Transfer_TransientProcess: typeof Transfer_TransientProcess;
  Transfer_VoidBinder: typeof Transfer_VoidBinder;
  Units: typeof Units;
  UnitsAPI: typeof UnitsAPI;
  UnitsMethods: typeof UnitsMethods;
  Units_Dimensions: typeof Units_Dimensions;
  Units_Explorer: typeof Units_Explorer;
  Units_Explorer_1: typeof Units_Explorer_1;
  Units_Explorer_2: typeof Units_Explorer_2;
  Units_Explorer_3: typeof Units_Explorer_3;
  Units_Explorer_4: typeof Units_Explorer_4;
  Units_Explorer_5: typeof Units_Explorer_5;
  Units_Lexicon: typeof Units_Lexicon;
  Units_MathSentence: typeof Units_MathSentence;
  Units_Measurement: typeof Units_Measurement;
  Units_Measurement_1: typeof Units_Measurement_1;
  Units_Measurement_2: typeof Units_Measurement_2;
  Units_Measurement_3: typeof Units_Measurement_3;
  Units_NoSuchType: typeof Units_NoSuchType;
  Units_NoSuchType_1: typeof Units_NoSuchType_1;
  Units_NoSuchType_2: typeof Units_NoSuchType_2;
  Units_NoSuchUnit: typeof Units_NoSuchUnit;
  Units_NoSuchUnit_1: typeof Units_NoSuchUnit_1;
  Units_NoSuchUnit_2: typeof Units_NoSuchUnit_2;
  Units_QuantitiesSequence: typeof Units_QuantitiesSequence;
  Units_QuantitiesSequence_1: typeof Units_QuantitiesSequence_1;
  Units_QuantitiesSequence_2: typeof Units_QuantitiesSequence_2;
  Units_Quantity: typeof Units_Quantity;
  Units_Sentence: typeof Units_Sentence;
  Units_ShiftedToken: typeof Units_ShiftedToken;
  Units_ShiftedUnit: typeof Units_ShiftedUnit;
  Units_ShiftedUnit_1: typeof Units_ShiftedUnit_1;
  Units_ShiftedUnit_2: typeof Units_ShiftedUnit_2;
  Units_ShiftedUnit_3: typeof Units_ShiftedUnit_3;
  Units_Token: typeof Units_Token;
  Units_Token_1: typeof Units_Token_1;
  Units_Token_2: typeof Units_Token_2;
  Units_Token_3: typeof Units_Token_3;
  Units_Token_4: typeof Units_Token_4;
  Units_Token_5: typeof Units_Token_5;
  Units_Token_6: typeof Units_Token_6;
  Units_TokensSequence: typeof Units_TokensSequence;
  Units_TokensSequence_1: typeof Units_TokensSequence_1;
  Units_TokensSequence_2: typeof Units_TokensSequence_2;
  Units_Unit: typeof Units_Unit;
  Units_Unit_1: typeof Units_Unit_1;
  Units_Unit_2: typeof Units_Unit_2;
  Units_Unit_3: typeof Units_Unit_3;
  Units_UnitSentence: typeof Units_UnitSentence;
  Units_UnitSentence_1: typeof Units_UnitSentence_1;
  Units_UnitSentence_2: typeof Units_UnitSentence_2;
  Units_UnitsDictionary: typeof Units_UnitsDictionary;
  Units_UnitsLexicon: typeof Units_UnitsLexicon;
  Units_UnitsSequence: typeof Units_UnitsSequence;
  Units_UnitsSequence_1: typeof Units_UnitsSequence_1;
  Units_UnitsSequence_2: typeof Units_UnitsSequence_2;
  Units_UnitsSystem: typeof Units_UnitsSystem;
  Units_UnitsSystem_1: typeof Units_UnitsSystem_1;
  Units_UnitsSystem_2: typeof Units_UnitsSystem_2;
  V3d: typeof V3d;
  V3d_AmbientLight: typeof V3d_AmbientLight;
  V3d_BadValue: typeof V3d_BadValue;
  V3d_BadValue_1: typeof V3d_BadValue_1;
  V3d_BadValue_2: typeof V3d_BadValue_2;
  V3d_CircularGrid: typeof V3d_CircularGrid;
  V3d_DirectionalLight: typeof V3d_DirectionalLight;
  V3d_DirectionalLight_1: typeof V3d_DirectionalLight_1;
  V3d_DirectionalLight_2: typeof V3d_DirectionalLight_2;
  V3d_Plane: typeof V3d_Plane;
  V3d_PositionLight: typeof V3d_PositionLight;
  V3d_PositionalLight: typeof V3d_PositionalLight;
  V3d_RectangularGrid: typeof V3d_RectangularGrid;
  V3d_SpotLight: typeof V3d_SpotLight;
  V3d_SpotLight_1: typeof V3d_SpotLight_1;
  V3d_SpotLight_2: typeof V3d_SpotLight_2;
  V3d_Trihedron: typeof V3d_Trihedron;
  V3d_UnMapped: typeof V3d_UnMapped;
  V3d_UnMapped_1: typeof V3d_UnMapped_1;
  V3d_UnMapped_2: typeof V3d_UnMapped_2;
  V3d_View: typeof V3d_View;
  V3d_View_1: typeof V3d_View_1;
  V3d_View_2: typeof V3d_View_2;
  V3d_Viewer: typeof V3d_Viewer;
  V3d_Viewer_1: typeof V3d_Viewer_1;
  V3d_Viewer_2: typeof V3d_Viewer_2;
  Vrml: typeof Vrml;
  VrmlAPI: typeof VrmlAPI;
  VrmlAPI_Writer: typeof VrmlAPI_Writer;
  VrmlConverter_Curve: typeof VrmlConverter_Curve;
  VrmlConverter_DeflectionCurve: typeof VrmlConverter_DeflectionCurve;
  VrmlConverter_Drawer: typeof VrmlConverter_Drawer;
  VrmlConverter_HLRShape: typeof VrmlConverter_HLRShape;
  VrmlConverter_IsoAspect: typeof VrmlConverter_IsoAspect;
  VrmlConverter_IsoAspect_1: typeof VrmlConverter_IsoAspect_1;
  VrmlConverter_IsoAspect_2: typeof VrmlConverter_IsoAspect_2;
  VrmlConverter_LineAspect: typeof VrmlConverter_LineAspect;
  VrmlConverter_LineAspect_1: typeof VrmlConverter_LineAspect_1;
  VrmlConverter_LineAspect_2: typeof VrmlConverter_LineAspect_2;
  VrmlConverter_PointAspect: typeof VrmlConverter_PointAspect;
  VrmlConverter_PointAspect_1: typeof VrmlConverter_PointAspect_1;
  VrmlConverter_PointAspect_2: typeof VrmlConverter_PointAspect_2;
  VrmlConverter_Projector: typeof VrmlConverter_Projector;
  VrmlConverter_ShadedShape: typeof VrmlConverter_ShadedShape;
  VrmlConverter_ShadingAspect: typeof VrmlConverter_ShadingAspect;
  VrmlConverter_WFDeflectionRestrictedFace: typeof VrmlConverter_WFDeflectionRestrictedFace;
  VrmlConverter_WFDeflectionShape: typeof VrmlConverter_WFDeflectionShape;
  VrmlConverter_WFRestrictedFace: typeof VrmlConverter_WFRestrictedFace;
  VrmlConverter_WFShape: typeof VrmlConverter_WFShape;
  VrmlData_Appearance: typeof VrmlData_Appearance;
  VrmlData_Appearance_1: typeof VrmlData_Appearance_1;
  VrmlData_Appearance_2: typeof VrmlData_Appearance_2;
  VrmlData_ArrayVec3d: typeof VrmlData_ArrayVec3d;
  VrmlData_Box: typeof VrmlData_Box;
  VrmlData_Box_1: typeof VrmlData_Box_1;
  VrmlData_Box_2: typeof VrmlData_Box_2;
  VrmlData_Color: typeof VrmlData_Color;
  VrmlData_Color_1: typeof VrmlData_Color_1;
  VrmlData_Color_2: typeof VrmlData_Color_2;
  VrmlData_Cone: typeof VrmlData_Cone;
  VrmlData_Cone_1: typeof VrmlData_Cone_1;
  VrmlData_Cone_2: typeof VrmlData_Cone_2;
  VrmlData_Coordinate: typeof VrmlData_Coordinate;
  VrmlData_Coordinate_1: typeof VrmlData_Coordinate_1;
  VrmlData_Coordinate_2: typeof VrmlData_Coordinate_2;
  VrmlData_Cylinder: typeof VrmlData_Cylinder;
  VrmlData_Cylinder_1: typeof VrmlData_Cylinder_1;
  VrmlData_Cylinder_2: typeof VrmlData_Cylinder_2;
  VrmlData_Faceted: typeof VrmlData_Faceted;
  VrmlData_Geometry: typeof VrmlData_Geometry;
  VrmlData_Group: typeof VrmlData_Group;
  VrmlData_Group_1: typeof VrmlData_Group_1;
  VrmlData_Group_2: typeof VrmlData_Group_2;
  VrmlData_ImageTexture: typeof VrmlData_ImageTexture;
  VrmlData_ImageTexture_1: typeof VrmlData_ImageTexture_1;
  VrmlData_ImageTexture_2: typeof VrmlData_ImageTexture_2;
  VrmlData_Material: typeof VrmlData_Material;
  VrmlData_Material_1: typeof VrmlData_Material_1;
  VrmlData_Material_2: typeof VrmlData_Material_2;
  VrmlData_Normal: typeof VrmlData_Normal;
  VrmlData_Normal_1: typeof VrmlData_Normal_1;
  VrmlData_Normal_2: typeof VrmlData_Normal_2;
  VrmlData_ShapeConvert: typeof VrmlData_ShapeConvert;
  VrmlData_ShapeNode: typeof VrmlData_ShapeNode;
  VrmlData_ShapeNode_1: typeof VrmlData_ShapeNode_1;
  VrmlData_ShapeNode_2: typeof VrmlData_ShapeNode_2;
  VrmlData_Sphere: typeof VrmlData_Sphere;
  VrmlData_Sphere_1: typeof VrmlData_Sphere_1;
  VrmlData_Sphere_2: typeof VrmlData_Sphere_2;
  VrmlData_Texture: typeof VrmlData_Texture;
  VrmlData_TextureCoordinate: typeof VrmlData_TextureCoordinate;
  VrmlData_TextureCoordinate_1: typeof VrmlData_TextureCoordinate_1;
  VrmlData_TextureCoordinate_2: typeof VrmlData_TextureCoordinate_2;
  VrmlData_TextureTransform: typeof VrmlData_TextureTransform;
  VrmlData_UnknownNode: typeof VrmlData_UnknownNode;
  VrmlData_UnknownNode_1: typeof VrmlData_UnknownNode_1;
  VrmlData_UnknownNode_2: typeof VrmlData_UnknownNode_2;
  VrmlData_WorldInfo: typeof VrmlData_WorldInfo;
  VrmlData_WorldInfo_1: typeof VrmlData_WorldInfo_1;
  VrmlData_WorldInfo_2: typeof VrmlData_WorldInfo_2;
  Vrml_AsciiText: typeof Vrml_AsciiText;
  Vrml_AsciiText_1: typeof Vrml_AsciiText_1;
  Vrml_AsciiText_2: typeof Vrml_AsciiText_2;
  Vrml_Cone: typeof Vrml_Cone;
  Vrml_Coordinate3: typeof Vrml_Coordinate3;
  Vrml_Coordinate3_1: typeof Vrml_Coordinate3_1;
  Vrml_Coordinate3_2: typeof Vrml_Coordinate3_2;
  Vrml_Cube: typeof Vrml_Cube;
  Vrml_Cylinder: typeof Vrml_Cylinder;
  Vrml_DirectionalLight: typeof Vrml_DirectionalLight;
  Vrml_DirectionalLight_1: typeof Vrml_DirectionalLight_1;
  Vrml_DirectionalLight_2: typeof Vrml_DirectionalLight_2;
  Vrml_FontStyle: typeof Vrml_FontStyle;
  Vrml_Group: typeof Vrml_Group;
  Vrml_IndexedFaceSet: typeof Vrml_IndexedFaceSet;
  Vrml_IndexedFaceSet_1: typeof Vrml_IndexedFaceSet_1;
  Vrml_IndexedFaceSet_2: typeof Vrml_IndexedFaceSet_2;
  Vrml_IndexedLineSet: typeof Vrml_IndexedLineSet;
  Vrml_IndexedLineSet_1: typeof Vrml_IndexedLineSet_1;
  Vrml_IndexedLineSet_2: typeof Vrml_IndexedLineSet_2;
  Vrml_Info: typeof Vrml_Info;
  Vrml_Instancing: typeof Vrml_Instancing;
  Vrml_LOD: typeof Vrml_LOD;
  Vrml_LOD_1: typeof Vrml_LOD_1;
  Vrml_LOD_2: typeof Vrml_LOD_2;
  Vrml_Material: typeof Vrml_Material;
  Vrml_Material_1: typeof Vrml_Material_1;
  Vrml_Material_2: typeof Vrml_Material_2;
  Vrml_MaterialBinding: typeof Vrml_MaterialBinding;
  Vrml_MaterialBinding_1: typeof Vrml_MaterialBinding_1;
  Vrml_MaterialBinding_2: typeof Vrml_MaterialBinding_2;
  Vrml_MatrixTransform: typeof Vrml_MatrixTransform;
  Vrml_MatrixTransform_1: typeof Vrml_MatrixTransform_1;
  Vrml_MatrixTransform_2: typeof Vrml_MatrixTransform_2;
  Vrml_Normal: typeof Vrml_Normal;
  Vrml_Normal_1: typeof Vrml_Normal_1;
  Vrml_Normal_2: typeof Vrml_Normal_2;
  Vrml_NormalBinding: typeof Vrml_NormalBinding;
  Vrml_NormalBinding_1: typeof Vrml_NormalBinding_1;
  Vrml_NormalBinding_2: typeof Vrml_NormalBinding_2;
  Vrml_OrthographicCamera: typeof Vrml_OrthographicCamera;
  Vrml_OrthographicCamera_1: typeof Vrml_OrthographicCamera_1;
  Vrml_OrthographicCamera_2: typeof Vrml_OrthographicCamera_2;
  Vrml_PerspectiveCamera: typeof Vrml_PerspectiveCamera;
  Vrml_PerspectiveCamera_1: typeof Vrml_PerspectiveCamera_1;
  Vrml_PerspectiveCamera_2: typeof Vrml_PerspectiveCamera_2;
  Vrml_PointLight: typeof Vrml_PointLight;
  Vrml_PointLight_1: typeof Vrml_PointLight_1;
  Vrml_PointLight_2: typeof Vrml_PointLight_2;
  Vrml_PointSet: typeof Vrml_PointSet;
  Vrml_Rotation: typeof Vrml_Rotation;
  Vrml_Rotation_1: typeof Vrml_Rotation_1;
  Vrml_Rotation_2: typeof Vrml_Rotation_2;
  Vrml_SFImage: typeof Vrml_SFImage;
  Vrml_SFImage_1: typeof Vrml_SFImage_1;
  Vrml_SFImage_2: typeof Vrml_SFImage_2;
  Vrml_SFRotation: typeof Vrml_SFRotation;
  Vrml_SFRotation_1: typeof Vrml_SFRotation_1;
  Vrml_SFRotation_2: typeof Vrml_SFRotation_2;
  Vrml_Scale: typeof Vrml_Scale;
  Vrml_Scale_1: typeof Vrml_Scale_1;
  Vrml_Scale_2: typeof Vrml_Scale_2;
  Vrml_Separator: typeof Vrml_Separator;
  Vrml_Separator_1: typeof Vrml_Separator_1;
  Vrml_Separator_2: typeof Vrml_Separator_2;
  Vrml_ShapeHints: typeof Vrml_ShapeHints;
  Vrml_Sphere: typeof Vrml_Sphere;
  Vrml_SpotLight: typeof Vrml_SpotLight;
  Vrml_SpotLight_1: typeof Vrml_SpotLight_1;
  Vrml_SpotLight_2: typeof Vrml_SpotLight_2;
  Vrml_Switch: typeof Vrml_Switch;
  Vrml_Texture2: typeof Vrml_Texture2;
  Vrml_Texture2_1: typeof Vrml_Texture2_1;
  Vrml_Texture2_2: typeof Vrml_Texture2_2;
  Vrml_Texture2Transform: typeof Vrml_Texture2Transform;
  Vrml_Texture2Transform_1: typeof Vrml_Texture2Transform_1;
  Vrml_Texture2Transform_2: typeof Vrml_Texture2Transform_2;
  Vrml_TextureCoordinate2: typeof Vrml_TextureCoordinate2;
  Vrml_TextureCoordinate2_1: typeof Vrml_TextureCoordinate2_1;
  Vrml_TextureCoordinate2_2: typeof Vrml_TextureCoordinate2_2;
  Vrml_Transform: typeof Vrml_Transform;
  Vrml_Transform_1: typeof Vrml_Transform_1;
  Vrml_Transform_2: typeof Vrml_Transform_2;
  Vrml_TransformSeparator: typeof Vrml_TransformSeparator;
  Vrml_Translation: typeof Vrml_Translation;
  Vrml_Translation_1: typeof Vrml_Translation_1;
  Vrml_Translation_2: typeof Vrml_Translation_2;
  Vrml_WWWAnchor: typeof Vrml_WWWAnchor;
  Vrml_WWWInline: typeof Vrml_WWWInline;
  Vrml_WWWInline_1: typeof Vrml_WWWInline_1;
  Vrml_WWWInline_2: typeof Vrml_WWWInline_2;
  WNT_ClassDefinitionError: typeof WNT_ClassDefinitionError;
  WNT_ClassDefinitionError_1: typeof WNT_ClassDefinitionError_1;
  WNT_ClassDefinitionError_2: typeof WNT_ClassDefinitionError_2;
  XCAFDimTolObjects_DatumObject: typeof XCAFDimTolObjects_DatumObject;
  XCAFDimTolObjects_DatumObject_1: typeof XCAFDimTolObjects_DatumObject_1;
  XCAFDimTolObjects_DatumObject_2: typeof XCAFDimTolObjects_DatumObject_2;
  XCAFDimTolObjects_DimensionObject: typeof XCAFDimTolObjects_DimensionObject;
  XCAFDimTolObjects_DimensionObject_1: typeof XCAFDimTolObjects_DimensionObject_1;
  XCAFDimTolObjects_DimensionObject_2: typeof XCAFDimTolObjects_DimensionObject_2;
  XCAFDimTolObjects_GeomToleranceObject: typeof XCAFDimTolObjects_GeomToleranceObject;
  XCAFDimTolObjects_GeomToleranceObject_1: typeof XCAFDimTolObjects_GeomToleranceObject_1;
  XCAFDimTolObjects_GeomToleranceObject_2: typeof XCAFDimTolObjects_GeomToleranceObject_2;
  XCAFDimTolObjects_Tool: typeof XCAFDimTolObjects_Tool;
  XCAFDoc: typeof XCAFDoc;
  XCAFDoc_Area: typeof XCAFDoc_Area;
  XCAFDoc_AssemblyItemId: typeof XCAFDoc_AssemblyItemId;
  XCAFDoc_AssemblyItemId_1: typeof XCAFDoc_AssemblyItemId_1;
  XCAFDoc_AssemblyItemId_2: typeof XCAFDoc_AssemblyItemId_2;
  XCAFDoc_AssemblyItemId_3: typeof XCAFDoc_AssemblyItemId_3;
  XCAFDoc_AssemblyItemRef: typeof XCAFDoc_AssemblyItemRef;
  XCAFDoc_Centroid: typeof XCAFDoc_Centroid;
  XCAFDoc_ClippingPlaneTool: typeof XCAFDoc_ClippingPlaneTool;
  XCAFDoc_Color: typeof XCAFDoc_Color;
  XCAFDoc_ColorTool: typeof XCAFDoc_ColorTool;
  XCAFDoc_Datum: typeof XCAFDoc_Datum;
  XCAFDoc_DimTol: typeof XCAFDoc_DimTol;
  XCAFDoc_DimTolTool: typeof XCAFDoc_DimTolTool;
  XCAFDoc_Dimension: typeof XCAFDoc_Dimension;
  XCAFDoc_DocumentTool: typeof XCAFDoc_DocumentTool;
  XCAFDoc_Editor: typeof XCAFDoc_Editor;
  XCAFDoc_GraphNode: typeof XCAFDoc_GraphNode;
  XCAFDoc_LayerTool: typeof XCAFDoc_LayerTool;
  XCAFDoc_Location: typeof XCAFDoc_Location;
  XCAFDoc_Material: typeof XCAFDoc_Material;
  XCAFDoc_MaterialTool: typeof XCAFDoc_MaterialTool;
  XCAFDoc_Note: typeof XCAFDoc_Note;
  XCAFDoc_NoteBalloon: typeof XCAFDoc_NoteBalloon;
  XCAFDoc_NoteBinData: typeof XCAFDoc_NoteBinData;
  XCAFDoc_NoteComment: typeof XCAFDoc_NoteComment;
  XCAFDoc_NotesTool: typeof XCAFDoc_NotesTool;
  XCAFDoc_ShapeMapTool: typeof XCAFDoc_ShapeMapTool;
  XCAFDoc_ShapeTool: typeof XCAFDoc_ShapeTool;
  XCAFDoc_View: typeof XCAFDoc_View;
  XCAFDoc_ViewTool: typeof XCAFDoc_ViewTool;
  XCAFDoc_VisMaterial: typeof XCAFDoc_VisMaterial;
  XCAFDoc_VisMaterialTool: typeof XCAFDoc_VisMaterialTool;
  XCAFDoc_Volume: typeof XCAFDoc_Volume;
  XCAFNoteObjects_NoteObject: typeof XCAFNoteObjects_NoteObject;
  XCAFNoteObjects_NoteObject_1: typeof XCAFNoteObjects_NoteObject_1;
  XCAFNoteObjects_NoteObject_2: typeof XCAFNoteObjects_NoteObject_2;
  XCAFPrs: typeof XCAFPrs;
  XCAFPrs_AISObject: typeof XCAFPrs_AISObject;
  XCAFPrs_DocumentExplorer: typeof XCAFPrs_DocumentExplorer;
  XCAFPrs_DocumentExplorer_1: typeof XCAFPrs_DocumentExplorer_1;
  XCAFPrs_DocumentExplorer_2: typeof XCAFPrs_DocumentExplorer_2;
  XCAFPrs_DocumentExplorer_3: typeof XCAFPrs_DocumentExplorer_3;
  XCAFPrs_DocumentIdIterator: typeof XCAFPrs_DocumentIdIterator;
  XCAFPrs_Driver: typeof XCAFPrs_Driver;
  XCAFPrs_Style: typeof XCAFPrs_Style;
  XCAFPrs_Texture: typeof XCAFPrs_Texture;
  XCAFView_Object: typeof XCAFView_Object;
  XCAFView_Object_1: typeof XCAFView_Object_1;
  XCAFView_Object_2: typeof XCAFView_Object_2;
  XSAlgo: typeof XSAlgo;
  XSAlgo_AlgoContainer: typeof XSAlgo_AlgoContainer;
  XSAlgo_ToolContainer: typeof XSAlgo_ToolContainer;
  XSControl: typeof XSControl;
  XSControl_ConnectedShapes: typeof XSControl_ConnectedShapes;
  XSControl_ConnectedShapes_1: typeof XSControl_ConnectedShapes_1;
  XSControl_ConnectedShapes_2: typeof XSControl_ConnectedShapes_2;
  XSControl_Controller: typeof XSControl_Controller;
  XSControl_FuncShape: typeof XSControl_FuncShape;
  XSControl_Functions: typeof XSControl_Functions;
  XSControl_Reader: typeof XSControl_Reader;
  XSControl_Reader_1: typeof XSControl_Reader_1;
  XSControl_Reader_2: typeof XSControl_Reader_2;
  XSControl_Reader_3: typeof XSControl_Reader_3;
  XSControl_SelectForTransfer: typeof XSControl_SelectForTransfer;
  XSControl_SelectForTransfer_1: typeof XSControl_SelectForTransfer_1;
  XSControl_SelectForTransfer_2: typeof XSControl_SelectForTransfer_2;
  XSControl_SignTransferStatus: typeof XSControl_SignTransferStatus;
  XSControl_SignTransferStatus_1: typeof XSControl_SignTransferStatus_1;
  XSControl_SignTransferStatus_2: typeof XSControl_SignTransferStatus_2;
  XSControl_TransferReader: typeof XSControl_TransferReader;
  XSControl_TransferWriter: typeof XSControl_TransferWriter;
  XSControl_Utils: typeof XSControl_Utils;
  XSControl_Vars: typeof XSControl_Vars;
  XSControl_WorkSession: typeof XSControl_WorkSession;
  XSControl_Writer: typeof XSControl_Writer;
  XSControl_Writer_1: typeof XSControl_Writer_1;
  XSControl_Writer_2: typeof XSControl_Writer_2;
  XSControl_Writer_3: typeof XSControl_Writer_3;
  XmlDrivers: typeof XmlDrivers;
  XmlDrivers_DocumentRetrievalDriver: typeof XmlDrivers_DocumentRetrievalDriver;
  XmlDrivers_DocumentStorageDriver: typeof XmlDrivers_DocumentStorageDriver;
  XmlLDrivers: typeof XmlLDrivers;
  XmlLDrivers_DocumentRetrievalDriver: typeof XmlLDrivers_DocumentRetrievalDriver;
  XmlLDrivers_DocumentStorageDriver: typeof XmlLDrivers_DocumentStorageDriver;
  XmlLDrivers_NamespaceDef: typeof XmlLDrivers_NamespaceDef;
  XmlLDrivers_NamespaceDef_1: typeof XmlLDrivers_NamespaceDef_1;
  XmlLDrivers_NamespaceDef_2: typeof XmlLDrivers_NamespaceDef_2;
  XmlMDF: typeof XmlMDF;
  XmlMDF_ADriver: typeof XmlMDF_ADriver;
  XmlMDF_ADriverTable: typeof XmlMDF_ADriverTable;
  XmlMDF_ReferenceDriver: typeof XmlMDF_ReferenceDriver;
  XmlMDF_TagSourceDriver: typeof XmlMDF_TagSourceDriver;
  XmlMDataStd: typeof XmlMDataStd;
  XmlMDataStd_AsciiStringDriver: typeof XmlMDataStd_AsciiStringDriver;
  XmlMDataStd_BooleanArrayDriver: typeof XmlMDataStd_BooleanArrayDriver;
  XmlMDataStd_BooleanListDriver: typeof XmlMDataStd_BooleanListDriver;
  XmlMDataStd_ByteArrayDriver: typeof XmlMDataStd_ByteArrayDriver;
  XmlMDataStd_CommentDriver: typeof XmlMDataStd_CommentDriver;
  XmlMDataStd_DirectoryDriver: typeof XmlMDataStd_DirectoryDriver;
  XmlMDataStd_ExpressionDriver: typeof XmlMDataStd_ExpressionDriver;
  XmlMDataStd_ExtStringArrayDriver: typeof XmlMDataStd_ExtStringArrayDriver;
  XmlMDataStd_ExtStringListDriver: typeof XmlMDataStd_ExtStringListDriver;
  XmlMDataStd_IntPackedMapDriver: typeof XmlMDataStd_IntPackedMapDriver;
  XmlMDataStd_IntegerArrayDriver: typeof XmlMDataStd_IntegerArrayDriver;
  XmlMDataStd_IntegerDriver: typeof XmlMDataStd_IntegerDriver;
  XmlMDataStd_IntegerListDriver: typeof XmlMDataStd_IntegerListDriver;
  XmlMDataStd_NameDriver: typeof XmlMDataStd_NameDriver;
  XmlMDataStd_NamedDataDriver: typeof XmlMDataStd_NamedDataDriver;
  XmlMDataStd_NoteBookDriver: typeof XmlMDataStd_NoteBookDriver;
  XmlMDataStd_RealArrayDriver: typeof XmlMDataStd_RealArrayDriver;
  XmlMDataStd_RealDriver: typeof XmlMDataStd_RealDriver;
  XmlMDataStd_RealListDriver: typeof XmlMDataStd_RealListDriver;
  XmlMDataStd_ReferenceArrayDriver: typeof XmlMDataStd_ReferenceArrayDriver;
  XmlMDataStd_ReferenceListDriver: typeof XmlMDataStd_ReferenceListDriver;
  XmlMDataStd_RelationDriver: typeof XmlMDataStd_RelationDriver;
  XmlMDataStd_TickDriver: typeof XmlMDataStd_TickDriver;
  XmlMDataStd_TreeNodeDriver: typeof XmlMDataStd_TreeNodeDriver;
  XmlMDataStd_UAttributeDriver: typeof XmlMDataStd_UAttributeDriver;
  XmlMDataStd_VariableDriver: typeof XmlMDataStd_VariableDriver;
  XmlMDataXtd: typeof XmlMDataXtd;
  XmlMDataXtd_AxisDriver: typeof XmlMDataXtd_AxisDriver;
  XmlMDataXtd_ConstraintDriver: typeof XmlMDataXtd_ConstraintDriver;
  XmlMDataXtd_GeometryDriver: typeof XmlMDataXtd_GeometryDriver;
  XmlMDataXtd_PatternStdDriver: typeof XmlMDataXtd_PatternStdDriver;
  XmlMDataXtd_PlacementDriver: typeof XmlMDataXtd_PlacementDriver;
  XmlMDataXtd_PlaneDriver: typeof XmlMDataXtd_PlaneDriver;
  XmlMDataXtd_PointDriver: typeof XmlMDataXtd_PointDriver;
  XmlMDataXtd_PositionDriver: typeof XmlMDataXtd_PositionDriver;
  XmlMDataXtd_PresentationDriver: typeof XmlMDataXtd_PresentationDriver;
  XmlMDataXtd_ShapeDriver: typeof XmlMDataXtd_ShapeDriver;
  XmlMDataXtd_TriangulationDriver: typeof XmlMDataXtd_TriangulationDriver;
  XmlMDocStd: typeof XmlMDocStd;
  XmlMDocStd_XLinkDriver: typeof XmlMDocStd_XLinkDriver;
  XmlMFunction: typeof XmlMFunction;
  XmlMFunction_FunctionDriver: typeof XmlMFunction_FunctionDriver;
  XmlMFunction_GraphNodeDriver: typeof XmlMFunction_GraphNodeDriver;
  XmlMFunction_ScopeDriver: typeof XmlMFunction_ScopeDriver;
  XmlMNaming: typeof XmlMNaming;
  XmlMNaming_NamedShapeDriver: typeof XmlMNaming_NamedShapeDriver;
  XmlMNaming_NamingDriver: typeof XmlMNaming_NamingDriver;
  XmlMNaming_Shape1: typeof XmlMNaming_Shape1;
  XmlMNaming_Shape1_1: typeof XmlMNaming_Shape1_1;
  XmlMNaming_Shape1_2: typeof XmlMNaming_Shape1_2;
  XmlMXCAFDoc: typeof XmlMXCAFDoc;
  XmlMXCAFDoc_AreaDriver: typeof XmlMXCAFDoc_AreaDriver;
  XmlMXCAFDoc_AssemblyItemRefDriver: typeof XmlMXCAFDoc_AssemblyItemRefDriver;
  XmlMXCAFDoc_CentroidDriver: typeof XmlMXCAFDoc_CentroidDriver;
  XmlMXCAFDoc_ClippingPlaneToolDriver: typeof XmlMXCAFDoc_ClippingPlaneToolDriver;
  XmlMXCAFDoc_ColorDriver: typeof XmlMXCAFDoc_ColorDriver;
  XmlMXCAFDoc_ColorToolDriver: typeof XmlMXCAFDoc_ColorToolDriver;
  XmlMXCAFDoc_DatumDriver: typeof XmlMXCAFDoc_DatumDriver;
  XmlMXCAFDoc_DimTolDriver: typeof XmlMXCAFDoc_DimTolDriver;
  XmlMXCAFDoc_DimTolToolDriver: typeof XmlMXCAFDoc_DimTolToolDriver;
  XmlMXCAFDoc_DocumentToolDriver: typeof XmlMXCAFDoc_DocumentToolDriver;
  XmlMXCAFDoc_GraphNodeDriver: typeof XmlMXCAFDoc_GraphNodeDriver;
  XmlMXCAFDoc_LayerToolDriver: typeof XmlMXCAFDoc_LayerToolDriver;
  XmlMXCAFDoc_LocationDriver: typeof XmlMXCAFDoc_LocationDriver;
  XmlMXCAFDoc_MaterialDriver: typeof XmlMXCAFDoc_MaterialDriver;
  XmlMXCAFDoc_MaterialToolDriver: typeof XmlMXCAFDoc_MaterialToolDriver;
  XmlMXCAFDoc_NoteBalloonDriver: typeof XmlMXCAFDoc_NoteBalloonDriver;
  XmlMXCAFDoc_NoteBinDataDriver: typeof XmlMXCAFDoc_NoteBinDataDriver;
  XmlMXCAFDoc_NoteCommentDriver: typeof XmlMXCAFDoc_NoteCommentDriver;
  XmlMXCAFDoc_NoteDriver: typeof XmlMXCAFDoc_NoteDriver;
  XmlMXCAFDoc_NotesToolDriver: typeof XmlMXCAFDoc_NotesToolDriver;
  XmlMXCAFDoc_ShapeToolDriver: typeof XmlMXCAFDoc_ShapeToolDriver;
  XmlMXCAFDoc_ViewToolDriver: typeof XmlMXCAFDoc_ViewToolDriver;
  XmlMXCAFDoc_VisMaterialDriver: typeof XmlMXCAFDoc_VisMaterialDriver;
  XmlMXCAFDoc_VisMaterialToolDriver: typeof XmlMXCAFDoc_VisMaterialToolDriver;
  XmlMXCAFDoc_VolumeDriver: typeof XmlMXCAFDoc_VolumeDriver;
  XmlObjMgt: typeof XmlObjMgt;
  XmlObjMgt_Array1: typeof XmlObjMgt_Array1;
  XmlObjMgt_Array1_1: typeof XmlObjMgt_Array1_1;
  XmlObjMgt_Array1_2: typeof XmlObjMgt_Array1_2;
  XmlObjMgt_GP: typeof XmlObjMgt_GP;
  XmlObjMgt_Persistent: typeof XmlObjMgt_Persistent;
  XmlObjMgt_Persistent_1: typeof XmlObjMgt_Persistent_1;
  XmlObjMgt_Persistent_2: typeof XmlObjMgt_Persistent_2;
  XmlObjMgt_Persistent_3: typeof XmlObjMgt_Persistent_3;
  XmlObjMgt_RRelocationTable: typeof XmlObjMgt_RRelocationTable;
  XmlObjMgt_SRelocationTable: typeof XmlObjMgt_SRelocationTable;
  XmlTObjDrivers: typeof XmlTObjDrivers;
  XmlTObjDrivers_DocumentRetrievalDriver: typeof XmlTObjDrivers_DocumentRetrievalDriver;
  XmlTObjDrivers_DocumentStorageDriver: typeof XmlTObjDrivers_DocumentStorageDriver;
  XmlTObjDrivers_IntSparseArrayDriver: typeof XmlTObjDrivers_IntSparseArrayDriver;
  XmlTObjDrivers_ModelDriver: typeof XmlTObjDrivers_ModelDriver;
  XmlTObjDrivers_ObjectDriver: typeof XmlTObjDrivers_ObjectDriver;
  XmlTObjDrivers_ReferenceDriver: typeof XmlTObjDrivers_ReferenceDriver;
  XmlTObjDrivers_XYZDriver: typeof XmlTObjDrivers_XYZDriver;
  XmlXCAFDrivers: typeof XmlXCAFDrivers;
  XmlXCAFDrivers_DocumentRetrievalDriver: typeof XmlXCAFDrivers_DocumentRetrievalDriver;
  XmlXCAFDrivers_DocumentStorageDriver: typeof XmlXCAFDrivers_DocumentStorageDriver;
  gce_MakeCirc: typeof gce_MakeCirc;
  gce_MakeCirc_1: typeof gce_MakeCirc_1;
  gce_MakeCirc_2: typeof gce_MakeCirc_2;
  gce_MakeCirc_3: typeof gce_MakeCirc_3;
  gce_MakeCirc_4: typeof gce_MakeCirc_4;
  gce_MakeCirc_5: typeof gce_MakeCirc_5;
  gce_MakeCirc_6: typeof gce_MakeCirc_6;
  gce_MakeCirc_7: typeof gce_MakeCirc_7;
  gce_MakeCirc_8: typeof gce_MakeCirc_8;
  gce_MakeCirc2d: typeof gce_MakeCirc2d;
  gce_MakeCirc2d_1: typeof gce_MakeCirc2d_1;
  gce_MakeCirc2d_2: typeof gce_MakeCirc2d_2;
  gce_MakeCirc2d_3: typeof gce_MakeCirc2d_3;
  gce_MakeCirc2d_4: typeof gce_MakeCirc2d_4;
  gce_MakeCirc2d_5: typeof gce_MakeCirc2d_5;
  gce_MakeCirc2d_6: typeof gce_MakeCirc2d_6;
  gce_MakeCirc2d_7: typeof gce_MakeCirc2d_7;
  gce_MakeCone: typeof gce_MakeCone;
  gce_MakeCone_1: typeof gce_MakeCone_1;
  gce_MakeCone_2: typeof gce_MakeCone_2;
  gce_MakeCone_3: typeof gce_MakeCone_3;
  gce_MakeCone_4: typeof gce_MakeCone_4;
  gce_MakeCone_5: typeof gce_MakeCone_5;
  gce_MakeCone_6: typeof gce_MakeCone_6;
  gce_MakeCone_7: typeof gce_MakeCone_7;
  gce_MakeCylinder: typeof gce_MakeCylinder;
  gce_MakeCylinder_1: typeof gce_MakeCylinder_1;
  gce_MakeCylinder_2: typeof gce_MakeCylinder_2;
  gce_MakeCylinder_3: typeof gce_MakeCylinder_3;
  gce_MakeCylinder_4: typeof gce_MakeCylinder_4;
  gce_MakeCylinder_5: typeof gce_MakeCylinder_5;
  gce_MakeCylinder_6: typeof gce_MakeCylinder_6;
  gce_MakeDir: typeof gce_MakeDir;
  gce_MakeDir_1: typeof gce_MakeDir_1;
  gce_MakeDir_2: typeof gce_MakeDir_2;
  gce_MakeDir_3: typeof gce_MakeDir_3;
  gce_MakeDir_4: typeof gce_MakeDir_4;
  gce_MakeDir2d: typeof gce_MakeDir2d;
  gce_MakeDir2d_1: typeof gce_MakeDir2d_1;
  gce_MakeDir2d_2: typeof gce_MakeDir2d_2;
  gce_MakeDir2d_3: typeof gce_MakeDir2d_3;
  gce_MakeDir2d_4: typeof gce_MakeDir2d_4;
  gce_MakeElips: typeof gce_MakeElips;
  gce_MakeElips_1: typeof gce_MakeElips_1;
  gce_MakeElips_2: typeof gce_MakeElips_2;
  gce_MakeElips2d: typeof gce_MakeElips2d;
  gce_MakeElips2d_1: typeof gce_MakeElips2d_1;
  gce_MakeElips2d_2: typeof gce_MakeElips2d_2;
  gce_MakeElips2d_3: typeof gce_MakeElips2d_3;
  gce_MakeHypr: typeof gce_MakeHypr;
  gce_MakeHypr_1: typeof gce_MakeHypr_1;
  gce_MakeHypr_2: typeof gce_MakeHypr_2;
  gce_MakeHypr2d: typeof gce_MakeHypr2d;
  gce_MakeHypr2d_1: typeof gce_MakeHypr2d_1;
  gce_MakeHypr2d_2: typeof gce_MakeHypr2d_2;
  gce_MakeHypr2d_3: typeof gce_MakeHypr2d_3;
  gce_MakeLin: typeof gce_MakeLin;
  gce_MakeLin_1: typeof gce_MakeLin_1;
  gce_MakeLin_2: typeof gce_MakeLin_2;
  gce_MakeLin_3: typeof gce_MakeLin_3;
  gce_MakeLin_4: typeof gce_MakeLin_4;
  gce_MakeLin2d: typeof gce_MakeLin2d;
  gce_MakeLin2d_1: typeof gce_MakeLin2d_1;
  gce_MakeLin2d_2: typeof gce_MakeLin2d_2;
  gce_MakeLin2d_3: typeof gce_MakeLin2d_3;
  gce_MakeLin2d_4: typeof gce_MakeLin2d_4;
  gce_MakeLin2d_5: typeof gce_MakeLin2d_5;
  gce_MakeLin2d_6: typeof gce_MakeLin2d_6;
  gce_MakeMirror: typeof gce_MakeMirror;
  gce_MakeMirror_1: typeof gce_MakeMirror_1;
  gce_MakeMirror_2: typeof gce_MakeMirror_2;
  gce_MakeMirror_3: typeof gce_MakeMirror_3;
  gce_MakeMirror_4: typeof gce_MakeMirror_4;
  gce_MakeMirror_5: typeof gce_MakeMirror_5;
  gce_MakeMirror_6: typeof gce_MakeMirror_6;
  gce_MakeMirror2d: typeof gce_MakeMirror2d;
  gce_MakeMirror2d_1: typeof gce_MakeMirror2d_1;
  gce_MakeMirror2d_2: typeof gce_MakeMirror2d_2;
  gce_MakeMirror2d_3: typeof gce_MakeMirror2d_3;
  gce_MakeMirror2d_4: typeof gce_MakeMirror2d_4;
  gce_MakeParab: typeof gce_MakeParab;
  gce_MakeParab_1: typeof gce_MakeParab_1;
  gce_MakeParab_2: typeof gce_MakeParab_2;
  gce_MakeParab2d: typeof gce_MakeParab2d;
  gce_MakeParab2d_1: typeof gce_MakeParab2d_1;
  gce_MakeParab2d_2: typeof gce_MakeParab2d_2;
  gce_MakeParab2d_3: typeof gce_MakeParab2d_3;
  gce_MakeParab2d_4: typeof gce_MakeParab2d_4;
  gce_MakePln: typeof gce_MakePln;
  gce_MakePln_1: typeof gce_MakePln_1;
  gce_MakePln_2: typeof gce_MakePln_2;
  gce_MakePln_3: typeof gce_MakePln_3;
  gce_MakePln_4: typeof gce_MakePln_4;
  gce_MakePln_5: typeof gce_MakePln_5;
  gce_MakePln_6: typeof gce_MakePln_6;
  gce_MakePln_7: typeof gce_MakePln_7;
  gce_MakePln_8: typeof gce_MakePln_8;
  gce_MakeRotation: typeof gce_MakeRotation;
  gce_MakeRotation_1: typeof gce_MakeRotation_1;
  gce_MakeRotation_2: typeof gce_MakeRotation_2;
  gce_MakeRotation_3: typeof gce_MakeRotation_3;
  gce_MakeRotation2d: typeof gce_MakeRotation2d;
  gce_MakeScale: typeof gce_MakeScale;
  gce_MakeScale2d: typeof gce_MakeScale2d;
  gce_MakeTranslation: typeof gce_MakeTranslation;
  gce_MakeTranslation_1: typeof gce_MakeTranslation_1;
  gce_MakeTranslation_2: typeof gce_MakeTranslation_2;
  gce_MakeTranslation2d: typeof gce_MakeTranslation2d;
  gce_MakeTranslation2d_1: typeof gce_MakeTranslation2d_1;
  gce_MakeTranslation2d_2: typeof gce_MakeTranslation2d_2;
  gce_Root: typeof gce_Root;
  gp: typeof gp;
  gp_Ax1: typeof gp_Ax1;
  gp_Ax1_1: typeof gp_Ax1_1;
  gp_Ax1_2: typeof gp_Ax1_2;
  gp_Ax2: typeof gp_Ax2;
  gp_Ax2_1: typeof gp_Ax2_1;
  gp_Ax2_2: typeof gp_Ax2_2;
  gp_Ax2_3: typeof gp_Ax2_3;
  gp_Ax22d: typeof gp_Ax22d;
  gp_Ax22d_1: typeof gp_Ax22d_1;
  gp_Ax22d_2: typeof gp_Ax22d_2;
  gp_Ax22d_3: typeof gp_Ax22d_3;
  gp_Ax22d_4: typeof gp_Ax22d_4;
  gp_Ax2d: typeof gp_Ax2d;
  gp_Ax2d_1: typeof gp_Ax2d_1;
  gp_Ax2d_2: typeof gp_Ax2d_2;
  gp_Ax3: typeof gp_Ax3;
  gp_Ax3_1: typeof gp_Ax3_1;
  gp_Ax3_2: typeof gp_Ax3_2;
  gp_Ax3_3: typeof gp_Ax3_3;
  gp_Ax3_4: typeof gp_Ax3_4;
  gp_Circ: typeof gp_Circ;
  gp_Circ_1: typeof gp_Circ_1;
  gp_Circ_2: typeof gp_Circ_2;
  gp_Circ2d: typeof gp_Circ2d;
  gp_Circ2d_1: typeof gp_Circ2d_1;
  gp_Circ2d_2: typeof gp_Circ2d_2;
  gp_Circ2d_3: typeof gp_Circ2d_3;
  gp_Cone: typeof gp_Cone;
  gp_Cone_1: typeof gp_Cone_1;
  gp_Cone_2: typeof gp_Cone_2;
  gp_Cylinder: typeof gp_Cylinder;
  gp_Cylinder_1: typeof gp_Cylinder_1;
  gp_Cylinder_2: typeof gp_Cylinder_2;
  gp_Dir: typeof gp_Dir;
  gp_Dir_1: typeof gp_Dir_1;
  gp_Dir_2: typeof gp_Dir_2;
  gp_Dir_3: typeof gp_Dir_3;
  gp_Dir_4: typeof gp_Dir_4;
  gp_Dir2d: typeof gp_Dir2d;
  gp_Dir2d_1: typeof gp_Dir2d_1;
  gp_Dir2d_2: typeof gp_Dir2d_2;
  gp_Dir2d_3: typeof gp_Dir2d_3;
  gp_Dir2d_4: typeof gp_Dir2d_4;
  gp_Elips: typeof gp_Elips;
  gp_Elips_1: typeof gp_Elips_1;
  gp_Elips_2: typeof gp_Elips_2;
  gp_Elips2d: typeof gp_Elips2d;
  gp_Elips2d_1: typeof gp_Elips2d_1;
  gp_Elips2d_2: typeof gp_Elips2d_2;
  gp_Elips2d_3: typeof gp_Elips2d_3;
  gp_GTrsf: typeof gp_GTrsf;
  gp_GTrsf_1: typeof gp_GTrsf_1;
  gp_GTrsf_2: typeof gp_GTrsf_2;
  gp_GTrsf_3: typeof gp_GTrsf_3;
  gp_GTrsf2d: typeof gp_GTrsf2d;
  gp_GTrsf2d_1: typeof gp_GTrsf2d_1;
  gp_GTrsf2d_2: typeof gp_GTrsf2d_2;
  gp_GTrsf2d_3: typeof gp_GTrsf2d_3;
  gp_Hypr: typeof gp_Hypr;
  gp_Hypr_1: typeof gp_Hypr_1;
  gp_Hypr_2: typeof gp_Hypr_2;
  gp_Hypr2d: typeof gp_Hypr2d;
  gp_Hypr2d_1: typeof gp_Hypr2d_1;
  gp_Hypr2d_2: typeof gp_Hypr2d_2;
  gp_Hypr2d_3: typeof gp_Hypr2d_3;
  gp_Lin: typeof gp_Lin;
  gp_Lin_1: typeof gp_Lin_1;
  gp_Lin_2: typeof gp_Lin_2;
  gp_Lin_3: typeof gp_Lin_3;
  gp_Lin2d: typeof gp_Lin2d;
  gp_Lin2d_1: typeof gp_Lin2d_1;
  gp_Lin2d_2: typeof gp_Lin2d_2;
  gp_Lin2d_3: typeof gp_Lin2d_3;
  gp_Lin2d_4: typeof gp_Lin2d_4;
  gp_Mat: typeof gp_Mat;
  gp_Mat_1: typeof gp_Mat_1;
  gp_Mat_2: typeof gp_Mat_2;
  gp_Mat_3: typeof gp_Mat_3;
  gp_Mat2d: typeof gp_Mat2d;
  gp_Mat2d_1: typeof gp_Mat2d_1;
  gp_Mat2d_2: typeof gp_Mat2d_2;
  gp_Parab: typeof gp_Parab;
  gp_Parab_1: typeof gp_Parab_1;
  gp_Parab_2: typeof gp_Parab_2;
  gp_Parab_3: typeof gp_Parab_3;
  gp_Parab2d: typeof gp_Parab2d;
  gp_Parab2d_1: typeof gp_Parab2d_1;
  gp_Parab2d_2: typeof gp_Parab2d_2;
  gp_Parab2d_3: typeof gp_Parab2d_3;
  gp_Parab2d_4: typeof gp_Parab2d_4;
  gp_Pln: typeof gp_Pln;
  gp_Pln_1: typeof gp_Pln_1;
  gp_Pln_2: typeof gp_Pln_2;
  gp_Pln_3: typeof gp_Pln_3;
  gp_Pln_4: typeof gp_Pln_4;
  gp_Pnt: typeof gp_Pnt;
  gp_Pnt_1: typeof gp_Pnt_1;
  gp_Pnt_2: typeof gp_Pnt_2;
  gp_Pnt_3: typeof gp_Pnt_3;
  gp_Pnt2d: typeof gp_Pnt2d;
  gp_Pnt2d_1: typeof gp_Pnt2d_1;
  gp_Pnt2d_2: typeof gp_Pnt2d_2;
  gp_Pnt2d_3: typeof gp_Pnt2d_3;
  gp_Quaternion: typeof gp_Quaternion;
  gp_Quaternion_1: typeof gp_Quaternion_1;
  gp_Quaternion_2: typeof gp_Quaternion_2;
  gp_Quaternion_3: typeof gp_Quaternion_3;
  gp_Quaternion_4: typeof gp_Quaternion_4;
  gp_Quaternion_5: typeof gp_Quaternion_5;
  gp_Quaternion_6: typeof gp_Quaternion_6;
  gp_Quaternion_7: typeof gp_Quaternion_7;
  gp_QuaternionNLerp: typeof gp_QuaternionNLerp;
  gp_QuaternionNLerp_1: typeof gp_QuaternionNLerp_1;
  gp_QuaternionNLerp_2: typeof gp_QuaternionNLerp_2;
  gp_QuaternionSLerp: typeof gp_QuaternionSLerp;
  gp_QuaternionSLerp_1: typeof gp_QuaternionSLerp_1;
  gp_QuaternionSLerp_2: typeof gp_QuaternionSLerp_2;
  gp_Sphere: typeof gp_Sphere;
  gp_Sphere_1: typeof gp_Sphere_1;
  gp_Sphere_2: typeof gp_Sphere_2;
  gp_Torus: typeof gp_Torus;
  gp_Torus_1: typeof gp_Torus_1;
  gp_Torus_2: typeof gp_Torus_2;
  gp_Trsf: typeof gp_Trsf;
  gp_Trsf_1: typeof gp_Trsf_1;
  gp_Trsf_2: typeof gp_Trsf_2;
  gp_Trsf2d: typeof gp_Trsf2d;
  gp_Trsf2d_1: typeof gp_Trsf2d_1;
  gp_Trsf2d_2: typeof gp_Trsf2d_2;
  gp_Vec: typeof gp_Vec;
  gp_Vec_1: typeof gp_Vec_1;
  gp_Vec_2: typeof gp_Vec_2;
  gp_Vec_3: typeof gp_Vec_3;
  gp_Vec_4: typeof gp_Vec_4;
  gp_Vec_5: typeof gp_Vec_5;
  gp_Vec2d: typeof gp_Vec2d;
  gp_Vec2d_1: typeof gp_Vec2d_1;
  gp_Vec2d_2: typeof gp_Vec2d_2;
  gp_Vec2d_3: typeof gp_Vec2d_3;
  gp_Vec2d_4: typeof gp_Vec2d_4;
  gp_Vec2d_5: typeof gp_Vec2d_5;
  gp_XY: typeof gp_XY;
  gp_XY_1: typeof gp_XY_1;
  gp_XY_2: typeof gp_XY_2;
  gp_XYZ: typeof gp_XYZ;
  gp_XYZ_1: typeof gp_XYZ_1;
  gp_XYZ_2: typeof gp_XYZ_2;
  math: typeof math;
  math_BFGS: typeof math_BFGS;
  math_BissecNewton: typeof math_BissecNewton;
  math_BracketMinimum: typeof math_BracketMinimum;
  math_BracketMinimum_1: typeof math_BracketMinimum_1;
  math_BracketMinimum_2: typeof math_BracketMinimum_2;
  math_BracketMinimum_3: typeof math_BracketMinimum_3;
  math_BracketMinimum_4: typeof math_BracketMinimum_4;
  math_BracketedRoot: typeof math_BracketedRoot;
  math_BrentMinimum: typeof math_BrentMinimum;
  math_BrentMinimum_1: typeof math_BrentMinimum_1;
  math_BrentMinimum_2: typeof math_BrentMinimum_2;
  math_BullardGenerator: typeof math_BullardGenerator;
  math_ComputeGaussPointsAndWeights: typeof math_ComputeGaussPointsAndWeights;
  math_ComputeKronrodPointsAndWeights: typeof math_ComputeKronrodPointsAndWeights;
  math_Crout: typeof math_Crout;
  math_DirectPolynomialRoots: typeof math_DirectPolynomialRoots;
  math_DirectPolynomialRoots_1: typeof math_DirectPolynomialRoots_1;
  math_DirectPolynomialRoots_2: typeof math_DirectPolynomialRoots_2;
  math_DirectPolynomialRoots_3: typeof math_DirectPolynomialRoots_3;
  math_DirectPolynomialRoots_4: typeof math_DirectPolynomialRoots_4;
  math_DoubleTab: typeof math_DoubleTab;
  math_DoubleTab_1: typeof math_DoubleTab_1;
  math_DoubleTab_2: typeof math_DoubleTab_2;
  math_DoubleTab_3: typeof math_DoubleTab_3;
  math_EigenValuesSearcher: typeof math_EigenValuesSearcher;
  math_FRPR: typeof math_FRPR;
  math_Function: typeof math_Function;
  math_FunctionAllRoots: typeof math_FunctionAllRoots;
  math_FunctionRoot: typeof math_FunctionRoot;
  math_FunctionRoot_1: typeof math_FunctionRoot_1;
  math_FunctionRoot_2: typeof math_FunctionRoot_2;
  math_FunctionRoots: typeof math_FunctionRoots;
  math_FunctionSample: typeof math_FunctionSample;
  math_FunctionSet: typeof math_FunctionSet;
  math_FunctionSetRoot: typeof math_FunctionSetRoot;
  math_FunctionSetRoot_1: typeof math_FunctionSetRoot_1;
  math_FunctionSetRoot_2: typeof math_FunctionSetRoot_2;
  math_FunctionSetWithDerivatives: typeof math_FunctionSetWithDerivatives;
  math_FunctionWithDerivative: typeof math_FunctionWithDerivative;
  math_Gauss: typeof math_Gauss;
  math_GaussLeastSquare: typeof math_GaussLeastSquare;
  math_GaussMultipleIntegration: typeof math_GaussMultipleIntegration;
  math_GaussSetIntegration: typeof math_GaussSetIntegration;
  math_GaussSingleIntegration: typeof math_GaussSingleIntegration;
  math_GaussSingleIntegration_1: typeof math_GaussSingleIntegration_1;
  math_GaussSingleIntegration_2: typeof math_GaussSingleIntegration_2;
  math_GaussSingleIntegration_3: typeof math_GaussSingleIntegration_3;
  math_GlobOptMin: typeof math_GlobOptMin;
  math_Jacobi: typeof math_Jacobi;
  math_KronrodSingleIntegration: typeof math_KronrodSingleIntegration;
  math_KronrodSingleIntegration_1: typeof math_KronrodSingleIntegration_1;
  math_KronrodSingleIntegration_2: typeof math_KronrodSingleIntegration_2;
  math_KronrodSingleIntegration_3: typeof math_KronrodSingleIntegration_3;
  math_MultipleVarFunction: typeof math_MultipleVarFunction;
  math_MultipleVarFunctionWithGradient: typeof math_MultipleVarFunctionWithGradient;
  math_MultipleVarFunctionWithHessian: typeof math_MultipleVarFunctionWithHessian;
  math_NewtonFunctionRoot: typeof math_NewtonFunctionRoot;
  math_NewtonFunctionRoot_1: typeof math_NewtonFunctionRoot_1;
  math_NewtonFunctionRoot_2: typeof math_NewtonFunctionRoot_2;
  math_NewtonFunctionRoot_3: typeof math_NewtonFunctionRoot_3;
  math_NotSquare: typeof math_NotSquare;
  math_NotSquare_1: typeof math_NotSquare_1;
  math_NotSquare_2: typeof math_NotSquare_2;
  math_PSO: typeof math_PSO;
  math_PSOParticlesPool: typeof math_PSOParticlesPool;
  math_Powell: typeof math_Powell;
  math_SVD: typeof math_SVD;
  math_SingularMatrix: typeof math_SingularMatrix;
  math_SingularMatrix_1: typeof math_SingularMatrix_1;
  math_SingularMatrix_2: typeof math_SingularMatrix_2;
  math_TrigonometricEquationFunction: typeof math_TrigonometricEquationFunction;
  math_TrigonometricFunctionRoots: typeof math_TrigonometricFunctionRoots;
  math_TrigonometricFunctionRoots_1: typeof math_TrigonometricFunctionRoots_1;
  math_TrigonometricFunctionRoots_2: typeof math_TrigonometricFunctionRoots_2;
  math_TrigonometricFunctionRoots_3: typeof math_TrigonometricFunctionRoots_3;
  math_Uzawa: typeof math_Uzawa;
  math_Uzawa_1: typeof math_Uzawa_1;
  math_Uzawa_2: typeof math_Uzawa_2;
  math_ValueAndWeight: typeof math_ValueAndWeight;
  math_ValueAndWeight_1: typeof math_ValueAndWeight_1;
  math_ValueAndWeight_2: typeof math_ValueAndWeight_2;
}

class APIHeaderSection_EditHeader extends IFSelect_Editor {
}

/**
 * This class allows to consult and prepare/edit data stored in a Step Model Header
 */
class APIHeaderSection_MakeHeader {
}

class APIHeaderSection_MakeHeader_1 extends APIHeaderSection_MakeHeader {}

class APIHeaderSection_MakeHeader_2 extends APIHeaderSection_MakeHeader {}

/**
 * Root class for 2D curves on which geometric algorithms work. An adapted curve is an interface between the services provided by a curve, and those required of the curve by algorithms, which use it. A derived concrete class is provided: Geom2dAdaptor_Curve for a curve from the Geom2d package.
 */
class Adaptor2d_Curve2d {
}

/**
 * Root class for 2D curves manipulated by handles, on which geometric algorithms work. An adapted curve is an interface between the services provided by a curve, and those required of the curve by algorithms, which use it. A derived specific class is provided: Geom2dAdaptor_HCurve for a curve from the Geom2d package.
 */
class Adaptor2d_HCurve2d extends Standard_Transient {
}

class Adaptor2d_HLine2d extends Adaptor2d_HCurve2d {
}

class Adaptor2d_HLine2d_1 extends Adaptor2d_HLine2d {}

class Adaptor2d_HLine2d_2 extends Adaptor2d_HLine2d {}

class Adaptor2d_HOffsetCurve extends Adaptor2d_HCurve2d {
}

class Adaptor2d_HOffsetCurve_1 extends Adaptor2d_HOffsetCurve {}

class Adaptor2d_HOffsetCurve_2 extends Adaptor2d_HOffsetCurve {}

/**
 * Use by the TopolTool to trim a surface.
 */
class Adaptor2d_Line2d extends Adaptor2d_Curve2d {
}

class Adaptor2d_Line2d_1 extends Adaptor2d_Line2d {}

class Adaptor2d_Line2d_2 extends Adaptor2d_Line2d {}

/**
 * Defines an Offset curve (algorithmic 2d curve).
 */
class Adaptor2d_OffsetCurve extends Adaptor2d_Curve2d {
}

class Adaptor2d_OffsetCurve_1 extends Adaptor2d_OffsetCurve {}

class Adaptor2d_OffsetCurve_2 extends Adaptor2d_OffsetCurve {}

class Adaptor2d_OffsetCurve_3 extends Adaptor2d_OffsetCurve {}

class Adaptor2d_OffsetCurve_4 extends Adaptor2d_OffsetCurve {}

/**
 * Root class for 3D curves on which geometric algorithms work. An adapted curve is an interface between the services provided by a curve and those required of the curve by algorithms which use it. Two derived concrete classes are provided: - GeomAdaptor_Curve for a curve from the Geom package - Adaptor3d_CurveOnSurface for a curve lying on a surface from the Geom package.
 */
class Adaptor3d_Curve {
}

/**
 * An interface between the services provided by a curve lying on a surface from the package Geom and those required of the curve by algorithms which use it. The curve is defined as a 2D curve from the Geom2d package, in the parametric space of the surface.
 */
class Adaptor3d_CurveOnSurface extends Adaptor3d_Curve {
}

class Adaptor3d_CurveOnSurface_1 extends Adaptor3d_CurveOnSurface {}

class Adaptor3d_CurveOnSurface_2 extends Adaptor3d_CurveOnSurface {}

class Adaptor3d_CurveOnSurface_3 extends Adaptor3d_CurveOnSurface {}

/**
 * Root class for 3D curves manipulated by handles, on which geometric algorithms work. An adapted curve is an interface between the services provided by a curve and those required of the curve by algorithms which use it. Two derived concrete classes are provided: - GeomAdaptor_HCurve for a curve from the Geom package - Adaptor3d_HCurveOnSurface for a curve lying on a surface from the Geom package.
 */
class Adaptor3d_HCurve extends Standard_Transient {
}

class Adaptor3d_HCurveOnSurface extends Adaptor3d_HCurve {
}

class Adaptor3d_HCurveOnSurface_1 extends Adaptor3d_HCurveOnSurface {}

class Adaptor3d_HCurveOnSurface_2 extends Adaptor3d_HCurveOnSurface {}

class Adaptor3d_HIsoCurve extends Adaptor3d_HCurve {
}

class Adaptor3d_HIsoCurve_1 extends Adaptor3d_HIsoCurve {}

class Adaptor3d_HIsoCurve_2 extends Adaptor3d_HIsoCurve {}

/**
 * Root class for surfaces manipulated by handles, on which geometric algorithms work. An adapted surface is an interface between the services provided by a surface and those required of the surface by algorithms which use it. A derived concrete class is provided: GeomAdaptor_HSurface for a surface from the Geom package.
 */
class Adaptor3d_HSurface extends Standard_Transient {
}

class Adaptor3d_HSurfaceTool {
}

class Adaptor3d_HVertex extends Standard_Transient {
}

class Adaptor3d_HVertex_1 extends Adaptor3d_HVertex {}

class Adaptor3d_HVertex_2 extends Adaptor3d_HVertex {}

/**
 * Used to find the points U(t) = U0 or V(t) = V0 in order to determine the Cn discontinuities of an Adpator_CurveOnSurface relativly to the discontinuities of the surface. Used to find the roots of the functions
 */
class Adaptor3d_InterFunc extends math_FunctionWithDerivative {
}

/**
 * Defines an isoparametric curve on a surface. The type of isoparametric curve (U or V) is defined with the enumeration IsoType from GeomAbs if NoneIso is given an error is raised.
 */
class Adaptor3d_IsoCurve extends Adaptor3d_Curve {
}

class Adaptor3d_IsoCurve_1 extends Adaptor3d_IsoCurve {}

class Adaptor3d_IsoCurve_2 extends Adaptor3d_IsoCurve {}

class Adaptor3d_IsoCurve_3 extends Adaptor3d_IsoCurve {}

class Adaptor3d_IsoCurve_4 extends Adaptor3d_IsoCurve {}

/**
 * Root class for surfaces on which geometric algorithms work. An adapted surface is an interface between the services provided by a surface and those required of the surface by algorithms which use it. A derived concrete class is provided: GeomAdaptor_Surface for a surface from the Geom package. The Surface class describes the standard behaviour of a surface for generic algorithms.
 */
class Adaptor3d_Surface {
}

/**
 * This class provides a default topological tool, based on the Umin,Vmin,Umax,Vmax of an HSurface from Adaptor3d. All methods and fields may be redefined when inheriting from this class. This class is used to instantiate algorithmes as Intersection, outlines,...
 */
class Adaptor3d_TopolTool extends Standard_Transient {
}

class Adaptor3d_TopolTool_1 extends Adaptor3d_TopolTool {}

class Adaptor3d_TopolTool_2 extends Adaptor3d_TopolTool {}

/**
 * Perform the approximation of <Func> F(U,V) Arguments are : Num1DSS, Num2DSS, Num3DSS :The numbers of 1,2,3 dimensional subspaces OneDTol, TwoDTol, ThreeDTol: The tolerance of approximation in each subspaces OneDTolFr, TwoDTolFr, ThreeDTolFr: The tolerance of approximation on the boundarys in each subspaces [FirstInU, LastInU]: The Bounds in U of the Approximation [FirstInV, LastInV]: The Bounds in V of the Approximation FavorIso : Give preference to extract u-iso or v-iso on F(U,V) This can be usefull to optimize the <Func> methode ContInU, ContInV : Continuity waiting in u and v PrecisCode : Precision on approximation's error mesurement 1 : Fast computation and average precision 2 : Average computation and good precision 3 : Slow computation and very good precision MaxDegInU : Maximum u-degree waiting in U MaxDegInV : Maximum u-degree waiting in V Warning: MaxDegInU (resp. MaxDegInV) must be >= 2*iu (resp. iv) + 1, where iu (resp. iv) = 0 if ContInU (resp. ContInV) = GeomAbs_C0, = 1 if = GeomAbs_C1, = 2 if = GeomAbs_C2. MaxPatch : Maximun number of Patch waiting number of Patch is number of u span * number of v span Func : The external method to evaluate F(U,V) Crit : To (re)defined condition of convergence UChoice, VChoice : To define the way in U (or V) Knot insertion Warning: for the moment, the result is a 3D Surface so Num1DSS and Num2DSS must be equals to 0 and Num3DSS must be equal to 1. Warning: the Function of type EvaluatorFunc2Var from Approx must be a subclass of AdvApp2Var_EvaluatorFunc2Var
 */
class AdvApp2Var_ApproxAFunc2Var {
}

class AdvApp2Var_ApproxAFunc2Var_1 extends AdvApp2Var_ApproxAFunc2Var {}

class AdvApp2Var_ApproxAFunc2Var_2 extends AdvApp2Var_ApproxAFunc2Var {}

class AdvApp2Var_ApproxF2var {
}

/**
 * contains all the parameters for approximation ( tolerancy, computing option, ...)
 */
class AdvApp2Var_Context {
}

class AdvApp2Var_Context_1 extends AdvApp2Var_Context {}

class AdvApp2Var_Context_2 extends AdvApp2Var_Context {}

/**
 * this class contains a given criterion to be satisfied
 */
class AdvApp2Var_Criterion {
}

/**
 * /
 */
class AdvApp2Var_Data {
}

class AdvApp2Var_EvaluatorFunc2Var {
}

class AdvApp2Var_MathBase {
}

/**
 * used to store constraints on a (Ui,Vj) point
 */
class AdvApp2Var_Node {
}

class AdvApp2Var_Node_1 extends AdvApp2Var_Node {}

class AdvApp2Var_Node_2 extends AdvApp2Var_Node {}

class AdvApp2Var_Node_3 extends AdvApp2Var_Node {}

/**
 * used to store results on a domain [Ui,Ui+1]x[Vj,Vj+1]
 */
class AdvApp2Var_Patch {
}

class AdvApp2Var_Patch_1 extends AdvApp2Var_Patch {}

class AdvApp2Var_Patch_2 extends AdvApp2Var_Patch {}

class AdvApp2Var_SysBase {
}

/**
 * this approximate a given function
 */
class AdvApprox_ApproxAFunction {
}

class AdvApprox_ApproxAFunction_1 extends AdvApprox_ApproxAFunction {}

class AdvApprox_ApproxAFunction_2 extends AdvApprox_ApproxAFunction {}

/**
 * to choose the way of cutting in approximation
 */
class AdvApprox_Cutting {
}

/**
 * if Cutting is necessary in [a,b], we cut at (a+b) / 2.
 */
class AdvApprox_DichoCutting extends AdvApprox_Cutting {
}

/**
 * Interface for a class implementing a function to be approximated by AdvApprox_ApproxAFunction
 */
class AdvApprox_EvaluatorFunction {
}

/**
 * inherits class Cutting; contains a list of preferential points (pi)i and a list of Recommended points used in cutting management. if Cutting is necessary in [a,b], we cut at the di nearest from (a+b)/2
 */
class AdvApprox_PrefAndRec extends AdvApprox_Cutting {
}

/**
 * inherits class Cutting; contains a list of preferential points (di)i if Cutting is necessary in [a,b], we cut at the di nearest from (a+b)/2.
 */
class AdvApprox_PrefCutting extends AdvApprox_Cutting {
}

/**
 * Approximate a function on an intervall [First,Last] The result is a simple polynomial whose degree is as low as possible to satisfy the required tolerance and the maximum degree. The maximum error and the averrage error resulting from approximating the function by the polynomial are computed
 */
class AdvApprox_SimpleApprox {
}

/**
 * Bspline approximation of a surface.
 */
class AppBlend_Approx {
}

/**
 * Class describing a continous 3d and/or function f(u). This class must be provided by the user to use the approximation algorithm FittingCurve.
 */
class AppCont_Function {
}

class AppCont_LeastSquare {
}

/**
 * Parallel Approximation in n curves. This package gives all the algorithms used to approximate a MultiLine described by the tool MLineTool. The result of the approximation will be a MultiCurve.
 */
class AppParCurves {
}

/**
 * associates an index and a constraint for an object. This couple is used by AppDef_TheVariational when performing approximations.
 */
class AppParCurves_ConstraintCouple {
}

class AppParCurves_ConstraintCouple_1 extends AppParCurves_ConstraintCouple {}

class AppParCurves_ConstraintCouple_2 extends AppParCurves_ConstraintCouple {}

/**
 * This class describes a MultiBSpCurve approximating a Multiline. Just as a Multiline is a set of a given number of lines, a MultiBSpCurve is a set of a specified number of bsplines defined by: - A specified number of MultiPoints - the poles of a specified number of curves - The degree of approximation identical for each of the specified number of curves.
 */
class AppParCurves_MultiBSpCurve extends AppParCurves_MultiCurve {
}

class AppParCurves_MultiBSpCurve_1 extends AppParCurves_MultiBSpCurve {}

class AppParCurves_MultiBSpCurve_2 extends AppParCurves_MultiBSpCurve {}

class AppParCurves_MultiBSpCurve_3 extends AppParCurves_MultiBSpCurve {}

class AppParCurves_MultiBSpCurve_4 extends AppParCurves_MultiBSpCurve {}

/**
 * This class describes a MultiCurve approximating a Multiline. As a Multiline is a set of n lines, a MultiCurve is a set of n curves. These curves are Bezier curves. A MultiCurve is composed of m MultiPoint. The approximating degree of these n curves is the same for each one.
 */
class AppParCurves_MultiCurve {
}

class AppParCurves_MultiCurve_1 extends AppParCurves_MultiCurve {}

class AppParCurves_MultiCurve_2 extends AppParCurves_MultiCurve {}

class AppParCurves_MultiCurve_3 extends AppParCurves_MultiCurve {}

/**
 * This class describes Points composing a MultiPoint. These points can be 2D or 3D. The user must first give the 3D Points and then the 2D Points. They are Poles of a Bezier Curve. This class is used either to define data input or results when performing the approximation of several lines in parallel.
 */
class AppParCurves_MultiPoint {
}

class AppParCurves_MultiPoint_1 extends AppParCurves_MultiPoint {}

class AppParCurves_MultiPoint_2 extends AppParCurves_MultiPoint {}

class AppParCurves_MultiPoint_3 extends AppParCurves_MultiPoint {}

class AppParCurves_MultiPoint_4 extends AppParCurves_MultiPoint {}

class AppParCurves_MultiPoint_5 extends AppParCurves_MultiPoint {}

/**
 * Legacy class defining resources name for lite OCAF documents
 */
class AppStdL_Application extends TDocStd_Application {
}

/**
 * Legacy class defining resources name for standard OCAF documents
 */
class AppStd_Application extends TDocStd_Application {
}

/**
 * This class intended to build knots sequence on discrete set of points for further approximation into bspline curve.
 */
class ApproxInt_KnotTools {
}

class ApproxInt_SvSurfaces {
}

/**
 * Makes an approximation for HCurve2d from Adaptor3d
 */
class Approx_Curve2d {
}

class Approx_Curve3d {
}

/**
 * Approximation of curve on surface
 */
class Approx_CurveOnSurface {
}

class Approx_CurveOnSurface_1 extends Approx_CurveOnSurface {}

class Approx_CurveOnSurface_2 extends Approx_CurveOnSurface {}

/**
 * Approximation of a Curve to make its parameter be its curvilinear abscissa If the curve is a curve on a surface S, C2D is the corresponding Pcurve, we considere the curve is given by its representation S(C2D(u)) If the curve is a curve on 2 surfaces S1 and S2 and C2D1 C2D2 are the two corresponding Pcurve, we considere the curve is given by its representation 1/2(S1(C2D1(u) + S2 (C2D2(u)))
 */
class Approx_CurvilinearParameter {
}

class Approx_CurvilinearParameter_1 extends Approx_CurvilinearParameter {}

class Approx_CurvilinearParameter_2 extends Approx_CurvilinearParameter {}

class Approx_CurvilinearParameter_3 extends Approx_CurvilinearParameter {}

/**
 * defines an abstract curve with curvilinear parametrization
 */
class Approx_CurvlinFunc extends Standard_Transient {
}

class Approx_CurvlinFunc_1 extends Approx_CurvlinFunc {}

class Approx_CurvlinFunc_2 extends Approx_CurvlinFunc {}

class Approx_CurvlinFunc_3 extends Approx_CurvlinFunc {}

class Approx_FitAndDivide {
}

class Approx_FitAndDivide_1 extends Approx_FitAndDivide {}

class Approx_FitAndDivide_2 extends Approx_FitAndDivide {}

class Approx_FitAndDivide2d {
}

class Approx_FitAndDivide2d_1 extends Approx_FitAndDivide2d {}

class Approx_FitAndDivide2d_2 extends Approx_FitAndDivide2d {}

class Approx_MCurvesToBSpCurve {
}

/**
 * Approximation of a PCurve on a surface to make its parameter be the same that the parameter of a given 3d reference curve.
 */
class Approx_SameParameter {
}

class Approx_SameParameter_1 extends Approx_SameParameter {}

class Approx_SameParameter_2 extends Approx_SameParameter {}

class Approx_SameParameter_3 extends Approx_SameParameter {}

/**
 * Approximation of an Surface S(u,v) (and eventually associate 2d Curves) defined by section's law.
 */
class Approx_SweepApproximation {
}

/**
 * defined the function used by SweepApproximation to perform sweeping application.
 */
class Approx_SweepFunction extends Standard_Transient {
}

/**
 * The Curve from BRepAdaptor allows to use a Wire of the BRep topology like a 3D curve. Warning: With this class of curve, C0 and C1 continuities are not assumed. So be careful with some algorithm! Please note that BRepAdaptor_CompCurve cannot be periodic curve at all (even if it contains single periodic edge).
 */
class BRepAdaptor_CompCurve extends Adaptor3d_Curve {
}

class BRepAdaptor_CompCurve_1 extends BRepAdaptor_CompCurve {}

class BRepAdaptor_CompCurve_2 extends BRepAdaptor_CompCurve {}

class BRepAdaptor_CompCurve_3 extends BRepAdaptor_CompCurve {}

/**
 * The Curve from BRepAdaptor allows to use an Edge of the BRep topology like a 3D curve.
 */
class BRepAdaptor_Curve extends Adaptor3d_Curve {
}

class BRepAdaptor_Curve_1 extends BRepAdaptor_Curve {}

class BRepAdaptor_Curve_2 extends BRepAdaptor_Curve {}

class BRepAdaptor_Curve_3 extends BRepAdaptor_Curve {}

/**
 * The Curve2d from BRepAdaptor allows to use an Edge on a Face like a 2d curve. (curve in the parametric space).
 */
class BRepAdaptor_Curve2d extends Geom2dAdaptor_Curve {
}

class BRepAdaptor_Curve2d_1 extends BRepAdaptor_Curve2d {}

class BRepAdaptor_Curve2d_2 extends BRepAdaptor_Curve2d {}

class BRepAdaptor_HCompCurve extends Adaptor3d_HCurve {
}

class BRepAdaptor_HCompCurve_1 extends BRepAdaptor_HCompCurve {}

class BRepAdaptor_HCompCurve_2 extends BRepAdaptor_HCompCurve {}

class BRepAdaptor_HCurve extends Adaptor3d_HCurve {
}

class BRepAdaptor_HCurve_1 extends BRepAdaptor_HCurve {}

class BRepAdaptor_HCurve_2 extends BRepAdaptor_HCurve {}

class BRepAdaptor_HCurve2d extends Adaptor2d_HCurve2d {
}

class BRepAdaptor_HCurve2d_1 extends BRepAdaptor_HCurve2d {}

class BRepAdaptor_HCurve2d_2 extends BRepAdaptor_HCurve2d {}

class BRepAdaptor_HSurface extends Adaptor3d_HSurface {
}

class BRepAdaptor_HSurface_1 extends BRepAdaptor_HSurface {}

class BRepAdaptor_HSurface_2 extends BRepAdaptor_HSurface {}

/**
 * The Surface from BRepAdaptor allows to use a Face of the BRep topology look like a 3D surface.
 */
class BRepAdaptor_Surface extends Adaptor3d_Surface {
}

class BRepAdaptor_Surface_1 extends BRepAdaptor_Surface {}

class BRepAdaptor_Surface_2 extends BRepAdaptor_Surface {}

/**
 * The BRepAlgo package provides a full range of services to perform Old Boolean Operations in Open CASCADE. Attention: The New Boolean Operation has replaced the Old Boolean Operations algorithm in the BrepAlgoAPI package in Open CASCADE.
 */
class BRepAlgo {
}

/**
 * Provides the root interface for the API algorithms
 */
class BRepAlgoAPI_Algo extends BRepBuilderAPI_MakeShape {
}

/**
 * The root API class for performing Boolean Operations on arbitrary shapes.
 */
class BRepAlgoAPI_BooleanOperation extends BRepAlgoAPI_BuilderAlgo {
}

class BRepAlgoAPI_BooleanOperation_1 extends BRepAlgoAPI_BooleanOperation {}

class BRepAlgoAPI_BooleanOperation_2 extends BRepAlgoAPI_BooleanOperation {}

/**
 * The class contains API level of the General Fuse algorithm.
 */
class BRepAlgoAPI_BuilderAlgo extends BRepAlgoAPI_Algo {
}

class BRepAlgoAPI_BuilderAlgo_1 extends BRepAlgoAPI_BuilderAlgo {}

class BRepAlgoAPI_BuilderAlgo_2 extends BRepAlgoAPI_BuilderAlgo {}

/**
 * The class Check provides a diagnostic tool for checking the validity of the single shape or couple of shapes. The shapes are checked on: - Topological validity; - Small edges; - Self-interference; - Validity for Boolean operation of certain type (for couple of shapes only).
 */
class BRepAlgoAPI_Check extends BOPAlgo_Options {
}

class BRepAlgoAPI_Check_1 extends BRepAlgoAPI_Check {}

class BRepAlgoAPI_Check_2 extends BRepAlgoAPI_Check {}

class BRepAlgoAPI_Check_3 extends BRepAlgoAPI_Check {}

/**
 * The class provides Boolean common operation between arguments and tools (Boolean Intersection).
 */
class BRepAlgoAPI_Common extends BRepAlgoAPI_BooleanOperation {
}

class BRepAlgoAPI_Common_1 extends BRepAlgoAPI_Common {}

class BRepAlgoAPI_Common_2 extends BRepAlgoAPI_Common {}

class BRepAlgoAPI_Common_3 extends BRepAlgoAPI_Common {}

class BRepAlgoAPI_Common_4 extends BRepAlgoAPI_Common {}

/**
 * The class Cut provides Boolean cut operation between arguments and tools (Boolean Subtraction).
 */
class BRepAlgoAPI_Cut extends BRepAlgoAPI_BooleanOperation {
}

class BRepAlgoAPI_Cut_1 extends BRepAlgoAPI_Cut {}

class BRepAlgoAPI_Cut_2 extends BRepAlgoAPI_Cut {}

class BRepAlgoAPI_Cut_3 extends BRepAlgoAPI_Cut {}

class BRepAlgoAPI_Cut_4 extends BRepAlgoAPI_Cut {}

/**
 * The BRepAlgoAPI_Defeaturing algorithm is the API algorithm intended for removal of the unwanted parts from the shape. The unwanted parts (or features) can be holes, protrusions, gaps, chamfers, fillets etc. The shape itself is not modified, the new shape is built as the result.
 */
class BRepAlgoAPI_Defeaturing extends BRepAlgoAPI_Algo {
}

/**
 * The class provides Boolean fusion operation between arguments and tools (Boolean Union).
 */
class BRepAlgoAPI_Fuse extends BRepAlgoAPI_BooleanOperation {
}

class BRepAlgoAPI_Fuse_1 extends BRepAlgoAPI_Fuse {}

class BRepAlgoAPI_Fuse_2 extends BRepAlgoAPI_Fuse {}

class BRepAlgoAPI_Fuse_3 extends BRepAlgoAPI_Fuse {}

class BRepAlgoAPI_Fuse_4 extends BRepAlgoAPI_Fuse {}

/**
 * The algorithm is to build a Secton operation between arguments and tools. The result of Section operation consists of vertices and edges. The result of Section operation contains: 1. new vertices that are subjects of V/V, E/E, E/F, F/F interferences 2. vertices that are subjects of V/E, V/F interferences 3. new edges that are subjects of F/F interferences 4. edges that are Common Blocks
 */
class BRepAlgoAPI_Section extends BRepAlgoAPI_BooleanOperation {
}

class BRepAlgoAPI_Section_1 extends BRepAlgoAPI_Section {}

class BRepAlgoAPI_Section_2 extends BRepAlgoAPI_Section {}

class BRepAlgoAPI_Section_3 extends BRepAlgoAPI_Section {}

class BRepAlgoAPI_Section_4 extends BRepAlgoAPI_Section {}

class BRepAlgoAPI_Section_5 extends BRepAlgoAPI_Section {}

class BRepAlgoAPI_Section_6 extends BRepAlgoAPI_Section {}

class BRepAlgoAPI_Section_7 extends BRepAlgoAPI_Section {}

class BRepAlgoAPI_Section_8 extends BRepAlgoAPI_Section {}

/**
 * The class contains API level of the **Splitter** algorithm, which allows splitting a group of arbitrary shapes by the other group of arbitrary shapes. The arguments of the operation are divided on two groups: *Objects* - shapes that will be split; *Tools* - shapes by which the *Objects* will be split. The result of the operation contains only the split parts of the shapes from the group of *Objects*. The split parts of the shapes from the group of *Tools* are excluded from the result. The shapes can be split by the other shapes from the same group (in case these shapes are interfering).
 */
class BRepAlgoAPI_Splitter extends BRepAlgoAPI_BuilderAlgo {
}

class BRepAlgoAPI_Splitter_1 extends BRepAlgoAPI_Splitter {}

class BRepAlgoAPI_Splitter_2 extends BRepAlgoAPI_Splitter {}

/**
 * SD to store descendants and ascendants of Shapes.
 */
class BRepAlgo_AsDes extends Standard_Transient {
}

/**
 * The abstract class BooleanOperation is the root class of Boolean operations. A BooleanOperation object stores the two shapes in preparation for the Boolean operation specified in one of the classes inheriting from this one. These include: - Common - Cut - Fuse - Section.
 */
class BRepAlgo_BooleanOperation extends BRepBuilderAPI_MakeShape {
}

/**
 * Describes functions for performing a topological common operation (Boolean intersection). A Common object provides the framework for: - defining the construction of a common shape, - implementing the construction algorithm, and - consulting the result.
 */
class BRepAlgo_Common extends BRepAlgo_BooleanOperation {
}

/**
 * Describes functions for performing a topological cut operation (Boolean subtraction). A Cut object provides the framework for: - defining the construction of a cut shape, - implementing the construction algorithm, and - consulting the result.
 */
class BRepAlgo_Cut extends BRepAlgo_BooleanOperation {
}

/**
 * Builds all the faces limited with a set of non jointing and planars wires. if <ControlOrientation> is false The Wires must have correct orientations. Sinon orientation des wires de telle sorte que les faces ne soient pas infinies et qu'elles soient disjointes.
 */
class BRepAlgo_FaceRestrictor {
}

/**
 * Describes functions for performing a topological fusion operation (Boolean union). A Fuse object provides the framework for: - defining the construction of a fused shape, - implementing the construction algorithm, and - consulting the result.
 */
class BRepAlgo_Fuse extends BRepAlgo_BooleanOperation {
}

/**
 * Stores link between a shape <S> and a shape <NewS> obtained from <S>. <NewS> is an image of <S>.
 */
class BRepAlgo_Image {
}

/**
 * Builds the loops from a set of edges on a face.
 */
class BRepAlgo_Loop {
}

/**
 * This class makes the projection of a wire on a shape.
 */
class BRepAlgo_NormalProjection {
}

class BRepAlgo_NormalProjection_1 extends BRepAlgo_NormalProjection {}

class BRepAlgo_NormalProjection_2 extends BRepAlgo_NormalProjection {}

/**
 * Construction of the section lines between two shapes. For this Boolean operation, each face of the first shape is intersected by each face of the second shape. The resulting intersection edges are brought together into a compound object, but not chained or grouped into wires. Computation of the intersection of two Shapes or Surfaces The two parts involved in this Boolean operation may be defined from geometric surfaces: the most common use is the computation of the planar section of a shape. A Section object provides the framework for: - defining the shapes to be intersected, and the computation options, - implementing the construction algorithm, and - consulting the result. Example : giving two shapes S1,S2 accessing faces, let compute the section edges R on S1,S2, performing approximation on new curves, performing PCurve on part 1 but not on part 2 : Standard_Boolean PerformNow = Standard_False; BRepBoolAPI_Section S(S1,S2,PerformNow); S.ComputePCurveOn1(Standard_True); S.Approximation(Standard_True); S.Build(); TopoDS_Shape R = S.Shape(); On Null Shapes of geometries, NotDone() is called.
 */
class BRepAlgo_Section extends BRepAlgo_BooleanOperation {
}

class BRepAlgo_Section_1 extends BRepAlgo_Section {}

class BRepAlgo_Section_2 extends BRepAlgo_Section {}

class BRepAlgo_Section_3 extends BRepAlgo_Section {}

class BRepAlgo_Section_4 extends BRepAlgo_Section {}

class BRepAlgo_Section_5 extends BRepAlgo_Section {}

class BRepAlgo_Tool {
}

class BRepApprox_ApproxLine extends Standard_Transient {
}

class BRepApprox_ApproxLine_1 extends BRepApprox_ApproxLine {}

class BRepApprox_ApproxLine_2 extends BRepApprox_ApproxLine {}

class BRepApprox_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfApprox extends math_BFGS {
}

class BRepApprox_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfApprox extends math_MultipleVarFunctionWithGradient {
}

class BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox {
}

class BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_1 extends BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox {}

class BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_2 extends BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox {}

class BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_3 extends BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox {}

class BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox_4 extends BRepApprox_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfApprox {}

class BRepApprox_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfApprox extends math_BFGS {
}

class BRepApprox_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfApprox extends math_BFGS {
}

class BRepApprox_MyBSplGradientOfTheComputeLineOfApprox {
}

class BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_1 extends BRepApprox_MyBSplGradientOfTheComputeLineOfApprox {}

class BRepApprox_MyBSplGradientOfTheComputeLineOfApprox_2 extends BRepApprox_MyBSplGradientOfTheComputeLineOfApprox {}

class BRepApprox_MyGradientOfTheComputeLineBezierOfApprox {
}

class BRepApprox_MyGradientbisOfTheComputeLineOfApprox {
}

class BRepApprox_ParFunctionOfMyGradientOfTheComputeLineBezierOfApprox extends math_MultipleVarFunctionWithGradient {
}

class BRepApprox_ParFunctionOfMyGradientbisOfTheComputeLineOfApprox extends math_MultipleVarFunctionWithGradient {
}

class BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox {
}

class BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_1 extends BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox {}

class BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_2 extends BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox {}

class BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_3 extends BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox {}

class BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox_4 extends BRepApprox_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfApprox {}

class BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox {
}

class BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_1 extends BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox {}

class BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_2 extends BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox {}

class BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_3 extends BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox {}

class BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox_4 extends BRepApprox_ParLeastSquareOfMyGradientbisOfTheComputeLineOfApprox {}

class BRepApprox_SurfaceTool {
}

class BRepApprox_TheComputeLineBezierOfApprox {
}

class BRepApprox_TheComputeLineBezierOfApprox_1 extends BRepApprox_TheComputeLineBezierOfApprox {}

class BRepApprox_TheComputeLineBezierOfApprox_2 extends BRepApprox_TheComputeLineBezierOfApprox {}

class BRepApprox_TheComputeLineBezierOfApprox_3 extends BRepApprox_TheComputeLineBezierOfApprox {}

class BRepApprox_TheComputeLineBezierOfApprox_4 extends BRepApprox_TheComputeLineBezierOfApprox {}

class BRepApprox_TheComputeLineOfApprox {
}

class BRepApprox_TheComputeLineOfApprox_1 extends BRepApprox_TheComputeLineOfApprox {}

class BRepApprox_TheComputeLineOfApprox_2 extends BRepApprox_TheComputeLineOfApprox {}

class BRepApprox_TheComputeLineOfApprox_3 extends BRepApprox_TheComputeLineOfApprox {}

class BRepApprox_TheComputeLineOfApprox_4 extends BRepApprox_TheComputeLineOfApprox {}

class BRepApprox_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfApprox extends math_FunctionSetWithDerivatives {
}

class BRepApprox_TheImpPrmSvSurfacesOfApprox extends ApproxInt_SvSurfaces {
}

class BRepApprox_TheImpPrmSvSurfacesOfApprox_1 extends BRepApprox_TheImpPrmSvSurfacesOfApprox {}

class BRepApprox_TheImpPrmSvSurfacesOfApprox_2 extends BRepApprox_TheImpPrmSvSurfacesOfApprox {}

class BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox {
}

class BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_1 extends BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox {}

class BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox_2 extends BRepApprox_TheInt2SOfThePrmPrmSvSurfacesOfApprox {}

class BRepApprox_TheMultiLineOfApprox {
}

class BRepApprox_TheMultiLineOfApprox_1 extends BRepApprox_TheMultiLineOfApprox {}

class BRepApprox_TheMultiLineOfApprox_2 extends BRepApprox_TheMultiLineOfApprox {}

class BRepApprox_TheMultiLineOfApprox_3 extends BRepApprox_TheMultiLineOfApprox {}

class BRepApprox_TheMultiLineToolOfApprox {
}

class BRepApprox_ThePrmPrmSvSurfacesOfApprox extends ApproxInt_SvSurfaces {
}

class BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox extends math_FunctionSetWithDerivatives {
}

class BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_1 extends BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox {}

class BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_2 extends BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox {}

class BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox_3 extends BRepApprox_TheZerImpFuncOfTheImpPrmSvSurfacesOfApprox {}

/**
 * Function to approximate by AppSurface for Surface/Surface contact.
 */
class BRepBlend_AppFunc extends BRepBlend_AppFuncRoot {
}

/**
 * Function to approximate by AppSurface
 */
class BRepBlend_AppFuncRoot extends Approx_SweepFunction {
}

/**
 * Function to approximate by AppSurface for Curve/Surface contact.
 */
class BRepBlend_AppFuncRst extends BRepBlend_AppFuncRoot {
}

/**
 * Function to approximate by AppSurface for Edge/Face (Curve/Curve contact).
 */
class BRepBlend_AppFuncRstRst extends BRepBlend_AppFuncRoot {
}

class BRepBlend_AppSurf extends AppBlend_Approx {
}

class BRepBlend_AppSurf_1 extends BRepBlend_AppSurf {}

class BRepBlend_AppSurf_2 extends BRepBlend_AppSurf {}

/**
 * Used to Approximate the blending surfaces.
 */
class BRepBlend_AppSurface extends AppBlend_Approx {
}

class BRepBlend_BlendTool {
}

class BRepBlend_CSWalking {
}

/**
 * Function of reframing between a point and a curve. valid in cases of constant and progressive radius. This function is used to find a solution on a done point of the curve 1 when using RstRstConsRad or CSConstRad... The vector <X> used in Value, Values and Derivatives methods has to be the vector of the parametric coordinates w, U where w is the parameter on the guide line, U are the parametric coordinates of a point on the partner curve 2.
 */
class BRepBlend_CurvPointRadInv extends Blend_CurvPointFuncInv {
}

class BRepBlend_Extremity {
}

class BRepBlend_Extremity_1 extends BRepBlend_Extremity {}

class BRepBlend_Extremity_2 extends BRepBlend_Extremity {}

class BRepBlend_Extremity_3 extends BRepBlend_Extremity {}

class BRepBlend_Extremity_4 extends BRepBlend_Extremity {}

class BRepBlend_HCurve2dTool {
}

class BRepBlend_HCurveTool {
}

class BRepBlend_Line extends Standard_Transient {
}

/**
 * Definition of an intersection point between a line and a restriction on a surface. Such a point is contains geometrical informations (see the Value method) and logical informations.
 */
class BRepBlend_PointOnRst {
}

class BRepBlend_PointOnRst_1 extends BRepBlend_PointOnRst {}

class BRepBlend_PointOnRst_2 extends BRepBlend_PointOnRst {}

/**
 * Copy of CSConstRad with a pcurve on surface as support.
 */
class BRepBlend_RstRstConstRad extends Blend_RstRstFunction {
}

/**
 * Function to approximate by AppSurface for Edge/Edge and evolutif radius
 */
class BRepBlend_RstRstEvolRad extends Blend_RstRstFunction {
}

/**
 * This class processes the data resulting from Blend_CSWalking but it takes in consideration the Surface supporting the curve to detect the breakpoint.
 */
class BRepBlend_RstRstLineBuilder {
}

/**
 * Function of reframing between a restriction surface of the surface and a curve. Class used to compute a solution of the surfRstConstRad problem on a done restriction of the surface. The vector <X> used in Value, Values and Derivatives methods has to be the vector of the parametric coordinates wguide, wcurv, wrst where wguide is the parameter on the guide line, wcurv is the parameter on the curve, wrst is the parameter on the restriction on the surface.
 */
class BRepBlend_SurfCurvConstRadInv extends Blend_SurfCurvFuncInv {
}

/**
 * Function of reframing between a surface restriction of the surface and a curve. Class used to compute a solution of the surfRstConstRad problem on a done restriction of the surface. The vector <X> used in Value, Values and Derivatives methods has to be the vector of the parametric coordinates wguide, wcurv, wrst where wguide is the parameter on the guide line, wcurv is the parameter on the curve, wrst is the parameter on the restriction on the surface.
 */
class BRepBlend_SurfCurvEvolRadInv extends Blend_SurfCurvFuncInv {
}

/**
 * Function of reframing between a point and a surface. This function is used to find a solution on a done point of the curve when using SurfRstConsRad or CSConstRad... The vector <X> used in Value, Values and Derivatives methods has to be the vector of the parametric coordinates w, U, V where w is the parameter on the guide line, U,V are the parametric coordinates of a point on the partner surface.
 */
class BRepBlend_SurfPointConstRadInv extends Blend_SurfPointFuncInv {
}

/**
 * Function of reframing between a point and a surface. This function is used to find a solution on a done point of the curve when using SurfRstConsRad or CSConstRad... The vector <X> used in Value, Values and Derivatives methods has to be the vector of the parametric coordinates w, U, V where w is the parameter on the guide line, U,V are the parametric coordinates of a point on the partner surface.
 */
class BRepBlend_SurfPointEvolRadInv extends Blend_SurfPointFuncInv {
}

/**
 * Copy of CSConstRad with pcurve on surface as support.
 */
class BRepBlend_SurfRstConstRad extends Blend_SurfRstFunction {
}

/**
 * Function to approximate by AppSurface for Edge/Face and evolutif radius
 */
class BRepBlend_SurfRstEvolRad extends Blend_SurfRstFunction {
}

/**
 * This class processes data resulting from Blend_CSWalking taking in consideration the Surface supporting the curve to detect the breakpoint.
 */
class BRepBlend_SurfRstLineBuilder {
}

class BRepBlend_Walking {
}

/**
 * This package provides the bounding boxes for curves and surfaces from BRepAdaptor. Functions to add a topological shape to a bounding box
 */
class BRepBndLib {
}

/**
 * The BRepBuilderAPI package provides an Application Programming Interface for the BRep topology data structure.
 */
class BRepBuilderAPI {
}

}

class BRepBuilderAPI_Collect {
}

/**
 * Root class for all commands in BRepBuilderAPI.
 */
class BRepBuilderAPI_Command {
}

/**
 * Duplication of a shape. A Copy object provides a framework for: - defining the construction of a duplicate shape, - implementing the construction algorithm, and - consulting the result.
 */
class BRepBuilderAPI_Copy extends BRepBuilderAPI_ModifyShape {
}

class BRepBuilderAPI_Copy_1 extends BRepBuilderAPI_Copy {}

class BRepBuilderAPI_Copy_2 extends BRepBuilderAPI_Copy {}

/**
 * This class performs fast sewing of surfaces (faces). It supposes that all surfaces are finite and are naturally restricted by their bounds. Moreover, it supposes that stitched together surfaces have the same parameterization along common boundaries, therefore it does not perform time-consuming check for SameParameter property of edges.
 */
class BRepBuilderAPI_FastSewing extends Standard_Transient {
}

/**
 * Describes functions to find the plane in which the edges of a given shape are located. A FindPlane object provides a framework for: - extracting the edges of a given shape, - implementing the construction algorithm, and - consulting the result.
 */
class BRepBuilderAPI_FindPlane {
}

class BRepBuilderAPI_FindPlane_1 extends BRepBuilderAPI_FindPlane {}

class BRepBuilderAPI_FindPlane_2 extends BRepBuilderAPI_FindPlane {}

/**
 * Geometric transformation on a shape. The transformation to be applied is defined as a gp_GTrsf transformation. It may be: - a transformation equivalent to a gp_Trsf transformation, the most common case: you should , however, use a BRepAPI_Transform object to perform this kind of transformation; or - an affinity, or - more generally, any type of point transformation which may be defined by a three row, four column matrix of transformation. In the last two cases, the underlying geometry of the following shapes may change: - a curve which supports an edge of the shape, or - a surface which supports a face of the shape; For example, a circle may be transformed into an ellipse when applying an affinity transformation. The transformation is applied to: - all the curves which support edges of the shape, and - all the surfaces which support faces of the shape. A GTransform object provides a framework for: - defining the geometric transformation to be applied, - implementing the transformation algorithm, and - consulting the result.
 */
class BRepBuilderAPI_GTransform extends BRepBuilderAPI_ModifyShape {
}

class BRepBuilderAPI_GTransform_1 extends BRepBuilderAPI_GTransform {}

class BRepBuilderAPI_GTransform_2 extends BRepBuilderAPI_GTransform {}

/**
 * Provides methods to build edges.
 */
class BRepBuilderAPI_MakeEdge extends BRepBuilderAPI_MakeShape {
}

class BRepBuilderAPI_MakeEdge_1 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_2 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_3 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_4 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_5 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_6 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_7 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_8 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_9 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_10 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_11 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_12 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_13 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_14 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_15 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_16 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_17 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_18 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_19 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_20 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_21 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_22 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_23 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_24 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_25 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_26 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_27 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_28 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_29 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_30 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_31 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_32 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_33 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_34 extends BRepBuilderAPI_MakeEdge {}

class BRepBuilderAPI_MakeEdge_35 extends BRepBuilderAPI_MakeEdge {}

/**
 * Provides methods to build edges.
 */
class BRepBuilderAPI_MakeEdge2d extends BRepBuilderAPI_MakeShape {
}

class BRepBuilderAPI_MakeEdge2d_1 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_2 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_3 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_4 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_5 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_6 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_7 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_8 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_9 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_10 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_11 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_12 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_13 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_14 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_15 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_16 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_17 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_18 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_19 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_20 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_21 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_22 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_23 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_24 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_25 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_26 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_27 extends BRepBuilderAPI_MakeEdge2d {}

class BRepBuilderAPI_MakeEdge2d_28 extends BRepBuilderAPI_MakeEdge2d {}

/**
 * Provides methods to build faces.
 */
class BRepBuilderAPI_MakeFace extends BRepBuilderAPI_MakeShape {
}

class BRepBuilderAPI_MakeFace_1 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_2 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_3 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_4 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_5 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_6 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_7 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_8 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_9 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_10 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_11 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_12 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_13 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_14 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_15 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_16 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_17 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_18 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_19 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_20 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_21 extends BRepBuilderAPI_MakeFace {}

class BRepBuilderAPI_MakeFace_22 extends BRepBuilderAPI_MakeFace {}

/**
 * Describes functions to build polygonal wires. A polygonal wire can be built from any number of points or vertices, and consists of a sequence of connected rectilinear edges. When a point or vertex is added to the polygon if it is identic to the previous point no edge is built. The method added can be used to test it. Construction of a Polygonal Wire You can construct: - a complete polygonal wire by defining all its points or vertices (limited to four), or - an empty polygonal wire and add its points or vertices in sequence (unlimited number). A MakePolygon object provides a framework for: - initializing the construction of a polygonal wire, - adding points or vertices to the polygonal wire under construction, and - consulting the result.
 */
class BRepBuilderAPI_MakePolygon extends BRepBuilderAPI_MakeShape {
}

class BRepBuilderAPI_MakePolygon_1 extends BRepBuilderAPI_MakePolygon {}

class BRepBuilderAPI_MakePolygon_2 extends BRepBuilderAPI_MakePolygon {}

class BRepBuilderAPI_MakePolygon_3 extends BRepBuilderAPI_MakePolygon {}

class BRepBuilderAPI_MakePolygon_4 extends BRepBuilderAPI_MakePolygon {}

class BRepBuilderAPI_MakePolygon_5 extends BRepBuilderAPI_MakePolygon {}

class BRepBuilderAPI_MakePolygon_6 extends BRepBuilderAPI_MakePolygon {}

class BRepBuilderAPI_MakePolygon_7 extends BRepBuilderAPI_MakePolygon {}

/**
 * This is the root class for all shape constructions. It stores the result.
 */
class BRepBuilderAPI_MakeShape extends BRepBuilderAPI_Command {
}

/**
 * Describes functions to build a shape corresponding to the skin of a surface. Note that the term shell in the class name has the same definition as that of a shell in STEP, in other words the skin of a shape, and not a solid model defined by surface and thickness. If you want to build the second sort of shell, you must use BRepOffsetAPI_MakeOffsetShape. A shell is made of a series of faces connected by their common edges. If the underlying surface of a face is not C2 continuous and the flag Segment is True, MakeShell breaks the surface down into several faces which are all C2 continuous and which are connected along the non-regular curves on the surface. The resulting shell contains all these faces. Construction of a Shell from a non-C2 continuous Surface A MakeShell object provides a framework for: - defining the construction of a shell, - implementing the construction algorithm, and - consulting the result. Warning The connected C2 faces in the shell resulting from a decomposition of the surface are not sewn. For a sewn result, you need to use BRepOffsetAPI_Sewing. For a shell with thickness, you need to use BRepOffsetAPI_MakeOffsetShape.
 */
class BRepBuilderAPI_MakeShell extends BRepBuilderAPI_MakeShape {
}

class BRepBuilderAPI_MakeShell_1 extends BRepBuilderAPI_MakeShell {}

class BRepBuilderAPI_MakeShell_2 extends BRepBuilderAPI_MakeShell {}

class BRepBuilderAPI_MakeShell_3 extends BRepBuilderAPI_MakeShell {}

/**
 * Describes functions to build a solid from shells. A solid is made of one shell, or a series of shells, which do not intersect each other. One of these shells constitutes the outside skin of the solid. It may be closed (a finite solid) or open (an infinite solid). Other shells form hollows (cavities) in these previous ones. Each must bound a closed volume. A MakeSolid object provides a framework for: - defining and implementing the construction of a solid, and - consulting the result.
 */
class BRepBuilderAPI_MakeSolid extends BRepBuilderAPI_MakeShape {
}

class BRepBuilderAPI_MakeSolid_1 extends BRepBuilderAPI_MakeSolid {}

class BRepBuilderAPI_MakeSolid_2 extends BRepBuilderAPI_MakeSolid {}

class BRepBuilderAPI_MakeSolid_3 extends BRepBuilderAPI_MakeSolid {}

class BRepBuilderAPI_MakeSolid_4 extends BRepBuilderAPI_MakeSolid {}

class BRepBuilderAPI_MakeSolid_5 extends BRepBuilderAPI_MakeSolid {}

class BRepBuilderAPI_MakeSolid_6 extends BRepBuilderAPI_MakeSolid {}

class BRepBuilderAPI_MakeSolid_7 extends BRepBuilderAPI_MakeSolid {}

/**
 * Describes functions to build BRepBuilder vertices directly from 3D geometric points. A vertex built using a MakeVertex object is only composed of a 3D point and a default precision value (Precision::Confusion()). Later on, 2D representations can be added, for example, when inserting a vertex in an edge. A MakeVertex object provides a framework for: - defining and implementing the construction of a vertex, and - consulting the result.
 */
class BRepBuilderAPI_MakeVertex extends BRepBuilderAPI_MakeShape {
}

/**
 * Describes functions to build wires from edges. A wire can be built from any number of edges. To build a wire you first initialize the construction, then add edges in sequence. An unlimited number of edges can be added. The initialization of construction is done with: - no edge (an empty wire), or - edges of an existing wire, or - up to four connectable edges. In order to be added to a wire under construction, an edge (unless it is the first one) must satisfy the following condition: one of its vertices must be geometrically coincident with one of the vertices of the wire (provided that the highest tolerance factor is assigned to the two vertices). It could also be the same vertex. - The given edge is shared by the wire if it contains: - two vertices, identical to two vertices of the wire under construction (a general case of the wire closure), or - one vertex, identical to a vertex of the wire under construction; the other vertex not being geometrically coincident with another vertex of the wire. - In other cases, when one of the vertices of the edge is simply geometrically coincident with a vertex of the wire under construction (provided that the highest tolerance factor is assigned to the two vertices), the given edge is first copied and the coincident vertex is replaced in this new edge, by the coincident vertex of the wire. Note: it is possible to build non manifold wires using this construction tool. A MakeWire object provides a framework for: - initializing the construction of a wire, - adding edges to the wire under construction, and - consulting the result.
 */
class BRepBuilderAPI_MakeWire extends BRepBuilderAPI_MakeShape {
}

class BRepBuilderAPI_MakeWire_1 extends BRepBuilderAPI_MakeWire {}

class BRepBuilderAPI_MakeWire_2 extends BRepBuilderAPI_MakeWire {}

class BRepBuilderAPI_MakeWire_3 extends BRepBuilderAPI_MakeWire {}

class BRepBuilderAPI_MakeWire_4 extends BRepBuilderAPI_MakeWire {}

class BRepBuilderAPI_MakeWire_5 extends BRepBuilderAPI_MakeWire {}

class BRepBuilderAPI_MakeWire_6 extends BRepBuilderAPI_MakeWire {}

class BRepBuilderAPI_MakeWire_7 extends BRepBuilderAPI_MakeWire {}

/**
 * Implements the methods of MakeShape for the constant topology modifications. The methods are implemented when the modification uses a Modifier from BRepTools. Some of them have to be redefined if the modification is implemented with another tool (see Transform from BRepBuilderAPI for example). The BRepBuilderAPI package provides the following frameworks to perform modifications of this sort: - BRepBuilderAPI_Copy to produce the copy of a shape, - BRepBuilderAPI_Transform and BRepBuilderAPI_GTransform to apply a geometric transformation to a shape, - BRepBuilderAPI_NurbsConvert to convert the whole geometry of a shape into NURBS geometry, - BRepOffsetAPI_DraftAngle to build a tapered shape.
 */
class BRepBuilderAPI_ModifyShape extends BRepBuilderAPI_MakeShape {
}

/**
 * Conversion of the complete geometry of a shape (all 3D analytical representation of surfaces and curves) into NURBS geometry (execpt for Planes). For example, all curves supporting edges of the basis shape are converted into BSpline curves, and all surfaces supporting its faces are converted into BSpline surfaces.
 */
class BRepBuilderAPI_NurbsConvert extends BRepBuilderAPI_ModifyShape {
}

class BRepBuilderAPI_NurbsConvert_1 extends BRepBuilderAPI_NurbsConvert {}

class BRepBuilderAPI_NurbsConvert_2 extends BRepBuilderAPI_NurbsConvert {}

/**
 * Provides methods to
 */
class BRepBuilderAPI_Sewing extends Standard_Transient {
}

/**
 * Geometric transformation on a shape. The transformation to be applied is defined as a gp_Trsf transformation, i.e. a transformation which does not modify the underlying geometry of shapes. The transformation is applied to: - all curves which support edges of a shape, and - all surfaces which support its faces. A Transform object provides a framework for: - defining the geometric transformation to be applied, - implementing the transformation algorithm, and - consulting the results.
 */
class BRepBuilderAPI_Transform extends BRepBuilderAPI_ModifyShape {
}

class BRepBuilderAPI_Transform_1 extends BRepBuilderAPI_Transform {}

class BRepBuilderAPI_Transform_2 extends BRepBuilderAPI_Transform {}

/**
 * Class BRepBuilderAPI_VertexInspector derived from NCollection_CellFilter_InspectorXYZ This class define the Inspector interface for CellFilter algorithm, working with gp_XYZ points in 3d space. Used in search of coincidence points with a certain tolerance.
 */
class BRepBuilderAPI_VertexInspector extends NCollection_CellFilter_InspectorXYZ {
}

/**
 * This package provides tools to check the validity of the BRep.
 */
class BRepCheck {
}

/**
 * A framework to check the overall validity of a shape. For a shape to be valid in Open CASCADE, it - or its component subshapes - must respect certain criteria. These criteria are checked by the function IsValid. Once you have determined whether a shape is valid or not, you can diagnose its specific anomalies and correct them using the services of the ShapeAnalysis, ShapeUpgrade, and ShapeFix packages.
 */
class BRepCheck_Analyzer {
}

class BRepCheck_Edge extends BRepCheck_Result {
}

class BRepCheck_Face extends BRepCheck_Result {
}

class BRepCheck_Result extends Standard_Transient {
}

class BRepCheck_Shell extends BRepCheck_Result {
}

/**
 * The class is to check a solid.
 */
class BRepCheck_Solid extends BRepCheck_Result {
}

class BRepCheck_Vertex extends BRepCheck_Result {
}

class BRepCheck_Wire extends BRepCheck_Result {
}

class BRepClass3d {
}

}

}

class BRepClass3d_Intersector3d {
}

/**
 * Provides an algorithm to classify a point in a solid.
 */
class BRepClass3d_SClassifier {
}

class BRepClass3d_SClassifier_1 extends BRepClass3d_SClassifier {}

class BRepClass3d_SClassifier_2 extends BRepClass3d_SClassifier {}

/**
 * Provides an algorithm to classify a point in a solid.
 */
class BRepClass3d_SolidClassifier extends BRepClass3d_SClassifier {
}

class BRepClass3d_SolidClassifier_1 extends BRepClass3d_SolidClassifier {}

class BRepClass3d_SolidClassifier_2 extends BRepClass3d_SolidClassifier {}

class BRepClass3d_SolidClassifier_3 extends BRepClass3d_SolidClassifier {}

/**
 * Provide an exploration of a BRep Shape for the classification. Provide access to the special UB tree to obtain fast search.
 */
class BRepClass3d_SolidExplorer {
}

class BRepClass3d_SolidExplorer_1 extends BRepClass3d_SolidExplorer {}

class BRepClass3d_SolidExplorer_2 extends BRepClass3d_SolidExplorer {}

class BRepClass3d_SolidPassiveClassifier {
}

/**
 * This class is used to send the description of an Edge to the classifier. It contains an Edge and a Face. So the PCurve of the Edge can be found.
 */
class BRepClass_Edge {
}

class BRepClass_Edge_1 extends BRepClass_Edge {}

class BRepClass_Edge_2 extends BRepClass_Edge {}

class BRepClass_FClass2dOfFClassifier {
}

class BRepClass_FClassifier {
}

class BRepClass_FClassifier_1 extends BRepClass_FClassifier {}

class BRepClass_FClassifier_2 extends BRepClass_FClassifier {}

/**
 * Provides Constructors with a Face.
 */
class BRepClass_FaceClassifier extends BRepClass_FClassifier {
}

class BRepClass_FaceClassifier_1 extends BRepClass_FaceClassifier {}

class BRepClass_FaceClassifier_2 extends BRepClass_FaceClassifier {}

class BRepClass_FaceClassifier_3 extends BRepClass_FaceClassifier {}

class BRepClass_FaceClassifier_4 extends BRepClass_FaceClassifier {}

/**
 * Provide an exploration of a BRep Face for the classification. Return UV edges.
 */
class BRepClass_FaceExplorer {
}

class BRepClass_FacePassiveClassifier {
}

/**
 * Intersect an Edge with a segment. Implement the Intersector2d required by the classifier.
 */
class BRepClass_Intersector extends Geom2dInt_IntConicCurveOfGInter {
}

/**
 * This class provides tools to compute minimum distance between two Shapes (Compound,CompSolid, Solid, Shell, Face, Wire, Edge, Vertex).
 */
class BRepExtrema_DistShapeShape {
}

class BRepExtrema_DistShapeShape_1 extends BRepExtrema_DistShapeShape {}

class BRepExtrema_DistShapeShape_2 extends BRepExtrema_DistShapeShape {}

class BRepExtrema_DistShapeShape_3 extends BRepExtrema_DistShapeShape {}

/**
 * This class allows to compute minimum distance between two shapes (face edge vertex) and is used in DistShapeShape class.
 */
class BRepExtrema_DistanceSS {
}

class BRepExtrema_DistanceSS_1 extends BRepExtrema_DistanceSS {}

class BRepExtrema_DistanceSS_2 extends BRepExtrema_DistanceSS {}

class BRepExtrema_ExtCC {
}

class BRepExtrema_ExtCC_1 extends BRepExtrema_ExtCC {}

class BRepExtrema_ExtCC_2 extends BRepExtrema_ExtCC {}

class BRepExtrema_ExtCF {
}

class BRepExtrema_ExtCF_1 extends BRepExtrema_ExtCF {}

class BRepExtrema_ExtCF_2 extends BRepExtrema_ExtCF {}

class BRepExtrema_ExtFF {
}

class BRepExtrema_ExtFF_1 extends BRepExtrema_ExtFF {}

class BRepExtrema_ExtFF_2 extends BRepExtrema_ExtFF {}

class BRepExtrema_ExtPC {
}

class BRepExtrema_ExtPC_1 extends BRepExtrema_ExtPC {}

class BRepExtrema_ExtPC_2 extends BRepExtrema_ExtPC {}

class BRepExtrema_ExtPF {
}

class BRepExtrema_ExtPF_1 extends BRepExtrema_ExtPF {}

class BRepExtrema_ExtPF_2 extends BRepExtrema_ExtPF {}

}

class BRepExtrema_OverlapTool_1 extends BRepExtrema_OverlapTool {}

class BRepExtrema_OverlapTool_2 extends BRepExtrema_OverlapTool {}

class BRepExtrema_Poly {
}

/**
 * Tool class for detection of self-sections in the given shape. This class is based on BRepExtrema_OverlapTool and thus uses shape tessellation to detect incorrect mesh fragments (pairs of overlapped triangles belonging to different faces). Thus, a result depends critically on the quality of mesh generator (e.g., BREP mesh is not always a good choice, because it can contain gaps between adjacent face triangulations, which may not share vertices on common edge; thus false overlap can be detected). As a result, this tool can be used for relatively fast approximated test which provides sub-set of potentially overlapped faces.
 */
class BRepExtrema_SelfIntersection extends BRepExtrema_ElementFilter {
}

class BRepExtrema_SelfIntersection_1 extends BRepExtrema_SelfIntersection {}

class BRepExtrema_SelfIntersection_2 extends BRepExtrema_SelfIntersection {}

/**
 * Tool class for shape proximity detection. For two given shapes and given tolerance (offset from the mesh) the algorithm allows to determine whether or not they are overlapped. The algorithm input consists of any shapes which can be decomposed into individual faces (used as basic shape elements). High performance is achieved through the use of existing triangulation of faces. So poly triangulation (with the desired deflection) should already be built. Note that solution is approximate (and corresponds to the deflection used for triangulation).
 */
class BRepExtrema_ShapeProximity {
}

class BRepExtrema_ShapeProximity_1 extends BRepExtrema_ShapeProximity {}

class BRepExtrema_ShapeProximity_2 extends BRepExtrema_ShapeProximity {}

/**
 * This class is used to store information relative to the minimum distance between two shapes.
 */
class BRepExtrema_SolutionElem {
}

class BRepExtrema_SolutionElem_1 extends BRepExtrema_SolutionElem {}

class BRepExtrema_SolutionElem_2 extends BRepExtrema_SolutionElem {}

class BRepExtrema_SolutionElem_3 extends BRepExtrema_SolutionElem {}

class BRepExtrema_SolutionElem_4 extends BRepExtrema_SolutionElem {}

/**
 * Triangle set corresponding to specific face.
 */
class BRepExtrema_TriangleSet extends BVH_PrimitiveSet3d {
}

class BRepExtrema_TriangleSet_1 extends BRepExtrema_TriangleSet {}

class BRepExtrema_TriangleSet_2 extends BRepExtrema_TriangleSet {}

class BRepExtrema_UnCompatibleShape extends Standard_DomainError {
}

class BRepExtrema_UnCompatibleShape_1 extends BRepExtrema_UnCompatibleShape {}

class BRepExtrema_UnCompatibleShape_2 extends BRepExtrema_UnCompatibleShape {}

/**
 * Provides a basic tool to implement features topological operations. The main goal of the algorithm is to perform the result of the operation according to the kept parts of the tool. Input data: a) DS; b) The kept parts of the tool; If the map of the kept parts of the tool is not filled boolean operation of the given type will be performed; c) Operation required. Steps: a) Fill myShapes, myRemoved maps; b) Rebuild edges and faces; c) Build images of the object; d) Build the result of the operation. Result: Result shape of the operation required.
 */
class BRepFeat_Builder extends BOPAlgo_BOP {
}

/**
 * Provides general functions to build form features. Form features can be depressions or protrusions and include the following types: - Cylinder - Draft Prism - Prism - Revolved feature - Pipe In each case, you have a choice of operation type between the following: - removing matter (a Boolean cut: Fuse setting 0) - adding matter (Boolean fusion: Fuse setting 1) The semantics of form feature creation is based on the construction of shapes: - along a length - up to a limiting face - from a limiting face to a height - above and/or below a plane The shape defining construction of the feature can be either the supporting edge or the concerned area of a face. In case of the supporting edge, this contour can be attached to a face of the basis shape by binding. When the contour is bound to this face, the information that the contour will slide on the face becomes available to the relevant class methods. In case of the concerned area of a face, you could, for example, cut it out and move it to a different height which will define the limiting face of a protrusion or depression. Topological definition with local operations of this sort makes calculations simpler and faster than a global operation. The latter would entail a second phase of removing unwanted matter to get the same result.
 */
class BRepFeat_Form extends BRepBuilderAPI_MakeShape {
}

/**
 * One of the most significant aspects of BRepFeat functionality is the use of local operations as opposed to global ones. In a global operation, you would first construct a form of the type you wanted in your final feature, and then remove matter so that it could fit into your initial basis object. In a local operation, however, you specify the domain of the feature construction with aspects of the shape on which the feature is being created. These semantics are expressed in terms of a member shape of the basis shape from which - or up to which - matter will be added or removed. As a result, local operations make calculations simpler and faster than global operations. Glueing uses wires or edges of a face in the basis shape. These are to become a part of the feature. They are first cut out and then projected to a plane outside or inside the basis shape. By rebuilding the initial shape incorporating the edges and the faces of the tool, protrusion features can be constructed.
 */
class BRepFeat_Gluer extends BRepBuilderAPI_MakeShape {
}

class BRepFeat_Gluer_1 extends BRepFeat_Gluer {}

class BRepFeat_Gluer_2 extends BRepFeat_Gluer {}

/**
 * Provides a tool to make cylindrical holes on a shape.
 */
class BRepFeat_MakeCylindricalHole extends BRepFeat_Builder {
}

/**
 * Describes functions to build draft prism topologies from basis shape surfaces. These can be depressions or protrusions. The semantics of draft prism feature creation is based on the construction of shapes: - along a length - up to a limiting face - from a limiting face to a height. The shape defining construction of the draft prism feature can be either the supporting edge or the concerned area of a face. In case of the supporting edge, this contour can be attached to a face of the basis shape by binding. When the contour is bound to this face, the information that the contour will slide on the face becomes available to the relevant class methods. In case of the concerned area of a face, you could, for example, cut it out and move it to a different height which will define the limiting face of a protrusion or depression.
 */
class BRepFeat_MakeDPrism extends BRepFeat_Form {
}

class BRepFeat_MakeDPrism_1 extends BRepFeat_MakeDPrism {}

class BRepFeat_MakeDPrism_2 extends BRepFeat_MakeDPrism {}

/**
 * Constructs compound shapes with pipe features. These can be depressions or protrusions. The semantics of pipe feature creation is based on the construction of shapes: - along a length - up to a limiting face - from a limiting face to a height. The shape defining construction of the pipe feature can be either the supporting edge or the concerned area of a face. In case of the supporting edge, this contour can be attached to a face of the basis shape by binding. When the contour is bound to this face, the information that the contour will slide on the face becomes available to the relevant class methods. In case of the concerned area of a face, you could, for example, cut it out and move it to a different height which will define the limiting face of a protrusion or depression.
 */
class BRepFeat_MakePipe extends BRepFeat_Form {
}

class BRepFeat_MakePipe_1 extends BRepFeat_MakePipe {}

class BRepFeat_MakePipe_2 extends BRepFeat_MakePipe {}

/**
 * Describes functions to build prism features. These can be depressions or protrusions. The semantics of prism feature creation is based on the construction of shapes: - along a length - up to a limiting face - from a limiting face to a height. The shape defining construction of the prism feature can be either the supporting edge or the concerned area of a face. In case of the supporting edge, this contour can be attached to a face of the basis shape by binding. When the contour is bound to this face, the information that the contour will slide on the face becomes available to the relevant class methods. In case of the concerned area of a face, you could, for example, cut it out and move it to a different height which will define the limiting face of a protrusion or depression.
 */
class BRepFeat_MakePrism extends BRepFeat_Form {
}

class BRepFeat_MakePrism_1 extends BRepFeat_MakePrism {}

class BRepFeat_MakePrism_2 extends BRepFeat_MakePrism {}

/**
 * Describes functions to build revolved shells from basis shapes.
 */
class BRepFeat_MakeRevol extends BRepFeat_Form {
}

class BRepFeat_MakeRevol_1 extends BRepFeat_MakeRevol {}

class BRepFeat_MakeRevol_2 extends BRepFeat_MakeRevol {}

/**
 * MakeRevolutionForm Generates a surface of revolution in the feature as it slides along a revolved face in the basis shape. The semantics of mechanical features is built around giving thickness to a contour. This thickness can either be unilateral - on one side of the contour - or bilateral - on both sides. As in the semantics of form features, the thickness is defined by construction of shapes in specific contexts. The development contexts differ, however,in case of mechanical features. Here they include extrusion: - to a limiting face of the basis shape - to or from a limiting plane - to a height.
 */
class BRepFeat_MakeRevolutionForm extends BRepFeat_RibSlot {
}

class BRepFeat_MakeRevolutionForm_1 extends BRepFeat_MakeRevolutionForm {}

class BRepFeat_MakeRevolutionForm_2 extends BRepFeat_MakeRevolutionForm {}

/**
 * Provides functions to build mechanical features. Mechanical features include ribs - protrusions and grooves (or slots) - depressions along planar (linear) surfaces or revolution surfaces. The semantics of mechanical features is built around giving thickness to a contour. This thickness can either be unilateral - on one side of the contour - or bilateral - on both sides. As in the semantics of form features, the thickness is defined by construction of shapes in specific contexts. The development contexts differ, however,in case of mechanical features. Here they include extrusion: - to a limiting face of the basis shape - to or from a limiting plane - to a height.
 */
class BRepFeat_RibSlot extends BRepBuilderAPI_MakeShape {
}

/**
 * One of the most significant aspects of BRepFeat functionality is the use of local operations as opposed to global ones. In a global operation, you would first construct a form of the type you wanted in your final feature, and then remove matter so that it could fit into your initial basis object. In a local operation, however, you specify the domain of the feature construction with aspects of the shape on which the feature is being created. These semantics are expressed in terms of a member shape of the basis shape from which - or up to which - matter will be added or removed. As a result, local operations make calculations simpler and faster than global operations. In BRepFeat, the semantics of local operations define features constructed from a contour or a part of the basis shape referred to as the tool. In a SplitShape object, wires or edges of a face in the basis shape to be used as a part of the feature are cut out and projected to a plane outside or inside the basis shape. By rebuilding the initial shape incorporating the edges and the faces of the tool, protrusion or depression features can be constructed.
 */
class BRepFeat_SplitShape extends BRepBuilderAPI_MakeShape {
}

class BRepFeat_SplitShape_1 extends BRepFeat_SplitShape {}

class BRepFeat_SplitShape_2 extends BRepFeat_SplitShape {}

class BRepFill {
}

/**
 * Build Location Law, with a Wire. In the case of guided contour and trihedron by reduced curvilinear abscissa
 */
class BRepFill_ACRLaw extends BRepFill_LocationLaw {
}

/**
 * Constructs an evolved volume from a spine (wire or face) and a profile ( wire).
 */
class BRepFill_AdvancedEvolved {
}

/**
 * Evaluate the 3dCurve and the PCurves described in a MultiLine from BRepFill. The parametrization of those curves is not imposed by the Bissectrice. The parametrization is given approximatively by the abscissa of the curve3d.
 */
class BRepFill_ApproxSeewing {
}

class BRepFill_ApproxSeewing_1 extends BRepFill_ApproxSeewing {}

class BRepFill_ApproxSeewing_2 extends BRepFill_ApproxSeewing {}

/**
 * Constructs a sequence of Wires (with good orientation and origin) agreed each other so that the surface passing through these sections is not twisted
 */
class BRepFill_CompatibleWires {
}

class BRepFill_CompatibleWires_1 extends BRepFill_CompatibleWires {}

class BRepFill_CompatibleWires_2 extends BRepFill_CompatibleWires {}

class BRepFill_ComputeCLine {
}

class BRepFill_ComputeCLine_1 extends BRepFill_ComputeCLine {}

class BRepFill_ComputeCLine_2 extends BRepFill_ComputeCLine {}

/**
 * same as CurveConstraint from GeomPlate with BRepAdaptor_Surface instead of GeomAdaptor_Surface
 */
class BRepFill_CurveConstraint extends GeomPlate_CurveConstraint {
}

class BRepFill_CurveConstraint_1 extends BRepFill_CurveConstraint {}

class BRepFill_CurveConstraint_2 extends BRepFill_CurveConstraint {}

class BRepFill_Draft {
}

/**
 * Build Location Law, with a Wire.
 */
class BRepFill_DraftLaw extends BRepFill_Edge3DLaw {
}

/**
 * Build Location Law, with a Wire.
 */
class BRepFill_Edge3DLaw extends BRepFill_LocationLaw {
}

class BRepFill_EdgeFaceAndOrder {
}

class BRepFill_EdgeFaceAndOrder_1 extends BRepFill_EdgeFaceAndOrder {}

class BRepFill_EdgeFaceAndOrder_2 extends BRepFill_EdgeFaceAndOrder {}

/**
 * Build Location Law, with a Wire and a Surface.
 */
class BRepFill_EdgeOnSurfLaw extends BRepFill_LocationLaw {
}

/**
 * Constructs an evolved volume from a spine (wire or face) and a profile ( wire).
 */
class BRepFill_Evolved {
}

class BRepFill_Evolved_1 extends BRepFill_Evolved {}

class BRepFill_Evolved_2 extends BRepFill_Evolved {}

class BRepFill_Evolved_3 extends BRepFill_Evolved {}

/**
 * A structure containing Face and Order of constraint
 */
class BRepFill_FaceAndOrder {
}

class BRepFill_FaceAndOrder_1 extends BRepFill_FaceAndOrder {}

class BRepFill_FaceAndOrder_2 extends BRepFill_FaceAndOrder {}

/**
 * N-Side Filling This algorithm avoids to build a face from: * a set of edges defining the bounds of the face and some constraints the surface support has to satisfy * a set of edges and points defining some constraints the support surface has to satisfy * an initial surface to deform for satisfying the constraints * a set of parameters to control the constraints.
 */
class BRepFill_Filling {
}

/**
 * Compute a topological surface ( a shell) using generating wires. The face of the shell will be ruled surfaces passing by the wires. The wires must have the same number of edges.
 */
class BRepFill_Generator {
}

/**
 * Location Law on a Wire.
 */
class BRepFill_LocationLaw extends Standard_Transient {
}

/**
 * Class used to compute the 3d curve and the two 2d curves resulting from the intersection of a surface of linear extrusion( Bissec, Dz) and the 2 faces. This 3 curves will have the same parametrization as the Bissectrice. This class is to be send to an approximation routine.
 */
class BRepFill_MultiLine extends AppCont_Function {
}

class BRepFill_MultiLine_1 extends BRepFill_MultiLine {}

class BRepFill_MultiLine_2 extends BRepFill_MultiLine {}

/**
 * Build Section Law, with N Sections
 */
class BRepFill_NSections extends BRepFill_SectionLaw {
}

class BRepFill_NSections_1 extends BRepFill_NSections {}

class BRepFill_NSections_2 extends BRepFill_NSections {}

/**
 * this class is used to find the generating shapes of an OffsetWire.
 */
class BRepFill_OffsetAncestors {
}

class BRepFill_OffsetAncestors_1 extends BRepFill_OffsetAncestors {}

class BRepFill_OffsetAncestors_2 extends BRepFill_OffsetAncestors {}

/**
 * Constructs a Offset Wire to a spine (wire or face). Offset direction will be to outer region in case of positive offset value and to inner region in case of negative offset value. Inner/Outer region for open wire is defined by the following rule: when we go along the wire (taking into account of edges orientation) then outer region will be on the right side, inner region will be on the left side. In case of closed wire, inner region will always be inside the wire (at that, edges orientation is not taken into account). The Wire or the Face must be planar and oriented correctly.
 */
class BRepFill_OffsetWire {
}

class BRepFill_OffsetWire_1 extends BRepFill_OffsetWire {}

class BRepFill_OffsetWire_2 extends BRepFill_OffsetWire {}

/**
 * Create a shape by sweeping a shape (the profile) along a wire (the spine).
 */
class BRepFill_Pipe {
}

class BRepFill_Pipe_1 extends BRepFill_Pipe {}

class BRepFill_Pipe_2 extends BRepFill_Pipe {}

/**
 * Computes a topological shell using some wires (spines and profiles) and diplacement option Perform general sweeping construction
 */
class BRepFill_PipeShell extends Standard_Transient {
}

/**
 * To store section definition
 */
class BRepFill_Section {
}

class BRepFill_Section_1 extends BRepFill_Section {}

class BRepFill_Section_2 extends BRepFill_Section {}

/**
 * Build Section Law, with an Vertex, or an Wire
 */
class BRepFill_SectionLaw extends Standard_Transient {
}

/**
 * Place a shape in a local axis coordinate
 */
class BRepFill_SectionPlacement {
}

class BRepFill_SectionPlacement_1 extends BRepFill_SectionPlacement {}

class BRepFill_SectionPlacement_2 extends BRepFill_SectionPlacement {}

/**
 * Build Section Law, with an Vertex, or an Wire
 */
class BRepFill_ShapeLaw extends BRepFill_SectionLaw {
}

class BRepFill_ShapeLaw_1 extends BRepFill_ShapeLaw {}

class BRepFill_ShapeLaw_2 extends BRepFill_ShapeLaw {}

class BRepFill_ShapeLaw_3 extends BRepFill_ShapeLaw {}

/**
 * Topological Sweep Algorithm Computes an Sweep shell using a generating wire, an SectionLaw and an LocationLaw.
 */
class BRepFill_Sweep {
}

/**
 * Geometric Tool using to construct Offset Wires.
 */
class BRepFill_TrimEdgeTool {
}

class BRepFill_TrimEdgeTool_1 extends BRepFill_TrimEdgeTool {}

class BRepFill_TrimEdgeTool_2 extends BRepFill_TrimEdgeTool {}

/**
 * Trims sets of faces in the corner to make proper parts of pipe
 */
class BRepFill_TrimShellCorner {
}

/**
 * Compute the Pcurves and the 3d curves resulting of the trimming of a face by an extruded surface.
 */
class BRepFill_TrimSurfaceTool {
}

/**
 * Construction of fillets on the edges of a Shell.
 */
class BRepFilletAPI_LocalOperation extends BRepBuilderAPI_MakeShape {
}

/**
 * Describes functions to build chamfers on edges of a shell or solid. Chamfered Edge of a Shell or Solid A MakeChamfer object provides a framework for: - initializing the construction algorithm with a given shape, - acquiring the data characterizing the chamfers, - building the chamfers and constructing the resulting shape, and - consulting the result.
 */
class BRepFilletAPI_MakeChamfer extends BRepFilletAPI_LocalOperation {
}

/**
 * Describes functions to build fillets on the broken edges of a shell or solid. A MakeFillet object provides a framework for: - initializing the construction algorithm with a given shape, - acquiring the data characterizing the fillets, - building the fillets and constructing the resulting shape, and - consulting the result.
 */
class BRepFilletAPI_MakeFillet extends BRepFilletAPI_LocalOperation {
}

/**
 * Describes functions to build fillets and chamfers on the vertices of a planar face. Fillets and Chamfers on the Vertices of a Planar Face A MakeFillet2d object provides a framework for: - initializing the construction algorithm with a given face, - acquiring the data characterizing the fillets and chamfers, - building the fillets and chamfers, and constructing the resulting shape, and - consulting the result. Warning Only segments of straight lines and arcs of circles are treated. BSplines are not processed.
 */
class BRepFilletAPI_MakeFillet2d extends BRepBuilderAPI_MakeShape {
}

class BRepFilletAPI_MakeFillet2d_1 extends BRepFilletAPI_MakeFillet2d {}

class BRepFilletAPI_MakeFillet2d_2 extends BRepFilletAPI_MakeFillet2d {}

/**
 * Provides global functions to compute a shape's global properties for lines, surfaces or volumes, and bring them together with the global properties already computed for a geometric system. The global properties computed for a system are : - its mass, - its center of mass, - its matrix of inertia, - its moment about an axis, - its radius of gyration about an axis, - and its principal properties of inertia such as principal axis, principal moments, principal radius of gyration.
 */
class BRepGProp {
}

/**
 * Computes the global properties of bounded curves in 3D space. The curve must have at least a continuity C1. It can be a curve as defined in the template CurveTool from package GProp. This template gives the minimum of methods required to evaluate the global properties of a curve 3D with the algorithmes of GProp.
 */
class BRepGProp_Cinert extends GProp_GProps {
}

class BRepGProp_Cinert_1 extends BRepGProp_Cinert {}

class BRepGProp_Cinert_2 extends BRepGProp_Cinert {}

/**
 * Arc iterator. Returns only Forward and Reversed edges from the face in an undigested order.
 */
class BRepGProp_Domain {
}

class BRepGProp_Domain_1 extends BRepGProp_Domain {}

class BRepGProp_Domain_2 extends BRepGProp_Domain {}

/**
 * Provides the required methods to instantiate CGProps from GProp with a Curve from BRepAdaptor.
 */
class BRepGProp_EdgeTool {
}

class BRepGProp_Face {
}

class BRepGProp_Face_1 extends BRepGProp_Face {}

class BRepGProp_Face_2 extends BRepGProp_Face {}

/**
 * Computes the global properties of of polylines represented by set of points. This class is used for computation of global properties of edge, which has no exact geometry (3d or 2d curve), but has any of allowed polygons.
 */
class BRepGProp_MeshCinert extends GProp_GProps {
}

/**
 * Computes the global properties of a surface mesh. The mesh can be interpreted as just a surface or as a piece of volume limited by this surface.
 */
class BRepGProp_MeshProps extends GProp_GProps {
}

/**
 * Computes the global properties of a face in 3D space. The face 's requirements to evaluate the global properties are defined in the template FaceTool from package GProp.
 */
class BRepGProp_Sinert extends GProp_GProps {
}

class BRepGProp_Sinert_1 extends BRepGProp_Sinert {}

class BRepGProp_Sinert_2 extends BRepGProp_Sinert {}

class BRepGProp_Sinert_3 extends BRepGProp_Sinert {}

class BRepGProp_Sinert_4 extends BRepGProp_Sinert {}

class BRepGProp_Sinert_5 extends BRepGProp_Sinert {}

/**
 * This class represents the integrand function for the outer integral computation. The returned value represents the integral of UFunction. It depends on the value type and the flag IsByPoint.
 */
class BRepGProp_TFunction extends math_Function {
}

/**
 * This class represents the integrand function for computation of an inner integral. The returned value depends on the value type and the flag IsByPoint.
 */
class BRepGProp_UFunction extends math_Function {
}

/**
 * Computes the global properties of a geometric solid (3D closed region of space) delimited with : . a surface . a point and a surface . a plane and a surface
 */
class BRepGProp_Vinert extends GProp_GProps {
}

class BRepGProp_Vinert_1 extends BRepGProp_Vinert {}

class BRepGProp_Vinert_2 extends BRepGProp_Vinert {}

class BRepGProp_Vinert_3 extends BRepGProp_Vinert {}

class BRepGProp_Vinert_4 extends BRepGProp_Vinert {}

class BRepGProp_Vinert_5 extends BRepGProp_Vinert {}

class BRepGProp_Vinert_6 extends BRepGProp_Vinert {}

class BRepGProp_Vinert_7 extends BRepGProp_Vinert {}

class BRepGProp_Vinert_8 extends BRepGProp_Vinert {}

class BRepGProp_Vinert_9 extends BRepGProp_Vinert {}

class BRepGProp_Vinert_10 extends BRepGProp_Vinert {}

class BRepGProp_Vinert_11 extends BRepGProp_Vinert {}

class BRepGProp_Vinert_12 extends BRepGProp_Vinert {}

class BRepGProp_Vinert_13 extends BRepGProp_Vinert {}

/**
 * Computes the intersection between a face and a curve. To intersect one curve with shape method Init(Shape, curve, tTol) should be used. To intersect a few curves with specified shape it is necessary to load shape one time using method Load(shape, tol) and find intersection points for each curve using method Init(curve). For iteration by intersection points method More() and Next() should be used.
 */
class BRepIntCurveSurface_Inter {
}

/**
 * These global functions compute the degree of continuity of a curve built by concatenation of two edges at their junction point.
 */
class BRepLProp {
}

class BRepLProp_CLProps {
}

class BRepLProp_CLProps_1 extends BRepLProp_CLProps {}

class BRepLProp_CLProps_2 extends BRepLProp_CLProps {}

class BRepLProp_CLProps_3 extends BRepLProp_CLProps {}

class BRepLProp_CurveTool {
}

class BRepLProp_SLProps {
}

class BRepLProp_SLProps_1 extends BRepLProp_SLProps {}

class BRepLProp_SLProps_2 extends BRepLProp_SLProps {}

class BRepLProp_SLProps_3 extends BRepLProp_SLProps {}

class BRepLProp_SurfaceTool {
}

/**
 * The BRepLib package provides general utilities for BRep.
 */
class BRepLib {
}

/**
 * Computes the max distance between edge and its 2d representation on the face.
 */
class BRepLib_CheckCurveOnSurface {
}

class BRepLib_CheckCurveOnSurface_1 extends BRepLib_CheckCurveOnSurface {}

class BRepLib_CheckCurveOnSurface_2 extends BRepLib_CheckCurveOnSurface {}

/**
 * Root class for all commands in BRepLib.
 */
class BRepLib_Command {
}

/**
 * Provides an algorithm to find a Surface through a set of edges.
 */
class BRepLib_FindSurface {
}

class BRepLib_FindSurface_1 extends BRepLib_FindSurface {}

class BRepLib_FindSurface_2 extends BRepLib_FindSurface {}

/**
 * This class can detect vertices in a face that can be considered useless and then perform the fuse of the edges and remove the useless vertices. By useles vertices, we mean : * vertices that have exactly two connex edges * the edges connex to the vertex must have exactly the same 2 connex faces . * The edges connex to the vertex must have the same geometric support.
 */
class BRepLib_FuseEdges {
}

/**
 * Provides methods to build edges.
 */
class BRepLib_MakeEdge extends BRepLib_MakeShape {
}

class BRepLib_MakeEdge_1 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_2 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_3 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_4 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_5 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_6 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_7 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_8 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_9 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_10 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_11 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_12 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_13 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_14 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_15 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_16 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_17 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_18 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_19 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_20 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_21 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_22 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_23 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_24 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_25 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_26 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_27 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_28 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_29 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_30 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_31 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_32 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_33 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_34 extends BRepLib_MakeEdge {}

class BRepLib_MakeEdge_35 extends BRepLib_MakeEdge {}

/**
 * Provides methods to build edges.
 */
class BRepLib_MakeEdge2d extends BRepLib_MakeShape {
}

class BRepLib_MakeEdge2d_1 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_2 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_3 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_4 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_5 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_6 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_7 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_8 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_9 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_10 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_11 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_12 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_13 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_14 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_15 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_16 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_17 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_18 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_19 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_20 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_21 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_22 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_23 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_24 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_25 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_26 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_27 extends BRepLib_MakeEdge2d {}

class BRepLib_MakeEdge2d_28 extends BRepLib_MakeEdge2d {}

/**
 * Provides methods to build faces.
 */
class BRepLib_MakeFace extends BRepLib_MakeShape {
}

class BRepLib_MakeFace_1 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_2 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_3 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_4 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_5 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_6 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_7 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_8 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_9 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_10 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_11 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_12 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_13 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_14 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_15 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_16 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_17 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_18 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_19 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_20 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_21 extends BRepLib_MakeFace {}

class BRepLib_MakeFace_22 extends BRepLib_MakeFace {}

/**
 * Class to build polygonal wires.
 */
class BRepLib_MakePolygon extends BRepLib_MakeShape {
}

class BRepLib_MakePolygon_1 extends BRepLib_MakePolygon {}

class BRepLib_MakePolygon_2 extends BRepLib_MakePolygon {}

class BRepLib_MakePolygon_3 extends BRepLib_MakePolygon {}

class BRepLib_MakePolygon_4 extends BRepLib_MakePolygon {}

class BRepLib_MakePolygon_5 extends BRepLib_MakePolygon {}

class BRepLib_MakePolygon_6 extends BRepLib_MakePolygon {}

class BRepLib_MakePolygon_7 extends BRepLib_MakePolygon {}

/**
 * This is the root class for all shape constructions. It stores the result.
 */
class BRepLib_MakeShape extends BRepLib_Command {
}

/**
 * Provides methos to build shells.
 */
class BRepLib_MakeShell extends BRepLib_MakeShape {
}

class BRepLib_MakeShell_1 extends BRepLib_MakeShell {}

class BRepLib_MakeShell_2 extends BRepLib_MakeShell {}

class BRepLib_MakeShell_3 extends BRepLib_MakeShell {}

/**
 * Makes a solid from compsolid or shells.
 */
class BRepLib_MakeSolid extends BRepLib_MakeShape {
}

class BRepLib_MakeSolid_1 extends BRepLib_MakeSolid {}

class BRepLib_MakeSolid_2 extends BRepLib_MakeSolid {}

class BRepLib_MakeSolid_3 extends BRepLib_MakeSolid {}

class BRepLib_MakeSolid_4 extends BRepLib_MakeSolid {}

class BRepLib_MakeSolid_5 extends BRepLib_MakeSolid {}

class BRepLib_MakeSolid_6 extends BRepLib_MakeSolid {}

class BRepLib_MakeSolid_7 extends BRepLib_MakeSolid {}

/**
 * Provides methods to build vertices.
 */
class BRepLib_MakeVertex extends BRepLib_MakeShape {
}

/**
 * Provides methods to build wires.
 */
class BRepLib_MakeWire extends BRepLib_MakeShape {
}

class BRepLib_MakeWire_1 extends BRepLib_MakeWire {}

class BRepLib_MakeWire_2 extends BRepLib_MakeWire {}

class BRepLib_MakeWire_3 extends BRepLib_MakeWire {}

class BRepLib_MakeWire_4 extends BRepLib_MakeWire {}

class BRepLib_MakeWire_5 extends BRepLib_MakeWire {}

class BRepLib_MakeWire_6 extends BRepLib_MakeWire {}

class BRepLib_MakeWire_7 extends BRepLib_MakeWire {}

/**
 * BisectingLocus generates and contains the Bisecting_Locus of a set of lines from Geom2d, defined by <ExploSet>.
 */
class BRepMAT2d_BisectingLocus {
}

/**
 * Construct an explorer from wires, face, set of curves from Geom2d to compute the bisecting Locus.
 */
class BRepMAT2d_Explorer {
}

class BRepMAT2d_Explorer_1 extends BRepMAT2d_Explorer {}

class BRepMAT2d_Explorer_2 extends BRepMAT2d_Explorer {}

/**
 * Constucts links between the Wire or the Face of the explorer and the BasicElts contained in the bisecting locus.
 */
class BRepMAT2d_LinkTopoBilo {
}

class BRepMAT2d_LinkTopoBilo_1 extends BRepMAT2d_LinkTopoBilo {}

class BRepMAT2d_LinkTopoBilo_2 extends BRepMAT2d_LinkTopoBilo {}

/**
 * Class provides base fuctionality for algorithms building face triangulation. Performs initialization of BRepMesh_DataStructureOfDelaun and nodes map structures.
 */
class BRepMesh_BaseMeshAlgo extends IMeshTools_MeshAlgo {
}

/**
 * Auxiliary class extending UV range splitter in order to generate internal nodes for NURBS surface.
 */
class BRepMesh_BoundaryParamsRangeSplitter extends BRepMesh_NURBSRangeSplitter {
}

/**
 * Describes a 2d circle with a size of only 3 Standard_Real numbers instead of gp who needs 7 Standard_Real numbers.
 */
class BRepMesh_Circle {
}

class BRepMesh_Circle_1 extends BRepMesh_Circle {}

class BRepMesh_Circle_2 extends BRepMesh_Circle {}

/**
 * Auxilary class to find circles shot by the given point.
 */
class BRepMesh_CircleInspector extends NCollection_CellFilter_InspectorXY {
}

/**
 * Create sort and destroy the circles used in triangulation.
 */
class BRepMesh_CircleTool {
}

class BRepMesh_CircleTool_1 extends BRepMesh_CircleTool {}

class BRepMesh_CircleTool_2 extends BRepMesh_CircleTool {}

/**
 * Auxilary class intended for classification of points regarding internals of discrete face.
 */
class BRepMesh_Classifier extends Standard_Transient {
}

/**
 * Auxiliary class extending default range splitter in order to generate internal nodes for conical surface.
 */
class BRepMesh_ConeRangeSplitter extends BRepMesh_DefaultRangeSplitter {
}

/**
 * Class provides base fuctionality to build face triangulation using Dealunay approach. Performs generation of mesh using raw data from model.
 */
class BRepMesh_ConstrainedBaseMeshAlgo extends BRepMesh_BaseMeshAlgo {
}

/**
 * Class implemeting default context of BRepMesh algorithm. Initializes context by default algorithms.
 */
class BRepMesh_Context extends IMeshTools_Context {
}

/**
 * Auxiliary class performing tessellation of passed edge according to specified parameters.
 */
class BRepMesh_CurveTessellator extends IMeshTools_CurveTessellator {
}

class BRepMesh_CurveTessellator_1 extends BRepMesh_CurveTessellator {}

class BRepMesh_CurveTessellator_2 extends BRepMesh_CurveTessellator {}

/**
 * Class provides base fuctionality to build face triangulation using custom triangulation algorithm. Performs generation of mesh using raw data from model.
 */
class BRepMesh_CustomBaseMeshAlgo extends BRepMesh_ConstrainedBaseMeshAlgo {
}

/**
 * Auxiliary class extending default range splitter in order to generate internal nodes for cylindrical surface.
 */
class BRepMesh_CylinderRangeSplitter extends BRepMesh_DefaultRangeSplitter {
}

/**
 * Describes the data structure necessary for the mesh algorithms in two dimensions plane or on surface by meshing in UV space.
 */
class BRepMesh_DataStructureOfDelaun extends Standard_Transient {
}

/**
 * Default tool to define range of discrete face model and obtain grid points distributed within this range.
 */
class BRepMesh_DefaultRangeSplitter {
}

/**
 * Auxiliary tool encompassing methods to compute deflection of shapes.
 */
class BRepMesh_Deflection extends Standard_Transient {
}

/**
 * Compute the Delaunay's triangulation with the algorithm of Watson.
 */
class BRepMesh_Delaun {
}

class BRepMesh_Delaun_1 extends BRepMesh_Delaun {}

class BRepMesh_Delaun_2 extends BRepMesh_Delaun {}

class BRepMesh_Delaun_3 extends BRepMesh_Delaun {}

class BRepMesh_Delaun_4 extends BRepMesh_Delaun {}

class BRepMesh_Delaun_5 extends BRepMesh_Delaun {}

/**
 * Class provides base fuctionality to build face triangulation using Dealunay approach. Performs generation of mesh using raw data from model.
 */
class BRepMesh_DelaunayBaseMeshAlgo extends BRepMesh_ConstrainedBaseMeshAlgo {
}

/**
 * This class intended to setup / retrieve default triangulation algorithm. Use BRepMesh_DiscretFactory::Get() static method to retrieve global Factory instance. Use BRepMesh_DiscretFactory::Discret() method to retrieve meshing tool.
 */
class BRepMesh_DiscretFactory {
}

/**
 * This is a common interface for meshing algorithms instantiated by Mesh Factory and implemented by plugins.
 */
class BRepMesh_DiscretRoot extends Standard_Transient {
}

/**
 * Light weighted structure representing link of the mesh.
 */
class BRepMesh_Edge extends BRepMesh_OrientedEdge {
}

class BRepMesh_Edge_1 extends BRepMesh_Edge {}

class BRepMesh_Edge_2 extends BRepMesh_Edge {}

/**
 * Class implements functionality of edge discret tool. Performs check of the edges for existing Poly_PolygonOnTriangulation. In case if it fits specified deflection, restores data structure using it, else clears edges from outdated data.
 */
class BRepMesh_EdgeDiscret extends IMeshTools_ModelAlgo {
}

/**
 * Auxiliary class implements functionality retrieving tessellated representation of an edge stored in polygon.
 */
class BRepMesh_EdgeTessellationExtractor extends IMeshTools_CurveTessellator {
}

/**
 * Auxiliary class checking wires of target face for self-intersections. Explodes wires of discrete face on sets of segments using tessellation data stored in model. Each segment is then checked for intersection with other ones. All collisions are registerd and returned as result of check.
 */
class BRepMesh_FaceChecker extends Standard_Transient {
}

/**
 * Class implements functionality starting triangulation of model's faces. Each face is processed separately and can be executed in parallel mode. Uses mesh algo factory passed as initializer to create instance of triangulation algorithm according to type of surface of target face.
 */
class BRepMesh_FaceDiscret extends IMeshTools_ModelAlgo {
}

class BRepMesh_FastDiscret {
}

/**
 * Tool class accumulating common geometrical functions as well as functionality using shape geometry to produce data necessary for tessellation. General aim is to calculate discretization points for the given curve or iso curve of surface according to the specified parameters.
 */
class BRepMesh_GeomTool {
}

class BRepMesh_GeomTool_1 extends BRepMesh_GeomTool {}

class BRepMesh_GeomTool_2 extends BRepMesh_GeomTool {}

/**
 * Builds the mesh of a shape with respect of their correctly triangulated parts
 */
class BRepMesh_IncrementalMesh extends BRepMesh_DiscretRoot {
}

class BRepMesh_IncrementalMesh_1 extends BRepMesh_IncrementalMesh {}

class BRepMesh_IncrementalMesh_2 extends BRepMesh_IncrementalMesh {}

class BRepMesh_IncrementalMesh_3 extends BRepMesh_IncrementalMesh {}

/**
 * Default implementation of IMeshTools_MeshAlgoFactory providing algorithms of different compexity depending on type of target surface.
 */
class BRepMesh_MeshAlgoFactory extends IMeshTools_MeshAlgoFactory {
}

/**
 * Auxiliary tool providing API for manipulation with BRepMesh_DataStructureOfDelaun.
 */
class BRepMesh_MeshTool extends Standard_Transient {
}

/**
 * Class implements interface representing tool for discrete model building.
 */
class BRepMesh_ModelBuilder extends IMeshTools_ModelBuilder {
}

/**
 * Class implements functionality of model healer tool. Iterates over model's faces and checks consistency of their wires, i.e.whether wires are closed and do not contain self - intersections. In case if wire contains disconnected parts, ends of adjacent edges forming the gaps are connected in parametric space forcibly. The notion of this operation is to create correct discrete model defined relatively parametric space of target face taking into account connectivity and tolerances of 3D space only. This means that there are no specific computations are made for the sake of determination of U and V tolerance. Registers intersections on edges forming the face's shape and tries to amplify discrete represenation by decreasing of deflection for the target edge. Checks can be performed in parallel mode.
 */
class BRepMesh_ModelHealer extends IMeshTools_ModelAlgo {
}

/**
 * Class implements functionality of model post-processing tool. Stores polygons on triangulations to TopoDS_Edge.
 */
class BRepMesh_ModelPostProcessor extends IMeshTools_ModelAlgo {
}

/**
 * Class implements functionality of model pre-processing tool. Nullifies existing polygonal data in case if model elements have IMeshData_Outdated status.
 */
class BRepMesh_ModelPreProcessor extends IMeshTools_ModelAlgo {
}

/**
 * Auxiliary class extending UV range splitter in order to generate internal nodes for NURBS surface.
 */
class BRepMesh_NURBSRangeSplitter extends BRepMesh_UVParamRangeSplitter {
}

/**
 * Light weighted structure representing simple link.
 */
class BRepMesh_OrientedEdge {
}

class BRepMesh_OrientedEdge_1 extends BRepMesh_OrientedEdge {}

class BRepMesh_OrientedEdge_2 extends BRepMesh_OrientedEdge {}

/**
 * This class represents a pair of integer indices to store element indices connected to link. It is restricted to store more than two indices in it.
 */
class BRepMesh_PairOfIndex {
}

/**
 * Describes a selector and an iterator on a selector of components of a mesh.
 */
class BRepMesh_SelectorOfDataStructureOfDelaun extends Standard_Transient {
}

class BRepMesh_SelectorOfDataStructureOfDelaun_1 extends BRepMesh_SelectorOfDataStructureOfDelaun {}

class BRepMesh_SelectorOfDataStructureOfDelaun_2 extends BRepMesh_SelectorOfDataStructureOfDelaun {}

/**
 * Auxiliary class providing functionality to compute, retrieve and store data to TopoDS and model shape.
 */
class BRepMesh_ShapeTool extends Standard_Transient {
}

/**
 * Builds discrete model of a shape by adding faces and free edges. Computes deflection for corresponded shape and checks whether it fits existing polygonal representation. If not, cleans shape from outdated info.
 */
class BRepMesh_ShapeVisitor extends IMeshTools_ShapeVisitor {
}

/**
 * Auxiliary class extending default range splitter in order to generate internal nodes for spherical surface.
 */
class BRepMesh_SphereRangeSplitter extends BRepMesh_DefaultRangeSplitter {
}

/**
 * Auxiliary class extending UV range splitter in order to generate internal nodes for NURBS surface.
 */
class BRepMesh_TorusRangeSplitter extends BRepMesh_UVParamRangeSplitter {
}

/**
 * Light weighted structure representing triangle of mesh consisting of oriented links.
 */
class BRepMesh_Triangle {
}

class BRepMesh_Triangle_1 extends BRepMesh_Triangle {}

class BRepMesh_Triangle_2 extends BRepMesh_Triangle {}

/**
 * Intended to generate internal mesh nodes using UV parameters of boundary discrete points.
 */
class BRepMesh_UVParamRangeSplitter extends BRepMesh_DefaultRangeSplitter {
}

/**
 * Light weighted structure representing vertex of the mesh in parametric space. Vertex could be associated with 3d point stored in external map.
 */
class BRepMesh_Vertex {
}

class BRepMesh_Vertex_1 extends BRepMesh_Vertex {}

class BRepMesh_Vertex_2 extends BRepMesh_Vertex {}

class BRepMesh_Vertex_3 extends BRepMesh_Vertex {}

/**
 * Class intended for fast searching of the coincidence points.
 */
class BRepMesh_VertexInspector extends NCollection_CellFilter_InspectorXY {
}

/**
 * Describes data structure intended to keep mesh nodes defined in UV space and implements functionality providing their uniqueness regarding their position.
 */
class BRepMesh_VertexTool extends Standard_Transient {
}

/**
 * Auxiliary tools for offset algorithms
 */
class BRepOffset {
}

/**
 * Taper-adding transformations on a shape. The resulting shape is constructed by defining one face to be tapered after another one, as well as the geometric properties of their tapered transformation. Each tapered transformation is propagated along the series of faces which are tangential to one another and which contains the face to be tapered. This algorithm is useful in the construction of molds or dies. It facilitates the removal of the article being produced. A DraftAngle object provides a framework for: - initializing the construction algorithm with a given shape, - acquiring the data characterizing the faces to be tapered, - implementing the construction algorithm, and - consulting the results. Warning - This algorithm treats planar, cylindrical and conical faces. - Do not use shapes, which with a draft angle added to a face would modify the topology. This would, for example, involve creation of new vertices, edges or faces, or suppression of existing vertices, edges or faces. - Any face, which is continuous in tangency with the face to be tapered, will also be tapered. These connected faces must also respect the above criteria.
 */
class BRepOffsetAPI_DraftAngle extends BRepBuilderAPI_ModifyShape {
}

class BRepOffsetAPI_DraftAngle_1 extends BRepOffsetAPI_DraftAngle {}

class BRepOffsetAPI_DraftAngle_2 extends BRepOffsetAPI_DraftAngle {}

/**
 * Build a draft surface along a wire
 */
class BRepOffsetAPI_MakeDraft extends BRepBuilderAPI_MakeShape {
}

/**
 * Describes functions to build evolved shapes. An evolved shape is built from a planar spine (face or wire) and a profile (wire). The evolved shape is the unlooped sweep (pipe) of the profile along the spine. Self-intersections are removed. A MakeEvolved object provides a framework for: - defining the construction of an evolved shape, - implementing the construction algorithm, and - consulting the result. Computes an Evolved by 1 - sweeping a profile along a spine. 2 - removing the self-intersections.
 */
class BRepOffsetAPI_MakeEvolved extends BRepBuilderAPI_MakeShape {
}

class BRepOffsetAPI_MakeEvolved_1 extends BRepOffsetAPI_MakeEvolved {}

class BRepOffsetAPI_MakeEvolved_2 extends BRepOffsetAPI_MakeEvolved {}

/**
 * N-Side Filling This algorithm avoids to build a face from: * a set of edges defining the bounds of the face and some constraints the surface of the face has to satisfy * a set of edges and points defining some constraints the support surface has to satisfy * an initial surface to deform for satisfying the constraints * a set of parameters to control the constraints.
 */
class BRepOffsetAPI_MakeFilling extends BRepBuilderAPI_MakeShape {
}

/**
 * Describes algorithms for offsetting wires from a set of wires contained in a planar face. A MakeOffset object provides a framework for: - defining the construction of an offset, - implementing the construction algorithm, and - consulting the result.
 */
class BRepOffsetAPI_MakeOffset extends BRepBuilderAPI_MakeShape {
}

class BRepOffsetAPI_MakeOffset_1 extends BRepOffsetAPI_MakeOffset {}

class BRepOffsetAPI_MakeOffset_2 extends BRepOffsetAPI_MakeOffset {}

class BRepOffsetAPI_MakeOffset_3 extends BRepOffsetAPI_MakeOffset {}

/**
 * Describes functions to build a shell out of a shape. The result is an unlooped shape parallel to the source shape. A MakeOffsetShape object provides a framework for: - defining the construction of a shell - implementing the construction algorithm - consulting the result.
 */
class BRepOffsetAPI_MakeOffsetShape extends BRepBuilderAPI_MakeShape {
}

class BRepOffsetAPI_MakeOffsetShape_1 extends BRepOffsetAPI_MakeOffsetShape {}

class BRepOffsetAPI_MakeOffsetShape_2 extends BRepOffsetAPI_MakeOffsetShape {}

/**
 * Describes functions to build pipes. A pipe is built a basis shape (called the profile) along a wire (called the spine) by sweeping. The profile must not contain solids. A MakePipe object provides a framework for: - defining the construction of a pipe, - implementing the construction algorithm, and - consulting the result. Warning The MakePipe class implements pipe constructions with G1 continuous spines only.
 */
class BRepOffsetAPI_MakePipe extends BRepPrimAPI_MakeSweep {
}

class BRepOffsetAPI_MakePipe_1 extends BRepOffsetAPI_MakePipe {}

class BRepOffsetAPI_MakePipe_2 extends BRepOffsetAPI_MakePipe {}

/**
 * This class provides for a framework to construct a shell or a solid along a spine consisting in a wire. To produce a solid, the initial wire must be closed. Two approaches are used: - definition by section - by a section and a scaling law - by addition of successive intermediary sections - definition by sweep mode. - pseudo-Frenet - constant - binormal constant - normal defined by a surface support - normal defined by a guiding contour. The two global approaches can also be combined. You can also close the surface later in order to form a solid. Warning: some limitations exist -- Mode with auxilary spine is incompatible with hometetic laws -- Mode with auxilary spine and keep contact produce only CO surface.
 */
class BRepOffsetAPI_MakePipeShell extends BRepPrimAPI_MakeSweep {
}

/**
 * Describes functions to build hollowed solids. A hollowed solid is built from an initial solid and a set of faces on this solid, which are to be removed. The remaining faces of the solid become the walls of the hollowed solid, their thickness defined at the time of construction. the solid is built from an initial solid <S> and a set of faces {Fi} from <S>, builds a solid composed by two shells closed by the {Fi}. First shell <SS> is composed by all the faces of <S> expected {Fi}. Second shell is the offset shell of <SS>. A MakeThickSolid object provides a framework for: - defining the cross-section of a hollowed solid, - implementing the construction algorithm, and - consulting the result.
 */
class BRepOffsetAPI_MakeThickSolid extends BRepOffsetAPI_MakeOffsetShape {
}

class BRepOffsetAPI_MakeThickSolid_1 extends BRepOffsetAPI_MakeThickSolid {}

class BRepOffsetAPI_MakeThickSolid_2 extends BRepOffsetAPI_MakeThickSolid {}

/**
 * Describes functions to build a middle path of a pipe-like shape
 */
class BRepOffsetAPI_MiddlePath extends BRepBuilderAPI_MakeShape {
}

/**
 * A framework to define projection onto a shape according to the normal from each point to be projected. The target shape is a face, and the source shape is an edge or a wire.
 */
class BRepOffsetAPI_NormalProjection extends BRepBuilderAPI_MakeShape {
}

class BRepOffsetAPI_NormalProjection_1 extends BRepOffsetAPI_NormalProjection {}

class BRepOffsetAPI_NormalProjection_2 extends BRepOffsetAPI_NormalProjection {}

/**
 * Describes functions to build a loft. This is a shell or a solid passing through a set of sections in a given sequence. Usually sections are wires, but the first and the last sections may be vertices (punctual sections).
 */
class BRepOffsetAPI_ThruSections extends BRepBuilderAPI_MakeShape {
}

/**
 * Analyses the shape to find the parts of edges connecting the convex, concave or tangent faces.
 */
class BRepOffset_Analyse {
}

class BRepOffset_Analyse_1 extends BRepOffset_Analyse {}

class BRepOffset_Analyse_2 extends BRepOffset_Analyse {}

/**
 * Computes the intersections betwwen edges on a face stores result is SD as AsDes from BRepOffset.
 */
class BRepOffset_Inter2d {
}

/**
 * Computes the intersection face face in a set of faces Store the result in a SD as AsDes.
 */
class BRepOffset_Inter3d {
}

class BRepOffset_Interval {
}

class BRepOffset_Interval_1 extends BRepOffset_Interval {}

class BRepOffset_Interval_2 extends BRepOffset_Interval {}

class BRepOffset_MakeLoops {
}

/**
 * Limitations: According to the algorithm nature result depends on the smoothness of input data. Smooth (G1-continuity) input shape will lead to the good result.
 */
class BRepOffset_MakeSimpleOffset {
}

class BRepOffset_MakeSimpleOffset_1 extends BRepOffset_MakeSimpleOffset {}

class BRepOffset_MakeSimpleOffset_2 extends BRepOffset_MakeSimpleOffset {}

/**
 * This class compute elemenary offset surface. Evaluate the offset generated : 1 - from a face. 2 - from an edge. 3 - from a vertex.
 */
class BRepOffset_Offset {
}

class BRepOffset_Offset_1 extends BRepOffset_Offset {}

class BRepOffset_Offset_2 extends BRepOffset_Offset {}

class BRepOffset_Offset_3 extends BRepOffset_Offset {}

class BRepOffset_Offset_4 extends BRepOffset_Offset {}

class BRepOffset_Offset_5 extends BRepOffset_Offset {}

class BRepOffset_Offset_6 extends BRepOffset_Offset {}

/**
 * This class represents mechanism of simple offset algorithm i. e. topology-preserve offset construction without intersection.
 */
class BRepOffset_SimpleOffset extends BRepTools_Modification {
}

class BRepOffset_Tool {
}

/**
 * Describes functions to build parallelepiped boxes. A MakeBox object provides a framework for: - defining the construction of a box, - implementing the construction algorithm, and - consulting the result.
 */
class BRepPrimAPI_MakeBox extends BRepBuilderAPI_MakeShape {
}

class BRepPrimAPI_MakeBox_1 extends BRepPrimAPI_MakeBox {}

class BRepPrimAPI_MakeBox_2 extends BRepPrimAPI_MakeBox {}

class BRepPrimAPI_MakeBox_3 extends BRepPrimAPI_MakeBox {}

class BRepPrimAPI_MakeBox_4 extends BRepPrimAPI_MakeBox {}

/**
 * Describes functions to build cones or portions of cones. A MakeCone object provides a framework for: - defining the construction of a cone, - implementing the construction algorithm, and - consulting the result.
 */
class BRepPrimAPI_MakeCone extends BRepPrimAPI_MakeOneAxis {
}

class BRepPrimAPI_MakeCone_1 extends BRepPrimAPI_MakeCone {}

class BRepPrimAPI_MakeCone_2 extends BRepPrimAPI_MakeCone {}

class BRepPrimAPI_MakeCone_3 extends BRepPrimAPI_MakeCone {}

class BRepPrimAPI_MakeCone_4 extends BRepPrimAPI_MakeCone {}

/**
 * Describes functions to build cylinders or portions of cylinders. A MakeCylinder object provides a framework for: - defining the construction of a cylinder, - implementing the construction algorithm, and - consulting the result.
 */
class BRepPrimAPI_MakeCylinder extends BRepPrimAPI_MakeOneAxis {
}

class BRepPrimAPI_MakeCylinder_1 extends BRepPrimAPI_MakeCylinder {}

class BRepPrimAPI_MakeCylinder_2 extends BRepPrimAPI_MakeCylinder {}

class BRepPrimAPI_MakeCylinder_3 extends BRepPrimAPI_MakeCylinder {}

class BRepPrimAPI_MakeCylinder_4 extends BRepPrimAPI_MakeCylinder {}

/**
 * Describes functions to build half-spaces. A half-space is an infinite solid, limited by a surface. It is built from a face or a shell, which bounds it, and with a reference point, which specifies the side of the surface where the matter of the half-space is located. A half-space is a tool commonly used in topological operations to cut another shape. A MakeHalfSpace object provides a framework for: - defining and implementing the construction of a half-space, and - consulting the result.
 */
class BRepPrimAPI_MakeHalfSpace extends BRepBuilderAPI_MakeShape {
}

class BRepPrimAPI_MakeHalfSpace_1 extends BRepPrimAPI_MakeHalfSpace {}

class BRepPrimAPI_MakeHalfSpace_2 extends BRepPrimAPI_MakeHalfSpace {}

/**
 * The abstract class MakeOneAxis is the root class of algorithms used to construct rotational primitives.
 */
class BRepPrimAPI_MakeOneAxis extends BRepBuilderAPI_MakeShape {
}

/**
 * Describes functions to build linear swept topologies, called prisms. A prism is defined by: - a basis shape, which is swept, and - a sweeping direction, which is: - a vector for finite prisms, or - a direction for infinite or semi-infinite prisms. The basis shape must not contain any solids. The profile generates objects according to the following rules: - Vertices generate Edges - Edges generate Faces. - Wires generate Shells. - Faces generate Solids. - Shells generate Composite Solids A MakePrism object provides a framework for: - defining the construction of a prism, - implementing the construction algorithm, and - consulting the result.
 */
class BRepPrimAPI_MakePrism extends BRepPrimAPI_MakeSweep {
}

class BRepPrimAPI_MakePrism_1 extends BRepPrimAPI_MakePrism {}

class BRepPrimAPI_MakePrism_2 extends BRepPrimAPI_MakePrism {}

/**
 * Class to make revolved sweep topologies.
 */
class BRepPrimAPI_MakeRevol extends BRepPrimAPI_MakeSweep {
}

class BRepPrimAPI_MakeRevol_1 extends BRepPrimAPI_MakeRevol {}

class BRepPrimAPI_MakeRevol_2 extends BRepPrimAPI_MakeRevol {}

/**
 * Describes functions to build revolved shapes. A MakeRevolution object provides a framework for: - defining the construction of a revolved shape, - implementing the construction algorithm, and - consulting the result.
 */
class BRepPrimAPI_MakeRevolution extends BRepPrimAPI_MakeOneAxis {
}

class BRepPrimAPI_MakeRevolution_1 extends BRepPrimAPI_MakeRevolution {}

class BRepPrimAPI_MakeRevolution_2 extends BRepPrimAPI_MakeRevolution {}

class BRepPrimAPI_MakeRevolution_3 extends BRepPrimAPI_MakeRevolution {}

class BRepPrimAPI_MakeRevolution_4 extends BRepPrimAPI_MakeRevolution {}

class BRepPrimAPI_MakeRevolution_5 extends BRepPrimAPI_MakeRevolution {}

class BRepPrimAPI_MakeRevolution_6 extends BRepPrimAPI_MakeRevolution {}

class BRepPrimAPI_MakeRevolution_7 extends BRepPrimAPI_MakeRevolution {}

class BRepPrimAPI_MakeRevolution_8 extends BRepPrimAPI_MakeRevolution {}

/**
 * Describes functions to build spheres or portions of spheres. A MakeSphere object provides a framework for: - defining the construction of a sphere, - implementing the construction algorithm, and - consulting the result.
 */
class BRepPrimAPI_MakeSphere extends BRepPrimAPI_MakeOneAxis {
}

class BRepPrimAPI_MakeSphere_1 extends BRepPrimAPI_MakeSphere {}

class BRepPrimAPI_MakeSphere_2 extends BRepPrimAPI_MakeSphere {}

class BRepPrimAPI_MakeSphere_3 extends BRepPrimAPI_MakeSphere {}

class BRepPrimAPI_MakeSphere_4 extends BRepPrimAPI_MakeSphere {}

class BRepPrimAPI_MakeSphere_5 extends BRepPrimAPI_MakeSphere {}

class BRepPrimAPI_MakeSphere_6 extends BRepPrimAPI_MakeSphere {}

class BRepPrimAPI_MakeSphere_7 extends BRepPrimAPI_MakeSphere {}

class BRepPrimAPI_MakeSphere_8 extends BRepPrimAPI_MakeSphere {}

class BRepPrimAPI_MakeSphere_9 extends BRepPrimAPI_MakeSphere {}

class BRepPrimAPI_MakeSphere_10 extends BRepPrimAPI_MakeSphere {}

class BRepPrimAPI_MakeSphere_11 extends BRepPrimAPI_MakeSphere {}

class BRepPrimAPI_MakeSphere_12 extends BRepPrimAPI_MakeSphere {}

/**
 * The abstract class MakeSweep is the root class of swept primitives. Sweeps are objects you obtain by sweeping a profile along a path. The profile can be any topology and the path is usually a curve or a wire. The profile generates objects according to the following rules: - Vertices generate Edges - Edges generate Faces. - Wires generate Shells. - Faces generate Solids. - Shells generate Composite Solids. You are not allowed to sweep Solids and Composite Solids. Two kinds of sweeps are implemented in the BRepPrimAPI package: - The linear sweep called a Prism - The rotational sweep called a Revol Swept constructions along complex profiles such as BSpline curves are also available in the BRepOffsetAPI package..
 */
class BRepPrimAPI_MakeSweep extends BRepBuilderAPI_MakeShape {
}

/**
 * Describes functions to build tori or portions of tori. A MakeTorus object provides a framework for: - defining the construction of a torus, - implementing the construction algorithm, and - consulting the result.
 */
class BRepPrimAPI_MakeTorus extends BRepPrimAPI_MakeOneAxis {
}

class BRepPrimAPI_MakeTorus_1 extends BRepPrimAPI_MakeTorus {}

class BRepPrimAPI_MakeTorus_2 extends BRepPrimAPI_MakeTorus {}

class BRepPrimAPI_MakeTorus_3 extends BRepPrimAPI_MakeTorus {}

class BRepPrimAPI_MakeTorus_4 extends BRepPrimAPI_MakeTorus {}

class BRepPrimAPI_MakeTorus_5 extends BRepPrimAPI_MakeTorus {}

class BRepPrimAPI_MakeTorus_6 extends BRepPrimAPI_MakeTorus {}

class BRepPrimAPI_MakeTorus_7 extends BRepPrimAPI_MakeTorus {}

class BRepPrimAPI_MakeTorus_8 extends BRepPrimAPI_MakeTorus {}

/**
 * Describes functions to build wedges, i.e. boxes with inclined faces. A MakeWedge object provides a framework for: - defining the construction of a wedge, - implementing the construction algorithm, and - consulting the result.
 */
class BRepPrimAPI_MakeWedge extends BRepBuilderAPI_MakeShape {
}

class BRepPrimAPI_MakeWedge_1 extends BRepPrimAPI_MakeWedge {}

class BRepPrimAPI_MakeWedge_2 extends BRepPrimAPI_MakeWedge {}

class BRepPrimAPI_MakeWedge_3 extends BRepPrimAPI_MakeWedge {}

class BRepPrimAPI_MakeWedge_4 extends BRepPrimAPI_MakeWedge {}

/**
 * implements the abstract Builder with the BRep Builder
 */
class BRepPrim_Builder {
}

class BRepPrim_Builder_1 extends BRepPrim_Builder {}

class BRepPrim_Builder_2 extends BRepPrim_Builder {}

/**
 * Implement the cone primitive.
 */
class BRepPrim_Cone extends BRepPrim_Revolution {
}

class BRepPrim_Cone_1 extends BRepPrim_Cone {}

class BRepPrim_Cone_2 extends BRepPrim_Cone {}

class BRepPrim_Cone_3 extends BRepPrim_Cone {}

class BRepPrim_Cone_4 extends BRepPrim_Cone {}

class BRepPrim_Cone_5 extends BRepPrim_Cone {}

class BRepPrim_Cone_6 extends BRepPrim_Cone {}

class BRepPrim_Cone_7 extends BRepPrim_Cone {}

/**
 * Cylinder primitive.
 */
class BRepPrim_Cylinder extends BRepPrim_Revolution {
}

class BRepPrim_Cylinder_1 extends BRepPrim_Cylinder {}

class BRepPrim_Cylinder_2 extends BRepPrim_Cylinder {}

class BRepPrim_Cylinder_3 extends BRepPrim_Cylinder {}

class BRepPrim_Cylinder_4 extends BRepPrim_Cylinder {}

class BRepPrim_Cylinder_5 extends BRepPrim_Cylinder {}

class BRepPrim_Cylinder_6 extends BRepPrim_Cylinder {}

/**
 * The FaceBuilder is an algorithm to build a BRep Face from a Geom Surface.
 */
class BRepPrim_FaceBuilder {
}

class BRepPrim_FaceBuilder_1 extends BRepPrim_FaceBuilder {}

class BRepPrim_FaceBuilder_2 extends BRepPrim_FaceBuilder {}

class BRepPrim_FaceBuilder_3 extends BRepPrim_FaceBuilder {}

/**
 * A wedge is defined by :
 */
class BRepPrim_GWedge {
}

class BRepPrim_GWedge_1 extends BRepPrim_GWedge {}

class BRepPrim_GWedge_2 extends BRepPrim_GWedge {}

class BRepPrim_GWedge_3 extends BRepPrim_GWedge {}

/**
 * Algorithm to build primitives with one axis of revolution.
 */
class BRepPrim_OneAxis {
}

/**
 * Implement the OneAxis algoritm for a revolution surface.
 */
class BRepPrim_Revolution extends BRepPrim_OneAxis {
}

/**
 * Implements the sphere primitive
 */
class BRepPrim_Sphere extends BRepPrim_Revolution {
}

class BRepPrim_Sphere_1 extends BRepPrim_Sphere {}

class BRepPrim_Sphere_2 extends BRepPrim_Sphere {}

class BRepPrim_Sphere_3 extends BRepPrim_Sphere {}

/**
 * Implements the torus primitive
 */
class BRepPrim_Torus extends BRepPrim_Revolution {
}

class BRepPrim_Torus_1 extends BRepPrim_Torus {}

class BRepPrim_Torus_2 extends BRepPrim_Torus {}

class BRepPrim_Torus_3 extends BRepPrim_Torus {}

/**
 * Provides constructors without Builders.
 */
class BRepPrim_Wedge extends BRepPrim_GWedge {
}

class BRepPrim_Wedge_1 extends BRepPrim_Wedge {}

class BRepPrim_Wedge_2 extends BRepPrim_Wedge {}

class BRepPrim_Wedge_3 extends BRepPrim_Wedge {}

/**
 * The Projection class provides conical and cylindrical projections of Edge or Wire on a Shape from TopoDS. The result will be a Edge or Wire from TopoDS.
 */
class BRepProj_Projection {
}

class BRepProj_Projection_1 extends BRepProj_Projection {}

class BRepProj_Projection_2 extends BRepProj_Projection {}

/**
 * implements the abstract Builder with the BRep Builder
 */
class BRepSweep_Builder {
}

/**
 * This class provides iteration services required by the Generating Line (TopoDS Shape) of a BRepSweep. This tool is used to iterate on the direct sub-shapes of a Shape.
 */
class BRepSweep_Iterator {
}

/**
 * This a generic class is used to build Sweept primitives with a generating "shape" and a directing "line".
 */
class BRepSweep_NumLinearRegularSweep {
}

/**
 * Provides natural constructors to build BRepSweep translated swept Primitives.
 */
class BRepSweep_Prism {
}

class BRepSweep_Prism_1 extends BRepSweep_Prism {}

class BRepSweep_Prism_2 extends BRepSweep_Prism {}

/**
 * Provides natural constructors to build BRepSweep rotated swept Primitives.
 */
class BRepSweep_Revol {
}

class BRepSweep_Revol_1 extends BRepSweep_Revol {}

class BRepSweep_Revol_2 extends BRepSweep_Revol {}

/**
 * Provides an algorithm to build object by Rotation sweep.
 */
class BRepSweep_Rotation extends BRepSweep_Trsf {
}

/**
 * Provides the indexation and type analysis services required by the TopoDS generating Shape of BRepSweep.
 */
class BRepSweep_Tool {
}

/**
 * Provides an algorithm to build object by translation sweep.
 */
class BRepSweep_Translation extends BRepSweep_Trsf {
}

/**
 * This class is inherited from NumLinearRegularSweep to implement the simple swept primitives built moving a Shape with a Trsf. It often is possible to build the constructed subshapes by a simple move of the generating subshapes (shared topology and geometry). So two ways of construction are proposed :
 */
class BRepSweep_Trsf extends BRepSweep_NumLinearRegularSweep {
}

/**
 * provides methods to transfer BRep entity from CASCADE to IGESBRep.
 */
class BRepToIGESBRep_Entity extends BRepToIGES_BREntity {
}

/**
 * provides methods to transfer BRep entity from CASCADE to IGES.
 */
class BRepToIGES_BREntity {
}

/**
 * This class implements the transfer of Shape Entities from Geom To IGES. These can be : . Vertex . Edge . Wire
 */
class BRepToIGES_BRShell extends BRepToIGES_BREntity {
}

class BRepToIGES_BRShell_1 extends BRepToIGES_BRShell {}

class BRepToIGES_BRShell_2 extends BRepToIGES_BRShell {}

/**
 * This class implements the transfer of Shape Entities from Geom To IGES. These can be : . Vertex . Edge . Wire
 */
class BRepToIGES_BRSolid extends BRepToIGES_BREntity {
}

class BRepToIGES_BRSolid_1 extends BRepToIGES_BRSolid {}

class BRepToIGES_BRSolid_2 extends BRepToIGES_BRSolid {}

/**
 * This class implements the transfer of Shape Entities from Geom To IGES. These can be : . Vertex . Edge . Wire
 */
class BRepToIGES_BRWire extends BRepToIGES_BREntity {
}

class BRepToIGES_BRWire_1 extends BRepToIGES_BRWire {}

class BRepToIGES_BRWire_2 extends BRepToIGES_BRWire {}

/**
 * The BRepTools package provides utilities for BRep data structures.
 */
class BRepTools {
}

/**
 * Defines a modification of the geometry by a GTrsf from gp. All methods return True and transform the geometry.
 */
class BRepTools_GTrsfModification extends BRepTools_Modification {
}

/**
 * The history keeps the following relations between the input shapes (S1, ..., Sm) and output shapes (T1, ..., Tn): 1) an output shape Tj is generated from an input shape Si: Tj <= G(Si); 2) a output shape Tj is modified from an input shape Si: Tj <= M(Si); 3) an input shape (Si) is removed: R(Si) == 1.
 */
class BRepTools_History extends Standard_Transient {
}

/**
 * Defines geometric modifications to a shape, i.e. changes to faces, edges and vertices.
 */
class BRepTools_Modification extends Standard_Transient {
}

/**
 * Performs geometric modifications on a shape.
 */
class BRepTools_Modifier {
}

class BRepTools_Modifier_1 extends BRepTools_Modifier {}

class BRepTools_Modifier_2 extends BRepTools_Modifier {}

class BRepTools_Modifier_3 extends BRepTools_Modifier {}

/**
 * Defines a modification of the geometry by a Trsf from gp. All methods return True and transform the geometry.
 */
class BRepTools_NurbsConvertModification extends BRepTools_Modification {
}

/**
 * A Tool to glue faces at common edges and reconstruct shells.
 */
class BRepTools_Quilt {
}

/**
 * Rebuilds a Shape by making pre-defined substitutions on some of its components
 */
class BRepTools_ReShape extends Standard_Transient {
}

/**
 * Contains a Shape and all its subshapes, locations and geometries.
 */
class BRepTools_ShapeSet extends TopTools_ShapeSet {
}

class BRepTools_ShapeSet_1 extends BRepTools_ShapeSet {}

class BRepTools_ShapeSet_2 extends BRepTools_ShapeSet {}

/**
 * A tool to substitute subshapes by other shapes.
 */
class BRepTools_Substitution {
}

/**
 * Describes a modification that uses a gp_Trsf to change the geometry of a shape. All functions return true and transform the geometry of the shape.
 */
class BRepTools_TrsfModification extends BRepTools_Modification {
}

/**
 * The WireExplorer is a tool to explore the edges of a wire in a connection order.
 */
class BRepTools_WireExplorer {
}

class BRepTools_WireExplorer_1 extends BRepTools_WireExplorer {}

class BRepTools_WireExplorer_2 extends BRepTools_WireExplorer {}

class BRepTools_WireExplorer_3 extends BRepTools_WireExplorer {}

class BRepTopAdaptor_FClass2d {
}

class BRepTopAdaptor_HVertex extends Adaptor3d_HVertex {
}

class BRepTopAdaptor_Tool {
}

class BRepTopAdaptor_Tool_1 extends BRepTopAdaptor_Tool {}

class BRepTopAdaptor_Tool_2 extends BRepTopAdaptor_Tool {}

class BRepTopAdaptor_Tool_3 extends BRepTopAdaptor_Tool {}

class BRepTopAdaptor_TopolTool extends Adaptor3d_TopolTool {
}

class BRepTopAdaptor_TopolTool_1 extends BRepTopAdaptor_TopolTool {}

class BRepTopAdaptor_TopolTool_2 extends BRepTopAdaptor_TopolTool {}

/**
 * A framework providing advanced tolerance control. It is used to build Shapes. If tolerance control is required, you are advised to: 1. build a default precision for topology, using the classes provided in the BRepAPI package 2. update the tolerance of the resulting shape. Note that only vertices, edges and faces have meaningful tolerance control. The tolerance value must always comply with the condition that face tolerances are more restrictive than edge tolerances which are more restrictive than vertex tolerances. In other words: Tol(Vertex) >= Tol(Edge) >= Tol(Face). Other rules in setting tolerance include: - you can open up tolerance but should never restrict it - an edge cannot be included within the fusion of the tolerance spheres of two vertices
 */
class BRep_Builder extends TopoDS_Builder {
}

/**
 * Representation of a curve by a 3D curve.
 */
class BRep_Curve3D extends BRep_GCurve {
}

/**
 * Defines a continuity between two surfaces.
 */
class BRep_CurveOn2Surfaces extends BRep_CurveRepresentation {
}

/**
 * Representation of a curve by two pcurves on a closed surface.
 */
class BRep_CurveOnClosedSurface extends BRep_CurveOnSurface {
}

/**
 * Representation of a curve by a curve in the parametric space of a surface.
 */
class BRep_CurveOnSurface extends BRep_GCurve {
}

/**
 * Root class for the curve representations. Contains a location.
 */
class BRep_CurveRepresentation extends Standard_Transient {
}

/**
 * Root class for the geometric curves representation. Contains a range. Contains a first and a last parameter.
 */
class BRep_GCurve extends BRep_CurveRepresentation {
}

/**
 * Representation by a parameter on a 3D curve.
 */
class BRep_PointOnCurve extends BRep_PointRepresentation {
}

/**
 * Representation by a parameter on a curve on a surface.
 */
class BRep_PointOnCurveOnSurface extends BRep_PointsOnSurface {
}

/**
 * Representation by two parameters on a surface.
 */
class BRep_PointOnSurface extends BRep_PointsOnSurface {
}

/**
 * Root class for the points representations. Contains a location and a parameter.
 */
class BRep_PointRepresentation extends Standard_Transient {
}

/**
 * Root for points on surface.
 */
class BRep_PointsOnSurface extends BRep_PointRepresentation {
}

/**
 * Representation by a 3D polygon.
 */
class BRep_Polygon3D extends BRep_CurveRepresentation {
}

/**
 * Representation by two 2d polygons in the parametric space of a surface.
 */
class BRep_PolygonOnClosedSurface extends BRep_PolygonOnSurface {
}

/**
 * A representation by two arrays of nodes on a triangulation.
 */
class BRep_PolygonOnClosedTriangulation extends BRep_PolygonOnTriangulation {
}

/**
 * Representation of a 2D polygon in the parametric space of a surface.
 */
class BRep_PolygonOnSurface extends BRep_CurveRepresentation {
}

/**
 * A representation by an array of nodes on a triangulation.
 */
class BRep_PolygonOnTriangulation extends BRep_CurveRepresentation {
}

/**
 * The TEdge from BRep is inherited from the TEdge from TopoDS. It contains the geometric data.
 */
class BRep_TEdge extends TopoDS_TEdge {
}

/**
 * The Tface from BRep is based on the TFace from TopoDS. The TFace contains :
 */
class BRep_TFace extends TopoDS_TFace {
}

/**
 * The TVertex from BRep inherits from the TVertex from TopoDS. It contains the geometric data.
 */
class BRep_TVertex extends TopoDS_TVertex {
}

/**
 * Provides class methods to access to the geometry of BRep shapes.
 */
class BRep_Tool {
}

/**
 * A cache class for Bezier and B-spline curves.
 */
class BSplCLib_Cache extends Standard_Transient {
}

class BSplCLib_Cache_1 extends BSplCLib_Cache {}

class BSplCLib_Cache_2 extends BSplCLib_Cache {}

class BSplCLib_EvaluatorFunction {
}

/**
 * BSplSLib B-spline surface Library This package provides an implementation of geometric functions for rational and non rational, periodic and non periodic B-spline surface computation.
 */
class BSplSLib {
}

/**
 * A cache class for Bezier and B-spline surfaces.
 */
class BSplSLib_Cache extends Standard_Transient {
}

class BSplSLib_EvaluatorFunction {
}

/**
 * Command-queue for parallel building of BVH nodes.
 */
class BVH_BuildQueue {
}

/**
 * Wrapper for BVH build thread.
 */
class BVH_BuildThread extends Standard_Transient {
}

/**
 * A non-template class for using as base for BVH_Builder (just to have a named base class).
 */
class BVH_BuilderTransient extends Standard_Transient {
}

/**
 * A non-template class for using as base for BVH_Object (just to have a named base class).
 */
class BVH_ObjectTransient extends Standard_Transient {
}

/**
 * Abstract properties of geometric object.
 */
class BVH_Properties extends Standard_Transient {
}

/**
 * A non-template class for using as base for BVH_TreeBase (just to have a named base class).
 */
class BVH_TreeBaseTransient extends Standard_Transient {
}

/**
 * Root class
 */
class BiTgte_Blend {
}

class BiTgte_Blend_1 extends BiTgte_Blend {}

class BiTgte_Blend_2 extends BiTgte_Blend {}

/**
 * private class used to create a filler rolling on an edge.
 */
class BiTgte_CurveOnEdge extends Adaptor3d_Curve {
}

class BiTgte_CurveOnEdge_1 extends BiTgte_CurveOnEdge {}

class BiTgte_CurveOnEdge_2 extends BiTgte_CurveOnEdge {}

/**
 * private class used to create a filler rolling on an edge.
 */
class BiTgte_CurveOnVertex extends Adaptor3d_Curve {
}

class BiTgte_CurveOnVertex_1 extends BiTgte_CurveOnVertex {}

class BiTgte_CurveOnVertex_2 extends BiTgte_CurveOnVertex {}

class BiTgte_HCurveOnEdge extends Adaptor3d_HCurve {
}

class BiTgte_HCurveOnEdge_1 extends BiTgte_HCurveOnEdge {}

class BiTgte_HCurveOnEdge_2 extends BiTgte_HCurveOnEdge {}

class BiTgte_HCurveOnVertex extends Adaptor3d_HCurve {
}

class BiTgte_HCurveOnVertex_1 extends BiTgte_HCurveOnVertex {}

class BiTgte_HCurveOnVertex_2 extends BiTgte_HCurveOnVertex {}

/**
 * This package provides the bisecting line between two geometric elements.
 */
class Bisector {
}

/**
 * Bisec provides the bisecting line between two elements This line is trimed by a point <P> and it's contained in the domain defined by the two vectors <V1>, <V2> and <Sense>.
 */
class Bisector_Bisec {
}

/**
 * This class provides the bisecting line between two geometric elements.The elements are Circles,Lines or Points.
 */
class Bisector_BisecAna extends Bisector_Curve {
}

/**
 * Construct the bisector between two curves. The curves can intersect only in their extremities.
 */
class Bisector_BisecCC extends Bisector_Curve {
}

class Bisector_BisecCC_1 extends Bisector_BisecCC {}

class Bisector_BisecCC_2 extends Bisector_BisecCC {}

/**
 * Provides the bisector between a point and a curve. the curvature on the curve has to be monoton. the point can't be on the curve exept at the extremitys.
 */
class Bisector_BisecPC extends Bisector_Curve {
}

class Bisector_BisecPC_1 extends Bisector_BisecPC {}

class Bisector_BisecPC_2 extends Bisector_BisecPC {}

class Bisector_BisecPC_3 extends Bisector_BisecPC {}

class Bisector_Curve extends Geom2d_Curve {
}

/**
 * H(v) = (T1 .P2(v) - P1) * ||T(v)|| - 2 2 (T(v).P2(v) - P1) * ||T1||
 */
class Bisector_FunctionH extends math_FunctionWithDerivative {
}

/**
 * 2 2 F(u) = (PC(u) - PBis1(u)) + (PC(u) - PBis2(u))
 */
class Bisector_FunctionInter extends math_FunctionWithDerivative {
}

class Bisector_FunctionInter_1 extends Bisector_FunctionInter {}

class Bisector_FunctionInter_2 extends Bisector_FunctionInter {}

/**
 * Intersection between two <Bisec> from Bisector.
 */
class Bisector_Inter extends IntRes2d_Intersection {
}

class Bisector_Inter_1 extends Bisector_Inter {}

class Bisector_Inter_2 extends Bisector_Inter {}

class Bisector_PointOnBis {
}

class Bisector_PointOnBis_1 extends Bisector_PointOnBis {}

class Bisector_PointOnBis_2 extends Bisector_PointOnBis {}

/**
 * Polygon of PointOnBis
 */
class Bisector_PolyBis {
}

class BlendFunc_CSCircular extends Blend_CSFunction {
}

class BlendFunc_CSConstRad extends Blend_CSFunction {
}

class BlendFunc_ChAsym extends Blend_Function {
}

class BlendFunc_ChAsymInv extends Blend_FuncInv {
}

/**
 * Class for a function used to compute a chamfer with two constant distances on a surface's boundary
 */
class BlendFunc_ChamfInv extends BlendFunc_GenChamfInv {
}

/**
 * Class for a function used to compute a "ordinary" chamfer: when distances from spine to surfaces are constant
 */
class BlendFunc_Chamfer extends BlendFunc_GenChamfer {
}

class BlendFunc_ConstRad extends Blend_Function {
}

class BlendFunc_ConstRadInv extends Blend_FuncInv {
}

/**
 * Class for a function used to compute a symmetric chamfer with constant throat that is the height of isosceles triangle in section
 */
class BlendFunc_ConstThroat extends BlendFunc_GenChamfer {
}

/**
 * Class for a function used to compute a ConstThroat chamfer on a surface's boundary
 */
class BlendFunc_ConstThroatInv extends BlendFunc_GenChamfInv {
}

/**
 * Class for a function used to compute a chamfer with constant throat: the section of chamfer is right-angled triangle, the first of two surfaces (where is the top of the chamfer) is virtually moved inside the solid by offset operation, the apex of the section is on the intersection curve between moved surface and second surface, right angle is at the top of the chamfer, the length of the leg from apex to top is constant - it is throat
 */
class BlendFunc_ConstThroatWithPenetration extends BlendFunc_ConstThroat {
}

/**
 * Class for a function used to compute a ConstThroatWithPenetration chamfer on a surface's boundary
 */
class BlendFunc_ConstThroatWithPenetrationInv extends BlendFunc_ConstThroatInv {
}

/**
 * This function calculates point (pts) on the curve of intersection between the normal to a curve (guide) in a chosen parameter and a surface (surf), so that pts was at a given distance from the guide. X(1),X(2) are the parameters U,V of pts on surf.
 */
class BlendFunc_Corde {
}

class BlendFunc_EvolRad extends Blend_Function {
}

class BlendFunc_EvolRadInv extends Blend_FuncInv {
}

/**
 * Deferred class for a function used to compute a general chamfer on a surface's boundary
 */
class BlendFunc_GenChamfInv extends Blend_FuncInv {
}

/**
 * Deferred class for a function used to compute a general chamfer
 */
class BlendFunc_GenChamfer extends Blend_Function {
}

class BlendFunc_Ruled extends Blend_Function {
}

class BlendFunc_RuledInv extends Blend_FuncInv {
}

/**
 * used to store the "gradient of gradient"
 */
class BlendFunc_Tensor {
}

/**
 * Deferred class for a function used to compute a blending surface between two surfaces, using a guide line. The vector <X> used in Value, Values and Derivatives methods has to be the vector of the parametric coordinates U1,V1, U2,V2, of the extremities of a section on the first and second surface.
 */
class Blend_AppFunction extends math_FunctionSetWithDerivatives {
}

/**
 * Deferred class for a function used to compute a blending surface between a surface and a curve, using a guide line. The vector <X> used in Value, Values and Derivatives methods may be the vector of the parametric coordinates U,V, W of the extremities of a section on the surface and the curve.
 */
class Blend_CSFunction extends Blend_AppFunction {
}

/**
 * Deferred class for a function used to compute a blending surface between a surface and a curve, using a guide line. This function is used to find a solution on a done point of the curve. The vector <X> used in Value, Values and Derivatives methods has to be the vector of the parametric coordinates w, U, V where w is the parameter on the guide line, U,V are the parametric coordinates of a point on the partner surface.
 */
class Blend_CurvPointFuncInv extends math_FunctionSetWithDerivatives {
}

/**
 * Deferred class for a function used to compute a blending surface between two surfaces, using a guide line. This function is used to find a solution on a restriction of one of the surface. The vector <X> used in Value, Values and Derivatives methods has to be the vector of the parametric coordinates t,w,U,V where t is the parameter on the curve on surface, w is the parameter on the guide line, U,V are the parametric coordinates of a point on the partner surface.
 */
class Blend_FuncInv extends math_FunctionSetWithDerivatives {
}

/**
 * Deferred class for a function used to compute a blending surface between two surfaces, using a guide line. The vector <X> used in Value, Values and Derivatives methods has to be the vector of the parametric coordinates U1,V1, U2,V2, of the extremities of a section on the first and second surface.
 */
class Blend_Function extends Blend_AppFunction {
}

class Blend_Point {
}

class Blend_Point_1 extends Blend_Point {}

class Blend_Point_2 extends Blend_Point {}

class Blend_Point_3 extends Blend_Point {}

class Blend_Point_4 extends Blend_Point {}

class Blend_Point_5 extends Blend_Point {}

class Blend_Point_6 extends Blend_Point {}

class Blend_Point_7 extends Blend_Point {}

class Blend_Point_8 extends Blend_Point {}

class Blend_Point_9 extends Blend_Point {}

/**
 * Deferred class for a function used to compute a blending surface between a surface and a pcurve on an other Surface, using a guide line. The vector <X> used in Value, Values and Derivatives methods may be the vector of the parametric coordinates U,V, W of the extremities of a section on the surface and the curve.
 */
class Blend_RstRstFunction extends Blend_AppFunction {
}

/**
 * Deferred class for a function used to compute a blending surface between a surface and a curve, using a guide line. This function is used to find a solution on a done restriction of the surface.
 */
class Blend_SurfCurvFuncInv extends math_FunctionSetWithDerivatives {
}

/**
 * Deferred class for a function used to compute a blending surface between a surface and a curve, using a guide line. This function is used to find a solution on a done point of the curve.
 */
class Blend_SurfPointFuncInv extends math_FunctionSetWithDerivatives {
}

/**
 * Deferred class for a function used to compute a blending surface between a surface and a pcurve on an other Surface, using a guide line. The vector <X> used in Value, Values and Derivatives methods may be the vector of the parametric coordinates U,V, W of the extremities of a section on the surface and the curve.
 */
class Blend_SurfRstFunction extends Blend_AppFunction {
}

/**
 * The BndLib package provides functions to add a geometric primitive to a bounding box. Note: these functions work with gp objects, optionally limited by parameter values. If the curves and surfaces provided by the gp package are not explicitly parameterized, they still have an implicit parameterization, similar to that which they infer for the equivalent Geom or Geom2d objects. Add : Package to compute the bounding boxes for elementary objects from gp in 2d and 3d .
 */
class BndLib {
}

/**
 * Computes the bounding box for a curve in 2d . Functions to add a 2D curve to a bounding box. The 2D curve is defined from a Geom2d curve.
 */
class BndLib_Add2dCurve {
}

/**
 * Computes the bounding box for a curve in 3d. Functions to add a 3D curve to a bounding box. The 3D curve is defined from a Geom curve.
 */
class BndLib_Add3dCurve {
}

/**
 * computes the box from a surface Functions to add a surface to a bounding box. The surface is defined from a Geom surface.
 */
class BndLib_AddSurface {
}

class Bnd_B2d {
}

class Bnd_B2d_1 extends Bnd_B2d {}

class Bnd_B2d_2 extends Bnd_B2d {}

class Bnd_B2f {
}

class Bnd_B2f_1 extends Bnd_B2f {}

class Bnd_B2f_2 extends Bnd_B2f {}

class Bnd_B3d {
}

class Bnd_B3d_1 extends Bnd_B3d {}

class Bnd_B3d_2 extends Bnd_B3d {}

class Bnd_B3f {
}

class Bnd_B3f_1 extends Bnd_B3f {}

class Bnd_B3f_2 extends Bnd_B3f {}

/**
 * A tool to compare a bounding box or a plane with a set of bounding boxes. It sorts the set of bounding boxes to give the list of boxes which intersect the element being compared. The boxes being sorted generally bound a set of shapes, while the box being compared bounds a shape to be compared. The resulting list of intersecting boxes therefore gives the list of items which potentially intersect the shape to be compared.
 */
class Bnd_BoundSortBox {
}

/**
 * A tool to compare a 2D bounding box with a set of 2D bounding boxes. It sorts the set of bounding boxes to give the list of boxes which intersect the element being compared. The boxes being sorted generally bound a set of shapes, while the box being compared bounds a shape to be compared. The resulting list of intersecting boxes therefore gives the list of items which potentially intersect the shape to be compared.
 */
class Bnd_BoundSortBox2d {
}

/**
 * Describes a bounding box in 3D space. A bounding box is parallel to the axes of the coordinates system. If it is finite, it is defined by the three intervals: - [ Xmin,Xmax ], - [ Ymin,Ymax ], - [ Zmin,Zmax ]. A bounding box may be infinite (i.e. open) in one or more directions. It is said to be: - OpenXmin if it is infinite on the negative side of the "X Direction"; - OpenXmax if it is infinite on the positive side of the "X Direction"; - OpenYmin if it is infinite on the negative side of the "Y Direction"; - OpenYmax if it is infinite on the positive side of the "Y Direction"; - OpenZmin if it is infinite on the negative side of the "Z Direction"; - OpenZmax if it is infinite on the positive side of the "Z Direction"; - WholeSpace if it is infinite in all six directions. In this case, any point of the space is inside the box; - Void if it is empty. In this case, there is no point included in the box. A bounding box is defined by: - six bounds (Xmin, Xmax, Ymin, Ymax, Zmin and Zmax) which limit the bounding box if it is finite, - eight flags (OpenXmin, OpenXmax, OpenYmin, OpenYmax, OpenZmin, OpenZmax, WholeSpace and Void) which describe the bounding box if it is infinite or empty, and - a gap, which is included on both sides in any direction when consulting the finite bounds of the box.
 */
class Bnd_Box {
}

class Bnd_Box_1 extends Bnd_Box {}

class Bnd_Box_2 extends Bnd_Box {}

/**
 * Describes a bounding box in 2D space. A bounding box is parallel to the axes of the coordinates system. If it is finite, it is defined by the two intervals: - [ Xmin,Xmax ], and - [ Ymin,Ymax ]. A bounding box may be infinite (i.e. open) in one or more directions. It is said to be: - OpenXmin if it is infinite on the negative side of the "X Direction"; - OpenXmax if it is infinite on the positive side of the "X Direction"; - OpenYmin if it is infinite on the negative side of the "Y Direction"; - OpenYmax if it is infinite on the positive side of the "Y Direction"; - WholeSpace if it is infinite in all four directions. In this case, any point of the space is inside the box; - Void if it is empty. In this case, there is no point included in the box. A bounding box is defined by four bounds (Xmin, Xmax, Ymin and Ymax) which limit the bounding box if it is finite, six flags (OpenXmin, OpenXmax, OpenYmin, OpenYmax, WholeSpace and Void) which describe the bounding box if it is infinite or empty, and - a gap, which is included on both sides in any direction when consulting the finite bounds of the box.
 */
class Bnd_Box2d {
}

/**
 * The class describes the Oriented Bounding Box (OBB), much tighter enclosing volume for the shape than the Axis Aligned Bounding Box (AABB). The OBB is defined by a center of the box, the axes and the halves of its three dimensions. The OBB can be used more effectively than AABB as a rejection mechanism for non-interfering objects.
 */
class Bnd_OBB {
}

class Bnd_OBB_1 extends Bnd_OBB {}

class Bnd_OBB_2 extends Bnd_OBB {}

class Bnd_OBB_3 extends Bnd_OBB {}

/**
 * This class describes a range in 1D space restricted by two real values. A range can be void indicating there is no point included in the range.
 */
class Bnd_Range {
}

class Bnd_Range_1 extends Bnd_Range {}

class Bnd_Range_2 extends Bnd_Range {}

/**
 * This class represents a bounding sphere of a geometric entity (triangle, segment of line or whatever else).
 */
class Bnd_Sphere {
}

class Bnd_Sphere_1 extends Bnd_Sphere {}

class Bnd_Sphere_2 extends Bnd_Sphere {}

/**
 * Defines a set of static methods operating with bounding boxes
 */
class Bnd_Tools {
}

class CDF {
}

class CDF_Application extends CDM_Application {
}

/**
 * A directory is a collection of documents. There is only one instance of a given document in a directory. put.
 */
class CDF_Directory extends Standard_Transient {
}

class CDF_DirectoryIterator {
}

class CDF_DirectoryIterator_1 extends CDF_DirectoryIterator {}

class CDF_DirectoryIterator_2 extends CDF_DirectoryIterator {}

class CDF_FWOSDriver extends CDF_MetaDataDriver {
}

/**
 * this class list the method that must be available for a specific DBMS
 */
class CDF_MetaDataDriver extends Standard_Transient {
}

/**
 * This exception is used in the deferred methods. Programmer implementing such methods may use this exception or any exception inheriting MetaDataDriverError.
 */
class CDF_MetaDataDriverError extends Standard_Failure {
}

class CDF_MetaDataDriverError_1 extends CDF_MetaDataDriverError {}

class CDF_MetaDataDriverError_2 extends CDF_MetaDataDriverError {}

class CDF_MetaDataDriverFactory extends Standard_Transient {
}

class CDF_Session extends Standard_Transient {
}

class CDF_Store {
}

class CDF_StoreList extends Standard_Transient {
}

class CDM_Application extends Standard_Transient {
}

/**
 * An applicative document is an instance of a class inheriting CDM_Document. These documents have the following properties: - they can have references to other documents. - the modifications of a document are propagated to the referencing documents. - a document can be stored in different formats, with or without a persistent model. - the drivers for storing and retrieving documents are plugged in when necessary. - a document has a modification counter. This counter is incremented when the document is modified. When a document is stored, the current counter value is memorized as the last storage version of the document. A document is considered to be modified when the counter value is different from the storage version. Once the document is saved the storage version and the counter value are identical. The document is now not considered to be modified. - a reference is a link between two documents. A reference has two components: the "From Document" and the "To Document". When a reference is created, an identifier of the reference is generated. This identifier is unique in the scope of the From Document and is conserved during storage and retrieval. This means that the referenced document will be always accessible through this identifier. - a reference memorizes the counter value of the To Document when the reference is created. The From Document is considered to be up to date relative to the To Document when the reference counter value is equal to the To Document counter value. - retrieval of a document having references does not imply the retrieving of the referenced documents.
 */
class CDM_Document extends Standard_Transient {
}

class CDM_MetaData extends Standard_Transient {
}

class CDM_Reference extends Standard_Transient {
}

class CDM_ReferenceIterator {
}

/**
 * the algorithm computes a point on a curve at a given distance from another point on the curve
 */
class CPnts_AbscissaPoint {
}

class CPnts_AbscissaPoint_1 extends CPnts_AbscissaPoint {}

class CPnts_AbscissaPoint_2 extends CPnts_AbscissaPoint {}

class CPnts_AbscissaPoint_3 extends CPnts_AbscissaPoint {}

class CPnts_AbscissaPoint_4 extends CPnts_AbscissaPoint {}

class CPnts_AbscissaPoint_5 extends CPnts_AbscissaPoint {}

/**
 * for implementation, compute values for Gauss
 */
class CPnts_MyGaussFunction extends math_Function {
}

/**
 * Implements a function for the Newton algorithm to find the solution of Integral(F) = L (compute Length and Derivative of the curve for Newton)
 */
class CPnts_MyRootFunction extends math_FunctionWithDerivative {
}

/**
 * This class defines an algorithm to create a set of points (with a given chordal deviation) at the positions of constant deflection of a given parametrized curve or a trimmed circle. The continuity of the curve must be at least C2.
 */
class CPnts_UniformDeflection {
}

class CPnts_UniformDeflection_1 extends CPnts_UniformDeflection {}

class CPnts_UniformDeflection_2 extends CPnts_UniformDeflection {}

class CPnts_UniformDeflection_3 extends CPnts_UniformDeflection {}

class CPnts_UniformDeflection_4 extends CPnts_UniformDeflection {}

class CPnts_UniformDeflection_5 extends CPnts_UniformDeflection {}

/**
 * This package implements functions for basis geometric computation on curves and surfaces. The tolerance criterions used in this package are Resolution from package gp and RealEpsilon from class Real of package Standard.
 */
class CSLib {
}

/**
 * *** Class2d : Low level algorithm for 2d classification this class was moved from package BRepTopAdaptor
 */
class CSLib_Class2d {
}

class CSLib_Class2d_1 extends CSLib_Class2d {}

class CSLib_Class2d_2 extends CSLib_Class2d {}

class CSLib_NormalPolyDef extends math_FunctionWithDerivative {
}

/**
 * This package contains the algorithms used to build fillets or chamfers on planar wire.
 */
class ChFi2d {
}

/**
 * An analytical algorithm for calculation of the fillets. It is implemented for segments and arcs of circle only.
 */
class ChFi2d_AnaFilletAlgo {
}

class ChFi2d_AnaFilletAlgo_1 extends ChFi2d_AnaFilletAlgo {}

class ChFi2d_AnaFilletAlgo_2 extends ChFi2d_AnaFilletAlgo {}

class ChFi2d_AnaFilletAlgo_3 extends ChFi2d_AnaFilletAlgo {}

/**
 * This class contains the algorithm used to build fillet on planar wire.
 */
class ChFi2d_Builder {
}

class ChFi2d_Builder_1 extends ChFi2d_Builder {}

class ChFi2d_Builder_2 extends ChFi2d_Builder {}

/**
 * A class making a chamfer between two linear edges.
 */
class ChFi2d_ChamferAPI {
}

class ChFi2d_ChamferAPI_1 extends ChFi2d_ChamferAPI {}

class ChFi2d_ChamferAPI_2 extends ChFi2d_ChamferAPI {}

class ChFi2d_ChamferAPI_3 extends ChFi2d_ChamferAPI {}

/**
 * An interface class for 2D fillets. Open CASCADE provides two algorithms for 2D fillets: ChFi2d_Builder - it constructs a fillet or chamfer for linear and circular edges of a face. ChFi2d_FilletAPI - it encapsulates two algorithms: ChFi2d_AnaFilletAlgo - analytical constructor of the fillet. It works only for linear and circular edges, having a common point. ChFi2d_FilletAlgo - iteration recursive method constructing the fillet edge for any type of edges including ellipses and b-splines. The edges may even have no common point.
 */
class ChFi2d_FilletAPI {
}

class ChFi2d_FilletAPI_1 extends ChFi2d_FilletAPI {}

class ChFi2d_FilletAPI_2 extends ChFi2d_FilletAPI {}

class ChFi2d_FilletAPI_3 extends ChFi2d_FilletAPI {}

/**
 * Algorithm that creates fillet edge: arc tangent to two edges in the start and in the end vertices. Initial edges must be located on the plane and must be connected by the end or start points (shared vertices are not obligatory). Created fillet arc is created with the given radius, that is useful in sketcher applications.
 */
class ChFi2d_FilletAlgo {
}

class ChFi2d_FilletAlgo_1 extends ChFi2d_FilletAlgo {}

class ChFi2d_FilletAlgo_2 extends ChFi2d_FilletAlgo {}

class ChFi2d_FilletAlgo_3 extends ChFi2d_FilletAlgo {}

/**
 * creation of spatial fillets on a solid.
 */
class ChFi3d {
}

/**
 * Root class for calculation of surfaces (fillets, chamfers) destined to smooth edges of a gap on a Shape and the reconstruction of the Shape.
 */
class ChFi3d_Builder {
}

/**
 * construction tool for 3D chamfers on edges (on a solid).
 */
class ChFi3d_ChBuilder extends ChFi3d_Builder {
}

/**
 * Tool of construction of fillets 3d on edges (on a solid).
 */
class ChFi3d_FilBuilder extends ChFi3d_Builder {
}

/**
 * Searches singularities on fillet. F(t) = (C1(t) - C2(t)).(C1'(t) - C2'(t));
 */
class ChFi3d_SearchSing extends math_FunctionWithDerivative {
}

/**
 * Provides data specific to chamfers distances on each of faces.
 */
class ChFiDS_ChamfSpine extends ChFiDS_Spine {
}

class ChFiDS_ChamfSpine_1 extends ChFiDS_ChamfSpine {}

class ChFiDS_ChamfSpine_2 extends ChFiDS_ChamfSpine {}

/**
 * A Section of fillet.
 */
class ChFiDS_CircSection {
}

/**
 * point start/end of fillet common to 2 adjacent filets and to an edge on one of 2 faces participating in the construction of the fillet
 */
class ChFiDS_CommonPoint {
}

/**
 * Elementary Spine for cheminements and approximations.
 */
class ChFiDS_ElSpine extends Adaptor3d_Curve {
}

/**
 * interference face/fillet
 */
class ChFiDS_FaceInterference {
}

/**
 * Provides data specific to the fillets - vector or rule of evolution (C2).
 */
class ChFiDS_FilSpine extends ChFiDS_Spine {
}

class ChFiDS_FilSpine_1 extends ChFiDS_FilSpine {}

class ChFiDS_FilSpine_2 extends ChFiDS_FilSpine {}

class ChFiDS_HElSpine extends Adaptor3d_HCurve {
}

class ChFiDS_HElSpine_1 extends ChFiDS_HElSpine {}

class ChFiDS_HElSpine_2 extends ChFiDS_HElSpine {}

/**
 * Encapsulation of IndexedDataMapOfShapeListOfShape.
 */
class ChFiDS_Map {
}

/**
 * Storage of a curve and its 2 faces or surfaces of support.
 */
class ChFiDS_Regul {
}

/**
 * Contains information necessary for construction of a 3D fillet or chamfer:
 */
class ChFiDS_Spine extends Standard_Transient {
}

class ChFiDS_Spine_1 extends ChFiDS_Spine {}

class ChFiDS_Spine_2 extends ChFiDS_Spine {}

/**
 * Data characterising a band of fillet.
 */
class ChFiDS_Stripe extends Standard_Transient {
}

/**
 * encapsulation of IndexedDataMapOfVertexListOfStripe
 */
class ChFiDS_StripeMap {
}

/**
 * data structure for all information related to the fillet and to 2 faces vis a vis
 */
class ChFiDS_SurfData extends Standard_Transient {
}

/**
 * Methodes de classe permettant de remplir une SurfData dans les cas particuliers de conges suivants: - cylindre entre 2 surfaces planes, - tore/sphere entre un plan et un cylindre othogonal, - tore/sphere entre un plan et un cone othogonal,
 */
class ChFiKPart_ComputeData {
}

class Contap_ArcFunction extends math_FunctionWithDerivative {
}

/**
 * This class provides the computation of the contours for quadric surfaces.
 */
class Contap_ContAna {
}

class Contap_Contour {
}

class Contap_Contour_1 extends Contap_Contour {}

class Contap_Contour_2 extends Contap_Contour {}

class Contap_Contour_3 extends Contap_Contour {}

class Contap_Contour_4 extends Contap_Contour {}

class Contap_Contour_5 extends Contap_Contour {}

class Contap_Contour_6 extends Contap_Contour {}

class Contap_Contour_7 extends Contap_Contour {}

/**
 * Tool for the intersection between 2 surfaces. Regroupe pour l instant les methodes hors Adaptor3d...
 */
class Contap_HContTool {
}

class Contap_HCurve2dTool {
}

class Contap_Line {
}

/**
 * Definition of a vertex on the contour line. Most of the time, such a point is an intersection between the contour and a restriction of the surface. When it is not tyhe method IsOnArc return False. Such a point is contains geometrical informations (see the Value method) and logical informations.
 */
class Contap_Point {
}

class Contap_Point_1 extends Contap_Point {}

class Contap_Point_2 extends Contap_Point {}

/**
 * This class describes the function on a parametric surface. the form of the function is F(u,v) = 0 where u and v are the parameteric coordinates of a point on the surface, to compute the contours of the surface.
 */
class Contap_SurfFunction extends math_FunctionSetWithDerivatives {
}

/**
 * Internal tool used to compute the normal and its derivatives.
 */
class Contap_SurfProps {
}

class Contap_TheIWLineOfTheIWalking extends Standard_Transient {
}

class Contap_TheIWalking {
}

class Contap_ThePathPointOfTheSearch {
}

class Contap_ThePathPointOfTheSearch_1 extends Contap_ThePathPointOfTheSearch {}

class Contap_ThePathPointOfTheSearch_2 extends Contap_ThePathPointOfTheSearch {}

class Contap_ThePathPointOfTheSearch_3 extends Contap_ThePathPointOfTheSearch {}

class Contap_TheSearch {
}

class Contap_TheSearchInside {
}

class Contap_TheSearchInside_1 extends Contap_TheSearchInside {}

class Contap_TheSearchInside_2 extends Contap_TheSearchInside {}

class Contap_TheSegmentOfTheSearch {
}

/**
 * This algorithm converts a circle into a rational B-spline curve. The circle is a Circ2d from package gp and its parametrization is : P (U) = Loc + R * (Cos(U) * Xdir + Sin(U) * YDir) where Loc is the center of the circle Xdir and Ydir are the normalized directions of the local cartesian coordinate system of the circle. The parametrization range for the circle is U [0, 2Pi].
 */
class Convert_CircleToBSplineCurve extends Convert_ConicToBSplineCurve {
}

class Convert_CircleToBSplineCurve_1 extends Convert_CircleToBSplineCurve {}

class Convert_CircleToBSplineCurve_2 extends Convert_CircleToBSplineCurve {}

/**
 * Converts a list of connecting Bezier Curves 2d to a BSplineCurve 2d. if possible, the continuity of the BSpline will be increased to more than C0.
 */
class Convert_CompBezierCurves2dToBSplineCurve2d {
}

/**
 * An algorithm to convert a sequence of adjacent non-rational Bezier curves into a BSpline curve. A CompBezierCurvesToBSplineCurve object provides a framework for: - defining the sequence of adjacent non-rational Bezier curves to be converted into a BSpline curve, - implementing the computation algorithm, and - consulting the results. Warning Do not attempt to convert rational Bezier curves using this type of algorithm.
 */
class Convert_CompBezierCurvesToBSplineCurve {
}

/**
 * Convert a serie of Polynomial N-Dimensional Curves that are have continuity CM to an N-Dimensional Bspline Curve that has continuity CM. (to convert an function (curve) polynomial by span in a BSpline) This class uses the following arguments : NumCurves : the number of Polynomial Curves Continuity: the requested continuity for the n-dimensional Spline Dimension : the dimension of the Spline MaxDegree : maximum allowed degree for each composite polynomial segment. NumCoeffPerCurve : the number of coefficient per segments = degree - 1 Coefficients : the coefficients organized in the following way [1..<myNumPolynomials>][1..myMaxDegree +1][1..myDimension] that is : index [n,d,i] is at slot (n-1) * (myMaxDegree + 1) * myDimension + (d-1) * myDimension + i PolynomialIntervals : nth polynomial represents a polynomial between myPolynomialIntervals->Value(n,0) and myPolynomialIntervals->Value(n,1) TrueIntervals : the nth polynomial has to be mapped linearly to be defined on the following interval : myTrueIntervals->Value(n) and myTrueIntervals->Value(n+1) so that it represent adequatly the function with the required continuity
 */
class Convert_CompPolynomialToPoles {
}

class Convert_CompPolynomialToPoles_1 extends Convert_CompPolynomialToPoles {}

class Convert_CompPolynomialToPoles_2 extends Convert_CompPolynomialToPoles {}

class Convert_CompPolynomialToPoles_3 extends Convert_CompPolynomialToPoles {}

/**
 * This algorithm converts a bounded Cone into a rational B-spline surface. The cone a Cone from package gp. Its parametrization is : P (U, V) = Loc + V * Zdir + (R + V*Tan(Ang)) * (Cos(U)*Xdir + Sin(U)*Ydir) where Loc is the location point of the cone, Xdir, Ydir and Zdir are the normalized directions of the local cartesian coordinate system of the cone (Zdir is the direction of the Cone's axis) , Ang is the cone semi-angle. The U parametrization range is [0, 2PI]. KeyWords : Convert, Cone, BSplineSurface.
 */
class Convert_ConeToBSplineSurface extends Convert_ElementarySurfaceToBSplineSurface {
}

class Convert_ConeToBSplineSurface_1 extends Convert_ConeToBSplineSurface {}

class Convert_ConeToBSplineSurface_2 extends Convert_ConeToBSplineSurface {}

/**
 * Root class for algorithms which convert a conic curve into a BSpline curve (CircleToBSplineCurve, EllipseToBSplineCurve, HyperbolaToBSplineCurve, ParabolaToBSplineCurve). These algorithms all work on 2D curves from the gp package and compute all the data needed to construct a BSpline curve equivalent to the conic curve. This data consists of: - the degree of the curve, - the periodic characteristics of the curve, - a poles table with associated weights, - a knots table with associated multiplicities. The abstract class ConicToBSplineCurve provides a framework for storing and consulting this computed data. The data may then be used to construct a Geom2d_BSplineCurve curvSuper class of the following classes : This abstract class implements the methods to get the geometric representation of the B-spline curve equivalent to the conic. The B-spline is computed at the creation time in the sub classes. The B-spline curve is defined with its degree, its control points (Poles), its weights, its knots and their multiplicity. All the geometric entities used in this package are defined in 2D space. KeyWords : Convert, Conic, BSplineCurve, 2D.
 */
class Convert_ConicToBSplineCurve {
}

/**
 * This algorithm converts a bounded cylinder into a rational B-spline surface. The cylinder is a Cylinder from package gp. The parametrization of the cylinder is : P (U, V) = Loc + V * Zdir + Radius * (Xdir*Cos(U) + Ydir*Sin(U)) where Loc is the location point of the cylinder, Xdir, Ydir and Zdir are the normalized directions of the local cartesian coordinate system of the cylinder (Zdir is the direction of the cylinder's axis). The U parametrization range is U [0, 2PI]. KeyWords : Convert, Cylinder, BSplineSurface.
 */
class Convert_CylinderToBSplineSurface extends Convert_ElementarySurfaceToBSplineSurface {
}

class Convert_CylinderToBSplineSurface_1 extends Convert_CylinderToBSplineSurface {}

class Convert_CylinderToBSplineSurface_2 extends Convert_CylinderToBSplineSurface {}

/**
 * Root class for algorithms which convert an elementary surface (cylinder, cone, sphere or torus) into a BSpline surface (CylinderToBSplineSurface, ConeToBSplineSurface, SphereToBSplineSurface, TorusToBSplineSurface). These algorithms all work on elementary surfaces from the gp package and compute all the data needed to construct a BSpline surface equivalent to the cylinder, cone, sphere or torus. This data consists of the following: - degrees in the u and v parametric directions, - periodic characteristics in the u and v parametric directions, - a poles table with associated weights, - a knots table (for the u and v parametric directions) with associated multiplicities. The abstract class ElementarySurfaceToBSplineSurface provides a framework for storing and consulting this computed data. This data may then be used to construct a Geom_BSplineSurface surface, for example. All those classes define algorithmes to convert an ElementarySurface into a B-spline surface. This abstract class implements the methods to get the geometric representation of the B-spline surface. The B-spline representation is computed at the creation time in the sub classes. The B-spline surface is defined with its degree in the parametric U and V directions, its control points (Poles), its weights, its knots and their multiplicity. KeyWords : Convert, ElementarySurface, BSplineSurface.
 */
class Convert_ElementarySurfaceToBSplineSurface {
}

/**
 * This algorithm converts a ellipse into a rational B-spline curve. The ellipse is represented an Elips2d from package gp with the parametrization : P (U) = Loc + (MajorRadius * Cos(U) * Xdir + MinorRadius * Sin(U) * Ydir) where Loc is the center of the ellipse, Xdir and Ydir are the normalized directions of the local cartesian coordinate system of the ellipse. The parametrization range is U [0, 2PI]. KeyWords : Convert, Ellipse, BSplineCurve, 2D .
 */
class Convert_EllipseToBSplineCurve extends Convert_ConicToBSplineCurve {
}

class Convert_EllipseToBSplineCurve_1 extends Convert_EllipseToBSplineCurve {}

class Convert_EllipseToBSplineCurve_2 extends Convert_EllipseToBSplineCurve {}

/**
 * Convert a grid of Polynomial Surfaces that are have continuity CM to an Bspline Surface that has continuity CM
 */
class Convert_GridPolynomialToPoles {
}

class Convert_GridPolynomialToPoles_1 extends Convert_GridPolynomialToPoles {}

class Convert_GridPolynomialToPoles_2 extends Convert_GridPolynomialToPoles {}

/**
 * This algorithm converts a hyperbola into a rational B-spline curve. The hyperbola is an Hypr2d from package gp with the parametrization : P (U) = Loc + (MajorRadius * Cosh(U) * Xdir + MinorRadius * Sinh(U) * Ydir) where Loc is the location point of the hyperbola, Xdir and Ydir are the normalized directions of the local cartesian coordinate system of the hyperbola. KeyWords : Convert, Hyperbola, BSplineCurve, 2D .
 */
class Convert_HyperbolaToBSplineCurve extends Convert_ConicToBSplineCurve {
}

/**
 * This algorithm converts a parabola into a non rational B-spline curve. The parabola is a Parab2d from package gp with the parametrization P (U) = Loc + F * (U*U * Xdir + 2 * U * Ydir) where Loc is the apex of the parabola, Xdir is the normalized direction of the symmetry axis of the parabola, Ydir is the normalized direction of the directrix and F is the focal length. KeyWords : Convert, Parabola, BSplineCurve, 2D .
 */
class Convert_ParabolaToBSplineCurve extends Convert_ConicToBSplineCurve {
}

/**
 * This algorithm converts a bounded Sphere into a rational B-spline surface. The sphere is a Sphere from package gp. The parametrization of the sphere is P (U, V) = Loc + Radius * Sin(V) * Zdir + Radius * Cos(V) * (Cos(U)*Xdir + Sin(U)*Ydir) where Loc is the center of the sphere Xdir, Ydir and Zdir are the normalized directions of the local cartesian coordinate system of the sphere. The parametrization range is U [0, 2PI] and V [-PI/2, PI/2]. KeyWords : Convert, Sphere, BSplineSurface.
 */
class Convert_SphereToBSplineSurface extends Convert_ElementarySurfaceToBSplineSurface {
}

class Convert_SphereToBSplineSurface_1 extends Convert_SphereToBSplineSurface {}

class Convert_SphereToBSplineSurface_2 extends Convert_SphereToBSplineSurface {}

class Convert_SphereToBSplineSurface_3 extends Convert_SphereToBSplineSurface {}

/**
 * This algorithm converts a bounded Torus into a rational B-spline surface. The torus is a Torus from package gp. The parametrization of the torus is : P (U, V) = Loc + MinorRadius * Sin(V) * Zdir + (MajorRadius+MinorRadius*Cos(V)) * (Cos(U)*Xdir + Sin(U)*Ydir) where Loc is the center of the torus, Xdir, Ydir and Zdir are the normalized directions of the local cartesian coordinate system of the Torus. The parametrization range is U [0, 2PI], V [0, 2PI]. KeyWords : Convert, Torus, BSplineSurface.
 */
class Convert_TorusToBSplineSurface extends Convert_ElementarySurfaceToBSplineSurface {
}

class Convert_TorusToBSplineSurface_1 extends Convert_TorusToBSplineSurface {}

class Convert_TorusToBSplineSurface_2 extends Convert_TorusToBSplineSurface {}

class Convert_TorusToBSplineSurface_3 extends Convert_TorusToBSplineSurface {}

class Draft {
}

class Draft_EdgeInfo {
}

class Draft_EdgeInfo_1 extends Draft_EdgeInfo {}

class Draft_EdgeInfo_2 extends Draft_EdgeInfo {}

class Draft_FaceInfo {
}

class Draft_FaceInfo_1 extends Draft_FaceInfo {}

class Draft_FaceInfo_2 extends Draft_FaceInfo {}

class Draft_Modification extends BRepTools_Modification {
}

class Draft_VertexInfo {
}

/**
 * Describes Standard Presentations for DsgIHM objects
 */
class DsgPrs {
}

/**
 * A framework for displaying angles.
 */
class DsgPrs_AnglePresentation {
}

/**
 * Framework for display of 2D chamfers.
 */
class DsgPrs_Chamf2dPresentation {
}

/**
 * A framework to define display of relations of concentricity.
 */
class DsgPrs_ConcentricPresentation {
}

/**
 * A framework for displaying an XYZ trihedron.
 */
class DsgPrs_DatumPrs extends Prs3d_Root {
}

/**
 * A framework for displaying diameters in shapes.
 */
class DsgPrs_DiameterPresentation {
}

class DsgPrs_EllipseRadiusPresentation {
}

/**
 * A framework to display equal distances between shapes and a given plane. The distance is the length of a projection from the shape to the plane. These distances are used to compare two shapes by this vector alone.
 */
class DsgPrs_EqualDistancePresentation {
}

/**
 * A framework to define display of equality in radii.
 */
class DsgPrs_EqualRadiusPresentation {
}

/**
 * A framework for displaying radii of fillets.
 */
class DsgPrs_FilletRadiusPresentation {
}

/**
 * class which draws the presentation of Fixed objects
 */
class DsgPrs_FixPresentation {
}

class DsgPrs_IdenticPresentation {
}

/**
 * Framework for displaying lengths. The length displayed is indicated by line segments and text alone or by a combination of line segment, text and arrows at either or both of its ends.
 */
class DsgPrs_LengthPresentation {
}

class DsgPrs_MidPointPresentation {
}

/**
 * A framework to define display of offsets.
 */
class DsgPrs_OffsetPresentation {
}

/**
 * A framework to define display of relations of parallelism between shapes.
 */
class DsgPrs_ParalPresentation {
}

/**
 * A framework to define display of perpendicular constraints between shapes.
 */
class DsgPrs_PerpenPresentation {
}

/**
 * A framework to define display of shaded planes.
 */
class DsgPrs_ShadedPlanePresentation {
}

/**
 * A framework to define display of the normal to the surface of a shape.
 */
class DsgPrs_ShapeDirPresentation {
}

/**
 * A framework to define display of symbols.
 */
class DsgPrs_SymbPresentation {
}

/**
 * A framework to define display of symmetry between shapes.
 */
class DsgPrs_SymmetricPresentation {
}

/**
 * A framework to define display of tangents.
 */
class DsgPrs_TangentPresentation {
}

/**
 * A framework for displaying the axes of an XYZ trihedron.
 */
class DsgPrs_XYZAxisPresentation {
}

/**
 * A framework for displaying the planes of an XYZ trihedron.
 */
class DsgPrs_XYZPlanePresentation {
}

/**
 * Provides functions for basic geometric computations on elementary curves such as conics and lines in 2D and 3D space. This includes: - calculation of a point or derived vector on a 2D or 3D curve where: - the curve is provided by the gp package, or defined in reference form (as in the gp package), and - the point is defined by a parameter, - evaluation of the parameter corresponding to a point on a 2D or 3D curve from gp, - various elementary computations which allow you to position parameterized values within the period of a curve. Notes: - ElCLib stands for Elementary Curves Library. - If the curves provided by the gp package are not explicitly parameterized, they still have an implicit parameterization, analogous to that which they infer for the equivalent Geom or Geom2d curves.
 */
class ElCLib {
}

/**
 * Provides functions for basic geometric computation on elementary surfaces. This includes: - calculation of a point or derived vector on a surface where the surface is provided by the gp package, or defined in canonical form (as in the gp package), and the point is defined with a parameter, - evaluation of the parameters corresponding to a point on an elementary surface from gp, - calculation of isoparametric curves on an elementary surface defined in canonical form (as in the gp package). Notes: - ElSLib stands for Elementary Surfaces Library. - If the surfaces provided by the gp package are not explicitly parameterized, they still have an implicit parameterization, similar to that which they infer on the equivalent Geom surfaces. Note: ElSLib stands for Elementary Surfaces Library.
 */
class ElSLib {
}

/**
 * This package describes the data structure of any expression, relation or function used in mathematics. It also describes the assignment of variables. Standard mathematical functions are implemented such as trigonometrics, hyperbolics, and log functions.
 */
class Expr {
}

/**
 * Describes an interpreter for GeneralExpressions, GeneralFunctions, and GeneralRelations defined in package Expr.
 */
class ExprIntrp {
}

class ExprIntrp_Analysis {
}

/**
 * This class permits, from a string, to create any kind of expression of package Expr by using built-in functions such as Sin,Cos, etc, and by creating variables.
 */
class ExprIntrp_GenExp extends ExprIntrp_Generator {
}

/**
 * Implements an interpreter for defining functions. All its functionnalities can be found in class GenExp.
 */
class ExprIntrp_GenFct extends ExprIntrp_Generator {
}

/**
 * Implements an interpreter for equations or system of equations made of expressions of package Expr.
 */
class ExprIntrp_GenRel extends ExprIntrp_Generator {
}

/**
 * Implements general services for interpretation of expressions.
 */
class ExprIntrp_Generator extends Standard_Transient {
}

class ExprIntrp_SyntaxError extends Standard_Failure {
}

class ExprIntrp_SyntaxError_1 extends ExprIntrp_SyntaxError {}

class ExprIntrp_SyntaxError_2 extends ExprIntrp_SyntaxError {}

class Expr_Absolute extends Expr_UnaryExpression {
}

class Expr_ArcCosine extends Expr_UnaryExpression {
}

class Expr_ArcSine extends Expr_UnaryExpression {
}

class Expr_ArcTangent extends Expr_UnaryExpression {
}

class Expr_ArgCosh extends Expr_UnaryExpression {
}

class Expr_ArgSinh extends Expr_UnaryExpression {
}

class Expr_ArgTanh extends Expr_UnaryExpression {
}

/**
 * Defines all binary expressions. The order of the two operands is significant.
 */
class Expr_BinaryExpression extends Expr_GeneralExpression {
}

/**
 * Defines the use of a binary function in an expression with given arguments.
 */
class Expr_BinaryFunction extends Expr_BinaryExpression {
}

class Expr_Cosh extends Expr_UnaryExpression {
}

class Expr_Cosine extends Expr_UnaryExpression {
}

class Expr_Difference extends Expr_BinaryExpression {
}

class Expr_Different extends Expr_SingleRelation {
}

class Expr_Division extends Expr_BinaryExpression {
}

class Expr_Equal extends Expr_SingleRelation {
}

class Expr_Exponential extends Expr_UnaryExpression {
}

class Expr_Exponentiate extends Expr_BinaryExpression {
}

class Expr_ExprFailure extends Standard_Failure {
}

class Expr_ExprFailure_1 extends Expr_ExprFailure {}

class Expr_ExprFailure_2 extends Expr_ExprFailure {}

class Expr_FunctionDerivative extends Expr_GeneralFunction {
}

/**
 * Defines the general purposes of any expression.
 */
class Expr_GeneralExpression extends Standard_Transient {
}

/**
 * Defines the general purposes of any function.
 */
class Expr_GeneralFunction extends Standard_Transient {
}

/**
 * Defines the general purposes of any relation between expressions.
 */
class Expr_GeneralRelation extends Standard_Transient {
}

class Expr_GreaterThan extends Expr_SingleRelation {
}

class Expr_GreaterThanOrEqual extends Expr_SingleRelation {
}

class Expr_InvalidAssignment extends Expr_ExprFailure {
}

class Expr_InvalidAssignment_1 extends Expr_InvalidAssignment {}

class Expr_InvalidAssignment_2 extends Expr_InvalidAssignment {}

class Expr_InvalidFunction extends Expr_ExprFailure {
}

class Expr_InvalidFunction_1 extends Expr_InvalidFunction {}

class Expr_InvalidFunction_2 extends Expr_InvalidFunction {}

class Expr_InvalidOperand extends Expr_ExprFailure {
}

class Expr_InvalidOperand_1 extends Expr_InvalidOperand {}

class Expr_InvalidOperand_2 extends Expr_InvalidOperand {}

class Expr_LessThan extends Expr_SingleRelation {
}

class Expr_LessThanOrEqual extends Expr_SingleRelation {
}

class Expr_LogOf10 extends Expr_UnaryExpression {
}

class Expr_LogOfe extends Expr_UnaryExpression {
}

/**
 * Describes any numeric constant known by a special name (as PI, e,...).
 */
class Expr_NamedConstant extends Expr_NamedExpression {
}

/**
 * Describe an expression used by its name (as constants or variables). A single reference is made to a NamedExpression in every Expression (i.e. a NamedExpression is shared).
 */
class Expr_NamedExpression extends Expr_GeneralExpression {
}

class Expr_NamedFunction extends Expr_GeneralFunction {
}

/**
 * This class describes any variable of an expression. Assignment is treated directly in this class.
 */
class Expr_NamedUnknown extends Expr_NamedExpression {
}

class Expr_NotAssigned extends Expr_ExprFailure {
}

class Expr_NotAssigned_1 extends Expr_NotAssigned {}

class Expr_NotAssigned_2 extends Expr_NotAssigned {}

class Expr_NotEvaluable extends Expr_ExprFailure {
}

class Expr_NotEvaluable_1 extends Expr_NotEvaluable {}

class Expr_NotEvaluable_2 extends Expr_NotEvaluable {}

/**
 * This class describes any reel value defined in an expression.
 */
class Expr_NumericValue extends Expr_GeneralExpression {
}

class Expr_PolyExpression extends Expr_GeneralExpression {
}

/**
 * Defines the use of an n-ary function in an expression with given arguments.
 */
class Expr_PolyFunction extends Expr_PolyExpression {
}

class Expr_Product extends Expr_PolyExpression {
}

class Expr_Product_1 extends Expr_Product {}

class Expr_Product_2 extends Expr_Product {}

/**
 * Iterates on NamedUnknowns in a GeneralRelation.
 */
class Expr_RUIterator {
}

/**
 * Iterates on every basic relation contained in a GeneralRelation.
 */
class Expr_RelationIterator {
}

class Expr_Sign extends Expr_UnaryExpression {
}

class Expr_Sine extends Expr_UnaryExpression {
}

class Expr_SingleRelation extends Expr_GeneralRelation {
}

class Expr_Sinh extends Expr_UnaryExpression {
}

class Expr_Square extends Expr_UnaryExpression {
}

class Expr_SquareRoot extends Expr_UnaryExpression {
}

class Expr_Sum extends Expr_PolyExpression {
}

class Expr_Sum_1 extends Expr_Sum {}

class Expr_Sum_2 extends Expr_Sum {}

class Expr_SystemRelation extends Expr_GeneralRelation {
}

class Expr_Tangent extends Expr_UnaryExpression {
}

class Expr_Tanh extends Expr_UnaryExpression {
}

class Expr_UnaryExpression extends Expr_GeneralExpression {
}

/**
 * Defines the use of an unary function in an expression with a given argument.
 */
class Expr_UnaryFunction extends Expr_UnaryExpression {
}

class Expr_UnaryMinus extends Expr_UnaryExpression {
}

/**
 * Describes an iterator on NamedUnknowns contained in any GeneralExpression.
 */
class Expr_UnknownIterator {
}

class Extrema_CCLocFOfLocECC extends math_FunctionSetWithDerivatives {
}

class Extrema_CCLocFOfLocECC_1 extends Extrema_CCLocFOfLocECC {}

class Extrema_CCLocFOfLocECC_2 extends Extrema_CCLocFOfLocECC {}

class Extrema_CCLocFOfLocECC2d extends math_FunctionSetWithDerivatives {
}

class Extrema_CCLocFOfLocECC2d_1 extends Extrema_CCLocFOfLocECC2d {}

class Extrema_CCLocFOfLocECC2d_2 extends Extrema_CCLocFOfLocECC2d {}

class Extrema_Curve2dTool {
}

class Extrema_CurveTool {
}

class Extrema_ECC {
}

class Extrema_ECC_1 extends Extrema_ECC {}

class Extrema_ECC_2 extends Extrema_ECC {}

class Extrema_ECC_3 extends Extrema_ECC {}

class Extrema_ECC2d {
}

class Extrema_ECC2d_1 extends Extrema_ECC2d {}

class Extrema_ECC2d_2 extends Extrema_ECC2d {}

class Extrema_ECC2d_3 extends Extrema_ECC2d {}

class Extrema_ELPCOfLocateExtPC {
}

class Extrema_ELPCOfLocateExtPC_1 extends Extrema_ELPCOfLocateExtPC {}

class Extrema_ELPCOfLocateExtPC_2 extends Extrema_ELPCOfLocateExtPC {}

class Extrema_ELPCOfLocateExtPC_3 extends Extrema_ELPCOfLocateExtPC {}

class Extrema_ELPCOfLocateExtPC2d {
}

class Extrema_ELPCOfLocateExtPC2d_1 extends Extrema_ELPCOfLocateExtPC2d {}

class Extrema_ELPCOfLocateExtPC2d_2 extends Extrema_ELPCOfLocateExtPC2d {}

class Extrema_ELPCOfLocateExtPC2d_3 extends Extrema_ELPCOfLocateExtPC2d {}

class Extrema_EPCOfELPCOfLocateExtPC {
}

class Extrema_EPCOfELPCOfLocateExtPC_1 extends Extrema_EPCOfELPCOfLocateExtPC {}

class Extrema_EPCOfELPCOfLocateExtPC_2 extends Extrema_EPCOfELPCOfLocateExtPC {}

class Extrema_EPCOfELPCOfLocateExtPC_3 extends Extrema_EPCOfELPCOfLocateExtPC {}

class Extrema_EPCOfELPCOfLocateExtPC2d {
}

class Extrema_EPCOfELPCOfLocateExtPC2d_1 extends Extrema_EPCOfELPCOfLocateExtPC2d {}

class Extrema_EPCOfELPCOfLocateExtPC2d_2 extends Extrema_EPCOfELPCOfLocateExtPC2d {}

class Extrema_EPCOfELPCOfLocateExtPC2d_3 extends Extrema_EPCOfELPCOfLocateExtPC2d {}

class Extrema_EPCOfExtPC {
}

class Extrema_EPCOfExtPC_1 extends Extrema_EPCOfExtPC {}

class Extrema_EPCOfExtPC_2 extends Extrema_EPCOfExtPC {}

class Extrema_EPCOfExtPC_3 extends Extrema_EPCOfExtPC {}

class Extrema_EPCOfExtPC2d {
}

class Extrema_EPCOfExtPC2d_1 extends Extrema_EPCOfExtPC2d {}

class Extrema_EPCOfExtPC2d_2 extends Extrema_EPCOfExtPC2d {}

class Extrema_EPCOfExtPC2d_3 extends Extrema_EPCOfExtPC2d {}

/**
 * It calculates all the distance between two curves. These distances can be maximum or minimum.
 */
class Extrema_ExtCC {
}

class Extrema_ExtCC_1 extends Extrema_ExtCC {}

class Extrema_ExtCC_2 extends Extrema_ExtCC {}

class Extrema_ExtCC_3 extends Extrema_ExtCC {}

/**
 * It calculates all the distance between two curves. These distances can be maximum or minimum.
 */
class Extrema_ExtCC2d {
}

class Extrema_ExtCC2d_1 extends Extrema_ExtCC2d {}

class Extrema_ExtCC2d_2 extends Extrema_ExtCC2d {}

class Extrema_ExtCC2d_3 extends Extrema_ExtCC2d {}

/**
 * It calculates all the extremum distances between a curve and a surface. These distances can be minimum or maximum.
 */
class Extrema_ExtCS {
}

class Extrema_ExtCS_1 extends Extrema_ExtCS {}

class Extrema_ExtCS_2 extends Extrema_ExtCS {}

class Extrema_ExtCS_3 extends Extrema_ExtCS {}

/**
 * It calculates all the distance between two elementary curves. These distances can be maximum or minimum.
 */
class Extrema_ExtElC {
}

class Extrema_ExtElC_1 extends Extrema_ExtElC {}

class Extrema_ExtElC_2 extends Extrema_ExtElC {}

class Extrema_ExtElC_3 extends Extrema_ExtElC {}

class Extrema_ExtElC_4 extends Extrema_ExtElC {}

class Extrema_ExtElC_5 extends Extrema_ExtElC {}

class Extrema_ExtElC_6 extends Extrema_ExtElC {}

class Extrema_ExtElC_7 extends Extrema_ExtElC {}

/**
 * It calculates all the distance between two elementary curves. These distances can be maximum or minimum.
 */
class Extrema_ExtElC2d {
}

class Extrema_ExtElC2d_1 extends Extrema_ExtElC2d {}

class Extrema_ExtElC2d_2 extends Extrema_ExtElC2d {}

class Extrema_ExtElC2d_3 extends Extrema_ExtElC2d {}

class Extrema_ExtElC2d_4 extends Extrema_ExtElC2d {}

class Extrema_ExtElC2d_5 extends Extrema_ExtElC2d {}

class Extrema_ExtElC2d_6 extends Extrema_ExtElC2d {}

class Extrema_ExtElC2d_7 extends Extrema_ExtElC2d {}

class Extrema_ExtElC2d_8 extends Extrema_ExtElC2d {}

class Extrema_ExtElC2d_9 extends Extrema_ExtElC2d {}

class Extrema_ExtElC2d_10 extends Extrema_ExtElC2d {}

/**
 * It calculates all the distances between a curve and a surface. These distances can be maximum or minimum.
 */
class Extrema_ExtElCS {
}

class Extrema_ExtElCS_1 extends Extrema_ExtElCS {}

class Extrema_ExtElCS_2 extends Extrema_ExtElCS {}

class Extrema_ExtElCS_3 extends Extrema_ExtElCS {}

class Extrema_ExtElCS_4 extends Extrema_ExtElCS {}

class Extrema_ExtElCS_5 extends Extrema_ExtElCS {}

class Extrema_ExtElCS_6 extends Extrema_ExtElCS {}

class Extrema_ExtElCS_7 extends Extrema_ExtElCS {}

class Extrema_ExtElCS_8 extends Extrema_ExtElCS {}

class Extrema_ExtElCS_9 extends Extrema_ExtElCS {}

class Extrema_ExtElCS_10 extends Extrema_ExtElCS {}

class Extrema_ExtElCS_11 extends Extrema_ExtElCS {}

class Extrema_ExtElCS_12 extends Extrema_ExtElCS {}

/**
 * It calculates all the distances between 2 elementary surfaces. These distances can be maximum or minimum.
 */
class Extrema_ExtElSS {
}

class Extrema_ExtElSS_1 extends Extrema_ExtElSS {}

class Extrema_ExtElSS_2 extends Extrema_ExtElSS {}

class Extrema_ExtElSS_3 extends Extrema_ExtElSS {}

class Extrema_ExtElSS_4 extends Extrema_ExtElSS {}

class Extrema_ExtElSS_5 extends Extrema_ExtElSS {}

class Extrema_ExtElSS_6 extends Extrema_ExtElSS {}

class Extrema_ExtElSS_7 extends Extrema_ExtElSS {}

class Extrema_ExtPC {
}

class Extrema_ExtPC_1 extends Extrema_ExtPC {}

class Extrema_ExtPC_2 extends Extrema_ExtPC {}

class Extrema_ExtPC_3 extends Extrema_ExtPC {}

class Extrema_ExtPC2d {
}

class Extrema_ExtPC2d_1 extends Extrema_ExtPC2d {}

class Extrema_ExtPC2d_2 extends Extrema_ExtPC2d {}

class Extrema_ExtPC2d_3 extends Extrema_ExtPC2d {}

/**
 * It calculates all the distances between a point and an elementary curve. These distances can be minimum or maximum.
 */
class Extrema_ExtPElC {
}

class Extrema_ExtPElC_1 extends Extrema_ExtPElC {}

class Extrema_ExtPElC_2 extends Extrema_ExtPElC {}

class Extrema_ExtPElC_3 extends Extrema_ExtPElC {}

class Extrema_ExtPElC_4 extends Extrema_ExtPElC {}

class Extrema_ExtPElC_5 extends Extrema_ExtPElC {}

class Extrema_ExtPElC_6 extends Extrema_ExtPElC {}

/**
 * It calculates all the distances between a point and an elementary curve. These distances can be minimum or maximum.
 */
class Extrema_ExtPElC2d {
}

class Extrema_ExtPElC2d_1 extends Extrema_ExtPElC2d {}

class Extrema_ExtPElC2d_2 extends Extrema_ExtPElC2d {}

class Extrema_ExtPElC2d_3 extends Extrema_ExtPElC2d {}

class Extrema_ExtPElC2d_4 extends Extrema_ExtPElC2d {}

class Extrema_ExtPElC2d_5 extends Extrema_ExtPElC2d {}

class Extrema_ExtPElC2d_6 extends Extrema_ExtPElC2d {}

/**
 * It calculates all the extremum distances between a point and a surface. These distances can be minimum or maximum.
 */
class Extrema_ExtPElS {
}

class Extrema_ExtPElS_1 extends Extrema_ExtPElS {}

class Extrema_ExtPElS_2 extends Extrema_ExtPElS {}

class Extrema_ExtPElS_3 extends Extrema_ExtPElS {}

class Extrema_ExtPElS_4 extends Extrema_ExtPElS {}

class Extrema_ExtPElS_5 extends Extrema_ExtPElS {}

class Extrema_ExtPElS_6 extends Extrema_ExtPElS {}

/**
 * It calculates all the extremum (minimum and maximum) distances between a point and a linear extrusion surface.
 */
class Extrema_ExtPExtS extends Standard_Transient {
}

class Extrema_ExtPExtS_1 extends Extrema_ExtPExtS {}

class Extrema_ExtPExtS_2 extends Extrema_ExtPExtS {}

class Extrema_ExtPExtS_3 extends Extrema_ExtPExtS {}

/**
 * It calculates all the extremum (minimum and maximum) distances between a point and a surface of revolution.
 */
class Extrema_ExtPRevS extends Standard_Transient {
}

class Extrema_ExtPRevS_1 extends Extrema_ExtPRevS {}

class Extrema_ExtPRevS_2 extends Extrema_ExtPRevS {}

class Extrema_ExtPRevS_3 extends Extrema_ExtPRevS {}

/**
 * It calculates all the extremum distances between a point and a surface. These distances can be minimum or maximum.
 */
class Extrema_ExtPS {
}

class Extrema_ExtPS_1 extends Extrema_ExtPS {}

class Extrema_ExtPS_2 extends Extrema_ExtPS {}

class Extrema_ExtPS_3 extends Extrema_ExtPS {}

/**
 * It calculates all the extremum distances between two surfaces. These distances can be minimum or maximum.
 */
class Extrema_ExtSS {
}

class Extrema_ExtSS_1 extends Extrema_ExtSS {}

class Extrema_ExtSS_2 extends Extrema_ExtSS {}

class Extrema_ExtSS_3 extends Extrema_ExtSS {}

/**
 * Function to find extrema of the distance between a curve and a surface.
 */
class Extrema_FuncExtCS extends math_FunctionSetWithDerivatives {
}

class Extrema_FuncExtCS_1 extends Extrema_FuncExtCS {}

class Extrema_FuncExtCS_2 extends Extrema_FuncExtCS {}

/**
 * Function to find extrema of the distance between two surfaces.
 */
class Extrema_FuncExtSS extends math_FunctionSetWithDerivatives {
}

class Extrema_FuncExtSS_1 extends Extrema_FuncExtSS {}

class Extrema_FuncExtSS_2 extends Extrema_FuncExtSS {}

/**
 * Functional for search of extremum of the square Euclidean distance between point P and surface S, starting from approximate solution (u0, v0).
 */
class Extrema_FuncPSDist extends math_MultipleVarFunctionWithGradient {
}

/**
 * Functional for search of extremum of the distance between point P and surface S, starting from approximate solution (u0, v0).
 */
class Extrema_FuncPSNorm extends math_FunctionSetWithDerivatives {
}

class Extrema_FuncPSNorm_1 extends Extrema_FuncPSNorm {}

class Extrema_FuncPSNorm_2 extends Extrema_FuncPSNorm {}

/**
 * It calculates all the extremum distances between acurve and a surface. These distances can be minimum or maximum.
 */
class Extrema_GenExtCS {
}

class Extrema_GenExtCS_1 extends Extrema_GenExtCS {}

class Extrema_GenExtCS_2 extends Extrema_GenExtCS {}

class Extrema_GenExtCS_3 extends Extrema_GenExtCS {}

/**
 * It calculates all the extremum distances between a point and a surface. These distances can be minimum or maximum.
 */
class Extrema_GenExtPS {
}

class Extrema_GenExtPS_1 extends Extrema_GenExtPS {}

class Extrema_GenExtPS_2 extends Extrema_GenExtPS {}

class Extrema_GenExtPS_3 extends Extrema_GenExtPS {}

/**
 * It calculates all the extremum distances between two surfaces. These distances can be minimum or maximum.
 */
class Extrema_GenExtSS {
}

class Extrema_GenExtSS_1 extends Extrema_GenExtSS {}

class Extrema_GenExtSS_2 extends Extrema_GenExtSS {}

class Extrema_GenExtSS_3 extends Extrema_GenExtSS {}

/**
 * With two close points it calculates the distance between two surfaces. This distance can be a minimum or a maximum.
 */
class Extrema_GenLocateExtCS {
}

class Extrema_GenLocateExtCS_1 extends Extrema_GenLocateExtCS {}

class Extrema_GenLocateExtCS_2 extends Extrema_GenLocateExtCS {}

/**
 * With a close point, it calculates the distance between a point and a surface. Criteria type is defined in "Perform" method.
 */
class Extrema_GenLocateExtPS {
}

/**
 * With two close points it calculates the distance between two surfaces. This distance can be a minimum or a maximum.
 */
class Extrema_GenLocateExtSS {
}

class Extrema_GenLocateExtSS_1 extends Extrema_GenLocateExtSS {}

class Extrema_GenLocateExtSS_2 extends Extrema_GenLocateExtSS {}

/**
 * This class implements function which calculate Eucluidean distance between point on curve and point on other curve in case of C1 and C2 continuity is C0.
 */
class Extrema_GlobOptFuncCCC0 extends math_MultipleVarFunction {
}

class Extrema_GlobOptFuncCCC0_1 extends Extrema_GlobOptFuncCCC0 {}

class Extrema_GlobOptFuncCCC0_2 extends Extrema_GlobOptFuncCCC0 {}

/**
 * This class implements function which calculate Eucluidean distance between point on curve and point on other curve in case of C1 and C2 continuity is C1.
 */
class Extrema_GlobOptFuncCCC1 extends math_MultipleVarFunctionWithGradient {
}

class Extrema_GlobOptFuncCCC1_1 extends Extrema_GlobOptFuncCCC1 {}

class Extrema_GlobOptFuncCCC1_2 extends Extrema_GlobOptFuncCCC1 {}

/**
 * This class implements function which calculate Eucluidean distance between point on curve and point on other curve in case of C1 and C2 continuity is C2.
 */
class Extrema_GlobOptFuncCCC2 extends math_MultipleVarFunctionWithHessian {
}

class Extrema_GlobOptFuncCCC2_1 extends Extrema_GlobOptFuncCCC2 {}

class Extrema_GlobOptFuncCCC2_2 extends Extrema_GlobOptFuncCCC2 {}

/**
 * This class implements function which calculate square Eucluidean distance between point on curve and point on surface in case of continuity is C2.
 */
class Extrema_GlobOptFuncCS extends math_MultipleVarFunctionWithHessian {
}

class Extrema_LocECC {
}

class Extrema_LocECC2d {
}

class Extrema_LocEPCOfLocateExtPC {
}

class Extrema_LocEPCOfLocateExtPC_1 extends Extrema_LocEPCOfLocateExtPC {}

class Extrema_LocEPCOfLocateExtPC_2 extends Extrema_LocEPCOfLocateExtPC {}

class Extrema_LocEPCOfLocateExtPC_3 extends Extrema_LocEPCOfLocateExtPC {}

class Extrema_LocEPCOfLocateExtPC2d {
}

class Extrema_LocEPCOfLocateExtPC2d_1 extends Extrema_LocEPCOfLocateExtPC2d {}

class Extrema_LocEPCOfLocateExtPC2d_2 extends Extrema_LocEPCOfLocateExtPC2d {}

class Extrema_LocEPCOfLocateExtPC2d_3 extends Extrema_LocEPCOfLocateExtPC2d {}

/**
 * It calculates the distance between two curves with a close point; these distances can be maximum or minimum.
 */
class Extrema_LocateExtCC {
}

/**
 * It calculates the distance between two curves with a close point; these distances can be maximum or minimum.
 */
class Extrema_LocateExtCC2d {
}

class Extrema_LocateExtPC {
}

class Extrema_LocateExtPC_1 extends Extrema_LocateExtPC {}

class Extrema_LocateExtPC_2 extends Extrema_LocateExtPC {}

class Extrema_LocateExtPC_3 extends Extrema_LocateExtPC {}

class Extrema_LocateExtPC2d {
}

class Extrema_LocateExtPC2d_1 extends Extrema_LocateExtPC2d {}

class Extrema_LocateExtPC2d_2 extends Extrema_LocateExtPC2d {}

class Extrema_LocateExtPC2d_3 extends Extrema_LocateExtPC2d {}

class Extrema_PCFOfEPCOfELPCOfLocateExtPC extends math_FunctionWithDerivative {
}

class Extrema_PCFOfEPCOfELPCOfLocateExtPC_1 extends Extrema_PCFOfEPCOfELPCOfLocateExtPC {}

class Extrema_PCFOfEPCOfELPCOfLocateExtPC_2 extends Extrema_PCFOfEPCOfELPCOfLocateExtPC {}

class Extrema_PCFOfEPCOfELPCOfLocateExtPC2d extends math_FunctionWithDerivative {
}

class Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_1 extends Extrema_PCFOfEPCOfELPCOfLocateExtPC2d {}

class Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_2 extends Extrema_PCFOfEPCOfELPCOfLocateExtPC2d {}

class Extrema_PCFOfEPCOfExtPC extends math_FunctionWithDerivative {
}

class Extrema_PCFOfEPCOfExtPC_1 extends Extrema_PCFOfEPCOfExtPC {}

class Extrema_PCFOfEPCOfExtPC_2 extends Extrema_PCFOfEPCOfExtPC {}

class Extrema_PCFOfEPCOfExtPC2d extends math_FunctionWithDerivative {
}

class Extrema_PCFOfEPCOfExtPC2d_1 extends Extrema_PCFOfEPCOfExtPC2d {}

class Extrema_PCFOfEPCOfExtPC2d_2 extends Extrema_PCFOfEPCOfExtPC2d {}

class Extrema_PCLocFOfLocEPCOfLocateExtPC extends math_FunctionWithDerivative {
}

class Extrema_PCLocFOfLocEPCOfLocateExtPC_1 extends Extrema_PCLocFOfLocEPCOfLocateExtPC {}

class Extrema_PCLocFOfLocEPCOfLocateExtPC_2 extends Extrema_PCLocFOfLocEPCOfLocateExtPC {}

class Extrema_PCLocFOfLocEPCOfLocateExtPC2d extends math_FunctionWithDerivative {
}

class Extrema_PCLocFOfLocEPCOfLocateExtPC2d_1 extends Extrema_PCLocFOfLocEPCOfLocateExtPC2d {}

class Extrema_PCLocFOfLocEPCOfLocateExtPC2d_2 extends Extrema_PCLocFOfLocEPCOfLocateExtPC2d {}

class Extrema_POnCurv {
}

class Extrema_POnCurv_1 extends Extrema_POnCurv {}

class Extrema_POnCurv_2 extends Extrema_POnCurv {}

class Extrema_POnCurv2d {
}

class Extrema_POnCurv2d_1 extends Extrema_POnCurv2d {}

class Extrema_POnCurv2d_2 extends Extrema_POnCurv2d {}

/**
 * Definition of a point on surface.
 */
class Extrema_POnSurf {
}

class Extrema_POnSurf_1 extends Extrema_POnSurf {}

class Extrema_POnSurf_2 extends Extrema_POnSurf {}

/**
 * Data container for point on surface parameters. These parameters are required to compute an initial approximation for extrema computation.
 */
class Extrema_POnSurfParams extends Extrema_POnSurf {
}

class Extrema_POnSurfParams_1 extends Extrema_POnSurfParams {}

class Extrema_POnSurfParams_2 extends Extrema_POnSurfParams {}

/**
 * Implements construction algorithms for an arc of circle in the plane. The result is a Geom2d_TrimmedCurve curve. A MakeArcOfCircle object provides a framework for: - defining the construction of the arc of circle, - implementing the construction algorithm, and - consulting the results. In particular, the Value function returns the constructed arc of circle.
 */
class GCE2d_MakeArcOfCircle extends GCE2d_Root {
}

class GCE2d_MakeArcOfCircle_1 extends GCE2d_MakeArcOfCircle {}

class GCE2d_MakeArcOfCircle_2 extends GCE2d_MakeArcOfCircle {}

class GCE2d_MakeArcOfCircle_3 extends GCE2d_MakeArcOfCircle {}

class GCE2d_MakeArcOfCircle_4 extends GCE2d_MakeArcOfCircle {}

class GCE2d_MakeArcOfCircle_5 extends GCE2d_MakeArcOfCircle {}

/**
 * Implements construction algorithms for an arc of ellipse in the plane. The result is a Geom2d_TrimmedCurve curve. A MakeArcOfEllipse object provides a framework for: - defining the construction of the arc of ellipse, - implementing the construction algorithm, and - consulting the results. In particular, the Value function returns the constructed arc of ellipse.
 */
class GCE2d_MakeArcOfEllipse extends GCE2d_Root {
}

class GCE2d_MakeArcOfEllipse_1 extends GCE2d_MakeArcOfEllipse {}

class GCE2d_MakeArcOfEllipse_2 extends GCE2d_MakeArcOfEllipse {}

class GCE2d_MakeArcOfEllipse_3 extends GCE2d_MakeArcOfEllipse {}

/**
 * Implements construction algorithms for an arc of hyperbola in the plane. The result is a Geom2d_TrimmedCurve curve. A MakeArcOfHyperbola object provides a framework for: - defining the construction of the arc of hyperbola, - implementing the construction algorithm, and - consulting the results. In particular, the Value function returns the constructed arc of hyperbola.
 */
class GCE2d_MakeArcOfHyperbola extends GCE2d_Root {
}

class GCE2d_MakeArcOfHyperbola_1 extends GCE2d_MakeArcOfHyperbola {}

class GCE2d_MakeArcOfHyperbola_2 extends GCE2d_MakeArcOfHyperbola {}

class GCE2d_MakeArcOfHyperbola_3 extends GCE2d_MakeArcOfHyperbola {}

/**
 * Implements construction algorithms for an arc of parabola in the plane. The result is a Geom2d_TrimmedCurve curve. A MakeArcOfParabola object provides a framework for: - defining the construction of the arc of parabola, - implementing the construction algorithm, and - consulting the results. In particular, the Value function returns the constructed arc of parabola.
 */
class GCE2d_MakeArcOfParabola extends GCE2d_Root {
}

class GCE2d_MakeArcOfParabola_1 extends GCE2d_MakeArcOfParabola {}

class GCE2d_MakeArcOfParabola_2 extends GCE2d_MakeArcOfParabola {}

class GCE2d_MakeArcOfParabola_3 extends GCE2d_MakeArcOfParabola {}

/**
 * This class implements the following algorithms used to create Circle from Geom2d.
 */
class GCE2d_MakeCircle extends GCE2d_Root {
}

class GCE2d_MakeCircle_1 extends GCE2d_MakeCircle {}

class GCE2d_MakeCircle_2 extends GCE2d_MakeCircle {}

class GCE2d_MakeCircle_3 extends GCE2d_MakeCircle {}

class GCE2d_MakeCircle_4 extends GCE2d_MakeCircle {}

class GCE2d_MakeCircle_5 extends GCE2d_MakeCircle {}

class GCE2d_MakeCircle_6 extends GCE2d_MakeCircle {}

class GCE2d_MakeCircle_7 extends GCE2d_MakeCircle {}

class GCE2d_MakeCircle_8 extends GCE2d_MakeCircle {}

/**
 * This class implements the following algorithms used to create Ellipse from Geom2d. * Create an Ellipse from two apex and the center. Defines an ellipse in 2D space. The parametrization range is [0,2*PI]. The ellipse is a closed and periodic curve. The center of the ellipse is the "Location" point of its axis placement "XAxis". The "XAxis" of the ellipse defines the origin of the parametrization, it is the major axis of the ellipse. The YAxis is the minor axis of the ellipse.
 */
class GCE2d_MakeEllipse extends GCE2d_Root {
}

class GCE2d_MakeEllipse_1 extends GCE2d_MakeEllipse {}

class GCE2d_MakeEllipse_2 extends GCE2d_MakeEllipse {}

class GCE2d_MakeEllipse_3 extends GCE2d_MakeEllipse {}

class GCE2d_MakeEllipse_4 extends GCE2d_MakeEllipse {}

/**
 * This class implements the following algorithms used to create Hyperbola from Geom2d. * Create an Hyperbola from two apex and the center. Defines the main branch of an hyperbola. The parameterization range is ]-infinite,+infinite[ It is possible to get the other branch and the two conjugate branches of the main branch.
 */
class GCE2d_MakeHyperbola extends GCE2d_Root {
}

class GCE2d_MakeHyperbola_1 extends GCE2d_MakeHyperbola {}

class GCE2d_MakeHyperbola_2 extends GCE2d_MakeHyperbola {}

class GCE2d_MakeHyperbola_3 extends GCE2d_MakeHyperbola {}

class GCE2d_MakeHyperbola_4 extends GCE2d_MakeHyperbola {}

/**
 * This class implements the following algorithms used to create a Line from Geom2d. * Create a Line parallel to another and passing through a point. * Create a Line passing through 2 points.
 */
class GCE2d_MakeLine extends GCE2d_Root {
}

class GCE2d_MakeLine_1 extends GCE2d_MakeLine {}

class GCE2d_MakeLine_2 extends GCE2d_MakeLine {}

class GCE2d_MakeLine_3 extends GCE2d_MakeLine {}

class GCE2d_MakeLine_4 extends GCE2d_MakeLine {}

class GCE2d_MakeLine_5 extends GCE2d_MakeLine {}

class GCE2d_MakeLine_6 extends GCE2d_MakeLine {}

/**
 * This class implements elementary construction algorithms for a symmetrical transformation in 2D space about a point or axis. The result is a Geom2d_Transformation transformation. A MakeMirror object provides a framework for: - defining the construction of the transformation, - implementing the construction algorithm, and - consulting the result.
 */
class GCE2d_MakeMirror {
}

class GCE2d_MakeMirror_1 extends GCE2d_MakeMirror {}

class GCE2d_MakeMirror_2 extends GCE2d_MakeMirror {}

class GCE2d_MakeMirror_3 extends GCE2d_MakeMirror {}

class GCE2d_MakeMirror_4 extends GCE2d_MakeMirror {}

/**
 * This class implements the following algorithms used to create Parabola from Geom2d. * Create an Parabola from two apex and the center. Defines the parabola in the parameterization range : ]-infinite,+infinite[ The vertex of the parabola is the "Location" point of the local coordinate system "XAxis" of the parabola. The "XAxis" of the parabola is its axis of symmetry. The "Xaxis" is oriented from the vertex of the parabola to the Focus of the parabola. The equation of the parabola in the local coordinate system is Y**2 = (2*P) * X P is the distance between the focus and the directrix of the parabola called Parameter). The focal length F = P/2 is the distance between the vertex and the focus of the parabola.
 */
class GCE2d_MakeParabola extends GCE2d_Root {
}

class GCE2d_MakeParabola_1 extends GCE2d_MakeParabola {}

class GCE2d_MakeParabola_2 extends GCE2d_MakeParabola {}

class GCE2d_MakeParabola_3 extends GCE2d_MakeParabola {}

class GCE2d_MakeParabola_4 extends GCE2d_MakeParabola {}

class GCE2d_MakeParabola_5 extends GCE2d_MakeParabola {}

/**
 * This class implements an elementary construction algorithm for a rotation in 2D space. The result is a Geom2d_Transformation transformation. A MakeRotation object provides a framework for: - defining the construction of the transformation, - implementing the construction algorithm, and - consulting the result.
 */
class GCE2d_MakeRotation {
}

/**
 * This class implements an elementary construction algorithm for a scaling transformation in 2D space. The result is a Geom2d_Transformation transformation. A MakeScale object provides a framework for: - defining the construction of the transformation, - implementing the construction algorithm, and - consulting the result.
 */
class GCE2d_MakeScale {
}

/**
 * Implements construction algorithms for a line segment in the plane. The result is a Geom2d_TrimmedCurve curve. A MakeSegment object provides a framework for: - defining the construction of the line segment, - implementing the construction algorithm, and - consulting the results. In particular, the Value function returns the constructed line segment.
 */
class GCE2d_MakeSegment extends GCE2d_Root {
}

class GCE2d_MakeSegment_1 extends GCE2d_MakeSegment {}

class GCE2d_MakeSegment_2 extends GCE2d_MakeSegment {}

class GCE2d_MakeSegment_3 extends GCE2d_MakeSegment {}

class GCE2d_MakeSegment_4 extends GCE2d_MakeSegment {}

class GCE2d_MakeSegment_5 extends GCE2d_MakeSegment {}

/**
 * This class implements elementary construction algorithms for a translation in 2D space. The result is a Geom2d_Transformation transformation. A MakeTranslation object provides a framework for: - defining the construction of the transformation, - implementing the construction algorithm, and - consulting the result.
 */
class GCE2d_MakeTranslation {
}

class GCE2d_MakeTranslation_1 extends GCE2d_MakeTranslation {}

class GCE2d_MakeTranslation_2 extends GCE2d_MakeTranslation {}

/**
 * This class implements the common services for all classes of gce which report error.
 */
class GCE2d_Root {
}

/**
 * Provides an algorithm to compute a point on a curve situated at a given distance from another point on the curve, the distance being measured along the curve (curvilinear abscissa on the curve). This algorithm is also used to compute the length of a curve. An AbscissaPoint object provides a framework for: - defining the point to compute - implementing the construction algorithm - consulting the result.
 */
class GCPnts_AbscissaPoint {
}

class GCPnts_AbscissaPoint_1 extends GCPnts_AbscissaPoint {}

class GCPnts_AbscissaPoint_2 extends GCPnts_AbscissaPoint {}

class GCPnts_AbscissaPoint_3 extends GCPnts_AbscissaPoint {}

class GCPnts_AbscissaPoint_4 extends GCPnts_AbscissaPoint {}

class GCPnts_AbscissaPoint_5 extends GCPnts_AbscissaPoint {}

class GCPnts_AbscissaPoint_6 extends GCPnts_AbscissaPoint {}

class GCPnts_AbscissaPoint_7 extends GCPnts_AbscissaPoint {}

class GCPnts_AbscissaPoint_8 extends GCPnts_AbscissaPoint {}

class GCPnts_AbscissaPoint_9 extends GCPnts_AbscissaPoint {}

/**
 * The same as class GCPnts_DistFunction2d, but it can be used in minimization algorithms that requires multi variable function
 */
class GCPnts_DistFunction2dMV extends math_MultipleVarFunction {
}

/**
 * The same as class GCPnts_DistFunction, but it can be used in minimization algorithms that requires multi variable function
 */
class GCPnts_DistFunctionMV extends math_MultipleVarFunction {
}

/**
 * This class provides an algorithm to compute a uniform abscissa distribution of points on a curve, i.e. a sequence of equidistant points. The distance between two consecutive points is measured along the curve. The distribution is defined: - either by the curvilinear distance between two consecutive points - or by a number of points.
 */
class GCPnts_QuasiUniformAbscissa {
}

class GCPnts_QuasiUniformAbscissa_1 extends GCPnts_QuasiUniformAbscissa {}

class GCPnts_QuasiUniformAbscissa_2 extends GCPnts_QuasiUniformAbscissa {}

class GCPnts_QuasiUniformAbscissa_3 extends GCPnts_QuasiUniformAbscissa {}

class GCPnts_QuasiUniformAbscissa_4 extends GCPnts_QuasiUniformAbscissa {}

class GCPnts_QuasiUniformAbscissa_5 extends GCPnts_QuasiUniformAbscissa {}

/**
 * This class computes a distribution of points on a curve. The points may respect the deflection. The algorithm is not based on the classical prediction (with second derivative of curve), but either on the evaluation of the distance between the mid point and the point of mid parameter of the two points, or the distance between the mid point and the point at parameter 0.5 on the cubic interpolation of the two points and their tangents. Note: this algorithm is faster than a GCPnts_UniformDeflection algorithm, and is able to work with non-"C2" continuous curves. However, it generates more points in the distribution.
 */
class GCPnts_QuasiUniformDeflection {
}

class GCPnts_QuasiUniformDeflection_1 extends GCPnts_QuasiUniformDeflection {}

class GCPnts_QuasiUniformDeflection_2 extends GCPnts_QuasiUniformDeflection {}

class GCPnts_QuasiUniformDeflection_3 extends GCPnts_QuasiUniformDeflection {}

class GCPnts_QuasiUniformDeflection_4 extends GCPnts_QuasiUniformDeflection {}

class GCPnts_QuasiUniformDeflection_5 extends GCPnts_QuasiUniformDeflection {}

/**
 * Computes a set of points on a curve from package Adaptor3d such as between two successive points P1(u1)and P2(u2) :
 */
class GCPnts_TangentialDeflection {
}

class GCPnts_TangentialDeflection_1 extends GCPnts_TangentialDeflection {}

class GCPnts_TangentialDeflection_2 extends GCPnts_TangentialDeflection {}

class GCPnts_TangentialDeflection_3 extends GCPnts_TangentialDeflection {}

class GCPnts_TangentialDeflection_4 extends GCPnts_TangentialDeflection {}

class GCPnts_TangentialDeflection_5 extends GCPnts_TangentialDeflection {}

/**
 * This class allows to compute a uniform distribution of points on a curve (ie the points will all be equally distant).
 */
class GCPnts_UniformAbscissa {
}

class GCPnts_UniformAbscissa_1 extends GCPnts_UniformAbscissa {}

class GCPnts_UniformAbscissa_2 extends GCPnts_UniformAbscissa {}

class GCPnts_UniformAbscissa_3 extends GCPnts_UniformAbscissa {}

class GCPnts_UniformAbscissa_4 extends GCPnts_UniformAbscissa {}

class GCPnts_UniformAbscissa_5 extends GCPnts_UniformAbscissa {}

class GCPnts_UniformAbscissa_6 extends GCPnts_UniformAbscissa {}

class GCPnts_UniformAbscissa_7 extends GCPnts_UniformAbscissa {}

class GCPnts_UniformAbscissa_8 extends GCPnts_UniformAbscissa {}

class GCPnts_UniformAbscissa_9 extends GCPnts_UniformAbscissa {}

/**
 * Provides an algorithm to compute a distribution of points on a 'C2' continuous curve. The algorithm respects a criterion of maximum deflection between the curve and the polygon that results from the computed points. Note: This algorithm is relatively time consuming. A GCPnts_QuasiUniformDeflection algorithm is quicker; it can also work with non-'C2' continuous curves, but it generates more points in the distribution.
 */
class GCPnts_UniformDeflection {
}

class GCPnts_UniformDeflection_1 extends GCPnts_UniformDeflection {}

class GCPnts_UniformDeflection_2 extends GCPnts_UniformDeflection {}

class GCPnts_UniformDeflection_3 extends GCPnts_UniformDeflection {}

class GCPnts_UniformDeflection_4 extends GCPnts_UniformDeflection {}

class GCPnts_UniformDeflection_5 extends GCPnts_UniformDeflection {}

/**
 * Implements construction algorithms for an arc of circle in 3D space. The result is a Geom_TrimmedCurve curve. A MakeArcOfCircle object provides a framework for: - defining the construction of the arc of circle, - implementing the construction algorithm, and - consulting the results. In particular, the Value function returns the constructed arc of circle.
 */
class GC_MakeArcOfCircle extends GC_Root {
}

class GC_MakeArcOfCircle_1 extends GC_MakeArcOfCircle {}

class GC_MakeArcOfCircle_2 extends GC_MakeArcOfCircle {}

class GC_MakeArcOfCircle_3 extends GC_MakeArcOfCircle {}

class GC_MakeArcOfCircle_4 extends GC_MakeArcOfCircle {}

class GC_MakeArcOfCircle_5 extends GC_MakeArcOfCircle {}

/**
 * Implements construction algorithms for an arc of ellipse in 3D space. The result is a Geom_TrimmedCurve curve. A MakeArcOfEllipse object provides a framework for: - defining the construction of the arc of ellipse, - implementing the construction algorithm, and - consulting the results. In particular, the Value function returns the constructed arc of ellipse.
 */
class GC_MakeArcOfEllipse extends GC_Root {
}

class GC_MakeArcOfEllipse_1 extends GC_MakeArcOfEllipse {}

class GC_MakeArcOfEllipse_2 extends GC_MakeArcOfEllipse {}

class GC_MakeArcOfEllipse_3 extends GC_MakeArcOfEllipse {}

/**
 * Implements construction algorithms for an arc of hyperbola in 3D space. The result is a Geom_TrimmedCurve curve. A MakeArcOfHyperbola object provides a framework for: - defining the construction of the arc of hyperbola, - implementing the construction algorithm, and - consulting the results. In particular, the Value function returns the constructed arc of hyperbola.
 */
class GC_MakeArcOfHyperbola extends GC_Root {
}

class GC_MakeArcOfHyperbola_1 extends GC_MakeArcOfHyperbola {}

class GC_MakeArcOfHyperbola_2 extends GC_MakeArcOfHyperbola {}

class GC_MakeArcOfHyperbola_3 extends GC_MakeArcOfHyperbola {}

/**
 * Implements construction algorithms for an arc of parabola in 3D space. The result is a Geom_TrimmedCurve curve. A MakeArcOfParabola object provides a framework for: - defining the construction of the arc of parabola, - implementing the construction algorithm, and - consulting the results. In particular, the Value function returns the constructed arc of parabola.
 */
class GC_MakeArcOfParabola extends GC_Root {
}

class GC_MakeArcOfParabola_1 extends GC_MakeArcOfParabola {}

class GC_MakeArcOfParabola_2 extends GC_MakeArcOfParabola {}

class GC_MakeArcOfParabola_3 extends GC_MakeArcOfParabola {}

/**
 * This class implements the following algorithms used to create Cirlec from Geom.
 */
class GC_MakeCircle extends GC_Root {
}

class GC_MakeCircle_1 extends GC_MakeCircle {}

class GC_MakeCircle_2 extends GC_MakeCircle {}

class GC_MakeCircle_3 extends GC_MakeCircle {}

class GC_MakeCircle_4 extends GC_MakeCircle {}

class GC_MakeCircle_5 extends GC_MakeCircle {}

class GC_MakeCircle_6 extends GC_MakeCircle {}

class GC_MakeCircle_7 extends GC_MakeCircle {}

class GC_MakeCircle_8 extends GC_MakeCircle {}

/**
 * This class implements the following algorithms used to create a ConicalSurface from Geom. * Create a ConicalSurface parallel to another and passing through a point. * Create a ConicalSurface parallel to another at a distance <Dist>. * Create a ConicalSurface by 4 points. * Create a ConicalSurface by its axis and 2 points. * Create a ConicalSurface by 2 points and 2 radius. The local coordinate system of the ConicalSurface is defined with an axis placement (see class ElementarySurface).
 */
class GC_MakeConicalSurface extends GC_Root {
}

class GC_MakeConicalSurface_1 extends GC_MakeConicalSurface {}

class GC_MakeConicalSurface_2 extends GC_MakeConicalSurface {}

class GC_MakeConicalSurface_3 extends GC_MakeConicalSurface {}

class GC_MakeConicalSurface_4 extends GC_MakeConicalSurface {}

/**
 * This class implements the following algorithms used to create a CylindricalSurface from Geom. * Create a CylindricalSurface parallel to another and passing through a point. * Create a CylindricalSurface parallel to another at a distance <Dist>. * Create a CylindricalSurface passing through 3 points. * Create a CylindricalSurface by its axis and radius. * Create a cylindricalSurface by its circular base. The local coordinate system of the CylindricalSurface is defined with an axis placement (see class ElementarySurface).
 */
class GC_MakeCylindricalSurface extends GC_Root {
}

class GC_MakeCylindricalSurface_1 extends GC_MakeCylindricalSurface {}

class GC_MakeCylindricalSurface_2 extends GC_MakeCylindricalSurface {}

class GC_MakeCylindricalSurface_3 extends GC_MakeCylindricalSurface {}

class GC_MakeCylindricalSurface_4 extends GC_MakeCylindricalSurface {}

class GC_MakeCylindricalSurface_5 extends GC_MakeCylindricalSurface {}

class GC_MakeCylindricalSurface_6 extends GC_MakeCylindricalSurface {}

class GC_MakeCylindricalSurface_7 extends GC_MakeCylindricalSurface {}

/**
 * This class implements construction algorithms for an ellipse in 3D space. The result is a Geom_Ellipse ellipse. A MakeEllipse object provides a framework for: - defining the construction of the ellipse, - implementing the construction algorithm, and - consulting the results. In particular, the Value function returns the constructed ellipse.
 */
class GC_MakeEllipse extends GC_Root {
}

class GC_MakeEllipse_1 extends GC_MakeEllipse {}

class GC_MakeEllipse_2 extends GC_MakeEllipse {}

class GC_MakeEllipse_3 extends GC_MakeEllipse {}

/**
 * This class implements construction algorithms for a hyperbola in 3D space. The result is a Geom_Hyperbola hyperbola. A MakeHyperbola object provides a framework for: - defining the construction of the hyperbola, - implementing the construction algorithm, and - consulting the results. In particular, the Value function returns the constructed hyperbola. To define the main branch of an hyperbola. The parameterization range is ]-infinite,+infinite[ It is possible to get the other branch and the two conjugate branches of the main branch.
 */
class GC_MakeHyperbola extends GC_Root {
}

class GC_MakeHyperbola_1 extends GC_MakeHyperbola {}

class GC_MakeHyperbola_2 extends GC_MakeHyperbola {}

class GC_MakeHyperbola_3 extends GC_MakeHyperbola {}

/**
 * This class implements the following algorithms used to create a Line from Geom. * Create a Line parallel to another and passing through a point. * Create a Line passing through 2 points. A MakeLine object provides a framework for: - defining the construction of the line, - implementing the construction algorithm, and - consulting the results. In particular, the Value function returns the constructed line.
 */
class GC_MakeLine extends GC_Root {
}

class GC_MakeLine_1 extends GC_MakeLine {}

class GC_MakeLine_2 extends GC_MakeLine {}

class GC_MakeLine_3 extends GC_MakeLine {}

class GC_MakeLine_4 extends GC_MakeLine {}

class GC_MakeLine_5 extends GC_MakeLine {}

/**
 * This class implements elementary construction algorithms for a symmetrical transformation in 3D space about a point, axis or plane. The result is a Geom_Transformation transformation. A MakeMirror object provides a framework for: - defining the construction of the transformation, - implementing the construction algorithm, and - consulting the result.
 */
class GC_MakeMirror {
}

class GC_MakeMirror_1 extends GC_MakeMirror {}

class GC_MakeMirror_2 extends GC_MakeMirror {}

class GC_MakeMirror_3 extends GC_MakeMirror {}

class GC_MakeMirror_4 extends GC_MakeMirror {}

class GC_MakeMirror_5 extends GC_MakeMirror {}

class GC_MakeMirror_6 extends GC_MakeMirror {}

/**
 * This class implements the following algorithms used to create a Plane from gp. * Create a Plane parallel to another and passing through a point. * Create a Plane passing through 3 points. * Create a Plane by its normal A MakePlane object provides a framework for: - defining the construction of the plane, - implementing the construction algorithm, and - consulting the results. In particular, the Value function returns the constructed plane.
 */
class GC_MakePlane extends GC_Root {
}

class GC_MakePlane_1 extends GC_MakePlane {}

class GC_MakePlane_2 extends GC_MakePlane {}

class GC_MakePlane_3 extends GC_MakePlane {}

class GC_MakePlane_4 extends GC_MakePlane {}

class GC_MakePlane_5 extends GC_MakePlane {}

class GC_MakePlane_6 extends GC_MakePlane {}

class GC_MakePlane_7 extends GC_MakePlane {}

/**
 * This class implements elementary construction algorithms for a rotation in 3D space. The result is a Geom_Transformation transformation. A MakeRotation object provides a framework for: - defining the construction of the transformation, - implementing the construction algorithm, and - consulting the result.
 */
class GC_MakeRotation {
}

class GC_MakeRotation_1 extends GC_MakeRotation {}

class GC_MakeRotation_2 extends GC_MakeRotation {}

class GC_MakeRotation_3 extends GC_MakeRotation {}

/**
 * This class implements an elementary construction algorithm for a scaling transformation in 3D space. The result is a Geom_Transformation transformation (a scaling transformation with the center point <Point> and the scaling value <Scale>). A MakeScale object provides a framework for: - defining the construction of the transformation, - implementing the construction algorithm, and - consulting the result.
 */
class GC_MakeScale {
}

/**
 * Implements construction algorithms for a line segment in 3D space. Makes a segment of Line from the 2 points <P1> and <P2>. The result is a Geom_TrimmedCurve curve. A MakeSegment object provides a framework for: - defining the construction of the line segment, - implementing the construction algorithm, and - consulting the results. In particular, the Value function returns the constructed line segment.
 */
class GC_MakeSegment extends GC_Root {
}

class GC_MakeSegment_1 extends GC_MakeSegment {}

class GC_MakeSegment_2 extends GC_MakeSegment {}

class GC_MakeSegment_3 extends GC_MakeSegment {}

class GC_MakeSegment_4 extends GC_MakeSegment {}

/**
 * This class implements elementary construction algorithms for a translation in 3D space. The result is a Geom_Transformation transformation. A MakeTranslation object provides a framework for: - defining the construction of the transformation, - implementing the construction algorithm, and - consulting the result.
 */
class GC_MakeTranslation {
}

class GC_MakeTranslation_1 extends GC_MakeTranslation {}

class GC_MakeTranslation_2 extends GC_MakeTranslation {}

/**
 * Implements construction algorithms for a trimmed cone limited by two planes orthogonal to its axis. The result is a Geom_RectangularTrimmedSurface surface. A MakeTrimmedCone provides a framework for: - defining the construction of the trimmed cone, - implementing the construction algorithm, and - consulting the results. In particular, the Value function returns the constructed trimmed cone.
 */
class GC_MakeTrimmedCone extends GC_Root {
}

class GC_MakeTrimmedCone_1 extends GC_MakeTrimmedCone {}

class GC_MakeTrimmedCone_2 extends GC_MakeTrimmedCone {}

/**
 * Implements construction algorithms for a trimmed cylinder limited by two planes orthogonal to its axis. The result is a Geom_RectangularTrimmedSurface surface. A MakeTrimmedCylinder provides a framework for: - defining the construction of the trimmed cylinder, - implementing the construction algorithm, and - consulting the results. In particular, the Value function returns the constructed trimmed cylinder.
 */
class GC_MakeTrimmedCylinder extends GC_Root {
}

class GC_MakeTrimmedCylinder_1 extends GC_MakeTrimmedCylinder {}

class GC_MakeTrimmedCylinder_2 extends GC_MakeTrimmedCylinder {}

class GC_MakeTrimmedCylinder_3 extends GC_MakeTrimmedCylinder {}

/**
 * This class implements the common services for all classes of gce which report error.
 */
class GC_Root {
}

/**
 * This package defines algorithmes to compute the global properties of a set of points, a curve, a surface, a solid (non infinite region of space delimited with geometric entities), a compound geometric system (heterogeneous composition of the previous entities).
 */
class GProp {
}

/**
 * Computes the global properties of bounded curves in 3D space. It can be an elementary curve from package gp such as Lin, Circ, Elips, Parab .
 */
class GProp_CelGProps extends GProp_GProps {
}

class GProp_CelGProps_1 extends GProp_CelGProps {}

class GProp_CelGProps_2 extends GProp_CelGProps {}

class GProp_CelGProps_3 extends GProp_CelGProps {}

class GProp_CelGProps_4 extends GProp_CelGProps {}

/**
 * Implements a general mechanism to compute the global properties of a "compound geometric system" in 3d space by composition of the global properties of "elementary geometric entities" such as (curve, surface, solid, set of points). It is possible to compose the properties of several "compound geometric systems" too.
 */
class GProp_GProps {
}

class GProp_GProps_1 extends GProp_GProps {}

class GProp_GProps_2 extends GProp_GProps {}

/**
 * A framework to analyze a collection - or cloud - of points and to verify if they are coincident, collinear or coplanar within a given precision. If so, it also computes the mean point, the mean line or the mean plane of the points. If not, it computes the minimal box which includes all the points.
 */
class GProp_PEquation {
}

/**
 * A framework for computing the global properties of a set of points. A point mass is attached to each point. The global mass of the system is the sum of each individual mass. By default, the point mass is equal to 1 and the mass of a system composed of N points is equal to N. Warning A framework of this sort provides functions to handle sets of points easily. But, like any GProp_GProps object, by using the Add function, it can theoretically bring together the computed global properties and those of a system more complex than a set of points . The mass of each point and the density of each component of the composed system must be coherent. Note that this coherence cannot be checked. Nonetheless, you are advised to restrict your use of a GProp_PGProps object to a set of points and to create a GProp_GProps object in order to bring together global properties of different systems.
 */
class GProp_PGProps extends GProp_GProps {
}

class GProp_PGProps_1 extends GProp_PGProps {}

class GProp_PGProps_2 extends GProp_PGProps {}

class GProp_PGProps_3 extends GProp_PGProps {}

class GProp_PGProps_4 extends GProp_PGProps {}

class GProp_PGProps_5 extends GProp_PGProps {}

/**
 * A framework to present the principal properties of inertia of a system of which global properties are computed by a GProp_GProps object. There is always a set of axes for which the products of inertia of a geometric system are equal to 0; i.e. the matrix of inertia of the system is diagonal. These axes are the principal axes of inertia. Their origin is coincident with the center of mass of the system. The associated moments are called the principal moments of inertia. This sort of presentation object is created, filled and returned by the function PrincipalProperties for any GProp_GProps object, and can be queried to access the result. Note: The system whose principal properties of inertia are returned by this framework is referred to as the current system. The current system, however, is retained neither by this presentation framework nor by the GProp_GProps object which activates it.
 */
class GProp_PrincipalProps {
}

/**
 * Computes the global properties of a bounded elementary surface in 3d (surface of the gp package)
 */
class GProp_SelGProps extends GProp_GProps {
}

class GProp_SelGProps_1 extends GProp_SelGProps {}

class GProp_SelGProps_2 extends GProp_SelGProps {}

class GProp_SelGProps_3 extends GProp_SelGProps {}

class GProp_SelGProps_4 extends GProp_SelGProps {}

class GProp_SelGProps_5 extends GProp_SelGProps {}

/**
 * This exception is raised when a method makes reference to an undefined inertia axis of symmetry.
 */
class GProp_UndefinedAxis extends Standard_DomainError {
}

class GProp_UndefinedAxis_1 extends GProp_UndefinedAxis {}

class GProp_UndefinedAxis_2 extends GProp_UndefinedAxis {}

/**
 * Computes the global properties and the volume of a geometric solid (3D closed region of space) The solid can be elementary(definition in the gp package)
 */
class GProp_VelGProps extends GProp_GProps {
}

class GProp_VelGProps_1 extends GProp_VelGProps {}

class GProp_VelGProps_2 extends GProp_VelGProps {}

class GProp_VelGProps_3 extends GProp_VelGProps {}

class GProp_VelGProps_4 extends GProp_VelGProps {}

class GProp_VelGProps_5 extends GProp_VelGProps {}

/**
 * Describes functions for building a 2D circle - tangential to 2 curves, or - tangential to a curve and passing through a point, or - passing through 2 points, and with its center on a curve. For these analytic algorithms, curves are circles or lines. A Circ2d2TanOn object provides a framework for: - defining the construction of 2D circles(s), - implementing the construction algorithm, and - consulting the result(s).
 */
class GccAna_Circ2d2TanOn {
}

class GccAna_Circ2d2TanOn_1 extends GccAna_Circ2d2TanOn {}

class GccAna_Circ2d2TanOn_2 extends GccAna_Circ2d2TanOn {}

class GccAna_Circ2d2TanOn_3 extends GccAna_Circ2d2TanOn {}

class GccAna_Circ2d2TanOn_4 extends GccAna_Circ2d2TanOn {}

class GccAna_Circ2d2TanOn_5 extends GccAna_Circ2d2TanOn {}

class GccAna_Circ2d2TanOn_6 extends GccAna_Circ2d2TanOn {}

class GccAna_Circ2d2TanOn_7 extends GccAna_Circ2d2TanOn {}

class GccAna_Circ2d2TanOn_8 extends GccAna_Circ2d2TanOn {}

class GccAna_Circ2d2TanOn_9 extends GccAna_Circ2d2TanOn {}

class GccAna_Circ2d2TanOn_10 extends GccAna_Circ2d2TanOn {}

class GccAna_Circ2d2TanOn_11 extends GccAna_Circ2d2TanOn {}

class GccAna_Circ2d2TanOn_12 extends GccAna_Circ2d2TanOn {}

/**
 * This class implements the algorithms used to create 2d circles tangent to 2 points/lines/circles and with a given radius. For each construction methods arguments are: - Two Qualified elements for tangency constraints. (for example EnclosedCirc if we want the solution inside the argument EnclosedCirc). - Two Reals. One (Radius) for the radius and the other (Tolerance) for the tolerance. Tolerance is only used for the limit cases. For example : We want to create a circle inside a circle C1 and inside a circle C2 with a radius Radius and a tolerance Tolerance. If we do not use Tolerance it is impossible to find a solution in the following case : C2 is inside C1 and there is no intersection point between the two circles. With Tolerance it gives a solution if the lowest distance between C1 and C2 is lower than or equal Tolerance.
 */
class GccAna_Circ2d2TanRad {
}

class GccAna_Circ2d2TanRad_1 extends GccAna_Circ2d2TanRad {}

class GccAna_Circ2d2TanRad_2 extends GccAna_Circ2d2TanRad {}

class GccAna_Circ2d2TanRad_3 extends GccAna_Circ2d2TanRad {}

class GccAna_Circ2d2TanRad_4 extends GccAna_Circ2d2TanRad {}

class GccAna_Circ2d2TanRad_5 extends GccAna_Circ2d2TanRad {}

class GccAna_Circ2d2TanRad_6 extends GccAna_Circ2d2TanRad {}

/**
 * This class implements the algorithms used to create 2d circles tangent to 3 points/lines/circles. The arguments of all construction methods are : - The three qualified elements for the tangency constraints (QualifiedCirc, QualifiedLine, Points). - A real Tolerance. Tolerance is only used in the limit cases. For example : We want to create a circle tangent to an UnqualifiedCirc C1 and an UnqualifiedCirc C2 and an UnqualifiedCirc C3 with a tolerance Tolerance. If we do not use Tolerance it is impossible to find a solution in the following case : C2 is inside C1 and there is no intersection point between the two circles, and C3 is completly outside C1. With Tolerance we will find a solution if the lowest distance between C1 and C2 is lower than or equal Tolerance.
 */
class GccAna_Circ2d3Tan {
}

class GccAna_Circ2d3Tan_1 extends GccAna_Circ2d3Tan {}

class GccAna_Circ2d3Tan_2 extends GccAna_Circ2d3Tan {}

class GccAna_Circ2d3Tan_3 extends GccAna_Circ2d3Tan {}

class GccAna_Circ2d3Tan_4 extends GccAna_Circ2d3Tan {}

class GccAna_Circ2d3Tan_5 extends GccAna_Circ2d3Tan {}

class GccAna_Circ2d3Tan_6 extends GccAna_Circ2d3Tan {}

class GccAna_Circ2d3Tan_7 extends GccAna_Circ2d3Tan {}

class GccAna_Circ2d3Tan_8 extends GccAna_Circ2d3Tan {}

class GccAna_Circ2d3Tan_9 extends GccAna_Circ2d3Tan {}

class GccAna_Circ2d3Tan_10 extends GccAna_Circ2d3Tan {}

/**
 * This class describes functions for building bisecting curves between two 2D circles. A bisecting curve between two circles is a curve such that each of its points is at the same distance from the two circles. It can be an ellipse, hyperbola, circle or line, depending on the relative position of the two circles. The algorithm computes all the elementary curves which are solutions. There is no solution if the two circles are coincident. A Circ2dBisec object provides a framework for: - defining the construction of the bisecting curves, - implementing the construction algorithm, and consulting the result.
 */
class GccAna_Circ2dBisec {
}

/**
 * This class implements the algorithms used to create 2d circles tangent to an entity and centered on a point. The arguments of all construction methods are : - The qualified element for the tangency constrains (QualifiedCirc, Line, Point). - The center point Pcenter. - A real Tolerance. Tolerance is only used in the limits cases. For example : We want to create a circle tangent to an EnclosedCirc C1 with a tolerance Tolerance. If we did not used Tolerance it is impossible to find a solution in the the following case : Pcenter is outside C1. With Tolerance we will give a solution if the distance between C1 and Pcenter is lower than or equal Tolerance.
 */
class GccAna_Circ2dTanCen {
}

class GccAna_Circ2dTanCen_1 extends GccAna_Circ2dTanCen {}

class GccAna_Circ2dTanCen_2 extends GccAna_Circ2dTanCen {}

class GccAna_Circ2dTanCen_3 extends GccAna_Circ2dTanCen {}

/**
 * This class implements the algorithms used to create a 2d circle tangent to a 2d entity, centered on a curv and with a given radius. The arguments of all construction methods are : - The qualified element for the tangency constrains (QualifiedCirc, QualifiedLin, Points). - The Center element (circle, line). - A real Tolerance. Tolerance is only used in the limits cases. For example : We want to create a circle tangent to an OutsideCirc C1 centered on a line OnLine with a radius Radius and with a tolerance Tolerance. If we did not use Tolerance it is impossible to find a solution in the the following case : OnLine is outside C1. There is no intersection point between C1 and OnLine. The distance between the line and the circle is greater than Radius. With Tolerance we will give a solution if the distance between C1 and OnLine is lower than or equal Tolerance.
 */
class GccAna_Circ2dTanOnRad {
}

class GccAna_Circ2dTanOnRad_1 extends GccAna_Circ2dTanOnRad {}

class GccAna_Circ2dTanOnRad_2 extends GccAna_Circ2dTanOnRad {}

class GccAna_Circ2dTanOnRad_3 extends GccAna_Circ2dTanOnRad {}

class GccAna_Circ2dTanOnRad_4 extends GccAna_Circ2dTanOnRad {}

class GccAna_Circ2dTanOnRad_5 extends GccAna_Circ2dTanOnRad {}

class GccAna_Circ2dTanOnRad_6 extends GccAna_Circ2dTanOnRad {}

/**
 * Describes functions for building bisecting curves between a 2D line and a 2D circle. A bisecting curve between a circle and a line is a curve such that each of its points is at the same distance from the circle and the line. It can be a parabola or a line, depending of the relative position of the line and the circle. The algorithm computes all the elementary curves which are solutions. A CircLin2dBisec object provides a framework for: - defining the construction of the bisecting curves, - implementing the construction algorithm, and - consulting the result.
 */
class GccAna_CircLin2dBisec {
}

/**
 * Describes functions for building a bisecting curve between a 2D circle and a point. A bisecting curve between a circle and a point is such a curve that each of its points is at the same distance from the circle and the point. It can be an ellipse, hyperbola, circle or line, depending on the relative position of the point and the circle. The algorithm computes all the elementary curves which are solutions. A CircPnt2dBisec object provides a framework for: - defining the construction of the bisecting curves, - implementing the construction algorithm, and - consulting the result.
 */
class GccAna_CircPnt2dBisec {
}

class GccAna_CircPnt2dBisec_1 extends GccAna_CircPnt2dBisec {}

class GccAna_CircPnt2dBisec_2 extends GccAna_CircPnt2dBisec {}

/**
 * This class implements the algorithms used to create 2d lines tangent to 2 other elements which can be circles or points. Describes functions for building a 2D line: - tangential to 2 circles, or - tangential to a circle and passing through a point, or - passing through 2 points. A Lin2d2Tan object provides a framework for: - defining the construction of 2D line(s), - implementing the construction algorithm, and consulting the result(s). Some constructors may check the type of the qualified argument and raise BadQualifier Error in case of incorrect couple (qualifier, curv). For example: "EnclosedCirc".
 */
class GccAna_Lin2d2Tan {
}

class GccAna_Lin2d2Tan_1 extends GccAna_Lin2d2Tan {}

class GccAna_Lin2d2Tan_2 extends GccAna_Lin2d2Tan {}

class GccAna_Lin2d2Tan_3 extends GccAna_Lin2d2Tan {}

/**
 * Describes functions for building bisecting lines between two 2D lines. A bisecting line between two lines is such that each of its points is at the same distance from the two lines. If the two lines are secant, there are two orthogonal bisecting lines which share the angles made by the two straight lines in two equal parts. If D1 and D2 are the unit vectors of the two straight lines, those of the two bisecting lines are collinear with the following vectors: - D1 + D2 for the "internal" bisecting line, - D1 - D2 for the "external" bisecting line. If the two lines are parallel, the (unique) bisecting line is the straight line equidistant from the two straight lines. If the two straight lines are coincident, the algorithm returns the first straight line as the solution. A Lin2dTanObl object provides a framework for: - defining the construction of the bisecting lines, - implementing the construction algorithm, and - consulting the result.
 */
class GccAna_Lin2dBisec {
}

/**
 * This class implements the algorithms used to create 2d line tangent to a circle or a point and making an angle with a line. The angle is in radians. The origin of the solution is the tangency point with the first argument. Its direction is making an angle Angle with the second argument.
 */
class GccAna_Lin2dTanObl {
}

class GccAna_Lin2dTanObl_1 extends GccAna_Lin2dTanObl {}

class GccAna_Lin2dTanObl_2 extends GccAna_Lin2dTanObl {}

/**
 * This class implements the algorithms used to create 2d line tangent to a circle or a point and parallel to another line. The solution has the same orientation as the second argument. Describes functions for building a 2D line parallel to a line and: - tangential to a circle, or - passing through a point. A Lin2dTanPar object provides a framework for: - defining the construction of 2D line(s), - implementing the construction algorithm, and consulting the result(s).
 */
class GccAna_Lin2dTanPar {
}

class GccAna_Lin2dTanPar_1 extends GccAna_Lin2dTanPar {}

class GccAna_Lin2dTanPar_2 extends GccAna_Lin2dTanPar {}

/**
 * This class implements the algorithms used to create 2d lines tangent to a circle or a point and perpendicular to a line or a circle. Describes functions for building a 2D line perpendicular to a line and: - tangential to a circle, or - passing through a point. A Lin2dTanPer object provides a framework for: - defining the construction of 2D line(s), - implementing the construction algorithm, and - consulting the result(s).
 */
class GccAna_Lin2dTanPer {
}

class GccAna_Lin2dTanPer_1 extends GccAna_Lin2dTanPer {}

class GccAna_Lin2dTanPer_2 extends GccAna_Lin2dTanPer {}

class GccAna_Lin2dTanPer_3 extends GccAna_Lin2dTanPer {}

class GccAna_Lin2dTanPer_4 extends GccAna_Lin2dTanPer {}

/**
 * Describes functions for building bisecting curves between a 2D line and a point. A bisecting curve between a line and a point is such a curve that each of its points is at the same distance from the circle and the point. It can be a parabola or a line, depending on the relative position of the line and the circle. There is always one unique solution. A LinPnt2dBisec object provides a framework for: - defining the construction of the bisecting curve, - implementing the construction algorithm, and - consulting the result.
 */
class GccAna_LinPnt2dBisec {
}

class GccAna_NoSolution extends Standard_Failure {
}

class GccAna_NoSolution_1 extends GccAna_NoSolution {}

class GccAna_NoSolution_2 extends GccAna_NoSolution {}

/**
 * This class implements the algorithms used to create the bisecting line between two 2d points Describes functions for building a bisecting line between two 2D points. The bisecting line between two points is the bisector of the segment which joins the two points, if these are not coincident. The algorithm does not find a solution if the two points are coincident. A Pnt2dBisec object provides a framework for: - defining the construction of the bisecting line, - implementing the construction algorithm, and consulting the result.
 */
class GccAna_Pnt2dBisec {
}

/**
 * This package provides an implementation of the qualified entities useful to create 2d entities with geometric constraints. The qualifier explains which subfamily of solutions we want to obtain. It uses the following law: the matter/the interior side is at the left of the line, if we go from the beginning to the end. The qualifiers are: Enclosing : the solution(s) must enclose the argument. Enclosed : the solution(s) must be enclosed in the argument. Outside : both the solution(s) and the argument must be outside to each other. Unqualified : the position is undefined, so give all the solutions. The use of a qualifier is always required if such subfamilies exist. For example, it is not used for a point. Note: the interior of a curve is defined as the left-hand side of the curve in relation to its orientation.
 */
class GccEnt {
}

class GccEnt_BadQualifier extends Standard_DomainError {
}

class GccEnt_BadQualifier_1 extends GccEnt_BadQualifier {}

class GccEnt_BadQualifier_2 extends GccEnt_BadQualifier {}

/**
 * Creates a qualified 2d Circle. A qualified 2D circle is a circle (gp_Circ2d circle) with a qualifier which specifies whether the solution of a construction algorithm using the qualified circle (as an argument): - encloses the circle, or - is enclosed by the circle, or - is built so that both the circle and it are external to one another, or - is undefined (all solutions apply).
 */
class GccEnt_QualifiedCirc {
}

/**
 * Describes a qualified 2D line. A qualified 2D line is a line (gp_Lin2d line) with a qualifier which specifies whether the solution of a construction algorithm using the qualified line (as an argument): - is 'enclosed' by the line, or - is built so that both the line and it are external to one another, or - is undefined (all solutions apply). Note: the interior of a line is defined as the left-hand side of the line in relation to its orientation (i.e. when moving from the start to the end of the curve).
 */
class GccEnt_QualifiedLin {
}

/**
 * Describes a circle as a bisecting curve between two 2D geometric objects (such as circles or points).
 */
class GccInt_BCirc extends GccInt_Bisec {
}

/**
 * Describes an ellipse as a bisecting curve between two 2D geometric objects (such as circles or points).
 */
class GccInt_BElips extends GccInt_Bisec {
}

/**
 * Describes a hyperbola as a bisecting curve between two 2D geometric objects (such as circles or points).
 */
class GccInt_BHyper extends GccInt_Bisec {
}

/**
 * Describes a line as a bisecting curve between two 2D geometric objects (such as lines, circles or points).
 */
class GccInt_BLine extends GccInt_Bisec {
}

/**
 * Describes a parabola as a bisecting curve between two 2D geometric objects (such as lines, circles or points).
 */
class GccInt_BParab extends GccInt_Bisec {
}

/**
 * Describes a point as a bisecting object between two 2D geometric objects.
 */
class GccInt_BPoint extends GccInt_Bisec {
}

/**
 * The deferred class GccInt_Bisec is the root class for elementary bisecting loci between two simple geometric objects (i.e. circles, lines or points). Bisecting loci between two geometric objects are such that each of their points is at the same distance from the two geometric objects. It is typically a curve, such as a line, circle or conic. Generally there is more than one elementary object which is the solution to a bisecting loci problem: each solution is described with one elementary bisecting locus. For example, the bisectors of two secant straight lines are two perpendicular straight lines. The GccInt package provides concrete implementations of the following elementary derived bisecting loci: - lines, circles, ellipses, hyperbolas and parabolas, and - points (not used in this context). The GccAna package provides numerous algorithms for computing the bisecting loci between circles, lines or points, whose solutions are these types of elementary bisecting locus.
 */
class GccInt_Bisec extends Standard_Transient {
}

/**
 * this package contains the geometric definition of 2d curves compatible with the Adaptor package templates.
 */
class Geom2dAdaptor {
}

/**
 * An interface between the services provided by any curve from the package Geom2d and those required of the curve by algorithms which use it.
 */
class Geom2dAdaptor_Curve extends Adaptor2d_Curve2d {
}

class Geom2dAdaptor_Curve_1 extends Geom2dAdaptor_Curve {}

class Geom2dAdaptor_Curve_2 extends Geom2dAdaptor_Curve {}

class Geom2dAdaptor_Curve_3 extends Geom2dAdaptor_Curve {}

class Geom2dAdaptor_GHCurve extends Adaptor2d_HCurve2d {
}

class Geom2dAdaptor_GHCurve_1 extends Geom2dAdaptor_GHCurve {}

class Geom2dAdaptor_GHCurve_2 extends Geom2dAdaptor_GHCurve {}

/**
 * Provides an interface between the services provided by any curve from the package Geom2d and those required of the curve by algorithms, which use it.
 */
class Geom2dAdaptor_HCurve extends Geom2dAdaptor_GHCurve {
}

class Geom2dAdaptor_HCurve_1 extends Geom2dAdaptor_HCurve {}

class Geom2dAdaptor_HCurve_2 extends Geom2dAdaptor_HCurve {}

class Geom2dAdaptor_HCurve_3 extends Geom2dAdaptor_HCurve {}

class Geom2dAdaptor_HCurve_4 extends Geom2dAdaptor_HCurve {}

/**
 * This package provides an implementation of algorithmes to do the conversion between equivalent geometric entities from package Geom2d. It gives the possibility : . to obtain the B-spline representation of bounded curves. . to split a B-spline curve into several B-spline curves with some constraints of continuity, . to convert a B-spline curve into several Bezier curves or surfaces. All the geometric entities used in this package are bounded. References : . Generating the Bezier Points of B-spline curves and surfaces (Wolfgang Bohm) CAGD volume 13 number 6 november 1981 . On NURBS: A Survey (Leslie Piegl) IEEE Computer Graphics and Application January 1991 . Curve and surface construction using rational B-splines (Leslie Piegl and Wayne Tiller) CAD Volume 19 number 9 november 1987 . A survey of curve and surface methods in CAGD (Wolfgang BOHM) CAGD 1 1984
 */
class Geom2dConvert {
}

/**
 * A framework to convert a 2D curve to a BSpline. This is done by approximation within a given tolerance.
 */
class Geom2dConvert_ApproxCurve {
}

class Geom2dConvert_ApproxCurve_1 extends Geom2dConvert_ApproxCurve {}

class Geom2dConvert_ApproxCurve_2 extends Geom2dConvert_ApproxCurve {}

/**
 * An algorithm to determine points at which a BSpline curve should be split in order to obtain arcs of the same continuity. If you require curves with a minimum continuity for your computation, it is useful to know the points between which an arc has a continuity of a given order. The continuity order is given at the construction time. For a BSpline curve, the discontinuities are localized at the knot values. Between two knot values the BSpline is infinitely and continuously differentiable. At a given knot, the continuity is equal to: Degree - Mult, where Degree is the degree of the BSpline curve and Mult is the multiplicity of the knot. It is possible to compute the arcs which correspond to this splitting using the global function SplitBSplineCurve provided by the package Geom2dConvert. A BSplineCurveKnotSplitting object provides a framework for: - defining the curve to be analysed and the required degree of continuity, - implementing the computation algorithm, and - consulting the results.
 */
class Geom2dConvert_BSplineCurveKnotSplitting {
}

/**
 * An algorithm to convert a BSpline curve into a series of adjacent Bezier curves. A BSplineCurveToBezierCurve object provides a framework for: - defining the BSpline curve to be converted - implementing the construction algorithm, and - consulting the results. References : Generating the Bezier points of B-spline curves and surfaces (Wolfgang Bohm) CAD volume 13 number 6 november 1981
 */
class Geom2dConvert_BSplineCurveToBezierCurve {
}

class Geom2dConvert_BSplineCurveToBezierCurve_1 extends Geom2dConvert_BSplineCurveToBezierCurve {}

class Geom2dConvert_BSplineCurveToBezierCurve_2 extends Geom2dConvert_BSplineCurveToBezierCurve {}

/**
 * This algorithm converts and concat several curve in an BSplineCurve
 */
class Geom2dConvert_CompCurveToBSplineCurve {
}

class Geom2dConvert_CompCurveToBSplineCurve_1 extends Geom2dConvert_CompCurveToBSplineCurve {}

class Geom2dConvert_CompCurveToBSplineCurve_2 extends Geom2dConvert_CompCurveToBSplineCurve {}

/**
 * Interface for calculation of values and derivatives for different kinds of curves in 2D. Works both with adaptors and curves.
 */
class Geom2dEvaluator_Curve extends Standard_Transient {
}

/**
 * Allows to calculate values and derivatives for offset curves in 2D
 */
class Geom2dEvaluator_OffsetCurve extends Geom2dEvaluator_Curve {
}

class Geom2dEvaluator_OffsetCurve_1 extends Geom2dEvaluator_OffsetCurve {}

class Geom2dEvaluator_OffsetCurve_2 extends Geom2dEvaluator_OffsetCurve {}

class Geom2dLProp_CLProps2d {
}

class Geom2dLProp_CLProps2d_1 extends Geom2dLProp_CLProps2d {}

class Geom2dLProp_CLProps2d_2 extends Geom2dLProp_CLProps2d {}

class Geom2dLProp_CLProps2d_3 extends Geom2dLProp_CLProps2d {}

/**
 * An algorithm for computing local properties of a curve. These properties include: - the maximum and minimum curvatures - the inflection points. A CurAndInf2d object provides the framework for: - defining the curve to be analyzed - implementing the computation algorithms - consulting the results.
 */
class Geom2dLProp_CurAndInf2d extends LProp_CurAndInf {
}

class Geom2dLProp_Curve2dTool {
}

/**
 * Function used to find the extremas of curvature in 2d.
 */
class Geom2dLProp_FuncCurExt extends math_FunctionWithDerivative {
}

/**
 * Function used to find the inflections in 2d.
 */
class Geom2dLProp_FuncCurNul extends math_FunctionWithDerivative {
}

/**
 * Computes the locals extremas of curvature and the inflections of a bounded curve in 2d.
 */
class Geom2dLProp_NumericCurInf2d {
}

/**
 * This class implements the transfer of the Curve Entity from Geom2d To IGES. These can be : Curve . BoundedCurve * BSplineCurve * BezierCurve * TrimmedCurve . Conic * Circle * Ellipse * Hyperbloa * Line * Parabola . OffsetCurve
 */
class Geom2dToIGES_Geom2dCurve extends Geom2dToIGES_Geom2dEntity {
}

class Geom2dToIGES_Geom2dCurve_1 extends Geom2dToIGES_Geom2dCurve {}

class Geom2dToIGES_Geom2dCurve_2 extends Geom2dToIGES_Geom2dCurve {}

/**
 * provides methods to transfer Geom2d entity from CASCADE to IGES.
 */
class Geom2dToIGES_Geom2dEntity {
}

class Geom2dToIGES_Geom2dEntity_1 extends Geom2dToIGES_Geom2dEntity {}

class Geom2dToIGES_Geom2dEntity_2 extends Geom2dToIGES_Geom2dEntity {}

/**
 * This class implements the transfer of the Point Entity from Geom2d to IGES . These are : . 2dPoint * 2dCartesianPoint
 */
class Geom2dToIGES_Geom2dPoint extends Geom2dToIGES_Geom2dEntity {
}

class Geom2dToIGES_Geom2dPoint_1 extends Geom2dToIGES_Geom2dPoint {}

class Geom2dToIGES_Geom2dPoint_2 extends Geom2dToIGES_Geom2dPoint {}

/**
 * This class implements the transfer of the Vector from Geom2d to IGES . These can be : . Vector * Direction * VectorWithMagnitude
 */
class Geom2dToIGES_Geom2dVector extends Geom2dToIGES_Geom2dEntity {
}

class Geom2dToIGES_Geom2dVector_1 extends Geom2dToIGES_Geom2dVector {}

class Geom2dToIGES_Geom2dVector_2 extends Geom2dToIGES_Geom2dVector {}

/**
 * Describes an axis in 2D space. An axis is defined by: - its origin, also termed the "Location point" of the axis, - its unit vector, termed the "Direction" of the axis. Note: Geom2d_AxisPlacement axes provide the same kind of "geometric" services as gp_Ax2d axes but have more complex data structures. The geometric objects provided by the Geom2d package use gp_Ax2d objects to include axes in their data structures, or to define an axis of symmetry or axis of rotation. Geom2d_AxisPlacement axes are used in a context where they can be shared by several objects contained inside a common data structure.
 */
class Geom2d_AxisPlacement extends Geom2d_Geometry {
}

class Geom2d_AxisPlacement_1 extends Geom2d_AxisPlacement {}

class Geom2d_AxisPlacement_2 extends Geom2d_AxisPlacement {}

/**
 * Describes a BSpline curve. A BSpline curve can be: - uniform or non-uniform, - rational or non-rational, - periodic or non-periodic. A BSpline curve is defined by: - its degree; the degree for a Geom2d_BSplineCurve is limited to a value (25) which is defined and controlled by the system. This value is returned by the function MaxDegree; - its periodic or non-periodic nature; - a table of poles (also called control points), with their associated weights if the BSpline curve is rational. The poles of the curve are "control points" used to deform the curve. If the curve is non-periodic, the first pole is the start point of the curve, and the last pole is the end point of the curve. The segment, which joins the first pole to the second pole, is the tangent to the curve at its start point, and the segment, which joins the last pole to the second-from-last pole, is the tangent to the curve at its end point. If the curve is periodic, these geometric properties are not verified. It is more difficult to give a geometric signification to the weights but they are useful for providing exact representations of the arcs of a circle or ellipse. Moreover, if the weights of all the poles are equal, the curve has a polynomial equation; it is therefore a non-rational curve. - a table of knots with their multiplicities. For a Geom2d_BSplineCurve, the table of knots is an increasing sequence of reals without repetition; the multiplicities define the repetition of the knots. A BSpline curve is a piecewise polynomial or rational curve. The knots are the parameters of junction points between two pieces. The multiplicity Mult(i) of the knot Knot(i) of the BSpline curve is related to the degree of continuity of the curve at the knot Knot(i), which is equal to Degree - Mult(i) where Degree is the degree of the BSpline curve. If the knots are regularly spaced (i.e. the difference between two consecutive knots is a constant), three specific and frequently used cases of knot distribution can be identified: - "uniform" if all multiplicities are equal to 1, - "quasi-uniform" if all multiplicities are equal to 1, except the first and the last knot which have a multiplicity of Degree + 1, where Degree is the degree of the BSpline curve, - "Piecewise Bezier" if all multiplicities are equal to Degree except the first and last knot which have a multiplicity of Degree + 1, where Degree is the degree of the BSpline curve. A curve of this type is a concatenation of arcs of Bezier curves. If the BSpline curve is not periodic: - the bounds of the Poles and Weights tables are 1 and NbPoles, where NbPoles is the number of poles of the BSpline curve, - the bounds of the Knots and Multiplicities tables are 1 and NbKnots, where NbKnots is the number of knots of the BSpline curve. If the BSpline curve is periodic, and if there are k periodic knots and p periodic poles, the period is: period = Knot(k + 1) - Knot(1) and the poles and knots tables can be considered as infinite tables, such that: - Knot(i+k) = Knot(i) + period - Pole(i+p) = Pole(i) Note: data structures of a periodic BSpline curve are more complex than those of a non-periodic one. Warnings : In this class we consider that a weight value is zero if Weight <= Resolution from package gp. For two parametric values (or two knot values) U1, U2 we consider that U1 = U2 if Abs (U2 - U1) <= Epsilon (U1). For two weights values W1, W2 we consider that W1 = W2 if Abs (W2 - W1) <= Epsilon (W1). The method Epsilon is defined in the class Real from package Standard.
 */
class Geom2d_BSplineCurve extends Geom2d_BoundedCurve {
}

class Geom2d_BSplineCurve_1 extends Geom2d_BSplineCurve {}

class Geom2d_BSplineCurve_2 extends Geom2d_BSplineCurve {}

/**
 * Describes a rational or non-rational Bezier curve - a non-rational Bezier curve is defined by a table of poles (also called control points), - a rational Bezier curve is defined by a table of poles with varying weights. These data are manipulated by two parallel arrays: - the poles table, which is an array of gp_Pnt2d points, and - the weights table, which is an array of reals. The bounds of these arrays are 1 and "the number of poles" of the curve. The poles of the curve are "control points" used to deform the curve. The first pole is the start point of the curve, and the last pole is the end point of the curve. The segment which joins the first pole to the second pole is the tangent to the curve at its start point, and the segment which joins the last pole to the second-from-last pole is the tangent to the curve at its end point. It is more difficult to give a geometric signification to the weights but they are useful for providing exact representations of the arcs of a circle or ellipse. Moreover, if the weights of all the poles are equal, the curve is polynomial; it is therefore a non-rational curve. The non-rational curve is a special and frequently used case. The weights are defined and used only in case of a rational curve. The degree of a Bezier curve is equal to the number of poles, minus 1. It must be greater than or equal to 1. However, the degree of a Geom2d_BezierCurve curve is limited to a value (25) which is defined and controlled by the system. This value is returned by the function MaxDegree. The parameter range for a Bezier curve is [ 0, 1 ]. If the first and last control points of the Bezier curve are the same point then the curve is closed. For example, to create a closed Bezier curve with four control points, you have to give a set of control points P1, P2, P3 and P1. The continuity of a Bezier curve is infinite. It is not possible to build a Bezier curve with negative weights. We consider that a weight value is zero if it is less than or equal to gp::Resolution(). We also consider that two weight values W1 and W2 are equal if: |W2 - W1| <= gp::Resolution(). Warning - When considering the continuity of a closed Bezier curve at the junction point, remember that a curve of this type is never periodic. This means that the derivatives for the parameter u = 0 have no reason to be the same as the derivatives for the parameter u = 1 even if the curve is closed. - The length of a Bezier curve can be null.
 */
class Geom2d_BezierCurve extends Geom2d_BoundedCurve {
}

class Geom2d_BezierCurve_1 extends Geom2d_BezierCurve {}

class Geom2d_BezierCurve_2 extends Geom2d_BezierCurve {}

/**
 * The abstract class BoundedCurve describes the common behavior of bounded curves in 2D space. A bounded curve is limited by two finite values of the parameter, termed respectively "first parameter" and "last parameter". The "first parameter" gives the "start point" of the bounded curve, and the "last parameter" gives the "end point" of the bounded curve. The length of a bounded curve is finite. The Geom2d package provides three concrete classes of bounded curves: - two frequently used mathematical formulations of complex curves: - Geom2d_BezierCurve, - Geom2d_BSplineCurve, and - Geom2d_TrimmedCurve to trim a curve, i.e. to only take part of the curve limited by two values of the parameter of the basis curve.
 */
class Geom2d_BoundedCurve extends Geom2d_Curve {
}

/**
 * Describes a point in 2D space. A Geom2d_CartesianPoint is defined by a gp_Pnt2d point, with its two Cartesian coordinates X and Y.
 */
class Geom2d_CartesianPoint extends Geom2d_Point {
}

class Geom2d_CartesianPoint_1 extends Geom2d_CartesianPoint {}

class Geom2d_CartesianPoint_2 extends Geom2d_CartesianPoint {}

/**
 * Describes a circle in the plane (2D space). A circle is defined by its radius and, as with any conic curve, is positioned in the plane with a coordinate system (gp_Ax22d object) where the origin is the center of the circle. The coordinate system is the local coordinate system of the circle. The orientation (direct or indirect) of the local coordinate system gives an explicit orientation to the circle, determining the direction in which the parameter increases along the circle. The Geom2d_Circle circle is parameterized by an angle: P(U) = O + R*Cos(U)*XDir + R*Sin(U)*YDir where: - P is the point of parameter U, - O, XDir and YDir are respectively the origin, "X Direction" and "Y Direction" of its local coordinate system, - R is the radius of the circle. The "X Axis" of the local coordinate system therefore defines the origin of the parameter of the circle. The parameter is the angle with this "X Direction". A circle is a closed and periodic curve. The period is 2.*Pi and the parameter range is [ 0,2.*Pi [. See Also GCE2d_MakeCircle which provides functions for more complex circle constructions gp_Ax22d and gp_Circ2d for an equivalent, non-parameterized data structure.
 */
class Geom2d_Circle extends Geom2d_Conic {
}

class Geom2d_Circle_1 extends Geom2d_Circle {}

class Geom2d_Circle_2 extends Geom2d_Circle {}

class Geom2d_Circle_3 extends Geom2d_Circle {}

/**
 * The abstract class Conic describes the common behavior of conic curves in 2D space and, in particular, their general characteristics. The Geom2d package provides four specific classes of conics: Geom2d_Circle, Geom2d_Ellipse, Geom2d_Hyperbola and Geom2d_Parabola. A conic is positioned in the plane with a coordinate system (gp_Ax22d object), where the origin is the center of the conic (or the apex in case of a parabola). This coordinate system is the local coordinate system of the conic. It gives the conic an explicit orientation, determining the direction in which the parameter increases along the conic. The "X Axis" of the local coordinate system also defines the origin of the parameter of the conic.
 */
class Geom2d_Conic extends Geom2d_Curve {
}

/**
 * The abstract class Curve describes the common behavior of curves in 2D space. The Geom2d package provides numerous concrete classes of derived curves, including lines, circles, conics, Bezier or BSpline curves, etc. The main characteristic of these curves is that they are parameterized. The Geom2d_Curve class shows: - how to work with the parametric equation of a curve in order to calculate the point of parameter u, together with the vector tangent and the derivative vectors of order 2, 3,..., N at this point; - how to obtain general information about the curve (for example, level of continuity, closed characteristics, periodicity, bounds of the parameter field); - how the parameter changes when a geometric transformation is applied to the curve or when the orientation of the curve is inverted. All curves must have a geometric continuity: a curve is at least "C0". Generally, this property is checked at the time of construction or when the curve is edited. Where this is not the case, the documentation explicitly states so. Warning The Geom2d package does not prevent the construction of curves with null length or curves which self-intersect.
 */
class Geom2d_Curve extends Geom2d_Geometry {
}

/**
 * The class Direction specifies a vector that is never null. It is a unit vector.
 */
class Geom2d_Direction extends Geom2d_Vector {
}

class Geom2d_Direction_1 extends Geom2d_Direction {}

class Geom2d_Direction_2 extends Geom2d_Direction {}

/**
 * Describes an ellipse in the plane (2D space). An ellipse is defined by its major and minor radii and, as with any conic curve, is positioned in the plane with a coordinate system (gp_Ax22d object) where: - the origin is the center of the ellipse, - the "X Direction" defines the major axis, and - the "Y Direction" defines the minor axis. This coordinate system is the local coordinate system of the ellipse. The orientation (direct or indirect) of the local coordinate system gives an explicit orientation to the ellipse, determining the direction in which the parameter increases along the ellipse. The Geom2d_Ellipse ellipse is parameterized by an angle: P(U) = O + MajorRad*Cos(U)*XDir + MinorRad*Sin(U)*YDir where: - P is the point of parameter U, - O, XDir and YDir are respectively the origin, "X Direction" and "Y Direction" of its local coordinate system, - MajorRad and MinorRad are the major and minor radii of the ellipse. The "X Axis" of the local coordinate system therefore defines the origin of the parameter of the ellipse. An ellipse is a closed and periodic curve. The period is 2.*Pi and the parameter range is [ 0,2.*Pi [. See Also GCE2d_MakeEllipse which provides functions for more complex ellipse constructions gp_Ax22d gp_Elips2d for an equivalent, non-parameterized data structure
 */
class Geom2d_Ellipse extends Geom2d_Conic {
}

class Geom2d_Ellipse_1 extends Geom2d_Ellipse {}

class Geom2d_Ellipse_2 extends Geom2d_Ellipse {}

class Geom2d_Ellipse_3 extends Geom2d_Ellipse {}

/**
 * The general abstract class Geometry in 2D space describes the common behaviour of all the geometric entities.
 */
class Geom2d_Geometry extends Standard_Transient {
}

/**
 * Describes a branch of a hyperbola in the plane (2D space). A hyperbola is defined by its major and minor radii and, as with any conic curve, is positioned in the plane with a coordinate system (gp_Ax22d object) where: - the origin is the center of the hyperbola, - the "X Direction" defines the major axis, and - the "Y Direction" defines the minor axis. This coordinate system is the local coordinate system of the hyperbola. The branch of the hyperbola described is the one located on the positive side of the major axis. The orientation (direct or indirect) of the local coordinate system gives an explicit orientation to the hyperbola, determining the direction in which the parameter increases along the hyperbola. The Geom2d_Hyperbola hyperbola is parameterized as follows: P(U) = O + MajRad*Cosh(U)*XDir + MinRad*Sinh(U)*YDir where: - P is the point of parameter U, - O, XDir and YDir are respectively the origin, "X Direction" and "Y Direction" of its local coordinate system, - MajRad and MinRad are the major and minor radii of the hyperbola. The "X Axis" of the local coordinate system therefore defines the origin of the parameter of the hyperbola. The parameter range is ] -infinite,+infinite [. The following diagram illustrates the respective positions, in the plane of the hyperbola, of the three branches of hyperbolas constructed using the functions OtherBranch, ConjugateBranch1 and ConjugateBranch2: ^YAxis | FirstConjugateBranch | Other | Main --------------------- C --------------------->XAxis Branch | Branch | SecondConjugateBranch | Warning The value of the major radius (on the major axis) can be less than the value of the minor radius (on the minor axis). See Also GCE2d_MakeHyperbola which provides functions for more complex hyperbola constructions gp_Ax22d gp_Hypr2d for an equivalent, non-parameterized data structure
 */
class Geom2d_Hyperbola extends Geom2d_Conic {
}

class Geom2d_Hyperbola_1 extends Geom2d_Hyperbola {}

class Geom2d_Hyperbola_2 extends Geom2d_Hyperbola {}

class Geom2d_Hyperbola_3 extends Geom2d_Hyperbola {}

/**
 * Describes an infinite line in the plane (2D space). A line is defined and positioned in the plane with an axis (gp_Ax2d object) which gives it an origin and a unit vector. The Geom2d_Line line is parameterized as follows: P (U) = O + U*Dir where: - P is the point of parameter U, - O is the origin and Dir the unit vector of its positioning axis. The parameter range is ] -infinite, +infinite [. The orientation of the line is given by the unit vector of its positioning axis. See Also GCE2d_MakeLine which provides functions for more complex line constructions gp_Ax2d gp_Lin2d for an equivalent, non-parameterized data structure.
 */
class Geom2d_Line extends Geom2d_Curve {
}

class Geom2d_Line_1 extends Geom2d_Line {}

class Geom2d_Line_2 extends Geom2d_Line {}

class Geom2d_Line_3 extends Geom2d_Line {}

/**
 * This class implements the basis services for the creation, edition, modification and evaluation of planar offset curve. The offset curve is obtained by offsetting by distance along the normal to a basis curve defined in 2D space. The offset curve in this package can be a self intersecting curve even if the basis curve does not self-intersect. The self intersecting portions are not deleted at the construction time. An offset curve is a curve at constant distance (Offset) from a basis curve and the offset curve takes its parametrization from the basis curve. The Offset curve is in the direction of the normal to the basis curve N. The distance offset may be positive or negative to indicate the preferred side of the curve : . distance offset >0 => the curve is in the direction of N . distance offset >0 => the curve is in the direction of - N On the Offset curve : Value(u) = BasisCurve.Value(U) + (Offset * (T ^ Z)) / ||T ^ Z|| where T is the tangent vector to the basis curve and Z the direction of the normal vector to the plane of the curve, N = T ^ Z defines the offset direction and should not have null length.
 */
class Geom2d_OffsetCurve extends Geom2d_Curve {
}

/**
 * Describes a parabola in the plane (2D space). A parabola is defined by its focal length (i.e. the distance between its focus and its apex) and is positioned in the plane with a coordinate system (gp_Ax22d object) where: - the origin is the apex of the parabola, and - the "X Axis" defines the axis of symmetry; the parabola is on the positive side of this axis. This coordinate system is the local coordinate system of the parabola. The orientation (direct or indirect) of the local coordinate system gives an explicit orientation to the parabola, determining the direction in which the parameter increases along the parabola. The Geom_Parabola parabola is parameterized as follows: P(U) = O + U*U/(4.*F)*XDir + U*YDir, where: - P is the point of parameter U, - O, XDir and YDir are respectively the origin, "X Direction" and "Y Direction" of its local coordinate system, - F is the focal length of the parabola. The parameter of the parabola is therefore its Y coordinate in the local coordinate system, with the "X Axis" of the local coordinate system defining the origin of the parameter. The parameter range is ] -infinite,+infinite [.
 */
class Geom2d_Parabola extends Geom2d_Conic {
}

class Geom2d_Parabola_1 extends Geom2d_Parabola {}

class Geom2d_Parabola_2 extends Geom2d_Parabola {}

class Geom2d_Parabola_3 extends Geom2d_Parabola {}

class Geom2d_Parabola_4 extends Geom2d_Parabola {}

/**
 * The abstract class Point describes the common behavior of geometric points in 2D space. The Geom2d package also provides the concrete class Geom2d_CartesianPoint.
 */
class Geom2d_Point extends Geom2d_Geometry {
}

/**
 * The class Transformation allows to create Translation, Rotation, Symmetry, Scaling and complex transformations obtained by combination of the previous elementary transformations. The Transformation class can also be used to construct complex transformations by combining these elementary transformations. However, these transformations can never change the type of an object. For example, the projection transformation can change a circle into an ellipse, and therefore change the real type of the object. Such a transformation is forbidden in this environment and cannot be a Geom2d_Transformation. The transformation can be represented as follow :
 */
class Geom2d_Transformation extends Standard_Transient {
}

class Geom2d_Transformation_1 extends Geom2d_Transformation {}

class Geom2d_Transformation_2 extends Geom2d_Transformation {}

/**
 * Defines a portion of a curve limited by two values of parameters inside the parametric domain of the curve. The trimmed curve is defined by: - the basis curve, and - the two parameter values which limit it. The trimmed curve can either have the same orientation as the basis curve or the opposite orientation.
 */
class Geom2d_TrimmedCurve extends Geom2d_BoundedCurve {
}

class Geom2d_UndefinedDerivative extends Standard_DomainError {
}

class Geom2d_UndefinedDerivative_1 extends Geom2d_UndefinedDerivative {}

class Geom2d_UndefinedDerivative_2 extends Geom2d_UndefinedDerivative {}

class Geom2d_UndefinedValue extends Standard_DomainError {
}

class Geom2d_UndefinedValue_1 extends Geom2d_UndefinedValue {}

class Geom2d_UndefinedValue_2 extends Geom2d_UndefinedValue {}

/**
 * The abstract class Vector describes the common behavior of vectors in 2D space. The Geom2d package provides two concrete classes of vectors: Geom2d_Direction (unit vector) and Geom2d_VectorWithMagnitude.
 */
class Geom2d_Vector extends Geom2d_Geometry {
}

/**
 * Defines a vector with magnitude. A vector with magnitude can have a zero length.
 */
class Geom2d_VectorWithMagnitude extends Geom2d_Vector {
}

class Geom2d_VectorWithMagnitude_1 extends Geom2d_VectorWithMagnitude {}

class Geom2d_VectorWithMagnitude_2 extends Geom2d_VectorWithMagnitude {}

class Geom2d_VectorWithMagnitude_3 extends Geom2d_VectorWithMagnitude {}

/**
 * The GeomAPI package provides an Application Programming Interface for the Geometry.
 */
class GeomAPI {
}

/**
 * Describes functions for computing all the extrema between two 3D curves. An ExtremaCurveCurve algorithm minimizes or maximizes the distance between a point on the first curve and a point on the second curve. Thus, it computes start and end points of perpendiculars common to the two curves (an intersection point is not an extremum unless the two curves are tangential at this point). Solutions consist of pairs of points, and an extremum is considered to be a segment joining the two points of a solution. An ExtremaCurveCurve object provides a framework for: - defining the construction of the extrema, - implementing the construction algorithm, and - consulting the results. Warning In some cases, the nearest points between two curves do not correspond to one of the computed extrema. Instead, they may be given by: - a limit point of one curve and one of the following: - its orthogonal projection on the other curve, - a limit point of the other curve; or - an intersection point between the two curves.
 */
class GeomAPI_ExtremaCurveCurve {
}

class GeomAPI_ExtremaCurveCurve_1 extends GeomAPI_ExtremaCurveCurve {}

class GeomAPI_ExtremaCurveCurve_2 extends GeomAPI_ExtremaCurveCurve {}

class GeomAPI_ExtremaCurveCurve_3 extends GeomAPI_ExtremaCurveCurve {}

/**
 * Describes functions for computing all the extrema between a curve and a surface. An ExtremaCurveSurface algorithm minimizes or maximizes the distance between a point on the curve and a point on the surface. Thus, it computes start and end points of perpendiculars common to the curve and the surface (an intersection point is not an extremum except where the curve and the surface are tangential at this point). Solutions consist of pairs of points, and an extremum is considered to be a segment joining the two points of a solution. An ExtremaCurveSurface object provides a framework for: - defining the construction of the extrema, - implementing the construction algorithm, and - consulting the results. Warning In some cases, the nearest points between a curve and a surface do not correspond to one of the computed extrema. Instead, they may be given by: - a point of a bounding curve of the surface and one of the following: - its orthogonal projection on the curve, - a limit point of the curve; or - a limit point of the curve and its projection on the surface; or - an intersection point between the curve and the surface.
 */
class GeomAPI_ExtremaCurveSurface {
}

class GeomAPI_ExtremaCurveSurface_1 extends GeomAPI_ExtremaCurveSurface {}

class GeomAPI_ExtremaCurveSurface_2 extends GeomAPI_ExtremaCurveSurface {}

class GeomAPI_ExtremaCurveSurface_3 extends GeomAPI_ExtremaCurveSurface {}

/**
 * Describes functions for computing all the extrema between two surfaces. An ExtremaSurfaceSurface algorithm minimizes or maximizes the distance between a point on the first surface and a point on the second surface. Results are start and end points of perpendiculars common to the two surfaces. Solutions consist of pairs of points, and an extremum is considered to be a segment joining the two points of a solution. An ExtremaSurfaceSurface object provides a framework for: - defining the construction of the extrema, - implementing the construction algorithm, and - consulting the results. Warning In some cases, the nearest points between the two surfaces do not correspond to one of the computed extrema. Instead, they may be given by: - a point of a bounding curve of one surface and one of the following: - its orthogonal projection on the other surface, - a point of a bounding curve of the other surface; or - any point on intersection curves between the two surfaces.
 */
class GeomAPI_ExtremaSurfaceSurface {
}

class GeomAPI_ExtremaSurfaceSurface_1 extends GeomAPI_ExtremaSurfaceSurface {}

class GeomAPI_ExtremaSurfaceSurface_2 extends GeomAPI_ExtremaSurfaceSurface {}

class GeomAPI_ExtremaSurfaceSurface_3 extends GeomAPI_ExtremaSurfaceSurface {}

/**
 * This class implements methods for computing intersection points and segments between a
 */
class GeomAPI_IntCS {
}

class GeomAPI_IntCS_1 extends GeomAPI_IntCS {}

class GeomAPI_IntCS_2 extends GeomAPI_IntCS {}

/**
 * This class implements methods for computing the intersection curves between two surfaces. The result is curves from Geom. The "domain" used for a surface is the natural parametric domain unless the surface is a RectangularTrimmedSurface from Geom.
 */
class GeomAPI_IntSS {
}

class GeomAPI_IntSS_1 extends GeomAPI_IntSS {}

class GeomAPI_IntSS_2 extends GeomAPI_IntSS {}

/**
 * This class is used to approximate a BsplineCurve passing through an array of points, with a given Continuity. Describes functions for building a 3D BSpline curve which approximates a set of points. A PointsToBSpline object provides a framework for: - defining the data of the BSpline curve to be built, - implementing the approximation algorithm, and consulting the results.
 */
class GeomAPI_PointsToBSpline {
}

class GeomAPI_PointsToBSpline_1 extends GeomAPI_PointsToBSpline {}

class GeomAPI_PointsToBSpline_2 extends GeomAPI_PointsToBSpline {}

class GeomAPI_PointsToBSpline_3 extends GeomAPI_PointsToBSpline {}

class GeomAPI_PointsToBSpline_4 extends GeomAPI_PointsToBSpline {}

class GeomAPI_PointsToBSpline_5 extends GeomAPI_PointsToBSpline {}

/**
 * This class is used to approximate or interpolate a BSplineSurface passing through an Array2 of points, with a given continuity. Describes functions for building a BSpline surface which approximates or interpolates a set of points. A PointsToBSplineSurface object provides a framework for: - defining the data of the BSpline surface to be built, - implementing the approximation algorithm or the interpolation algorithm, and consulting the results. In fact, class contains 3 algorithms, 2 for approximation and 1 for interpolation. First approximation algorithm is based on usual least square criterium: minimization of square distance between samplimg points and result surface. Second approximation algorithm uses least square criterium and additional minimization of some local characteristic of surface (first, second and third partial derivative), which allows managing shape of surface. Interpolation algorithm produces surface, which passes through sampling points.
 */
class GeomAPI_PointsToBSplineSurface {
}

class GeomAPI_PointsToBSplineSurface_1 extends GeomAPI_PointsToBSplineSurface {}

class GeomAPI_PointsToBSplineSurface_2 extends GeomAPI_PointsToBSplineSurface {}

class GeomAPI_PointsToBSplineSurface_3 extends GeomAPI_PointsToBSplineSurface {}

class GeomAPI_PointsToBSplineSurface_4 extends GeomAPI_PointsToBSplineSurface {}

class GeomAPI_PointsToBSplineSurface_5 extends GeomAPI_PointsToBSplineSurface {}

/**
 * This class implements methods for computing all the orthogonal projections of a 3D point onto a 3D curve.
 */
class GeomAPI_ProjectPointOnCurve {
}

class GeomAPI_ProjectPointOnCurve_1 extends GeomAPI_ProjectPointOnCurve {}

class GeomAPI_ProjectPointOnCurve_2 extends GeomAPI_ProjectPointOnCurve {}

class GeomAPI_ProjectPointOnCurve_3 extends GeomAPI_ProjectPointOnCurve {}

/**
 * This class implements methods for computing all the orthogonal projections of a point onto a surface.
 */
class GeomAPI_ProjectPointOnSurf {
}

class GeomAPI_ProjectPointOnSurf_1 extends GeomAPI_ProjectPointOnSurf {}

class GeomAPI_ProjectPointOnSurf_2 extends GeomAPI_ProjectPointOnSurf {}

class GeomAPI_ProjectPointOnSurf_3 extends GeomAPI_ProjectPointOnSurf {}

class GeomAPI_ProjectPointOnSurf_4 extends GeomAPI_ProjectPointOnSurf {}

class GeomAPI_ProjectPointOnSurf_5 extends GeomAPI_ProjectPointOnSurf {}

/**
 * this package contains the geometric definition of curve and surface necessary to use algorithmes.
 */
class GeomAdaptor {
}

/**
 * This class provides an interface between the services provided by any curve from the package Geom and those required of the curve by algorithms which use it. Creation of the loaded curve the curve is C1 by piece.
 */
class GeomAdaptor_Curve extends Adaptor3d_Curve {
}

class GeomAdaptor_Curve_1 extends GeomAdaptor_Curve {}

class GeomAdaptor_Curve_2 extends GeomAdaptor_Curve {}

class GeomAdaptor_Curve_3 extends GeomAdaptor_Curve {}

class GeomAdaptor_GHCurve extends Adaptor3d_HCurve {
}

class GeomAdaptor_GHCurve_1 extends GeomAdaptor_GHCurve {}

class GeomAdaptor_GHCurve_2 extends GeomAdaptor_GHCurve {}

class GeomAdaptor_GHSurface extends Adaptor3d_HSurface {
}

class GeomAdaptor_GHSurface_1 extends GeomAdaptor_GHSurface {}

class GeomAdaptor_GHSurface_2 extends GeomAdaptor_GHSurface {}

/**
 * An interface between the services provided by any curve from the package Geom and those required of the curve by algorithms which use it.
 */
class GeomAdaptor_HCurve extends GeomAdaptor_GHCurve {
}

class GeomAdaptor_HCurve_1 extends GeomAdaptor_HCurve {}

class GeomAdaptor_HCurve_2 extends GeomAdaptor_HCurve {}

class GeomAdaptor_HCurve_3 extends GeomAdaptor_HCurve {}

class GeomAdaptor_HCurve_4 extends GeomAdaptor_HCurve {}

/**
 * An interface between the services provided by any surface from the package Geom and those required of the surface by algorithms which use it. Provides a surface handled by reference.
 */
class GeomAdaptor_HSurface extends GeomAdaptor_GHSurface {
}

class GeomAdaptor_HSurface_1 extends GeomAdaptor_HSurface {}

class GeomAdaptor_HSurface_2 extends GeomAdaptor_HSurface {}

class GeomAdaptor_HSurface_3 extends GeomAdaptor_HSurface {}

class GeomAdaptor_HSurface_4 extends GeomAdaptor_HSurface {}

class GeomAdaptor_HSurfaceOfLinearExtrusion extends Adaptor3d_HSurface {
}

class GeomAdaptor_HSurfaceOfLinearExtrusion_1 extends GeomAdaptor_HSurfaceOfLinearExtrusion {}

class GeomAdaptor_HSurfaceOfLinearExtrusion_2 extends GeomAdaptor_HSurfaceOfLinearExtrusion {}

class GeomAdaptor_HSurfaceOfRevolution extends Adaptor3d_HSurface {
}

class GeomAdaptor_HSurfaceOfRevolution_1 extends GeomAdaptor_HSurfaceOfRevolution {}

class GeomAdaptor_HSurfaceOfRevolution_2 extends GeomAdaptor_HSurfaceOfRevolution {}

/**
 * An interface between the services provided by any surface from the package Geom and those required of the surface by algorithms which use it. Creation of the loaded surface the surface is C1 by piece
 */
class GeomAdaptor_Surface extends Adaptor3d_Surface {
}

class GeomAdaptor_Surface_1 extends GeomAdaptor_Surface {}

class GeomAdaptor_Surface_2 extends GeomAdaptor_Surface {}

class GeomAdaptor_Surface_3 extends GeomAdaptor_Surface {}

/**
 * Generalised cylinder. This surface is obtained by sweeping a curve in a given direction. The parametrization range for the parameter U is defined with referenced the curve. The parametrization range for the parameter V is ]-infinite,+infinite[ The position of the curve gives the origin for the parameter V. The continuity of the surface is CN in the V direction.
 */
class GeomAdaptor_SurfaceOfLinearExtrusion extends GeomAdaptor_Surface {
}

class GeomAdaptor_SurfaceOfLinearExtrusion_1 extends GeomAdaptor_SurfaceOfLinearExtrusion {}

class GeomAdaptor_SurfaceOfLinearExtrusion_2 extends GeomAdaptor_SurfaceOfLinearExtrusion {}

class GeomAdaptor_SurfaceOfLinearExtrusion_3 extends GeomAdaptor_SurfaceOfLinearExtrusion {}

/**
 * This class defines a complete surface of revolution. The surface is obtained by rotating a curve a complete revolution about an axis. The curve and the axis must be in the same plane. If the curve and the axis are not in the same plane it is always possible to be in the previous case after a cylindrical projection of the curve in a referenced plane. For a complete surface of revolution the parametric range is 0 <= U <= 2*PI. -- The parametric range for V is defined with the revolved curve. The origin of the U parametrization is given by the position of the revolved curve (reference). The direction of the revolution axis defines the positive sense of rotation (trigonometric sense) corresponding to the increasing of the parametric value U. The derivatives are always defined for the u direction. For the v direction the definition of the derivatives depends on the degree of continuity of the referenced curve.
 */
class GeomAdaptor_SurfaceOfRevolution extends GeomAdaptor_Surface {
}

class GeomAdaptor_SurfaceOfRevolution_1 extends GeomAdaptor_SurfaceOfRevolution {}

class GeomAdaptor_SurfaceOfRevolution_2 extends GeomAdaptor_SurfaceOfRevolution {}

class GeomAdaptor_SurfaceOfRevolution_3 extends GeomAdaptor_SurfaceOfRevolution {}

/**
 * The GeomConvert package provides some global functions as follows - converting classical Geom curves into BSpline curves, - segmenting BSpline curves, particularly at knots values: this function may be used in conjunction with the GeomConvert_BSplineCurveKnotSplitting class to segment a BSpline curve into arcs which comply with required continuity levels, - converting classical Geom surfaces into BSpline surfaces, and - segmenting BSpline surfaces, particularly at knots values: this function may be used in conjunction with the GeomConvert_BSplineSurfaceKnotSplitting class to segment a BSpline surface into patches which comply with required continuity levels. All geometric entities used in this package are bounded.
 */
class GeomConvert {
}

/**
 * A framework to convert a 3D curve to a 3D BSpline. This is done by approximation to a BSpline curve within a given tolerance.
 */
class GeomConvert_ApproxCurve {
}

class GeomConvert_ApproxCurve_1 extends GeomConvert_ApproxCurve {}

class GeomConvert_ApproxCurve_2 extends GeomConvert_ApproxCurve {}

/**
 * A framework to convert a surface to a BSpline surface. This is done by approximation to a BSpline surface within a given tolerance.
 */
class GeomConvert_ApproxSurface {
}

class GeomConvert_ApproxSurface_1 extends GeomConvert_ApproxSurface {}

class GeomConvert_ApproxSurface_2 extends GeomConvert_ApproxSurface {}

/**
 * An algorithm to determine points at which a BSpline curve should be split in order to obtain arcs of the same continuity. If you require curves with a minimum continuity for your computation, it is useful to know the points between which an arc has a continuity of a given order. The continuity order is given at the construction time. For a BSpline curve, the discontinuities are localized at the knot values. Between two knot values the BSpline is infinitely and continuously differentiable. At a given knot, the continuity is equal to: Degree - Mult, where Degree is the degree of the BSpline curve and Mult is the multiplicity of the knot. It is possible to compute the arcs which correspond to this splitting using the global function SplitBSplineCurve provided by the package GeomConvert. A BSplineCurveKnotSplitting object provides a framework for: - defining the curve to be analyzed and the required degree of continuity, - implementing the computation algorithm, and - consulting the results.
 */
class GeomConvert_BSplineCurveKnotSplitting {
}

/**
 * An algorithm to convert a BSpline curve into a series of adjacent Bezier curves. A BSplineCurveToBezierCurve object provides a framework for: - defining the BSpline curve to be converted - implementing the construction algorithm, and - consulting the results. References : Generating the Bezier points of B-spline curves and surfaces (Wolfgang Bohm) CAD volume 13 number 6 november 1981
 */
class GeomConvert_BSplineCurveToBezierCurve {
}

class GeomConvert_BSplineCurveToBezierCurve_1 extends GeomConvert_BSplineCurveToBezierCurve {}

class GeomConvert_BSplineCurveToBezierCurve_2 extends GeomConvert_BSplineCurveToBezierCurve {}

/**
 * An algorithm to determine isoparametric curves along which a BSpline surface should be split in order to obtain patches of the same continuity. The continuity order is given at the construction time. It is possible to compute the surface patches corresponding to the splitting with the method of package SplitBSplineSurface. For a B-spline surface the discontinuities are localised at the knot values. Between two knots values the B-spline is infinitely continuously differentiable. For each parametric direction at a knot of range index the continuity in this direction is equal to : Degree - Mult (Index) where Degree is the degree of the basis B-spline functions and Mult the multiplicity of the knot of range Index in the given direction. If for your computation you need to have B-spline surface with a minima of continuity it can be interesting to know between which knot values, a B-spline patch, has a continuity of given order. This algorithm computes the indexes of the knots where you should split the surface, to obtain patches with a constant continuity given at the construction time. If you just want to compute the local derivatives on the surface you don't need to create the BSpline patches, you can use the functions LocalD1, LocalD2, LocalD3, LocalDN of the class BSplineSurface from package Geom.
 */
class GeomConvert_BSplineSurfaceKnotSplitting {
}

/**
 * This algorithm converts a B-spline surface into several Bezier surfaces. It uses an algorithm of knot insertion. A BSplineSurfaceToBezierSurface object provides a framework for: - defining the BSpline surface to be converted, - implementing the construction algorithm, and - consulting the results. References : Generating the Bezier points of B-spline curves and surfaces (Wolfgang Bohm) CAD volume 13 number 6 november 1981
 */
class GeomConvert_BSplineSurfaceToBezierSurface {
}

class GeomConvert_BSplineSurfaceToBezierSurface_1 extends GeomConvert_BSplineSurfaceToBezierSurface {}

class GeomConvert_BSplineSurfaceToBezierSurface_2 extends GeomConvert_BSplineSurfaceToBezierSurface {}

/**
 * An algorithm to convert a grid of adjacent non-rational Bezier surfaces (with continuity CM) into a BSpline surface (with continuity CM). A CompBezierSurfacesToBSplineSurface object provides a framework for: - defining the grid of adjacent Bezier surfaces which is to be converted into a BSpline surface, - implementing the computation algorithm, and - consulting the results. Warning Do not attempt to convert rational Bezier surfaces using such an algorithm. Input is array of Bezier patch 1 2 3 4 -> VIndex [1, NbVPatches] -> VDirection ----------------------- 1 | | | | | ----------------------- 2 | | | | | ----------------------- 3 | | | | | ----------------------- UIndex [1, NbUPatches] Udirection
 */
class GeomConvert_CompBezierSurfacesToBSplineSurface {
}

class GeomConvert_CompBezierSurfacesToBSplineSurface_1 extends GeomConvert_CompBezierSurfacesToBSplineSurface {}

class GeomConvert_CompBezierSurfacesToBSplineSurface_2 extends GeomConvert_CompBezierSurfacesToBSplineSurface {}

class GeomConvert_CompBezierSurfacesToBSplineSurface_3 extends GeomConvert_CompBezierSurfacesToBSplineSurface {}

/**
 * Algorithm converts and concat several curve in an BSplineCurve
 */
class GeomConvert_CompCurveToBSplineCurve {
}

class GeomConvert_CompCurveToBSplineCurve_1 extends GeomConvert_CompCurveToBSplineCurve {}

class GeomConvert_CompCurveToBSplineCurve_2 extends GeomConvert_CompCurveToBSplineCurve {}

/**
 * Interface for calculation of values and derivatives for different kinds of curves in 3D. Works both with adaptors and curves.
 */
class GeomEvaluator_Curve extends Standard_Transient {
}

/**
 * Allows to calculate values and derivatives for offset curves in 3D
 */
class GeomEvaluator_OffsetCurve extends GeomEvaluator_Curve {
}

class GeomEvaluator_OffsetCurve_1 extends GeomEvaluator_OffsetCurve {}

class GeomEvaluator_OffsetCurve_2 extends GeomEvaluator_OffsetCurve {}

/**
 * Allows to calculate values and derivatives for offset surfaces
 */
class GeomEvaluator_OffsetSurface extends GeomEvaluator_Surface {
}

class GeomEvaluator_OffsetSurface_1 extends GeomEvaluator_OffsetSurface {}

class GeomEvaluator_OffsetSurface_2 extends GeomEvaluator_OffsetSurface {}

/**
 * Interface for calculation of values and derivatives for different kinds of surfaces. Works both with adaptors and surfaces.
 */
class GeomEvaluator_Surface extends Standard_Transient {
}

/**
 * Allows to calculate values and derivatives for surfaces of linear extrusion
 */
class GeomEvaluator_SurfaceOfExtrusion extends GeomEvaluator_Surface {
}

class GeomEvaluator_SurfaceOfExtrusion_1 extends GeomEvaluator_SurfaceOfExtrusion {}

class GeomEvaluator_SurfaceOfExtrusion_2 extends GeomEvaluator_SurfaceOfExtrusion {}

/**
 * Allows to calculate values and derivatives for surfaces of revolution
 */
class GeomEvaluator_SurfaceOfRevolution extends GeomEvaluator_Surface {
}

class GeomEvaluator_SurfaceOfRevolution_1 extends GeomEvaluator_SurfaceOfRevolution {}

class GeomEvaluator_SurfaceOfRevolution_2 extends GeomEvaluator_SurfaceOfRevolution {}

/**
 * Tools and Data to filling Surface and Sweep Surfaces
 */
class GeomFill {
}

/**
 * Approximate a BSplineSurface passing by all the curves described in the SectionGenerator
 */
class GeomFill_AppSurf extends AppBlend_Approx {
}

class GeomFill_AppSurf_1 extends GeomFill_AppSurf {}

class GeomFill_AppSurf_2 extends GeomFill_AppSurf {}

/**
 * Approximate a sweep surface passing by all the curves described in the SweepSectionGenerator.
 */
class GeomFill_AppSweep extends AppBlend_Approx {
}

class GeomFill_AppSweep_1 extends GeomFill_AppSweep {}

class GeomFill_AppSweep_2 extends GeomFill_AppSweep {}

/**
 * An algorithm for constructing a BSpline surface filled from contiguous BSpline curves which form its boundaries. The algorithm accepts two, three or four BSpline curves as the boundaries of the target surface. A range of filling styles - more or less rounded, more or less flat - is available. A BSplineCurves object provides a framework for: - defining the boundaries, and the filling style of the surface - implementing the construction algorithm - consulting the result. Warning Some problems may show up with rational curves.
 */
class GeomFill_BSplineCurves {
}

class GeomFill_BSplineCurves_1 extends GeomFill_BSplineCurves {}

class GeomFill_BSplineCurves_2 extends GeomFill_BSplineCurves {}

class GeomFill_BSplineCurves_3 extends GeomFill_BSplineCurves {}

class GeomFill_BSplineCurves_4 extends GeomFill_BSplineCurves {}

/**
 * This class provides an algorithm for constructing a Bezier surface filled from contiguous Bezier curves which form its boundaries. The algorithm accepts two, three or four Bezier curves as the boundaries of the target surface. A range of filling styles - more or less rounded, more or less flat - is available. A BezierCurves object provides a framework for: - defining the boundaries, and the filling style of the surface - implementing the construction algorithm - consulting the result. Warning Some problems may show up with rational curves.
 */
class GeomFill_BezierCurves {
}

class GeomFill_BezierCurves_1 extends GeomFill_BezierCurves {}

class GeomFill_BezierCurves_2 extends GeomFill_BezierCurves {}

class GeomFill_BezierCurves_3 extends GeomFill_BezierCurves {}

class GeomFill_BezierCurves_4 extends GeomFill_BezierCurves {}

/**
 * Defines a 3d curve as a boundary for a GeomFill_ConstrainedFilling algorithm. This curve is attached to an existing surface. Defines a constrained boundary for filling the computations are done with a CurveOnSurf and a normals field defined by the normalized normal to the surface along the PCurve. Contains fields to allow a reparametrization of curve and normals field.
 */
class GeomFill_BoundWithSurf extends GeomFill_Boundary {
}

/**
 * Root class to define a boundary which will form part of a contour around a gap requiring filling. Any new type of constrained boundary must inherit this class. The GeomFill package provides two classes to define constrained boundaries: - GeomFill_SimpleBound to define an unattached boundary - GeomFill_BoundWithSurf to define a boundary attached to a surface. These objects are used to define the boundaries for a GeomFill_ConstrainedFilling framework.
 */
class GeomFill_Boundary extends Standard_Transient {
}

/**
 * Circular Blend Function to approximate by SweepApproximation from Approx
 */
class GeomFill_CircularBlendFunc extends Approx_SweepFunction {
}

/**
 * Defined an Trihedron Law where the BiNormal, is fixed
 */
class GeomFill_ConstantBiNormal extends GeomFill_TrihedronLaw {
}

/**
 * An algorithm for constructing a BSpline surface filled from a series of boundaries which serve as path constraints and optionally, as tangency constraints. The algorithm accepts three or four curves as the boundaries of the target surface. The only FillingStyle used is Coons. A ConstrainedFilling object provides a framework for: - defining the boundaries of the surface - implementing the construction algorithm - consulting the result. Warning This surface filling algorithm is specifically designed to be used in connection with fillets. Satisfactory results cannot be guaranteed for other uses.
 */
class GeomFill_ConstrainedFilling {
}

class GeomFill_Coons extends GeomFill_Filling {
}

class GeomFill_Coons_1 extends GeomFill_Coons {}

class GeomFill_Coons_2 extends GeomFill_Coons {}

class GeomFill_Coons_3 extends GeomFill_Coons {}

/**
 * Provides evaluation methods on an algorithmic patch (based on 4 Curves) defined by its boundaries and blending functions.
 */
class GeomFill_CoonsAlgPatch extends Standard_Transient {
}

/**
 * Class (should be a structure) storing the informations about continuity, normals parallelism, coons conditions and bounds tangents angle on the corner of contour to be filled.
 */
class GeomFill_CornerState {
}

/**
 * Defined an Corrected Frenet Trihedron Law It is like Frenet with an Torsion's minimization
 */
class GeomFill_CorrectedFrenet extends GeomFill_TrihedronLaw {
}

class GeomFill_CorrectedFrenet_1 extends GeomFill_CorrectedFrenet {}

class GeomFill_CorrectedFrenet_2 extends GeomFill_CorrectedFrenet {}

/**
 * Define location law with an TrihedronLaw and an curve Definition Location is : transformed section coordinates in (Curve(v)), (Normal(v), BiNormal(v), Tangente(v))) systeme are the same like section shape coordinates in (O,(OX, OY, OZ)) systeme.
 */
class GeomFill_CurveAndTrihedron extends GeomFill_LocationLaw {
}

class GeomFill_Curved extends GeomFill_Filling {
}

class GeomFill_Curved_1 extends GeomFill_Curved {}

class GeomFill_Curved_2 extends GeomFill_Curved {}

class GeomFill_Curved_3 extends GeomFill_Curved {}

class GeomFill_Curved_4 extends GeomFill_Curved {}

class GeomFill_Curved_5 extends GeomFill_Curved {}

/**
 * Defines Darboux case of Frenet Trihedron Law
 */
class GeomFill_Darboux extends GeomFill_TrihedronLaw {
}

/**
 * Description of a degenerated boundary (a point). Class defining a degenerated boundary for a constrained filling with a point and no other constraint. Only used to simulate an ordinary bound, may not be usefull and desapear soon.
 */
class GeomFill_DegeneratedBound extends GeomFill_Boundary {
}

/**
 * Defined Discrete Trihedron Law. The requirement for path curve is only G1. The result is C0-continuous surface that can be later approximated to C1.
 */
class GeomFill_DiscreteTrihedron extends GeomFill_TrihedronLaw {
}

class GeomFill_DraftTrihedron extends GeomFill_TrihedronLaw {
}

/**
 * Define an Constant Section Law
 */
class GeomFill_EvolvedSection extends GeomFill_SectionLaw {
}

/**
 * Root class for Filling;
 */
class GeomFill_Filling {
}

/**
 * Defined an constant TrihedronLaw
 */
class GeomFill_Fixed extends GeomFill_TrihedronLaw {
}

/**
 * Defined Frenet Trihedron Law
 */
class GeomFill_Frenet extends GeomFill_TrihedronLaw {
}

class GeomFill_FunctionDraft extends math_FunctionSetWithDerivatives {
}

/**
 * Create a surface using generating lines. Inherits profiler. The surface will be a BSplineSurface passing by all the curves described in the generator. The VDegree of the resulting surface is 1.
 */
class GeomFill_Generator extends GeomFill_Profiler {
}

/**
 * Trihedron in the case of a sweeping along a guide curve. defined by curviline absciss
 */
class GeomFill_GuideTrihedronAC extends GeomFill_TrihedronWithGuide {
}

/**
 * Trihedron in the case of sweeping along a guide curve defined by the orthogonal plan on the trajectory
 */
class GeomFill_GuideTrihedronPlan extends GeomFill_TrihedronWithGuide {
}

/**
 * class for instantiation of AppBlend
 */
class GeomFill_Line extends Standard_Transient {
}

class GeomFill_Line_1 extends GeomFill_Line {}

class GeomFill_Line_2 extends GeomFill_Line {}

class GeomFill_LocFunction {
}

class GeomFill_LocationDraft extends GeomFill_LocationLaw {
}

class GeomFill_LocationGuide extends GeomFill_LocationLaw {
}

/**
 * To define location law in Sweeping location is -- defined by an Matrix M and an Vector V, and transform an point P in MP+V.
 */
class GeomFill_LocationLaw extends Standard_Transient {
}

/**
 * Describes functions to construct pipes. A pipe is built by sweeping a curve (the section) along another curve (the path). The Pipe class provides the following types of construction: - pipes with a circular section of constant radius, - pipes with a constant section, - pipes with a section evolving between two given curves. All standard specific cases are detected in order to build, where required, a plane, cylinder, cone, sphere, torus, surface of linear extrusion or surface of revolution. Generally speaking, the result is a BSpline surface (NURBS). A Pipe object provides a framework for: - defining the pipe to be built, - implementing the construction algorithm, and - consulting the resulting surface. There are several methods to instantiate a Pipe: 1) give a path and a radius : the section is a circle. This location is the first point of the path, and this direction is the first derivate (calculate at the first point ) of the path.
 */
class GeomFill_Pipe {
}

class GeomFill_Pipe_1 extends GeomFill_Pipe {}

class GeomFill_Pipe_2 extends GeomFill_Pipe {}

class GeomFill_Pipe_3 extends GeomFill_Pipe {}

class GeomFill_Pipe_4 extends GeomFill_Pipe {}

class GeomFill_Pipe_5 extends GeomFill_Pipe {}

class GeomFill_Pipe_6 extends GeomFill_Pipe {}

class GeomFill_Pipe_7 extends GeomFill_Pipe {}

class GeomFill_Pipe_8 extends GeomFill_Pipe {}

class GeomFill_Pipe_9 extends GeomFill_Pipe {}

class GeomFill_Pipe_10 extends GeomFill_Pipe {}

class GeomFill_PlanFunc extends math_FunctionWithDerivative {
}

/**
 * To convert circular section in polynome
 */
class GeomFill_PolynomialConvertor {
}

/**
 * Evaluation of the common BSplineProfile of a group of curves from Geom. All the curves will have the same degree, the same knot-vector, so the same number of poles.
 */
class GeomFill_Profiler {
}

/**
 * To convert circular section in QuasiAngular Bezier form
 */
class GeomFill_QuasiAngularConvertor {
}

/**
 * gives the functions needed for instantiation from AppSurf in AppBlend. Allow to evaluate a surface passing by all the curves if the Profiler.
 */
class GeomFill_SectionGenerator extends GeomFill_Profiler {
}

/**
 * To define section law in sweeping
 */
class GeomFill_SectionLaw extends Standard_Transient {
}

/**
 * To place section in sweep Function
 */
class GeomFill_SectionPlacement {
}

/**
 * Defines a 3d curve as a boundary for a GeomFill_ConstrainedFilling algorithm. This curve is unattached to an existing surface.D Contains fields to allow a reparametrization of curve.
 */
class GeomFill_SimpleBound extends GeomFill_Boundary {
}

/**
 * to represent function C'(t)^C''(t)
 */
class GeomFill_SnglrFunc extends Adaptor3d_Curve {
}

class GeomFill_Stretch extends GeomFill_Filling {
}

class GeomFill_Stretch_1 extends GeomFill_Stretch {}

class GeomFill_Stretch_2 extends GeomFill_Stretch {}

class GeomFill_Stretch_3 extends GeomFill_Stretch {}

/**
 * Geometrical Sweep Algorithm
 */
class GeomFill_Sweep {
}

/**
 * Function to approximate by SweepApproximation from Approx. To bulid general sweep Surface.
 */
class GeomFill_SweepFunction extends Approx_SweepFunction {
}

/**
 * used to store the "gradient of gradient"
 */
class GeomFill_Tensor {
}

/**
 * Root class defining the methods we need to make an algorithmic tangents field.
 */
class GeomFill_TgtField extends Standard_Transient {
}

/**
 * Defines an algorithmic tangents field on a boundary of a CoonsAlgPatch.
 */
class GeomFill_TgtOnCoons extends GeomFill_TgtField {
}

/**
 * To define Trihedron along one Curve
 */
class GeomFill_TrihedronLaw extends Standard_Transient {
}

/**
 * To define Trihedron along one Curve with a guide
 */
class GeomFill_TrihedronWithGuide extends GeomFill_TrihedronLaw {
}

/**
 * Define an Constant Section Law
 */
class GeomFill_UniformSection extends GeomFill_SectionLaw {
}

/**
 * Provides intersections on between two surfaces of Geom. The result are curves from Geom.
 */
class GeomInt {
}

class GeomInt_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfWLApprox extends math_BFGS {
}

class GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox extends math_MultipleVarFunctionWithGradient {
}

class GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox {
}

class GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_1 extends GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox {}

class GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_2 extends GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox {}

class GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_3 extends GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox {}

class GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_4 extends GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox {}

class GeomInt_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfWLApprox extends math_BFGS {
}

class GeomInt_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfWLApprox extends math_BFGS {
}

/**
 * Splits given Line.
 */
class GeomInt_LineConstructor {
}

class GeomInt_LineTool {
}

class GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox {
}

class GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_1 extends GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox {}

class GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_2 extends GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox {}

class GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox {
}

class GeomInt_MyGradientbisOfTheComputeLineOfWLApprox {
}

class GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox extends math_MultipleVarFunctionWithGradient {
}

class GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox extends math_MultipleVarFunctionWithGradient {
}

class GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox {
}

class GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_1 extends GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox {}

class GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_2 extends GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox {}

class GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_3 extends GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox {}

class GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_4 extends GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox {}

class GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox {
}

class GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_1 extends GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox {}

class GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_2 extends GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox {}

class GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_3 extends GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox {}

class GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_4 extends GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox {}

class GeomInt_ParameterAndOrientation {
}

class GeomInt_ParameterAndOrientation_1 extends GeomInt_ParameterAndOrientation {}

class GeomInt_ParameterAndOrientation_2 extends GeomInt_ParameterAndOrientation {}

class GeomInt_TheComputeLineBezierOfWLApprox {
}

class GeomInt_TheComputeLineBezierOfWLApprox_1 extends GeomInt_TheComputeLineBezierOfWLApprox {}

class GeomInt_TheComputeLineBezierOfWLApprox_2 extends GeomInt_TheComputeLineBezierOfWLApprox {}

class GeomInt_TheComputeLineBezierOfWLApprox_3 extends GeomInt_TheComputeLineBezierOfWLApprox {}

class GeomInt_TheComputeLineBezierOfWLApprox_4 extends GeomInt_TheComputeLineBezierOfWLApprox {}

class GeomInt_TheComputeLineOfWLApprox {
}

class GeomInt_TheComputeLineOfWLApprox_1 extends GeomInt_TheComputeLineOfWLApprox {}

class GeomInt_TheComputeLineOfWLApprox_2 extends GeomInt_TheComputeLineOfWLApprox {}

class GeomInt_TheComputeLineOfWLApprox_3 extends GeomInt_TheComputeLineOfWLApprox {}

class GeomInt_TheComputeLineOfWLApprox_4 extends GeomInt_TheComputeLineOfWLApprox {}

class GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox extends math_FunctionSetWithDerivatives {
}

class GeomInt_TheImpPrmSvSurfacesOfWLApprox extends ApproxInt_SvSurfaces {
}

class GeomInt_TheImpPrmSvSurfacesOfWLApprox_1 extends GeomInt_TheImpPrmSvSurfacesOfWLApprox {}

class GeomInt_TheImpPrmSvSurfacesOfWLApprox_2 extends GeomInt_TheImpPrmSvSurfacesOfWLApprox {}

class GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox {
}

class GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_1 extends GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox {}

class GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_2 extends GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox {}

class GeomInt_TheMultiLineOfWLApprox {
}

class GeomInt_TheMultiLineOfWLApprox_1 extends GeomInt_TheMultiLineOfWLApprox {}

class GeomInt_TheMultiLineOfWLApprox_2 extends GeomInt_TheMultiLineOfWLApprox {}

class GeomInt_TheMultiLineOfWLApprox_3 extends GeomInt_TheMultiLineOfWLApprox {}

class GeomInt_TheMultiLineToolOfWLApprox {
}

class GeomInt_ThePrmPrmSvSurfacesOfWLApprox extends ApproxInt_SvSurfaces {
}

class GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox extends math_FunctionSetWithDerivatives {
}

class GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_1 extends GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox {}

class GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_2 extends GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox {}

class GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_3 extends GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox {}

/**
 * These global functions compute the degree of continuity of a 3D curve built by concatenation of two other curves (or portions of curves) at their junction point.
 */
class GeomLProp {
}

class GeomLProp_CLProps {
}

class GeomLProp_CLProps_1 extends GeomLProp_CLProps {}

class GeomLProp_CLProps_2 extends GeomLProp_CLProps {}

class GeomLProp_CLProps_3 extends GeomLProp_CLProps {}

class GeomLProp_CurveTool {
}

class GeomLProp_SLProps {
}

class GeomLProp_SLProps_1 extends GeomLProp_SLProps {}

class GeomLProp_SLProps_2 extends GeomLProp_SLProps {}

class GeomLProp_SLProps_3 extends GeomLProp_SLProps {}

class GeomLProp_SurfaceTool {
}

/**
 * Geom Library. This package provides an implementation of functions for basic computation on geometric entity from packages Geom and Geom2d.
 */
class GeomLib {
}

/**
 * Checks for the end tangents : wether or not those are reversed
 */
class GeomLib_Check2dBSplineCurve {
}

/**
 * Checks for the end tangents : wether or not those are reversed regarding the third or n-3rd control
 */
class GeomLib_CheckBSplineCurve {
}

/**
 * Computes the max distance between 3D-curve and 2D-curve in some surface.
 */
class GeomLib_CheckCurveOnSurface {
}

class GeomLib_CheckCurveOnSurface_1 extends GeomLib_CheckCurveOnSurface {}

class GeomLib_CheckCurveOnSurface_2 extends GeomLib_CheckCurveOnSurface {}

/**
 * this defines an evaluator for a function of 2 variables that will be used by CancelDenominatorDerivative in one direction.
 */
class GeomLib_DenominatorMultiplier {
}

/**
 * this class is used to construct a BSpline curve by interpolation of points at given parameters The continuity of the curve is degree - 1 and the method used when boundary condition are not given is to use odd degrees and null the derivatives on both sides from degree -1 down to (degree+1) / 2 When even degree is given the returned curve is of degree - 1 so that the degree of the curve is odd
 */
class GeomLib_Interpolate {
}

/**
 * Find if a surface is a planar surface.
 */
class GeomLib_IsPlanarSurface {
}

class GeomLib_LogSample extends math_FunctionSample {
}

/**
 * this class is used to construct the BSpline curve from an Approximation ( ApproxAFunction from AdvApprox).
 */
class GeomLib_MakeCurvefromApprox {
}

/**
 * Polynomial Function
 */
class GeomLib_PolyFunc extends math_FunctionWithDerivative {
}

/**
 * Provides various methods with Geom2d and Geom curves and surfaces. The methods of this class compute the parameter(s) of a given point on a curve or a surface. To get the valid result the point must be located rather close to the curve (surface) or at least to allow getting unambiguous result (do not put point at center of circle...), but choice of "trust" distance between curve/surface and point is responcibility of user (parameter MaxDist). Return FALSE if the point is beyond the MaxDist limit or if computation fails.
 */
class GeomLib_Tool {
}

/**
 * A structure containing indexes of two normals and its cross product
 */
class GeomPlate_Aij {
}

class GeomPlate_Aij_1 extends GeomPlate_Aij {}

class GeomPlate_Aij_2 extends GeomPlate_Aij {}

/**
 * This class computes an average inertial plane with an array of points. Computes the initial surface (average plane) in the cases when the initial surface is not given.
 */
class GeomPlate_BuildAveragePlane {
}

class GeomPlate_BuildAveragePlane_1 extends GeomPlate_BuildAveragePlane {}

class GeomPlate_BuildAveragePlane_2 extends GeomPlate_BuildAveragePlane {}

/**
 * This class provides an algorithm for constructing such a plate surface that it conforms to given curve and/or point constraints. The algorithm accepts or constructs an initial surface and looks for a deformation of it satisfying the constraints and minimizing energy input. A BuildPlateSurface object provides a framework for: - defining or setting constraints - implementing the construction algorithm - consulting the result.
 */
class GeomPlate_BuildPlateSurface {
}

class GeomPlate_BuildPlateSurface_1 extends GeomPlate_BuildPlateSurface {}

class GeomPlate_BuildPlateSurface_2 extends GeomPlate_BuildPlateSurface {}

class GeomPlate_BuildPlateSurface_3 extends GeomPlate_BuildPlateSurface {}

/**
 * Defines curves as constraints to be used to deform a surface.
 */
class GeomPlate_CurveConstraint extends Standard_Transient {
}

class GeomPlate_CurveConstraint_1 extends GeomPlate_CurveConstraint {}

class GeomPlate_CurveConstraint_2 extends GeomPlate_CurveConstraint {}

/**
 * Allows you to convert a GeomPlate surface into a BSpline.
 */
class GeomPlate_MakeApprox {
}

class GeomPlate_MakeApprox_1 extends GeomPlate_MakeApprox {}

class GeomPlate_MakeApprox_2 extends GeomPlate_MakeApprox {}

/**
 * this class contains a specific G0 criterion for GeomPlate_MakeApprox
 */
class GeomPlate_PlateG0Criterion extends AdvApp2Var_Criterion {
}

/**
 * this class contains a specific G1 criterion for GeomPlate_MakeApprox
 */
class GeomPlate_PlateG1Criterion extends AdvApp2Var_Criterion {
}

/**
 * Defines points as constraints to be used to deform a surface.
 */
class GeomPlate_PointConstraint extends Standard_Transient {
}

class GeomPlate_PointConstraint_1 extends GeomPlate_PointConstraint {}

class GeomPlate_PointConstraint_2 extends GeomPlate_PointConstraint {}

/**
 * Describes the characteristics of plate surface objects returned by BuildPlateSurface::Surface. These can be used to verify the quality of the resulting surface before approximating it to a Geom_BSpline surface generated by MakeApprox. This proves necessary in cases where you want to use the resulting surface as the support for a shape. The algorithmically generated surface cannot fill this function as is, and as a result must be converted first.
 */
class GeomPlate_Surface extends Geom_Surface {
}

/**
 * Projection of a curve on a surface.
 */
class GeomProjLib {
}

/**
 * This class implements the transfer of the Curve Entity from Geom To IGES. These can be : Curve . BoundedCurve * BSplineCurve * BezierCurve * TrimmedCurve . Conic * Circle * Ellipse * Hyperbloa * Line * Parabola . OffsetCurve
 */
class GeomToIGES_GeomCurve extends GeomToIGES_GeomEntity {
}

class GeomToIGES_GeomCurve_1 extends GeomToIGES_GeomCurve {}

class GeomToIGES_GeomCurve_2 extends GeomToIGES_GeomCurve {}

/**
 * provides methods to transfer Geom entity from CASCADE to IGES.
 */
class GeomToIGES_GeomEntity {
}

class GeomToIGES_GeomEntity_1 extends GeomToIGES_GeomEntity {}

class GeomToIGES_GeomEntity_2 extends GeomToIGES_GeomEntity {}

/**
 * This class implements the transfer of the Point Entity from Geom to IGES . These are : . Point * CartesianPoint
 */
class GeomToIGES_GeomPoint extends GeomToIGES_GeomEntity {
}

class GeomToIGES_GeomPoint_1 extends GeomToIGES_GeomPoint {}

class GeomToIGES_GeomPoint_2 extends GeomToIGES_GeomPoint {}

/**
 * This class implements the transfer of the Surface Entity from Geom To IGES. These can be : . BoundedSurface * BSplineSurface * BezierSurface * RectangularTrimmedSurface . ElementarySurface * Plane * CylindricalSurface * ConicalSurface * SphericalSurface * ToroidalSurface . SweptSurface * SurfaceOfLinearExtrusion * SurfaceOfRevolution . OffsetSurface
 */
class GeomToIGES_GeomSurface extends GeomToIGES_GeomEntity {
}

class GeomToIGES_GeomSurface_1 extends GeomToIGES_GeomSurface {}

class GeomToIGES_GeomSurface_2 extends GeomToIGES_GeomSurface {}

/**
 * This class implements the transfer of the Vector from Geom to IGES . These can be : . Vector * Direction * VectorWithMagnitude
 */
class GeomToIGES_GeomVector extends GeomToIGES_GeomEntity {
}

class GeomToIGES_GeomVector_1 extends GeomToIGES_GeomVector {}

class GeomToIGES_GeomVector_2 extends GeomToIGES_GeomVector {}

/**
 * This class implements the mapping between classes Axis1Placement from Geom and Ax1 from gp, and the class Axis1Placement from StepGeom which describes an Axis1Placement from Prostep.
 */
class GeomToStep_MakeAxis1Placement extends GeomToStep_Root {
}

class GeomToStep_MakeAxis1Placement_1 extends GeomToStep_MakeAxis1Placement {}

class GeomToStep_MakeAxis1Placement_2 extends GeomToStep_MakeAxis1Placement {}

class GeomToStep_MakeAxis1Placement_3 extends GeomToStep_MakeAxis1Placement {}

class GeomToStep_MakeAxis1Placement_4 extends GeomToStep_MakeAxis1Placement {}

/**
 * This class implements the mapping between classes Axis2Placement from Geom and Ax2, Ax22d from gp, and the class Axis2Placement2d from StepGeom which describes an axis2_placement_2d from Prostep.
 */
class GeomToStep_MakeAxis2Placement2d extends GeomToStep_Root {
}

class GeomToStep_MakeAxis2Placement2d_1 extends GeomToStep_MakeAxis2Placement2d {}

class GeomToStep_MakeAxis2Placement2d_2 extends GeomToStep_MakeAxis2Placement2d {}

/**
 * This class implements the mapping between classes Axis2Placement from Geom and Ax2, Ax3 from gp, and the class Axis2Placement3d from StepGeom which describes an axis2_placement_3d from Prostep.
 */
class GeomToStep_MakeAxis2Placement3d extends GeomToStep_Root {
}

class GeomToStep_MakeAxis2Placement3d_1 extends GeomToStep_MakeAxis2Placement3d {}

class GeomToStep_MakeAxis2Placement3d_2 extends GeomToStep_MakeAxis2Placement3d {}

class GeomToStep_MakeAxis2Placement3d_3 extends GeomToStep_MakeAxis2Placement3d {}

class GeomToStep_MakeAxis2Placement3d_4 extends GeomToStep_MakeAxis2Placement3d {}

class GeomToStep_MakeAxis2Placement3d_5 extends GeomToStep_MakeAxis2Placement3d {}

/**
 * This class implements the mapping between classes BSplineCurve from Geom, Geom2d and the class BSplineCurveWithKnots from StepGeom which describes a bspline_curve_with_knots from Prostep
 */
class GeomToStep_MakeBSplineCurveWithKnots extends GeomToStep_Root {
}

class GeomToStep_MakeBSplineCurveWithKnots_1 extends GeomToStep_MakeBSplineCurveWithKnots {}

class GeomToStep_MakeBSplineCurveWithKnots_2 extends GeomToStep_MakeBSplineCurveWithKnots {}

/**
 * This class implements the mapping between classes BSplineCurve from Geom, Geom2d and the class BSplineCurveWithKnotsAndRationalBSplineCurve from StepGeom which describes a rational_bspline_curve_with_knots from Prostep
 */
class GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve extends GeomToStep_Root {
}

class GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_1 extends GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve {}

class GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_2 extends GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve {}

/**
 * This class implements the mapping between class BSplineSurface from Geom and the class BSplineSurfaceWithKnots from StepGeom which describes a bspline_Surface_with_knots from Prostep
 */
class GeomToStep_MakeBSplineSurfaceWithKnots extends GeomToStep_Root {
}

/**
 * This class implements the mapping between class BSplineSurface from Geom and the class BSplineSurfaceWithKnotsAndRationalBSplineSurface from StepGeom which describes a rational_bspline_Surface_with_knots from Prostep
 */
class GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface extends GeomToStep_Root {
}

/**
 * This class implements the mapping between classes BoundedCurve from Geom, Geom2d and the class BoundedCurve from StepGeom which describes a BoundedCurve from prostep. As BoundedCurve is an abstract BoundedCurve this class is an access to the sub-class required.
 */
class GeomToStep_MakeBoundedCurve extends GeomToStep_Root {
}

class GeomToStep_MakeBoundedCurve_1 extends GeomToStep_MakeBoundedCurve {}

class GeomToStep_MakeBoundedCurve_2 extends GeomToStep_MakeBoundedCurve {}

/**
 * This class implements the mapping between classes BoundedSurface from Geom and the class BoundedSurface from StepGeom which describes a BoundedSurface from prostep. As BoundedSurface is an abstract BoundedSurface this class is an access to the sub-class required.
 */
class GeomToStep_MakeBoundedSurface extends GeomToStep_Root {
}

/**
 * This class implements the mapping between classes CartesianPoint from Geom and Pnt from gp, and the class CartesianPoint from StepGeom which describes a point from Prostep.
 */
class GeomToStep_MakeCartesianPoint extends GeomToStep_Root {
}

class GeomToStep_MakeCartesianPoint_1 extends GeomToStep_MakeCartesianPoint {}

class GeomToStep_MakeCartesianPoint_2 extends GeomToStep_MakeCartesianPoint {}

class GeomToStep_MakeCartesianPoint_3 extends GeomToStep_MakeCartesianPoint {}

class GeomToStep_MakeCartesianPoint_4 extends GeomToStep_MakeCartesianPoint {}

/**
 * This class implements the mapping between classes Circle from Geom, and Circ from gp, and the class Circle from StepGeom which describes a circle from Prostep.
 */
class GeomToStep_MakeCircle extends GeomToStep_Root {
}

class GeomToStep_MakeCircle_1 extends GeomToStep_MakeCircle {}

class GeomToStep_MakeCircle_2 extends GeomToStep_MakeCircle {}

class GeomToStep_MakeCircle_3 extends GeomToStep_MakeCircle {}

/**
 * This class implements the mapping between classes Conic from Geom and the class Conic from StepGeom which describes a Conic from prostep. As Conic is an abstract Conic this class is an access to the sub-class required.
 */
class GeomToStep_MakeConic extends GeomToStep_Root {
}

class GeomToStep_MakeConic_1 extends GeomToStep_MakeConic {}

class GeomToStep_MakeConic_2 extends GeomToStep_MakeConic {}

/**
 * This class implements the mapping between class ConicalSurface from Geom and the class ConicalSurface from StepGeom which describes a conical_surface from Prostep
 */
class GeomToStep_MakeConicalSurface extends GeomToStep_Root {
}

/**
 * This class implements the mapping between classes Curve from Geom and the class Curve from StepGeom which describes a Curve from prostep. As Curve is an abstract curve this class an access to the sub-class required.
 */
class GeomToStep_MakeCurve extends GeomToStep_Root {
}

class GeomToStep_MakeCurve_1 extends GeomToStep_MakeCurve {}

class GeomToStep_MakeCurve_2 extends GeomToStep_MakeCurve {}

/**
 * This class implements the mapping between class CylindricalSurface from Geom and the class CylindricalSurface from StepGeom which describes a cylindrical_surface from Prostep
 */
class GeomToStep_MakeCylindricalSurface extends GeomToStep_Root {
}

/**
 * This class implements the mapping between classes Direction from Geom, Geom2d and Dir, Dir2d from gp, and the class Direction from StepGeom which describes a direction from Prostep.
 */
class GeomToStep_MakeDirection extends GeomToStep_Root {
}

class GeomToStep_MakeDirection_1 extends GeomToStep_MakeDirection {}

class GeomToStep_MakeDirection_2 extends GeomToStep_MakeDirection {}

class GeomToStep_MakeDirection_3 extends GeomToStep_MakeDirection {}

class GeomToStep_MakeDirection_4 extends GeomToStep_MakeDirection {}

/**
 * This class implements the mapping between classes ElementarySurface from Geom and the class ElementarySurface from StepGeom which describes a ElementarySurface from prostep. As ElementarySurface is an abstract Surface this class is an access to the sub-class required.
 */
class GeomToStep_MakeElementarySurface extends GeomToStep_Root {
}

/**
 * This class implements the mapping between classes Ellipse from Geom, and Circ from gp, and the class Ellipse from StepGeom which describes a Ellipse from Prostep.
 */
class GeomToStep_MakeEllipse extends GeomToStep_Root {
}

class GeomToStep_MakeEllipse_1 extends GeomToStep_MakeEllipse {}

class GeomToStep_MakeEllipse_2 extends GeomToStep_MakeEllipse {}

class GeomToStep_MakeEllipse_3 extends GeomToStep_MakeEllipse {}

/**
 * This class implements the mapping between the class Hyperbola from Geom and the class Hyperbola from StepGeom which describes a Hyperbola from ProSTEP
 */
class GeomToStep_MakeHyperbola extends GeomToStep_Root {
}

class GeomToStep_MakeHyperbola_1 extends GeomToStep_MakeHyperbola {}

class GeomToStep_MakeHyperbola_2 extends GeomToStep_MakeHyperbola {}

/**
 * This class implements the mapping between classes Line from Geom and Lin from gp, and the class Line from StepGeom which describes a line from Prostep.
 */
class GeomToStep_MakeLine extends GeomToStep_Root {
}

class GeomToStep_MakeLine_1 extends GeomToStep_MakeLine {}

class GeomToStep_MakeLine_2 extends GeomToStep_MakeLine {}

class GeomToStep_MakeLine_3 extends GeomToStep_MakeLine {}

class GeomToStep_MakeLine_4 extends GeomToStep_MakeLine {}

/**
 * This class implements the mapping between the class Parabola from Geom and the class Parabola from StepGeom which describes a Parabola from ProSTEP
 */
class GeomToStep_MakeParabola extends GeomToStep_Root {
}

class GeomToStep_MakeParabola_1 extends GeomToStep_MakeParabola {}

class GeomToStep_MakeParabola_2 extends GeomToStep_MakeParabola {}

/**
 * This class implements the mapping between classes Plane from Geom and Pln from gp, and the class Plane from StepGeom which describes a plane from Prostep.
 */
class GeomToStep_MakePlane extends GeomToStep_Root {
}

class GeomToStep_MakePlane_1 extends GeomToStep_MakePlane {}

class GeomToStep_MakePlane_2 extends GeomToStep_MakePlane {}

/**
 * This class implements the mapping between an Array1 of points from gp and a Polyline from StepGeom.
 */
class GeomToStep_MakePolyline extends GeomToStep_Root {
}

class GeomToStep_MakePolyline_1 extends GeomToStep_MakePolyline {}

class GeomToStep_MakePolyline_2 extends GeomToStep_MakePolyline {}

/**
 * This class implements the mapping between class RectangularTrimmedSurface from Geom and the class RectangularTrimmedSurface from StepGeom which describes a rectangular_trimmed_surface from ISO-IS 10303-42
 */
class GeomToStep_MakeRectangularTrimmedSurface extends GeomToStep_Root {
}

/**
 * This class implements the mapping between class SphericalSurface from Geom and the class SphericalSurface from StepGeom which describes a spherical_surface from Prostep
 */
class GeomToStep_MakeSphericalSurface extends GeomToStep_Root {
}

/**
 * This class implements the mapping between classes Surface from Geom and the class Surface from StepGeom which describes a Surface from prostep. As Surface is an abstract Surface this class is an access to the sub-class required.
 */
class GeomToStep_MakeSurface extends GeomToStep_Root {
}

/**
 * This class implements the mapping between class SurfaceOfLinearExtrusion from Geom and the class SurfaceOfLinearExtrusion from StepGeom which describes a surface_of_linear_extrusion from Prostep
 */
class GeomToStep_MakeSurfaceOfLinearExtrusion extends GeomToStep_Root {
}

/**
 * This class implements the mapping between class SurfaceOfRevolution from Geom and the class SurfaceOfRevolution from StepGeom which describes a surface_of_revolution from Prostep
 */
class GeomToStep_MakeSurfaceOfRevolution extends GeomToStep_Root {
}

/**
 * This class implements the mapping between classes SweptSurface from Geom and the class SweptSurface from StepGeom which describes a SweptSurface from prostep. As SweptSurface is an abstract SweptSurface this class is an access to the sub-class required.
 */
class GeomToStep_MakeSweptSurface extends GeomToStep_Root {
}

/**
 * This class implements the mapping between class ToroidalSurface from Geom and the class ToroidalSurface from StepGeom which describes a toroidal_surface from Prostep
 */
class GeomToStep_MakeToroidalSurface extends GeomToStep_Root {
}

/**
 * This class implements the mapping between classes Vector from Geom, Geom2d and Vec, Vec2d from gp, and the class Vector from StepGeom which describes a Vector from Prostep.
 */
class GeomToStep_MakeVector extends GeomToStep_Root {
}

class GeomToStep_MakeVector_1 extends GeomToStep_MakeVector {}

class GeomToStep_MakeVector_2 extends GeomToStep_MakeVector {}

class GeomToStep_MakeVector_3 extends GeomToStep_MakeVector {}

class GeomToStep_MakeVector_4 extends GeomToStep_MakeVector {}

/**
 * This class implements the common services for all classes of GeomToStep which report error.
 */
class GeomToStep_Root {
}

/**
 * The GeomTools package provides utilities for Geometry.
 */
class GeomTools {
}

/**
 * Stores a set of Curves from Geom2d.
 */
class GeomTools_Curve2dSet {
}

/**
 * Stores a set of Curves from Geom.
 */
class GeomTools_CurveSet {
}

/**
 * Stores a set of Surfaces from Geom.
 */
class GeomTools_SurfaceSet {
}

/**
 * Describes an axis in 3D space. An axis is defined by: - its origin, also termed the "Location point" of the axis, - its unit vector, termed the "Direction" of the axis. Note: Geom_Axis1Placement axes provide the same kind of "geometric" services as gp_Ax1 axes but have more complex data structures. The geometric objects provided by the Geom package use gp_Ax1 objects to include axes in their data structures, or to define an axis of symmetry or axis of rotation. Geom_Axis1Placement axes are used in a context where they can be shared by several objects contained inside a common data structure.
 */
class Geom_Axis1Placement extends Geom_AxisPlacement {
}

class Geom_Axis1Placement_1 extends Geom_Axis1Placement {}

class Geom_Axis1Placement_2 extends Geom_Axis1Placement {}

/**
 * Describes a right-handed coordinate system in 3D space. A coordinate system is defined by: - its origin, also termed the "Location point" of the coordinate system, - three orthogonal unit vectors, termed respectively the "X Direction", "Y Direction" and "Direction" (or "main Direction") of the coordinate system. As a Geom_Axis2Placement coordinate system is right-handed, its "Direction" is always equal to the cross product of its "X Direction" and "Y Direction". The "Direction" of a coordinate system is called the "main Direction" because when this unit vector is modified, the "X Direction" and "Y Direction" are recomputed, whereas when the "X Direction" or "Y Direction" is changed, the "main Direction" is retained. The "main Direction" is also the "Z Direction". Note: Geom_Axis2Placement coordinate systems provide the same kind of "geometric" services as gp_Ax2 coordinate systems but have more complex data structures. The geometric objects provided by the Geom package use gp_Ax2 objects to include coordinate systems in their data structures, or to define the geometric transformations, which are applied to them. Geom_Axis2Placement coordinate systems are used in a context where they can be shared by several objects contained inside a common data structure.
 */
class Geom_Axis2Placement extends Geom_AxisPlacement {
}

class Geom_Axis2Placement_1 extends Geom_Axis2Placement {}

class Geom_Axis2Placement_2 extends Geom_Axis2Placement {}

/**
 * The abstract class AxisPlacement describes the common behavior of positioning systems in 3D space, such as axis or coordinate systems. The Geom package provides two implementations of 3D positioning systems: - the axis (Geom_Axis1Placement class), which is defined by: - its origin, also termed the "Location point" of the axis, - its unit vector, termed the "Direction" or "main Direction" of the axis; - the right-handed coordinate system (Geom_Axis2Placement class), which is defined by: - its origin, also termed the "Location point" of the coordinate system, - three orthogonal unit vectors, termed respectively the "X Direction", the "Y Direction" and the "Direction" of the coordinate system. As the coordinate system is right-handed, these unit vectors have the following relation: "Direction" = "X Direction" ^ "Y Direction". The "Direction" is also called the "main Direction" because, when the unit vector is modified, the "X Direction" and "Y Direction" are recomputed, whereas when the "X Direction" or "Y Direction" is modified, the "main Direction" does not change. The axis whose origin is the origin of the positioning system and whose unit vector is its "main Direction" is also called the "Axis" or "main Axis" of the positioning system.
 */
class Geom_AxisPlacement extends Geom_Geometry {
}

/**
 * Definition of the B_spline curve. A B-spline curve can be Uniform or non-uniform Rational or non-rational Periodic or non-periodic
 */
class Geom_BSplineCurve extends Geom_BoundedCurve {
}

class Geom_BSplineCurve_1 extends Geom_BSplineCurve {}

class Geom_BSplineCurve_2 extends Geom_BSplineCurve {}

/**
 * Describes a BSpline surface. In each parametric direction, a BSpline surface can be: - uniform or non-uniform, - rational or non-rational, - periodic or non-periodic. A BSpline surface is defined by: - its degrees, in the u and v parametric directions, - its periodic characteristic, in the u and v parametric directions, - a table of poles, also called control points (together with the associated weights if the surface is rational), and - a table of knots, together with the associated multiplicities. The degree of a Geom_BSplineSurface is limited to a value (25) which is defined and controlled by the system. This value is returned by the function MaxDegree. Poles and Weights Poles and Weights are manipulated using two associative double arrays: - the poles table, which is a double array of gp_Pnt points, and - the weights table, which is a double array of reals. The bounds of the poles and weights arrays are: - 1 and NbUPoles for the row bounds (provided that the BSpline surface is not periodic in the u parametric direction), where NbUPoles is the number of poles of the surface in the u parametric direction, and - 1 and NbVPoles for the column bounds (provided that the BSpline surface is not periodic in the v parametric direction), where NbVPoles is the number of poles of the surface in the v parametric direction. The poles of the surface are the points used to shape and reshape the surface. They comprise a rectangular network. If the surface is not periodic: - The points (1, 1), (NbUPoles, 1), (1, NbVPoles), and (NbUPoles, NbVPoles) are the four parametric "corners" of the surface. - The first column of poles and the last column of poles define two BSpline curves which delimit the surface in the v parametric direction. These are the v isoparametric curves corresponding to the two bounds of the v parameter. - The first row of poles and the last row of poles define two BSpline curves which delimit the surface in the u parametric direction. These are the u isoparametric curves corresponding to the two bounds of the u parameter. If the surface is periodic, these geometric properties are not verified. It is more difficult to define a geometrical significance for the weights. However they are useful for representing a quadric surface precisely. Moreover, if the weights of all the poles are equal, the surface has a polynomial equation, and hence is a "non-rational surface". The non-rational surface is a special, but frequently used, case, where all poles have identical weights. The weights are defined and used only in the case of a rational surface. The rational characteristic is defined in each parametric direction. A surface can be rational in the u parametric direction, and non-rational in the v parametric direction. Knots and Multiplicities For a Geom_BSplineSurface the table of knots is made up of two increasing sequences of reals, without repetition, one for each parametric direction. The multiplicities define the repetition of the knots. A BSpline surface comprises multiple contiguous patches, which are themselves polynomial or rational surfaces. The knots are the parameters of the isoparametric curves which limit these contiguous patches. The multiplicity of a knot on a BSpline surface (in a given parametric direction) is related to the degree of continuity of the surface at that knot in that parametric direction: Degree of continuity at knot(i) = Degree - Multi(i) where: - Degree is the degree of the BSpline surface in the given parametric direction, and - Multi(i) is the multiplicity of knot number i in the given parametric direction. There are some special cases, where the knots are regularly spaced in one parametric direction (i.e. the difference between two consecutive knots is a constant). - "Uniform": all the multiplicities are equal to 1. - "Quasi-uniform": all the multiplicities are equal to 1, except for the first and last knots in this parametric direction, and these are equal to Degree + 1. - "Piecewise Bezier": all the multiplicities are equal to Degree except for the first and last knots, which are equal to Degree + 1. This surface is a concatenation of Bezier patches in the given parametric direction. If the BSpline surface is not periodic in a given parametric direction, the bounds of the knots and multiplicities tables are 1 and NbKnots, where NbKnots is the number of knots of the BSpline surface in that parametric direction. If the BSpline surface is periodic in a given parametric direction, and there are k periodic knots and p periodic poles in that parametric direction: - the period is such that: period = Knot(k+1) - Knot(1), and - the poles and knots tables in that parametric direction can be considered as infinite tables, such that: Knot(i+k) = Knot(i) + period, and Pole(i+p) = Pole(i) Note: The data structure tables for a periodic BSpline surface are more complex than those of a non-periodic one. References : . A survey of curve and surface methods in CADG Wolfgang BOHM CAGD 1 (1984) . On de Boor-like algorithms and blossoming Wolfgang BOEHM cagd 5 (1988) . Blossoming and knot insertion algorithms for B-spline curves Ronald N. GOLDMAN . Modelisation des surfaces en CAO, Henri GIAUME Peugeot SA . Curves and Surfaces for Computer Aided Geometric Design, a practical guide Gerald Farin
 */
class Geom_BSplineSurface extends Geom_BoundedSurface {
}

class Geom_BSplineSurface_1 extends Geom_BSplineSurface {}

class Geom_BSplineSurface_2 extends Geom_BSplineSurface {}

/**
 * Describes a rational or non-rational Bezier curve - a non-rational Bezier curve is defined by a table of poles (also called control points), - a rational Bezier curve is defined by a table of poles with varying weights. These data are manipulated by two parallel arrays: - the poles table, which is an array of gp_Pnt points, and - the weights table, which is an array of reals. The bounds of these arrays are 1 and "the number of "poles" of the curve. The poles of the curve are "control points" used to deform the curve. The first pole is the start point of the curve, and the last pole is the end point of the curve. The segment that joins the first pole to the second pole is the tangent to the curve at its start point, and the segment that joins the last pole to the second-from-last pole is the tangent to the curve at its end point. It is more difficult to give a geometric signification to the weights but they are useful for providing the exact representations of arcs of a circle or ellipse. Moreover, if the weights of all poles are equal, the curve is polynomial; it is therefore a non-rational curve. The non-rational curve is a special and frequently used case. The weights are defined and used only in the case of a rational curve. The degree of a Bezier curve is equal to the number of poles, minus 1. It must be greater than or equal to 1. However, the degree of a Geom_BezierCurve curve is limited to a value (25) which is defined and controlled by the system. This value is returned by the function MaxDegree. The parameter range for a Bezier curve is [ 0, 1 ]. If the first and last control points of the Bezier curve are the same point then the curve is closed. For example, to create a closed Bezier curve with four control points, you have to give the set of control points P1, P2, P3 and P1. The continuity of a Bezier curve is infinite. It is not possible to build a Bezier curve with negative weights. We consider that a weight value is zero if it is less than or equal to gp::Resolution(). We also consider that two weight values W1 and W2 are equal if: |W2 - W1| <= gp::Resolution(). Warning - When considering the continuity of a closed Bezier curve at the junction point, remember that a curve of this type is never periodic. This means that the derivatives for the parameter u = 0 have no reason to be the same as the derivatives for the parameter u = 1 even if the curve is closed. - The length of a Bezier curve can be null.
 */
class Geom_BezierCurve extends Geom_BoundedCurve {
}

class Geom_BezierCurve_1 extends Geom_BezierCurve {}

class Geom_BezierCurve_2 extends Geom_BezierCurve {}

/**
 * Describes a rational or non-rational Bezier surface. - A non-rational Bezier surface is defined by a table of poles (also known as control points). - A rational Bezier surface is defined by a table of poles with varying associated weights. This data is manipulated using two associative 2D arrays: - the poles table, which is a 2D array of gp_Pnt, and - the weights table, which is a 2D array of reals. The bounds of these arrays are: - 1 and NbUPoles for the row bounds, where NbUPoles is the number of poles of the surface in the u parametric direction, and - 1 and NbVPoles for the column bounds, where NbVPoles is the number of poles of the surface in the v parametric direction. The poles of the surface, the "control points", are the points used to shape and reshape the surface. They comprise a rectangular network of points: - The points (1, 1), (NbUPoles, 1), (1, NbVPoles) and (NbUPoles, NbVPoles) are the four parametric "corners" of the surface. - The first column of poles and the last column of poles define two Bezier curves which delimit the surface in the v parametric direction. These are the v isoparametric curves corresponding to values 0 and 1 of the v parameter. - The first row of poles and the last row of poles define two Bezier curves which delimit the surface in the u parametric direction. These are the u isoparametric curves corresponding to values 0 and 1 of the u parameter. It is more difficult to define a geometrical significance for the weights. However they are useful for representing a quadric surface precisely. Moreover, if the weights of all the poles are equal, the surface has a polynomial equation, and hence is a "non-rational surface". The non-rational surface is a special, but frequently used, case, where all poles have identical weights. The weights are defined and used only in the case of a rational surface. This rational characteristic is defined in each parametric direction. Hence, a surface can be rational in the u parametric direction, and non-rational in the v parametric direction. Likewise, the degree of a surface is defined in each parametric direction. The degree of a Bezier surface in a given parametric direction is equal to the number of poles of the surface in that parametric direction, minus 1. This must be greater than or equal to 1. However, the degree for a Geom_BezierSurface is limited to a value of (25) which is defined and controlled by the system. This value is returned by the function MaxDegree. The parameter range for a Bezier surface is [ 0, 1 ] in the two parametric directions. A Bezier surface can also be closed, or open, in each parametric direction. If the first row of poles is identical to the last row of poles, the surface is closed in the u parametric direction. If the first column of poles is identical to the last column of poles, the surface is closed in the v parametric direction. The continuity of a Bezier surface is infinite in the u parametric direction and the in v parametric direction. Note: It is not possible to build a Bezier surface with negative weights. Any weight value that is less than, or equal to, gp::Resolution() is considered to be zero. Two weight values, W1 and W2, are considered equal if: |W2-W1| <= gp::Resolution()
 */
class Geom_BezierSurface extends Geom_BoundedSurface {
}

class Geom_BezierSurface_1 extends Geom_BezierSurface {}

class Geom_BezierSurface_2 extends Geom_BezierSurface {}

/**
 * The abstract class BoundedCurve describes the common behavior of bounded curves in 3D space. A bounded curve is limited by two finite values of the parameter, termed respectively "first parameter" and "last parameter". The "first parameter" gives the "start point" of the bounded curve, and the "last parameter" gives the "end point" of the bounded curve. The length of a bounded curve is finite. The Geom package provides three concrete classes of bounded curves: - two frequently used mathematical formulations of complex curves: - Geom_BezierCurve, - Geom_BSplineCurve, and - Geom_TrimmedCurve to trim a curve, i.e. to only take part of the curve limited by two values of the parameter of the basis curve.
 */
class Geom_BoundedCurve extends Geom_Curve {
}

/**
 * The root class for bounded surfaces in 3D space. A bounded surface is defined by a rectangle in its 2D parametric space, i.e. - its u parameter, which ranges between two finite values u0 and u1, referred to as "First u parameter" and "Last u parameter" respectively, and - its v parameter, which ranges between two finite values v0 and v1, referred to as "First v parameter" and the "Last v parameter" respectively. The surface is limited by four curves which are the boundaries of the surface: - its u0 and u1 isoparametric curves in the u parametric direction, and - its v0 and v1 isoparametric curves in the v parametric direction. A bounded surface is finite. The common behavior of all bounded surfaces is described by the Geom_Surface class. The Geom package provides three concrete implementations of bounded surfaces: - Geom_BezierSurface, - Geom_BSplineSurface, and - Geom_RectangularTrimmedSurface. The first two of these implement well known mathematical definitions of complex surfaces, the third trims a surface using four isoparametric curves, i.e. it limits the variation of its parameters to a rectangle in 2D parametric space.
 */
class Geom_BoundedSurface extends Geom_Surface {
}

/**
 * Describes a point in 3D space. A Geom_CartesianPoint is defined by a gp_Pnt point, with its three Cartesian coordinates X, Y and Z.
 */
class Geom_CartesianPoint extends Geom_Point {
}

class Geom_CartesianPoint_1 extends Geom_CartesianPoint {}

class Geom_CartesianPoint_2 extends Geom_CartesianPoint {}

/**
 * Describes a circle in 3D space. A circle is defined by its radius and, as with any conic curve, is positioned in space with a right-handed coordinate system (gp_Ax2 object) where: - the origin is the center of the circle, and - the origin, "X Direction" and "Y Direction" define the plane of the circle. This coordinate system is the local coordinate system of the circle. The "main Direction" of this coordinate system is the vector normal to the plane of the circle. The axis, of which the origin and unit vector are respectively the origin and "main Direction" of the local coordinate system, is termed the "Axis" or "main Axis" of the circle. The "main Direction" of the local coordinate system gives an explicit orientation to the circle (definition of the trigonometric sense), determining the direction in which the parameter increases along the circle. The Geom_Circle circle is parameterized by an angle: P(U) = O + R*Cos(U)*XDir + R*Sin(U)*YDir, where: - P is the point of parameter U, - O, XDir and YDir are respectively the origin, "X Direction" and "Y Direction" of its local coordinate system, - R is the radius of the circle. The "X Axis" of the local coordinate system therefore defines the origin of the parameter of the circle. The parameter is the angle with this "X Direction". A circle is a closed and periodic curve. The period is 2.*Pi and the parameter range is [ 0, 2.*Pi [.
 */
class Geom_Circle extends Geom_Conic {
}

class Geom_Circle_1 extends Geom_Circle {}

class Geom_Circle_2 extends Geom_Circle {}

/**
 * The abstract class Conic describes the common behavior of conic curves in 3D space and, in particular, their general characteristics. The Geom package provides four concrete classes of conics: Geom_Circle, Geom_Ellipse, Geom_Hyperbola and Geom_Parabola. A conic is positioned in space with a right-handed coordinate system (gp_Ax2 object), where: - the origin is the center of the conic (or the apex in the case of a parabola), - the origin, "X Direction" and "Y Direction" define the plane of the conic. This coordinate system is the local coordinate system of the conic. The "main Direction" of this coordinate system is the vector normal to the plane of the conic. The axis, of which the origin and unit vector are respectively the origin and "main Direction" of the local coordinate system, is termed the "Axis" or "main Axis" of the conic. The "main Direction" of the local coordinate system gives an explicit orientation to the conic, determining the direction in which the parameter increases along the conic. The "X Axis" of the local coordinate system also defines the origin of the parameter of the conic.
 */
class Geom_Conic extends Geom_Curve {
}

/**
 * Describes a cone. A cone is defined by the half-angle (can be negative) at its apex, and is positioned in space by a coordinate system (a gp_Ax3 object) and a reference radius as follows: - The "main Axis" of the coordinate system is the axis of revolution of the cone. - The plane defined by the origin, the "X Direction" and the "Y Direction" of the coordinate system is the reference plane of the cone. The intersection of the cone with this reference plane is a circle of radius equal to the reference radius. - The apex of the cone is on the negative side of the "main Axis" of the coordinate system if the half-angle is positive, and on the positive side if the half-angle is negative. This coordinate system is the "local coordinate system" of the cone. The following apply: - Rotation around its "main Axis", in the trigonometric sense given by the "X Direction" and the "Y Direction", defines the u parametric direction. - Its "X Axis" gives the origin for the u parameter. - Its "main Direction" is the v parametric direction of the cone. - Its origin is the origin of the v parameter. The parametric range of the two parameters is: - [ 0, 2.*Pi ] for u, and - ] -infinity, +infinity [ for v The parametric equation of the cone is: P(u, v) = O + (R + v*sin(Ang)) * (cos(u)*XDir + sin(u)*YDir) + v*cos(Ang)*ZDir where: - O, XDir, YDir and ZDir are respectively the origin, the "X Direction", the "Y Direction" and the "Z Direction" of the cone's local coordinate system, - Ang is the half-angle at the apex of the cone, and - R is the reference radius.
 */
class Geom_ConicalSurface extends Geom_ElementarySurface {
}

class Geom_ConicalSurface_1 extends Geom_ConicalSurface {}

class Geom_ConicalSurface_2 extends Geom_ConicalSurface {}

/**
 * The abstract class Curve describes the common behavior of curves in 3D space. The Geom package provides numerous concrete classes of derived curves, including lines, circles, conics, Bezier or BSpline curves, etc. The main characteristic of these curves is that they are parameterized. The Geom_Curve class shows: - how to work with the parametric equation of a curve in order to calculate the point of parameter u, together with the vector tangent and the derivative vectors of order 2, 3,..., N at this point; - how to obtain general information about the curve (for example, level of continuity, closed characteristics, periodicity, bounds of the parameter field); - how the parameter changes when a geometric transformation is applied to the curve or when the orientation of the curve is inverted. All curves must have a geometric continuity: a curve is at least "C0". Generally, this property is checked at the time of construction or when the curve is edited. Where this is not the case, the documentation states so explicitly. Warning The Geom package does not prevent the construction of curves with null length or curves which self-intersect.
 */
class Geom_Curve extends Geom_Geometry {
}

/**
 * This class defines the infinite cylindrical surface.
 */
class Geom_CylindricalSurface extends Geom_ElementarySurface {
}

class Geom_CylindricalSurface_1 extends Geom_CylindricalSurface {}

class Geom_CylindricalSurface_2 extends Geom_CylindricalSurface {}

/**
 * The class Direction specifies a vector that is never null. It is a unit vector.
 */
class Geom_Direction extends Geom_Vector {
}

class Geom_Direction_1 extends Geom_Direction {}

class Geom_Direction_2 extends Geom_Direction {}

/**
 * Describes the common behavior of surfaces which have a simple parametric equation in a local coordinate system. The Geom package provides several implementations of concrete elementary surfaces: - the plane, and - four simple surfaces of revolution: the cylinder, the cone, the sphere and the torus. An elementary surface inherits the common behavior of Geom_Surface surfaces. Furthermore, it is located in 3D space by a coordinate system (a gp_Ax3 object) which is also its local coordinate system. Any elementary surface is oriented, i.e. the normal vector is always defined, and gives the same orientation to the surface, at any point on the surface. In topology this property is referred to as the "outside region of the surface". This orientation is related to the two parametric directions of the surface. Rotation of a surface around the "main Axis" of its coordinate system, in the trigonometric sense given by the "X Direction" and the "Y Direction" of the coordinate system, defines the u parametric direction of that elementary surface of revolution. This is the default construction mode. It is also possible, however, to change the orientation of a surface by reversing one of the two parametric directions: use the UReverse or VReverse functions to change the orientation of the normal at any point on the surface. Warning The local coordinate system of an elementary surface is not necessarily direct: - if it is direct, the trigonometric sense defined by its "main Direction" is the same as the trigonometric sense defined by its two vectors "X Direction" and "Y Direction": "main Direction" = "X Direction" ^ "Y Direction" - if it is indirect, the two definitions of trigonometric sense are opposite: "main Direction" = - "X Direction" ^ "Y Direction"
 */
class Geom_ElementarySurface extends Geom_Surface {
}

/**
 * Describes an ellipse in 3D space. An ellipse is defined by its major and minor radii and, as with any conic curve, is positioned in space with a right-handed coordinate system (gp_Ax2 object) where: - the origin is the center of the ellipse, - the "X Direction" defines the major axis, and - the "Y Direction" defines the minor axis. The origin, "X Direction" and "Y Direction" of this coordinate system define the plane of the ellipse. The coordinate system is the local coordinate system of the ellipse. The "main Direction" of this coordinate system is the vector normal to the plane of the ellipse. The axis, of which the origin and unit vector are respectively the origin and "main Direction" of the local coordinate system, is termed the "Axis" or "main Axis" of the ellipse. The "main Direction" of the local coordinate system gives an explicit orientation to the ellipse (definition of the trigonometric sense), determining the direction in which the parameter increases along the ellipse. The Geom_Ellipse ellipse is parameterized by an angle: P(U) = O + MajorRad*Cos(U)*XDir + MinorRad*Sin(U)*YDir where: - P is the point of parameter U, - O, XDir and YDir are respectively the origin, "X Direction" and "Y Direction" of its local coordinate system, - MajorRad and MinorRad are the major and minor radii of the ellipse. The "X Axis" of the local coordinate system therefore defines the origin of the parameter of the ellipse. An ellipse is a closed and periodic curve. The period is 2.*Pi and the parameter range is [ 0, 2.*Pi [.
 */
class Geom_Ellipse extends Geom_Conic {
}

class Geom_Ellipse_1 extends Geom_Ellipse {}

class Geom_Ellipse_2 extends Geom_Ellipse {}

/**
 * The abstract class Geometry for 3D space is the root class of all geometric objects from the Geom package. It describes the common behavior of these objects when: - applying geometric transformations to objects, and - constructing objects by geometric transformation (including copying). Warning Only transformations which do not modify the nature of the geometry can be applied to Geom objects: this is the case with translations, rotations, symmetries and scales; this is also the case with gp_Trsf composite transformations which are used to define the geometric transformations applied using the Transform or Transformed functions. Note: Geometry defines the "prototype" of the abstract method Transform which is defined for each concrete type of derived object. All other transformations are implemented using the Transform method.
 */
class Geom_Geometry extends Standard_Transient {
}

/**
 * Describes a branch of a hyperbola in 3D space. A hyperbola is defined by its major and minor radii and, as with any conic curve, is positioned in space with a right-handed coordinate system (gp_Ax2 object) where: - the origin is the center of the hyperbola, - the "X Direction" defines the major axis, and - the "Y Direction" defines the minor axis. The origin, "X Direction" and "Y Direction" of this coordinate system define the plane of the hyperbola. The coordinate system is the local coordinate system of the hyperbola. The branch of the hyperbola described is the one located on the positive side of the major axis. The "main Direction" of the local coordinate system is a vector normal to the plane of the hyperbola. The axis, of which the origin and unit vector are respectively the origin and "main Direction" of the local coordinate system, is termed the "Axis" or "main Axis" of the hyperbola. The "main Direction" of the local coordinate system gives an explicit orientation to the hyperbola, determining the direction in which the parameter increases along the hyperbola. The Geom_Hyperbola hyperbola is parameterized as follows: P(U) = O + MajRad*Cosh(U)*XDir + MinRad*Sinh(U)*YDir, where: - P is the point of parameter U, - O, XDir and YDir are respectively the origin, "X Direction" and "Y Direction" of its local coordinate system, - MajRad and MinRad are the major and minor radii of the hyperbola. The "X Axis" of the local coordinate system therefore defines the origin of the parameter of the hyperbola. The parameter range is ] -infinite, +infinite [. The following diagram illustrates the respective positions, in the plane of the hyperbola, of the three branches of hyperbolas constructed using the functions OtherBranch, ConjugateBranch1 and ConjugateBranch2: Defines the main branch of an hyperbola. ^YAxis | FirstConjugateBranch | Other | Main --------------------- C ------------------------------>XAxis Branch | Branch | SecondConjugateBranch | Warning The value of the major radius (on the major axis) can be less than the value of the minor radius (on the minor axis).
 */
class Geom_Hyperbola extends Geom_Conic {
}

class Geom_Hyperbola_1 extends Geom_Hyperbola {}

class Geom_Hyperbola_2 extends Geom_Hyperbola {}

/**
 * Describes an infinite line. A line is defined and positioned in space with an axis (gp_Ax1 object) which gives it an origin and a unit vector. The Geom_Line line is parameterized: P (U) = O + U*Dir, where: - P is the point of parameter U, - O is the origin and Dir the unit vector of its positioning axis. The parameter range is ] -infinite, +infinite [. The orientation of the line is given by the unit vector of its positioning axis.
 */
class Geom_Line extends Geom_Curve {
}

class Geom_Line_1 extends Geom_Line {}

class Geom_Line_2 extends Geom_Line {}

class Geom_Line_3 extends Geom_Line {}

/**
 * This class implements the basis services for an offset curve in 3D space. The Offset curve in this package can be a self intersecting curve even if the basis curve does not self-intersect. The self intersecting portions are not deleted at the construction time. An offset curve is a curve at constant distance (Offset) from a basis curve in a reference direction V. The offset curve takes its parametrization from the basis curve. The Offset curve is in the direction of the normal N defined with the cross product T^V, where the vector T is given by the first derivative on the basis curve with non zero length. The distance offset may be positive or negative to indicate the preferred side of the curve : . distance offset >0 => the curve is in the direction of N . distance offset <0 => the curve is in the direction of - N
 */
class Geom_OffsetCurve extends Geom_Curve {
}

/**
 * Describes an offset surface in 3D space. An offset surface is defined by: - the basis surface to which it is parallel, and - the distance between the offset surface and its basis surface. A point on the offset surface is built by measuring the offset value along the normal vector at a point on the basis surface. This normal vector is given by the cross product D1u^D1v, where D1u and D1v are the vectors tangential to the basis surface in the u and v parametric directions at this point. The side of the basis surface on which the offset is measured depends on the sign of the offset value. A Geom_OffsetSurface surface can be self-intersecting, even if the basis surface does not self-intersect. The self-intersecting portions are not deleted at the time of construction. Warning There must be only one normal vector defined at any point on the basis surface. This must be verified by the user as no check is made at the time of construction to detect points with multiple possible normal directions (for example, the top of a conical surface).
 */
class Geom_OffsetSurface extends Geom_Surface {
}

class Geom_OsculatingSurface extends Standard_Transient {
}

class Geom_OsculatingSurface_1 extends Geom_OsculatingSurface {}

class Geom_OsculatingSurface_2 extends Geom_OsculatingSurface {}

/**
 * Describes a parabola in 3D space. A parabola is defined by its focal length (i.e. the distance between its focus and its apex) and is positioned in space with a coordinate system (gp_Ax2 object) where: - the origin is the apex of the parabola, - the "X Axis" defines the axis of symmetry; the parabola is on the positive side of this axis, - the origin, "X Direction" and "Y Direction" define the plane of the parabola. This coordinate system is the local coordinate system of the parabola. The "main Direction" of this coordinate system is a vector normal to the plane of the parabola. The axis, of which the origin and unit vector are respectively the origin and "main Direction" of the local coordinate system, is termed the "Axis" or "main Axis" of the parabola. The "main Direction" of the local coordinate system gives an explicit orientation to the parabola, determining the direction in which the parameter increases along the parabola. The Geom_Parabola parabola is parameterized as follows: P(U) = O + U*U/(4.*F)*XDir + U*YDir where: - P is the point of parameter U, - O, XDir and YDir are respectively the origin, "X Direction" and "Y Direction" of its local coordinate system, - F is the focal length of the parabola. The parameter of the parabola is therefore its Y coordinate in the local coordinate system, with the "X Axis" of the local coordinate system defining the origin of the parameter. The parameter range is ] -infinite, +infinite [.
 */
class Geom_Parabola extends Geom_Conic {
}

class Geom_Parabola_1 extends Geom_Parabola {}

class Geom_Parabola_2 extends Geom_Parabola {}

class Geom_Parabola_3 extends Geom_Parabola {}

/**
 * Describes a plane in 3D space. A plane is positioned in space by a coordinate system (a gp_Ax3 object) such that the plane is defined by the origin, "X Direction" and "Y Direction" of this coordinate system. This coordinate system is the "local coordinate system" of the plane. The following apply: - Its "X Direction" and "Y Direction" are respectively the u and v parametric directions of the plane. - Its origin is the origin of the u and v parameters (also called the "origin" of the plane). - Its "main Direction" is a vector normal to the plane. This normal vector gives the orientation of the plane only if the local coordinate system is "direct". (The orientation of the plane is always defined by the "X Direction" and the "Y Direction" of its local coordinate system.) The parametric equation of the plane is: P(u, v) = O + u*XDir + v*YDir where O, XDir and YDir are respectively the origin, the "X Direction" and the "Y Direction" of the local coordinate system of the plane. The parametric range of the two parameters u and v is ] -infinity, +infinity [.
 */
class Geom_Plane extends Geom_ElementarySurface {
}

class Geom_Plane_1 extends Geom_Plane {}

class Geom_Plane_2 extends Geom_Plane {}

class Geom_Plane_3 extends Geom_Plane {}

class Geom_Plane_4 extends Geom_Plane {}

/**
 * The abstract class Point describes the common behavior of geometric points in 3D space. The Geom package also provides the concrete class Geom_CartesianPoint.
 */
class Geom_Point extends Geom_Geometry {
}

/**
 * Describes a portion of a surface (a patch) limited by two values of the u parameter in the u parametric direction, and two values of the v parameter in the v parametric direction. The domain of the trimmed surface must be within the domain of the surface being trimmed. The trimmed surface is defined by: - the basis surface, and - the values (umin, umax) and (vmin, vmax) which limit it in the u and v parametric directions. The trimmed surface is built from a copy of the basis surface. Therefore, when the basis surface is modified the trimmed surface is not changed. Consequently, the trimmed surface does not necessarily have the same orientation as the basis surface. Warning: The case of surface being trimmed is periodic and parametrics values are outside the domain is possible. But, domain of the trimmed surface can be translated by (n X) the period.
 */
class Geom_RectangularTrimmedSurface extends Geom_BoundedSurface {
}

class Geom_RectangularTrimmedSurface_1 extends Geom_RectangularTrimmedSurface {}

class Geom_RectangularTrimmedSurface_2 extends Geom_RectangularTrimmedSurface {}

/**
 * Describes a sphere. A sphere is defined by its radius, and is positioned in space by a coordinate system (a gp_Ax3 object), the origin of which is the center of the sphere. This coordinate system is the "local coordinate system" of the sphere. The following apply: - Rotation around its "main Axis", in the trigonometric sense given by the "X Direction" and the "Y Direction", defines the u parametric direction. - Its "X Axis" gives the origin for the u parameter. - The "reference meridian" of the sphere is a half-circle, of radius equal to the radius of the sphere. It is located in the plane defined by the origin, "X Direction" and "main Direction", centered on the origin, and positioned on the positive side of the "X Axis". - Rotation around the "Y Axis" gives the v parameter on the reference meridian. - The "X Axis" gives the origin of the v parameter on the reference meridian. - The v parametric direction is oriented by the "main Direction", i.e. when v increases, the Z coordinate increases. (This implies that the "Y Direction" orients the reference meridian only when the local coordinate system is indirect.) - The u isoparametric curve is a half-circle obtained by rotating the reference meridian of the sphere through an angle u around the "main Axis", in the trigonometric sense defined by the "X Direction" and the "Y Direction". The parametric equation of the sphere is: P(u,v) = O + R*cos(v)*(cos(u)*XDir + sin(u)*YDir)+R*sin(v)*ZDir where: - O, XDir, YDir and ZDir are respectively the origin, the "X Direction", the "Y Direction" and the "Z Direction" of its local coordinate system, and - R is the radius of the sphere. The parametric range of the two parameters is: - [ 0, 2.*Pi ] for u, and - [ - Pi/2., + Pi/2. ] for v.
 */
class Geom_SphericalSurface extends Geom_ElementarySurface {
}

class Geom_SphericalSurface_1 extends Geom_SphericalSurface {}

class Geom_SphericalSurface_2 extends Geom_SphericalSurface {}

/**
 * Describes the common behavior of surfaces in 3D space. The Geom package provides many implementations of concrete derived surfaces, such as planes, cylinders, cones, spheres and tori, surfaces of linear extrusion, surfaces of revolution, Bezier and BSpline surfaces, and so on. The key characteristic of these surfaces is that they are parameterized. Geom_Surface demonstrates: - how to work with the parametric equation of a surface to compute the point of parameters (u, v), and, at this point, the 1st, 2nd ... Nth derivative, - how to find global information about a surface in each parametric direction (for example, level of continuity, whether the surface is closed, its periodicity, the bounds of the parameters and so on), and - how the parameters change when geometric transformations are applied to the surface, or the orientation is modified. Note that all surfaces must have a geometric continuity, and any surface is at least "C0". Generally, continuity is checked at construction time or when the curve is edited. Where this is not the case, the documentation makes this explicit. Warning The Geom package does not prevent the construction of surfaces with null areas, or surfaces which self-intersect.
 */
class Geom_Surface extends Geom_Geometry {
}

/**
 * Describes a surface of linear extrusion ("extruded surface"), e.g. a generalized cylinder. Such a surface is obtained by sweeping a curve (called the "extruded curve" or "basis") in a given direction (referred to as the "direction of extrusion" and defined by a unit vector). The u parameter is along the extruded curve. The v parameter is along the direction of extrusion. The parameter range for the u parameter is defined by the reference curve. The parameter range for the v parameter is ] - infinity, + infinity [. The position of the curve gives the origin of the v parameter. The surface is "CN" in the v parametric direction. The form of a surface of linear extrusion is generally a ruled surface (GeomAbs_RuledForm). It can be: - a cylindrical surface, if the extruded curve is a circle, or a trimmed circle, with an axis parallel to the direction of extrusion (GeomAbs_CylindricalForm), or - a planar surface, if the extruded curve is a line (GeomAbs_PlanarForm). Note: The surface of extrusion is built from a copy of the original basis curve, so the original curve is not modified when the surface is modified. Warning Degenerate surfaces are not detected. A degenerate surface is obtained, for example, when the extruded curve is a line and the direction of extrusion is parallel to that line.
 */
class Geom_SurfaceOfLinearExtrusion extends Geom_SweptSurface {
}

/**
 * Describes a surface of revolution (revolved surface). Such a surface is obtained by rotating a curve (called the "meridian") through a complete revolution about an axis (referred to as the "axis of revolution"). The curve and the axis must be in the same plane (the "reference plane" of the surface). Rotation around the axis of revolution in the trigonometric sense defines the u parametric direction. So the u parameter is an angle, and its origin is given by the position of the meridian on the surface. The parametric range for the u parameter is: [ 0, 2.*Pi ] The v parameter is that of the meridian. Note: A surface of revolution is built from a copy of the original meridian. As a result the original meridian is not modified when the surface is modified. The form of a surface of revolution is typically a general revolution surface (GeomAbs_RevolutionForm). It can be: - a conical surface, if the meridian is a line or a trimmed line (GeomAbs_ConicalForm), - a cylindrical surface, if the meridian is a line or a trimmed line parallel to the axis of revolution (GeomAbs_CylindricalForm), - a planar surface if the meridian is a line or a trimmed line perpendicular to the axis of revolution of the surface (GeomAbs_PlanarForm), - a toroidal surface, if the meridian is a circle or a trimmed circle (GeomAbs_ToroidalForm), or - a spherical surface, if the meridian is a circle, the center of which is located on the axis of the revolved surface (GeomAbs_SphericalForm). Warning Be careful not to construct a surface of revolution where the curve and the axis or revolution are not defined in the same plane. If you do not have a correct configuration, you can correct your initial curve, using a cylindrical projection in the reference plane.
 */
class Geom_SurfaceOfRevolution extends Geom_SweptSurface {
}

/**
 * Describes the common behavior for surfaces constructed by sweeping a curve with another curve. The Geom package provides two concrete derived surfaces: surface of revolution (a revolved surface), and surface of linear extrusion (an extruded surface).
 */
class Geom_SweptSurface extends Geom_Surface {
}

/**
 * Describes a torus. A torus is defined by its major and minor radii, and positioned in space with a coordinate system (a gp_Ax3 object) as follows: - The origin is the center of the torus. - The surface is obtained by rotating a circle around the "main Direction". This circle has a radius equal to the minor radius, and is located in the plane defined by the origin, "X Direction" and "main Direction". It is centered on the "X Axis", on its positive side, and positioned at a distance from the origin equal to the major radius. This circle is the "reference circle" of the torus. - The plane defined by the origin, the "X Direction" and the "Y Direction" is called the "reference plane" of the torus. This coordinate system is the "local coordinate system" of the torus. The following apply: - Rotation around its "main Axis", in the trigonometric sense given by "X Direction" and "Y Direction", defines the u parametric direction. - The "X Axis" gives the origin for the u parameter. - Rotation around an axis parallel to the "Y Axis" and passing through the center of the "reference circle" gives the v parameter on the "reference circle". - The "X Axis" gives the origin of the v parameter on the "reference circle". - The v parametric direction is oriented by the inverse of the "main Direction", i.e. near 0, as v increases, the Z coordinate decreases. (This implies that the "Y Direction" orients the reference circle only when the local coordinate system is direct.) - The u isoparametric curve is a circle obtained by rotating the "reference circle" of the torus through an angle u about the "main Axis". The parametric equation of the torus is : P(u, v) = O + (R + r*cos(v)) * (cos(u)*XDir + sin(u)*YDir ) + r*sin(v)*ZDir, where: - O, XDir, YDir and ZDir are respectively the origin, the "X Direction", the "Y Direction" and the "Z Direction" of the local coordinate system, - r and R are, respectively, the minor and major radius. The parametric range of the two parameters is: - [ 0, 2.*Pi ] for u - [ 0, 2.*Pi ] for v
 */
class Geom_ToroidalSurface extends Geom_ElementarySurface {
}

class Geom_ToroidalSurface_1 extends Geom_ToroidalSurface {}

class Geom_ToroidalSurface_2 extends Geom_ToroidalSurface {}

/**
 * Describes how to construct the following elementary transformations - translations, - rotations, - symmetries, - scales. The Transformation class can also be used to construct complex transformations by combining these elementary transformations. However, these transformations can never change the type of an object. For example, the projection transformation can change a circle into an ellipse, and therefore change the real type of the object. Such a transformation is forbidden in this environment and cannot be a Geom_Transformation. The transformation can be represented as follow :
 */
class Geom_Transformation extends Standard_Transient {
}

class Geom_Transformation_1 extends Geom_Transformation {}

class Geom_Transformation_2 extends Geom_Transformation {}

/**
 * Describes a portion of a curve (termed the "basis curve") limited by two parameter values inside the parametric domain of the basis curve. The trimmed curve is defined by: - the basis curve, and - the two parameter values which limit it. The trimmed curve can either have the same orientation as the basis curve or the opposite orientation.
 */
class Geom_TrimmedCurve extends Geom_BoundedCurve {
}

class Geom_UndefinedDerivative extends Standard_DomainError {
}

class Geom_UndefinedDerivative_1 extends Geom_UndefinedDerivative {}

class Geom_UndefinedDerivative_2 extends Geom_UndefinedDerivative {}

class Geom_UndefinedValue extends Standard_DomainError {
}

class Geom_UndefinedValue_1 extends Geom_UndefinedValue {}

class Geom_UndefinedValue_2 extends Geom_UndefinedValue {}

/**
 * The abstract class Vector describes the common behavior of vectors in 3D space. The Geom package provides two concrete classes of vectors: Geom_Direction (unit vector) and Geom_VectorWithMagnitude.
 */
class Geom_Vector extends Geom_Geometry {
}

/**
 * Defines a vector with magnitude. A vector with magnitude can have a zero length.
 */
class Geom_VectorWithMagnitude extends Geom_Vector {
}

class Geom_VectorWithMagnitude_1 extends Geom_VectorWithMagnitude {}

class Geom_VectorWithMagnitude_2 extends Geom_VectorWithMagnitude {}

class Geom_VectorWithMagnitude_3 extends Geom_VectorWithMagnitude {}

/**
 * Contains points array definition.
 */
class Graphic3d_ArrayOfPoints extends Graphic3d_ArrayOfPrimitives {
}

class Graphic3d_ArrayOfPoints_1 extends Graphic3d_ArrayOfPoints {}

class Graphic3d_ArrayOfPoints_2 extends Graphic3d_ArrayOfPoints {}

/**
 * Contains polygons array definition. WARNING! Polygon primitives might be unsupported by graphics library. Triangulation should be used instead of quads for better compatibility.
 */
class Graphic3d_ArrayOfPolygons extends Graphic3d_ArrayOfPrimitives {
}

class Graphic3d_ArrayOfPolygons_1 extends Graphic3d_ArrayOfPolygons {}

class Graphic3d_ArrayOfPolygons_2 extends Graphic3d_ArrayOfPolygons {}

/**
 * Contains polylines array definition.
 */
class Graphic3d_ArrayOfPolylines extends Graphic3d_ArrayOfPrimitives {
}

class Graphic3d_ArrayOfPolylines_1 extends Graphic3d_ArrayOfPolylines {}

class Graphic3d_ArrayOfPolylines_2 extends Graphic3d_ArrayOfPolylines {}

/**
 * This class furnish services to defined and fill an array of primitives which can be passed directly to graphics rendering API.
 */
class Graphic3d_ArrayOfPrimitives extends Standard_Transient {
}

/**
 * Contains quadrangles strip array definition. WARNING! Quadrangle primitives might be unsupported by graphics library. Triangulation should be used instead of quads for better compatibility.
 */
class Graphic3d_ArrayOfQuadrangleStrips extends Graphic3d_ArrayOfPrimitives {
}

class Graphic3d_ArrayOfQuadrangleStrips_1 extends Graphic3d_ArrayOfQuadrangleStrips {}

class Graphic3d_ArrayOfQuadrangleStrips_2 extends Graphic3d_ArrayOfQuadrangleStrips {}

/**
 * Contains quadrangles array definition. WARNING! Quadrangle primitives might be unsupported by graphics library. Triangulation should be used instead of quads for better compatibility.
 */
class Graphic3d_ArrayOfQuadrangles extends Graphic3d_ArrayOfPrimitives {
}

class Graphic3d_ArrayOfQuadrangles_1 extends Graphic3d_ArrayOfQuadrangles {}

class Graphic3d_ArrayOfQuadrangles_2 extends Graphic3d_ArrayOfQuadrangles {}

/**
 * Contains segments array definition.
 */
class Graphic3d_ArrayOfSegments extends Graphic3d_ArrayOfPrimitives {
}

class Graphic3d_ArrayOfSegments_1 extends Graphic3d_ArrayOfSegments {}

class Graphic3d_ArrayOfSegments_2 extends Graphic3d_ArrayOfSegments {}

/**
 * Contains triangles fan array definition
 */
class Graphic3d_ArrayOfTriangleFans extends Graphic3d_ArrayOfPrimitives {
}

class Graphic3d_ArrayOfTriangleFans_1 extends Graphic3d_ArrayOfTriangleFans {}

class Graphic3d_ArrayOfTriangleFans_2 extends Graphic3d_ArrayOfTriangleFans {}

/**
 * Contains triangles strip array definition.
 */
class Graphic3d_ArrayOfTriangleStrips extends Graphic3d_ArrayOfPrimitives {
}

class Graphic3d_ArrayOfTriangleStrips_1 extends Graphic3d_ArrayOfTriangleStrips {}

class Graphic3d_ArrayOfTriangleStrips_2 extends Graphic3d_ArrayOfTriangleStrips {}

/**
 * Contains triangles array definition
 */
class Graphic3d_ArrayOfTriangles extends Graphic3d_ArrayOfPrimitives {
}

class Graphic3d_ArrayOfTriangles_1 extends Graphic3d_ArrayOfTriangles {}

class Graphic3d_ArrayOfTriangles_2 extends Graphic3d_ArrayOfTriangles {}

/**
 * This class defines graphic attributes for opaque 3d primitives (polygons, triangles, quadrilaterals).
 */
class Graphic3d_AspectFillArea3d extends Graphic3d_Aspects {
}

class Graphic3d_AspectFillArea3d_1 extends Graphic3d_AspectFillArea3d {}

class Graphic3d_AspectFillArea3d_2 extends Graphic3d_AspectFillArea3d {}

/**
 * Creates and updates a group of attributes for 3d line primitives. This group contains the color, the type of line, and its thickness.
 */
class Graphic3d_AspectLine3d extends Graphic3d_Aspects {
}

class Graphic3d_AspectLine3d_1 extends Graphic3d_AspectLine3d {}

class Graphic3d_AspectLine3d_2 extends Graphic3d_AspectLine3d {}

/**
 * Creates and updates an attribute group for marker type primitives. This group contains the type of marker, its color, and its scale factor.
 */
class Graphic3d_AspectMarker3d extends Graphic3d_Aspects {
}

class Graphic3d_AspectMarker3d_1 extends Graphic3d_AspectMarker3d {}

class Graphic3d_AspectMarker3d_2 extends Graphic3d_AspectMarker3d {}

class Graphic3d_AspectMarker3d_3 extends Graphic3d_AspectMarker3d {}

class Graphic3d_AspectMarker3d_4 extends Graphic3d_AspectMarker3d {}

/**
 * Creates and updates a group of attributes for text primitives.
 */
class Graphic3d_AspectText3d extends Graphic3d_Aspects {
}

class Graphic3d_AspectText3d_1 extends Graphic3d_AspectText3d {}

class Graphic3d_AspectText3d_2 extends Graphic3d_AspectText3d {}

/**
 * This class defines graphic attributes.
 */
class Graphic3d_Aspects extends Standard_Transient {
}

/**
 * Buffer of vertex attributes. This class is intended for advanced usage allowing invalidation of entire buffer content or its sub-part.
 */
class Graphic3d_AttribBuffer extends Graphic3d_Buffer {
}

/**
 * Class that stores style for one graduated trihedron axis such as colors, lengths and customization flags. It is used in Graphic3d_GraduatedTrihedron.
 */
class Graphic3d_AxisAspect {
}

/**
 * Describes material's BSDF (Bidirectional Scattering Distribution Function) used for physically-based rendering (in path tracing engine). BSDF is represented as weighted mixture of basic BRDFs/BTDFs (Bidirectional Reflectance (Transmittance) Distribution Functions).
 */
class Graphic3d_BSDF {
}

/**
 * Bounds buffer.
 */
class Graphic3d_BoundBuffer extends NCollection_Buffer {
}

/**
 * Buffer of vertex attributes.
 */
class Graphic3d_Buffer extends NCollection_Buffer {
}

/**
 * Set of OpenGl_Structures for building BVH tree.
 */
class Graphic3d_BvhCStructureSet extends BVH_PrimitiveSet3d {
}

}

/**
 * Generic light source definition. This class defines arbitrary light source - see Graphic3d_TypeOfLightSource enumeration. Some parameters are applicable only to particular light type; calling methods unrelated to current type will throw an exception.
 */
class Graphic3d_CLight extends Standard_Transient {
}

/**
 * Low-level graphic structure interface
 */
class Graphic3d_CStructure extends Standard_Transient {
}

class Graphic3d_CTexture {
}

/**
 * Base class of a graphical view that carries out rendering process for a concrete implementation of graphical driver. Provides virtual interfaces for redrawing its contents, management of displayed structures and render settings. The source code of the class itself implements functionality related to management of computed (HLR or "view-dependent") structures.
 */
class Graphic3d_CView extends Graphic3d_DataStructureManager {
}

/**
 * Camera class provides object-oriented approach to setting up projection and orientation properties of 3D view.
 */
class Graphic3d_Camera extends Standard_Transient {
}

class Graphic3d_Camera_1 extends Graphic3d_Camera {}

class Graphic3d_Camera_2 extends Graphic3d_Camera {}

/**
 * Class defines the area (Tile) inside a view.
 */
class Graphic3d_CameraTile {
}

/**
 * Container for properties describing either a Clipping halfspace (single Clipping Plane), or a chain of Clipping Planes defining logical AND (conjunction) operation. The plane equation is specified in "world" coordinate system.
 */
class Graphic3d_ClipPlane extends Standard_Transient {
}

class Graphic3d_ClipPlane_1 extends Graphic3d_ClipPlane {}

class Graphic3d_ClipPlane_2 extends Graphic3d_ClipPlane {}

class Graphic3d_ClipPlane_3 extends Graphic3d_ClipPlane {}

class Graphic3d_ClipPlane_4 extends Graphic3d_ClipPlane {}

/**
 * Graphic3d_CubeMapOrder maps sides of cubemap on tiles in packed cubemap image to support different tiles order in such images. Also it can be considered as permutation of numbers from 0 to 5. It stores permutation in one integer as convolution.
 */
class Graphic3d_CubeMapOrder {
}

class Graphic3d_CubeMapOrder_1 extends Graphic3d_CubeMapOrder {}

class Graphic3d_CubeMapOrder_2 extends Graphic3d_CubeMapOrder {}

class Graphic3d_CubeMapOrder_3 extends Graphic3d_CubeMapOrder {}

/**
 * Class is intended to process cubemap packed into single image plane.
 */
class Graphic3d_CubeMapPacked extends Graphic3d_CubeMap {
}

class Graphic3d_CubeMapPacked_1 extends Graphic3d_CubeMapPacked {}

class Graphic3d_CubeMapPacked_2 extends Graphic3d_CubeMapPacked {}

/**
 * Class to manage cubemap located in six different images.
 */
class Graphic3d_CubeMapSeparate extends Graphic3d_CubeMap {
}

class Graphic3d_CubeMapSeparate_1 extends Graphic3d_CubeMapSeparate {}

class Graphic3d_CubeMapSeparate_2 extends Graphic3d_CubeMapSeparate {}

/**
 * Graphic3d_CullingTool class provides a possibility to store parameters of view volume, such as its vertices and equations, and contains methods detecting if given AABB overlaps view volume.
 */
class Graphic3d_CullingTool {
}

/**
 * This class allows the definition of a manager to which the graphic objects are associated. It allows them to be globally manipulated. It defines the global attributes.
 */
class Graphic3d_DataStructureManager extends Standard_Transient {
}

/**
 * Class storing the frame statistics.
 */
class Graphic3d_FrameStats extends Standard_Transient {
}

/**
 * Data frame definition.
 */
class Graphic3d_FrameStatsData {
}

/**
 * Temporary data frame definition.
 */
class Graphic3d_FrameStatsDataTmp extends Graphic3d_FrameStatsData {
}

/**
 * Describes Fresnel reflectance parameters.
 */
class Graphic3d_Fresnel {
}

/**
 * Defines the class of a graduated trihedron. It contains main style parameters for implementation of graduated trihedron
 */
class Graphic3d_GraduatedTrihedron {
}

/**
 * This class allows the definition of a graphic driver for 3d interface (currently only OpenGl driver is used).
 */
class Graphic3d_GraphicDriver extends Standard_Transient {
}

/**
 * This class allows the definition of groups of primitives inside of graphic objects (presentations). A group contains the primitives and attributes for which the range is limited to this group. The primitives of a group can be globally suppressed.
 */
class Graphic3d_Group extends Standard_Transient {
}

class Graphic3d_GroupDefinitionError extends Standard_OutOfRange {
}

class Graphic3d_GroupDefinitionError_1 extends Graphic3d_GroupDefinitionError {}

class Graphic3d_GroupDefinitionError_2 extends Graphic3d_GroupDefinitionError {}

/**
 * A class that provides an API to use standard OCCT hatch styles defined in Aspect_HatchStyle enum or to create custom styles from a user-defined bitmap
 */
class Graphic3d_HatchStyle extends Standard_Transient {
}

class Graphic3d_HatchStyle_1 extends Graphic3d_HatchStyle {}

class Graphic3d_HatchStyle_2 extends Graphic3d_HatchStyle {}

/**
 * Index buffer.
 */
class Graphic3d_IndexBuffer extends Graphic3d_Buffer {
}

/**
 * Presentations list sorted within priorities.
 */
class Graphic3d_Layer extends Standard_Transient {
}

/**
 * Class defining the set of light sources.
 */
class Graphic3d_LightSet extends Standard_Transient {
}

/**
 * This class is used to store bitmaps and images for markers rendering. It can convert bitmap texture stored in TColStd_HArray1OfByte to Image_PixMap and vice versa.
 */
class Graphic3d_MarkerImage extends Standard_Transient {
}

class Graphic3d_MarkerImage_1 extends Graphic3d_MarkerImage {}

class Graphic3d_MarkerImage_2 extends Graphic3d_MarkerImage {}

/**
 * This class allows the definition of the type of a surface. Aspect attributes of a 3d face. Keywords: Material, FillArea, Shininess, Ambient, Color, Diffuse, Specular, Transparency, Emissive, ReflectionMode, BackFace, FrontFace, Reflection, Absorbtion
 */
class Graphic3d_MaterialAspect {
}

class Graphic3d_MaterialAspect_1 extends Graphic3d_MaterialAspect {}

class Graphic3d_MaterialAspect_2 extends Graphic3d_MaterialAspect {}

class Graphic3d_MaterialDefinitionError extends Standard_OutOfRange {
}

class Graphic3d_MaterialDefinitionError_1 extends Graphic3d_MaterialDefinitionError {}

class Graphic3d_MaterialDefinitionError_2 extends Graphic3d_MaterialDefinitionError {}

/**
 * Texture adapter for Media_Frame.
 */
class Graphic3d_MediaTexture extends Graphic3d_Texture2D {
}

/**
 * Mutable index buffer.
 */
class Graphic3d_MutableIndexBuffer extends Graphic3d_IndexBuffer {
}

/**
 * Class implementing Metallic-Roughness physically based material definition
 */
class Graphic3d_PBRMaterial {
}

class Graphic3d_PBRMaterial_1 extends Graphic3d_PBRMaterial {}

class Graphic3d_PBRMaterial_2 extends Graphic3d_PBRMaterial {}

/**
 * Class defines presentation properties.
 */
class Graphic3d_PresentationAttributes extends Standard_Transient {
}

class Graphic3d_PriorityDefinitionError extends Standard_OutOfRange {
}

class Graphic3d_PriorityDefinitionError_1 extends Graphic3d_PriorityDefinitionError {}

class Graphic3d_PriorityDefinitionError_2 extends Graphic3d_PriorityDefinitionError {}

/**
 * Helper class to store rendering parameters.
 */
class Graphic3d_RenderingParams {
}

/**
 * Class defines a Clipping Volume as a logical OR (disjunction) operation between Graphic3d_ClipPlane in sequence. Each Graphic3d_ClipPlane represents either a single Plane clipping a halfspace (direction is specified by normal), or a sub-chain of planes defining a logical AND (conjunction) operation. Therefore, this collection allows defining a Clipping Volume through the limited set of Boolean operations between clipping Planes.
 */
class Graphic3d_SequenceOfHClipPlane extends Standard_Transient {
}

/**
 * Describes custom vertex shader attribute.
 */
class Graphic3d_ShaderAttribute extends Standard_Transient {
}

/**
 * This class is responsible for managing shader objects.
 */
class Graphic3d_ShaderObject extends Standard_Transient {
}

/**
 * This class is responsible for managing shader programs.
 */
class Graphic3d_ShaderProgram extends Standard_Transient {
}

/**
 * Describes custom uniform shader variable.
 */
class Graphic3d_ShaderVariable extends Standard_Transient {
}

/**
 * This class allows the definition a graphic object. This graphic structure can be displayed, erased, or highlighted. This graphic structure can be connected with another graphic structure.
 */
class Graphic3d_Structure extends Standard_Transient {
}

class Graphic3d_StructureDefinitionError extends Standard_OutOfRange {
}

class Graphic3d_StructureDefinitionError_1 extends Graphic3d_StructureDefinitionError {}

class Graphic3d_StructureDefinitionError_2 extends Graphic3d_StructureDefinitionError {}

/**
 * This class allows the definition of a manager to which the graphic objects are associated. It allows them to be globally manipulated. It defines the global attributes. Keywords: Structure, Structure Manager, Update Mode, Destroy, Highlight, Visible
 */
class Graphic3d_StructureManager extends Standard_Transient {
}

/**
 * This class allows the definition of a text object for display. The text might be defined in one of ways, using: - text value and position, - text value, orientation and the state whether the text uses position as point of attach. - text formatter. Formatter contains text, height and alignment parameter.
 */
class Graphic3d_Text extends Standard_Transient {
}

/**
 * This is an abstract class for managing 1D textures.
 */
class Graphic3d_Texture1D extends Graphic3d_TextureMap {
}

/**
 * This class provides the implementation of a manual 1D texture. you MUST provides texture coordinates on your facets if you want to see your texture.
 */
class Graphic3d_Texture1Dmanual extends Graphic3d_Texture1D {
}

class Graphic3d_Texture1Dmanual_1 extends Graphic3d_Texture1Dmanual {}

class Graphic3d_Texture1Dmanual_2 extends Graphic3d_Texture1Dmanual {}

class Graphic3d_Texture1Dmanual_3 extends Graphic3d_Texture1Dmanual {}

/**
 * This class provides the implementation of a 1D texture applyable along a segment. You might use the SetSegment() method to set the way the texture is "streched" on facets.
 */
class Graphic3d_Texture1Dsegment extends Graphic3d_Texture1D {
}

class Graphic3d_Texture1Dsegment_1 extends Graphic3d_Texture1Dsegment {}

class Graphic3d_Texture1Dsegment_2 extends Graphic3d_Texture1Dsegment {}

class Graphic3d_Texture1Dsegment_3 extends Graphic3d_Texture1Dsegment {}

/**
 * This abstract class for managing 2D textures
 */
class Graphic3d_Texture2D extends Graphic3d_TextureMap {
}

/**
 * This class defined a manual texture 2D facets MUST define texture coordinate if you want to see somethings on.
 */
class Graphic3d_Texture2Dmanual extends Graphic3d_Texture2D {
}

class Graphic3d_Texture2Dmanual_1 extends Graphic3d_Texture2Dmanual {}

class Graphic3d_Texture2Dmanual_2 extends Graphic3d_Texture2Dmanual {}

class Graphic3d_Texture2Dmanual_3 extends Graphic3d_Texture2Dmanual {}

/**
 * This class allows the management of a 2D texture defined from a plane equation Use the SetXXX() methods for positioning the texture as you want.
 */
class Graphic3d_Texture2Dplane extends Graphic3d_Texture2D {
}

class Graphic3d_Texture2Dplane_1 extends Graphic3d_Texture2Dplane {}

class Graphic3d_Texture2Dplane_2 extends Graphic3d_Texture2Dplane {}

class Graphic3d_Texture2Dplane_3 extends Graphic3d_Texture2Dplane {}

/**
 * This class provides environment texture.
 */
class Graphic3d_TextureEnv extends Graphic3d_TextureRoot {
}

class Graphic3d_TextureEnv_1 extends Graphic3d_TextureEnv {}

class Graphic3d_TextureEnv_2 extends Graphic3d_TextureEnv {}

class Graphic3d_TextureEnv_3 extends Graphic3d_TextureEnv {}

/**
 * This is an abstract class for managing texture applyable on polygons.
 */
class Graphic3d_TextureMap extends Graphic3d_TextureRoot {
}

/**
 * This class describes texture parameters.
 */
class Graphic3d_TextureParams extends Standard_Transient {
}

/**
 * This is the texture root class enable the dialog with the GraphicDriver allows the loading of texture.
 */
class Graphic3d_TextureRoot extends Standard_Transient {
}

/**
 * Class holding array of textures to be mapped as a set.
 */
class Graphic3d_TextureSet extends Standard_Transient {
}

class Graphic3d_TextureSet_1 extends Graphic3d_TextureSet {}

class Graphic3d_TextureSet_2 extends Graphic3d_TextureSet {}

class Graphic3d_TextureSet_3 extends Graphic3d_TextureSet {}

class Graphic3d_TransformError extends Standard_OutOfRange {
}

class Graphic3d_TransformError_1 extends Graphic3d_TransformError {}

class Graphic3d_TransformError_2 extends Graphic3d_TransformError {}

/**
 * Transformation Persistence definition.
 */
class Graphic3d_TransformPers extends Standard_Transient {
}

class Graphic3d_TransformPers_1 extends Graphic3d_TransformPers {}

class Graphic3d_TransformPers_2 extends Graphic3d_TransformPers {}

class Graphic3d_TransformPers_3 extends Graphic3d_TransformPers {}

/**
 * Graphic3d_ValidatedCubeMapOrder contains completely valid order object. The only way to create this class except copy constructor is 'Validated' method of Graphic3d_CubeMapOrder. This class can initialize Graphic3d_CubeMapOrder. It is supposed to be used in case of necessity of completely valid order (in function argument as example). It helps to automate order's valid checks.
 */
class Graphic3d_ValidatedCubeMapOrder {
}

/**
 * This class represents a graphical 3D point.
 */
class Graphic3d_Vertex {
}

class Graphic3d_Vertex_1 extends Graphic3d_Vertex {}

class Graphic3d_Vertex_2 extends Graphic3d_Vertex {}

class Graphic3d_Vertex_3 extends Graphic3d_Vertex {}

class Graphic3d_Vertex_4 extends Graphic3d_Vertex {}

/**
 * Structure display state.
 */
class Graphic3d_ViewAffinity extends Standard_Transient {
}

/**
 * Helper class for keeping reference on world-view-projection state. Helpful for synchronizing state of WVP dependent data structures.
 */
class Graphic3d_WorldViewProjState {
}

class Graphic3d_WorldViewProjState_1 extends Graphic3d_WorldViewProjState {}

class Graphic3d_WorldViewProjState_2 extends Graphic3d_WorldViewProjState {}

/**
 * In order to have the precision required in industrial design, drawings need to offer the possibility of removing lines, which are hidden in a given projection. To do this, the Hidden Line Removal component provides two algorithms: HLRBRep_Algo and HLRBRep_PolyAlgo. These algorithms remove or indicate lines hidden by surfaces. For a given projection, they calculate a set of lines characteristic of the object being represented. They are also used in conjunction with extraction utilities, which reconstruct a new, simplified shape from a selection of calculation results. This new shape is made up of edges, which represent the lines of the visualized shape in a plane. This plane is the projection plane. HLRBRep_Algo takes into account the shape itself. HLRBRep_PolyAlgo works with a polyhedral simplification of the shape. When you use HLRBRep_Algo, you obtain an exact result, whereas, when you use HLRBRep_PolyAlgo, you reduce computation time but obtain polygonal segments.
 */
class HLRAlgo {
}

class HLRAlgo_BiPoint {
}

class HLRAlgo_BiPoint_1 extends HLRAlgo_BiPoint {}

class HLRAlgo_BiPoint_2 extends HLRAlgo_BiPoint {}

class HLRAlgo_BiPoint_3 extends HLRAlgo_BiPoint {}

class HLRAlgo_BiPoint_4 extends HLRAlgo_BiPoint {}

class HLRAlgo_BiPoint_5 extends HLRAlgo_BiPoint {}

class HLRAlgo_BiPoint_6 extends HLRAlgo_BiPoint {}

class HLRAlgo_BiPoint_7 extends HLRAlgo_BiPoint {}

/**
 * The Coincidence class is used in an Inteference to store informations on the "hiding" edge.
 */
class HLRAlgo_Coincidence {
}

class HLRAlgo_EdgeIterator {
}

/**
 * This class describes the Hidden Line status of an Edge. It contains :
 */
class HLRAlgo_EdgeStatus {
}

class HLRAlgo_EdgeStatus_1 extends HLRAlgo_EdgeStatus {}

class HLRAlgo_EdgeStatus_2 extends HLRAlgo_EdgeStatus {}

/**
 * An EdgesBlock is a set of Edges. It is used by the DataStructure to structure the Edges.
 */
class HLRAlgo_EdgesBlock extends Standard_Transient {
}

class HLRAlgo_Interference {
}

class HLRAlgo_Interference_1 extends HLRAlgo_Interference {}

class HLRAlgo_Interference_2 extends HLRAlgo_Interference {}

/**
 * Describes an intersection on an edge to hide. Contains a parameter and a state (ON = on the face, OUT = above the face, IN = under the Face)
 */
class HLRAlgo_Intersection {
}

class HLRAlgo_Intersection_1 extends HLRAlgo_Intersection {}

class HLRAlgo_Intersection_2 extends HLRAlgo_Intersection {}

/**
 * to remove Hidden lines on Triangulations.
 */
class HLRAlgo_PolyAlgo extends Standard_Transient {
}

/**
 * Data structure of a set of Triangles.
 */
class HLRAlgo_PolyData extends Standard_Transient {
}

/**
 * Data structure of a set of Hiding Triangles.
 */
class HLRAlgo_PolyHidingData {
}

/**
 * to Update OutLines.
 */
class HLRAlgo_PolyInternalData extends Standard_Transient {
}

/**
 * to Update OutLines.
 */
class HLRAlgo_PolyInternalNode extends Standard_Transient {
}

/**
 * All the PolyData of a Shell
 */
class HLRAlgo_PolyShellData extends Standard_Transient {
}

/**
 * Implements a projector object. To transform and project Points and Planes. This object is designed to be used in the removal of hidden lines and is returned by the Prs3d_Projector::Projector function. You define the projection of the selected shape by calling one of the following functions: - HLRBRep_Algo::Projector, or - HLRBRep_PolyAlgo::Projector The choice depends on the algorithm, which you are using. The parameters of the view are defined at the time of construction of a Prs3d_Projector object.
 */
class HLRAlgo_Projector {
}

class HLRAlgo_Projector_1 extends HLRAlgo_Projector {}

class HLRAlgo_Projector_2 extends HLRAlgo_Projector {}

class HLRAlgo_Projector_3 extends HLRAlgo_Projector {}

class HLRAlgo_Projector_4 extends HLRAlgo_Projector {}

class HLRAlgo_Projector_5 extends HLRAlgo_Projector {}

/**
 * A WiresBlock is a set of Blocks. It is used by the DataStructure to structure the Edges.
 */
class HLRAlgo_WiresBlock extends Standard_Transient {
}

/**
 * This class builds reflect lines on a shape according to the axes of view defined by user. Reflect lines are represented by edges in 3d.
 */
class HLRAppli_ReflectLines {
}

/**
 * Provides methods to fill a HLRTopoBRep_Data.
 */
class HLRTopoBRep_DSFiller {
}

/**
 * Stores the results of the OutLine and IsoLine processes.
 */
class HLRTopoBRep_Data {
}

/**
 * Contains the 3 ListOfShape of a Face ( Internal OutLines, OutLines on restriction and IsoLines ).
 */
class HLRTopoBRep_FaceData {
}

class HLRTopoBRep_FaceIsoLiner {
}

class HLRTopoBRep_OutLiner extends Standard_Transient {
}

class HLRTopoBRep_OutLiner_1 extends HLRTopoBRep_OutLiner {}

class HLRTopoBRep_OutLiner_2 extends HLRTopoBRep_OutLiner {}

class HLRTopoBRep_OutLiner_3 extends HLRTopoBRep_OutLiner {}

class HLRTopoBRep_VData {
}

class HLRTopoBRep_VData_1 extends HLRTopoBRep_VData {}

class HLRTopoBRep_VData_2 extends HLRTopoBRep_VData {}

class HatchGen_Domain {
}

class HatchGen_Domain_1 extends HatchGen_Domain {}

class HatchGen_Domain_2 extends HatchGen_Domain {}

class HatchGen_Domain_3 extends HatchGen_Domain {}

class HatchGen_IntersectionPoint {
}

class HatchGen_PointOnElement extends HatchGen_IntersectionPoint {
}

class HatchGen_PointOnElement_1 extends HatchGen_PointOnElement {}

class HatchGen_PointOnElement_2 extends HatchGen_PointOnElement {}

class HatchGen_PointOnElement_3 extends HatchGen_PointOnElement {}

class HatchGen_PointOnHatching extends HatchGen_IntersectionPoint {
}

class HatchGen_PointOnHatching_1 extends HatchGen_PointOnHatching {}

class HatchGen_PointOnHatching_2 extends HatchGen_PointOnHatching {}

class HatchGen_PointOnHatching_3 extends HatchGen_PointOnHatching {}

/**
 * The Hatcher is an algorithm to compute cross hatchings in a 2d plane. It is mainly dedicated to display purpose.
 */
class Hatch_Hatcher {
}

/**
 * Stores a Line in the Hatcher. Represented by :
 */
class Hatch_Line {
}

class Hatch_Line_1 extends Hatch_Line {}

class Hatch_Line_2 extends Hatch_Line {}

/**
 * Stores an intersection on a line represented by :
 */
class Hatch_Parameter {
}

class Hatch_Parameter_1 extends Hatch_Parameter {}

class Hatch_Parameter_2 extends Hatch_Parameter {}

class HeaderSection {
}

class HeaderSection_FileDescription extends Standard_Transient {
}

class HeaderSection_FileName extends Standard_Transient {
}

class HeaderSection_FileSchema extends Standard_Transient {
}

/**
 * Protocol for HeaderSection Entities It requires HeaderSection as a Resource
 */
class HeaderSection_Protocol extends StepData_Protocol {
}

/**
 * This is used to reparameterize Rational BSpline Curves so that we can concatenate them later to build C1 Curves It builds and 1D-reparameterizing function starting from an Hermite interpolation and adding knots and modifying poles of the 1D BSpline obtained that way. The goal is to build a(u) so that if we consider a BSpline curve N(u) f(u) = ----- D(u)
 */
class Hermit {
}

/**
 * this class gives content of the CONNECTED COMPONANT(S) which include specific Entity(ies)
 */
class IFGraph_AllConnected extends Interface_GraphContent {
}

class IFGraph_AllConnected_1 extends IFGraph_AllConnected {}

class IFGraph_AllConnected_2 extends IFGraph_AllConnected {}

/**
 * this class determines all Entities shared by some specific ones, at any level (those which will be lead in a Transfer for instance)
 */
class IFGraph_AllShared extends Interface_GraphContent {
}

class IFGraph_AllShared_1 extends IFGraph_AllShared {}

class IFGraph_AllShared_2 extends IFGraph_AllShared {}

/**
 * this class gives entities which are Articulation points in a whole Model or in a sub-part An Articulation Point divides the graph in two (or more) disconnected sub-graphs Identifying Articulation Points allows improving efficiency of spliting a set of Entities into sub-sets
 */
class IFGraph_Articulations extends Interface_GraphContent {
}

/**
 * this class evaluates effect of two compared sub-parts : cumulation (union), common part (intersection-overlapping) part specific to first sub-part or to the second one Results are kept in a Graph, several question can be set Basic Iteration gives Cumulation (union)
 */
class IFGraph_Compare extends Interface_GraphContent {
}

/**
 * determines Connected Componants in a Graph. They define disjoined sets of Entities
 */
class IFGraph_ConnectedComponants extends IFGraph_SubPartsIterator {
}

/**
 * this class evaluates effect of cumulated sub-parts : overlapping, forgotten entities Results are kept in a Graph, several question can be set Basic Iteration gives entities which are part of Cumulation
 */
class IFGraph_Cumulate extends Interface_GraphContent {
}

/**
 * determines strong componants in a graph which are Cycles
 */
class IFGraph_Cycles extends IFGraph_SubPartsIterator {
}

class IFGraph_Cycles_1 extends IFGraph_Cycles {}

class IFGraph_Cycles_2 extends IFGraph_Cycles {}

/**
 * this class gives entities which are Source of entities of a sub-part, but are not contained by this sub-part
 */
class IFGraph_ExternalSources extends Interface_GraphContent {
}

/**
 * determines strong componants in a graph which are Roots
 */
class IFGraph_SCRoots extends IFGraph_StrongComponants {
}

class IFGraph_SCRoots_1 extends IFGraph_SCRoots {}

class IFGraph_SCRoots_2 extends IFGraph_SCRoots {}

/**
 * determines strong componants of a graph, that is isolated entities (single componants) or loops
 */
class IFGraph_StrongComponants extends IFGraph_SubPartsIterator {
}

/**
 * defines general form for graph classes of which result is not a single iteration on Entities, but a nested one : External iteration works on sub-parts, identified by each class (according to its algorithm) Internal Iteration concerns Entities of a sub-part Sub-Parts are assumed to be disjoined; if they are not, the first one has priority
 */
class IFGraph_SubPartsIterator {
}

class IFGraph_SubPartsIterator_1 extends IFGraph_SubPartsIterator {}

class IFGraph_SubPartsIterator_2 extends IFGraph_SubPartsIterator {}

/**
 * Gives tools to manage Selecting a group of Entities processed by an Interface, for instance to divide up an original Model (from a File) to several smaller ones They use description of an Interface Model as a graph
 */
class IFSelect {
}

/**
 * Act gives a simple way to define and add functions to be ran from a SessionPilot, as follows :
 */
class IFSelect_Act extends IFSelect_Activator {
}

/**
 * Defines the general frame for working with a SessionPilot. Each Activator treats a set of Commands. Commands are given as alphanumeric strings. They can be of two main forms : - classic, to list, evaluate, enrich the session (by itself) : no specific remark, its complete execution must be described - creation of a new item : instead of creatinf it plus adding it to the session (which is a classic way), it is possible to create it and make it recorded by the SessionPilot : then, the Pilot will add it to the session; this way allows the Pilot to manage itself named items
 */
class IFSelect_Activator extends Standard_Transient {
}

/**
 * This class allows to memorize and access to the modifiers which are to be applied to a file. To each modifier, is bound a list of integers (optionnal) : if this list is absent, the modifier applies to all the file. Else, it applies to the entities designated by these numbers in the produced file.
 */
class IFSelect_AppliedModifiers extends Standard_Transient {
}

/**
 * BasicDumper takes into account, for SessionFile, all the classes defined in the package IFSelect : Selections, Dispatches (there is no Modifier)
 */
class IFSelect_BasicDumper extends IFSelect_SessionDumper {
}

/**
 * A CheckCounter allows to see a CheckList (i.e. CheckIterator) not per entity, its messages, but per message, the entities attached (count and list). Because many messages can be repeated if they are due to systematic errors
 */
class IFSelect_CheckCounter extends IFSelect_SignatureList {
}

/**
 * This class gathers various informations used by File Modifiers apart from the writer object, which is specific of the norm and of the physical format
 */
class IFSelect_ContextWrite {
}

class IFSelect_ContextWrite_1 extends IFSelect_ContextWrite {}

class IFSelect_ContextWrite_2 extends IFSelect_ContextWrite {}

/**
 * A DispGlobal gathers all the input Entities into only one global Packet
 */
class IFSelect_DispGlobal extends IFSelect_Dispatch {
}

/**
 * A DispPerCount gathers all the input Entities into one or several Packets, each containing a defined count of Entity This count is a Parameter of the DispPerCount, given as an IntParam, thus allowing external control of its Value
 */
class IFSelect_DispPerCount extends IFSelect_Dispatch {
}

/**
 * A DispPerFiles produces a determined count of Packets from the input Entities. It divides, as equally as possible, the input list into a count of files. This count is the parameter of the DispPerFiles. If the input list has less than this count, of course there will be one packet per input entity. This count is a Parameter of the DispPerFiles, given as an IntParam, thus allowing external control of its Value
 */
class IFSelect_DispPerFiles extends IFSelect_Dispatch {
}

/**
 * A DispPerOne gathers all the input Entities into as many Packets as there Root Entities from the Final Selection, that is, one Packet per Entity
 */
class IFSelect_DispPerOne extends IFSelect_Dispatch {
}

/**
 * A DispPerSignature sorts input Entities according to a Signature : it works with a SignCounter to do this.
 */
class IFSelect_DispPerSignature extends IFSelect_Dispatch {
}

/**
 * This class allows to describe how a set of Entities has to be dispatched into resulting Packets : a Packet is a sub-set of the initial set of entities.
 */
class IFSelect_Dispatch extends Standard_Transient {
}

/**
 * An Editor defines a set of values and a way to edit them, on an entity or on the model (e.g. on its header)
 */
class IFSelect_Editor extends Standard_Transient {
}

/**
 * Functions gives access to all the actions which can be commanded with the resources provided by IFSelect : especially WorkSession and various types of Selections and Dispatches
 */
class IFSelect_Functions {
}

/**
 * This class gives a frame for Actions which modify the effect of a Dispatch, i.e. : By Selections and Dispatches, an original Model can be splitted into one or more "target" Models : these Models contain Entities copied from the original one (that is, a part of it). Basically, these dispatched Entities are copied as identical to their original counterparts. Also the copied Models reproduce the Header of the original one.
 */
class IFSelect_GeneralModifier extends Standard_Transient {
}

/**
 * A GraphCounter computes values to be sorted with the help of a Graph. I.E. not from a Signature
 */
class IFSelect_GraphCounter extends IFSelect_SignCounter {
}

/**
 * A ListEditor is an auxiliary operator for Editor/EditForm I.E. it works on parameter values expressed as strings
 */
class IFSelect_ListEditor extends Standard_Transient {
}

class IFSelect_ListEditor_1 extends IFSelect_ListEditor {}

class IFSelect_ListEditor_2 extends IFSelect_ListEditor {}

/**
 * This class performs the Copy operations involved by the description of a ShareOut (evaluated by a ShareOutResult) plus, if there are, the Modifications on the results, with the help of Modifiers. Each Modifier can work on one or more resulting packets, accoding its criteria : it operates on a Model once copied and filled with the content of the packet.
 */
class IFSelect_ModelCopier extends Standard_Transient {
}

/**
 * This modifier applies an EditForm on the entities selected
 */
class IFSelect_ModifEditForm extends IFSelect_Modifier {
}

/**
 * This modifier reorders a whole model from its roots, i.e. according to <rootlast> status, it considers each of its roots, then it orders all its shared entities at any level, the result begins by the lower level entities ... ends by the roots.
 */
class IFSelect_ModifReorder extends IFSelect_Modifier {
}

/**
 * This class gives a frame for Actions which can work globally on a File once completely defined (i.e. afterwards)
 */
class IFSelect_Modifier extends IFSelect_GeneralModifier {
}

/**
 * This class gives a simple way to return then consult a list of packets, determined from the content of a Model, by various criteria.
 */
class IFSelect_PacketList extends Standard_Transient {
}

/**
 * A ParamEditor gives access for edition to a list of TypedValue (i.e. of Static too) Its definition is made of the TypedValue to edit themselves, and can add some constants, which can then be displayed but not changed (for instance, system name, processor version ...)
 */
class IFSelect_ParamEditor extends IFSelect_Editor {
}

/**
 * A SelectAnyList kind Selection selects a List of an Entity, as well as this Entity contains some. A List contains sub-entities as one per Item, or several (for instance if an Entity binds couples of sub-entities, each item is one of these couples). Remark that only Entities are taken into account (neither Reals, nor Strings, etc...)
 */
class IFSelect_SelectAnyList extends IFSelect_SelectDeduct {
}

/**
 * A SelectAnyType sorts the Entities of which the Type is Kind of a given Type : this Type for Match is specific of each class of SelectAnyType
 */
class IFSelect_SelectAnyType extends IFSelect_SelectExtract {
}

/**
 * SelectBase works directly from an InterfaceModel : it is the first base for other Selections.
 */
class IFSelect_SelectBase extends IFSelect_Selection {
}

/**
 * A SelectCombine type Selection defines algebraic operations between results of several Selections It is a deferred class : sub-classes will have to define precise what operator is to be applied
 */
class IFSelect_SelectCombine extends IFSelect_Selection {
}

/**
 * A SelectControl kind Selection works with two input Selections in a dissymmetric way : the Main Input which gives an input list of Entities, to be processed, and the Second Input which gives another list, to be used to filter the main input.
 */
class IFSelect_SelectControl extends IFSelect_Selection {
}

/**
 * A SelectDeduct determines a list of Entities from an Input Selection, by a computation : Output list is not obliged to be a sub-list of Input list (for more specific, see SelectExtract for filtered sub-lists, and SelectExplore for recurcive exploration)
 */
class IFSelect_SelectDeduct extends IFSelect_Selection {
}

/**
 * A SelectDiff keeps the entities from a Selection, the Main Input, which are not listed by the Second Input
 */
class IFSelect_SelectDiff extends IFSelect_SelectControl {
}

/**
 * A SelectEntityNumber gets in an InterfaceModel (through a Graph), the Entity which has a specified Number (its rank of adding into the Model) : there can be zero (if none) or one. The Number is not directly defined as an Integer, but as a Parameter, which can be externally controled
 */
class IFSelect_SelectEntityNumber extends IFSelect_SelectBase {
}

/**
 * A SelectErrorEntities sorts the Entities which are qualified as "Error" (their Type has not been recognized) during reading a File. This does not concern Entities which are syntactically correct, but with incorrect data (for integrity constraints).
 */
class IFSelect_SelectErrorEntities extends IFSelect_SelectExtract {
}

/**
 * A SelectExplore determines from an input list of Entities, a list obtained by a way of exploration. This implies the possibility of recursive exploration : the output list is itself reused as input, etc... Examples : Shared Entities, can be considered at one level (immediate shared) or more, or max level
 */
class IFSelect_SelectExplore extends IFSelect_SelectDeduct {
}

/**
 * A SelectExtract determines a list of Entities from an Input Selection, as a sub-list of the Input Result It works by applying a sort criterium on each Entity of the Input. This criterium can be applied Direct to Pick Items (default case) or Reverse to Remove Item
 */
class IFSelect_SelectExtract extends IFSelect_SelectDeduct {
}

/**
 * A SelectFlag queries a flag noted in the bitmap of the Graph. The Flag is designated by its Name. Flag Names are defined by Work Session and, as necessary, other functional objects
 */
class IFSelect_SelectFlag extends IFSelect_SelectExtract {
}

/**
 * A SelectInList kind Selection selects a List of an Entity, which is composed of single Entities To know the list on which to work, SelectInList has two deferred methods : NbItems (inherited from SelectAnyList) and ListedEntity (which gives an item as an Entity) which must be defined to get a List in an Entity of the required Type (and consider that list is empty if Entity has not required Type)
 */
class IFSelect_SelectInList extends IFSelect_SelectAnyList {
}

/**
 * A SelectIncorrectEntities sorts the Entities which have been noted as Incorrect in the Graph of the Session (flag "Incorrect") It can find a result only if ComputeCheck has formerly been called on the WorkSession. Else, its result will be empty.
 */
class IFSelect_SelectIncorrectEntities extends IFSelect_SelectFlag {
}

/**
 * A SelectIntersection filters the Entities issued from several other Selections as Intersection of results : "AND" operator
 */
class IFSelect_SelectIntersection extends IFSelect_SelectCombine {
}

/**
 * A SelectModelEntities gets all the Entities of an InterfaceModel.
 */
class IFSelect_SelectModelEntities extends IFSelect_SelectBase {
}

/**
 * A SelectModelRoots gets all the Root Entities of an InterfaceModel. Remember that a "Root Entity" is defined as having no Sharing Entity (if there is a Loop between Entities, none of them can be a "Root").
 */
class IFSelect_SelectModelRoots extends IFSelect_SelectBase {
}

/**
 * This type of Selection is intended to describe a direct selection without an explicit criterium, for instance the result of picking viewed entities on a graphic screen
 */
class IFSelect_SelectPointed extends IFSelect_SelectBase {
}

/**
 * A SelectRange keeps or rejects a sub-set of the input set, that is the Entities of which rank in the iteration list is in a given range (for instance form 2nd to 6th, etc...)
 */
class IFSelect_SelectRange extends IFSelect_SelectExtract {
}

/**
 * A SelectRootComps sorts the Entities which are part of Strong Componants, local roots of a set of Entities : they can be Single Componants (containing one Entity) or Cycles This class gives a more secure result than SelectRoots (which considers only Single Componants) but is longer to work : it can be used when there can be or there are cycles in a Model For each cycle, one Entity is given arbitrarily Reject works as for SelectRoots : Strong Componants defined in the input list which are not local roots are given
 */
class IFSelect_SelectRootComps extends IFSelect_SelectExtract {
}

/**
 * A SelectRoots sorts the Entities which are local roots of a set of Entities (not shared by other Entities inside this set, even if they are shared by other Entities outside it)
 */
class IFSelect_SelectRoots extends IFSelect_SelectExtract {
}

/**
 * This class returns entities according sending to a file Once a model has been loaded, further sendings are recorded as status in the graph (for each value, a count of sendings)
 */
class IFSelect_SelectSent extends IFSelect_SelectExtract {
}

/**
 * A SelectShared selects Entities which are directly Shared by the Entities of the Input list
 */
class IFSelect_SelectShared extends IFSelect_SelectDeduct {
}

/**
 * A SelectSharing selects Entities which directly Share (Level One) the Entities of the Input list Remark : if an Entity of the Input List directly shares another one, it is of course present in the Result List
 */
class IFSelect_SelectSharing extends IFSelect_SelectDeduct {
}

/**
 * A SelectSignature sorts the Entities on a Signature Matching. The signature to match is given at creation time. Also, the required match is given at creation time : exact (IsEqual) or contains (the Type's Name must contain the criterium Text)
 */
class IFSelect_SelectSignature extends IFSelect_SelectExtract {
}

class IFSelect_SelectSignature_1 extends IFSelect_SelectSignature {}

class IFSelect_SelectSignature_2 extends IFSelect_SelectSignature {}

class IFSelect_SelectSignature_3 extends IFSelect_SelectSignature {}

/**
 * In the graph, explore the Shareds of the input entities, until it encounters some which match a given Signature (for a limited level, filters the returned list) By default, fitted for any level
 */
class IFSelect_SelectSignedShared extends IFSelect_SelectExplore {
}

/**
 * In the graph, explore the sharings of the input entities, until it encounters some which match a given Signature (for a limited level, filters the returned list) By default, fitted for any level
 */
class IFSelect_SelectSignedSharing extends IFSelect_SelectExplore {
}

/**
 * A SelectSuite can describe a suite of SelectDeduct as a unique one : in other words, it can be seen as a "macro selection"
 */
class IFSelect_SelectSuite extends IFSelect_SelectDeduct {
}

/**
 * A SelectType keeps or rejects Entities of which the Type is Kind of a given Cdl Type
 */
class IFSelect_SelectType extends IFSelect_SelectAnyType {
}

class IFSelect_SelectType_1 extends IFSelect_SelectType {}

class IFSelect_SelectType_2 extends IFSelect_SelectType {}

/**
 * A SelectUnion cumulates the Entities issued from several other Selections (union of results : "OR" operator)
 */
class IFSelect_SelectUnion extends IFSelect_SelectCombine {
}

/**
 * A SelectUnknownEntities sorts the Entities which are qualified as "Unknown" (their Type has not been recognized)
 */
class IFSelect_SelectUnknownEntities extends IFSelect_SelectExtract {
}

/**
 * A Selection allows to define a set of Interface Entities. Entities to be put on an output file should be identified in a way as independant from such or such execution as possible. This permits to handle comprehensive criteria, and to replay them when a new variant of an input file has to be processed.
 */
class IFSelect_Selection extends Standard_Transient {
}

/**
 * Defines an Iterator on a list of Selections
 */
class IFSelect_SelectionIterator {
}

class IFSelect_SelectionIterator_1 extends IFSelect_SelectionIterator {}

class IFSelect_SelectionIterator_2 extends IFSelect_SelectionIterator {}

/**
 * A SessionDumper is called by SessionFile. It takes into account a set of classes (such as Selections, Dispatches ...). SessionFile writes the Type (as defined by cdl) of each Item and its general Parameters. It manages the names of the Items.
 */
class IFSelect_SessionDumper extends Standard_Transient {
}

/**
 * A SessionFile is intended to manage access between a WorkSession and an Ascii Form, to be considered as a Dump. It allows to write the File from the WorkSession, and later read the File to the WorkSession, by keeping required descriptions (such as dependances).
 */
class IFSelect_SessionFile {
}

class IFSelect_SessionFile_1 extends IFSelect_SessionFile {}

class IFSelect_SessionFile_2 extends IFSelect_SessionFile {}

/**
 * A SessionPilot is intended to make easier the use of a WorkSession. It receives commands, under alphanumeric form, then calls a library of Activators to interprete and run them.
 */
class IFSelect_SessionPilot extends IFSelect_Activator {
}

/**
 * This class gathers the informations required to produce one or several file(s) from the content of an InterfaceModel (passing through the creation of intermediate Models).
 */
class IFSelect_ShareOut extends Standard_Transient {
}

/**
 * This class gives results computed from a ShareOut : simulation before transfer, helps to list entities ... Transfer itself will later be performed, either by a TransferCopy to simply divide up a file, or a TransferDispatch which can be parametred with more details
 */
class IFSelect_ShareOutResult {
}

class IFSelect_ShareOutResult_1 extends IFSelect_ShareOutResult {}

class IFSelect_ShareOutResult_2 extends IFSelect_ShareOutResult {}

class IFSelect_ShareOutResult_3 extends IFSelect_ShareOutResult {}

class IFSelect_ShareOutResult_4 extends IFSelect_ShareOutResult {}

class IFSelect_SignAncestor extends IFSelect_SignType {
}

/**
 * This Signature returns the Category of an entity, as recorded in the model
 */
class IFSelect_SignCategory extends IFSelect_Signature {
}

/**
 * SignCounter gives the frame to count signatures associated with entities, deducted from them. Ex.: their Dynamic Type.
 */
class IFSelect_SignCounter extends IFSelect_SignatureList {
}

class IFSelect_SignCounter_1 extends IFSelect_SignCounter {}

class IFSelect_SignCounter_2 extends IFSelect_SignCounter {}

/**
 * Multiple Signature : ordered list of other Signatures It concatenates on a same line the result of its sub-items separated by sets of 3 blanks It is possible to define tabulations between sub-items Moreover, match rules are specific
 */
class IFSelect_SignMultiple extends IFSelect_Signature {
}

/**
 * This Signature returns the cdl Type of an entity, under two forms : - complete dynamic type (package and class) - class type, without package name
 */
class IFSelect_SignType extends IFSelect_Signature {
}

/**
 * This Signature returns the Validity Status of an entity, as deducted from data in the model : it can be "OK" "Unknown" "Unloaded" "Syntactic Fail"(but loaded) "Syntactic Warning" "Semantic Fail" "Semantic Warning"
 */
class IFSelect_SignValidity extends IFSelect_Signature {
}

/**
 * Signature provides the basic service used by the classes SelectSignature and Counter (i.e. Name, Value), which is : - for an entity in a model, give a characteristic string, its signature This string has not to be unique in the model, but gives a value for such or such important feature. Exemples : Dynamic Type; Category; etc
 */
class IFSelect_Signature extends Interface_SignType {
}

/**
 * A SignatureList is given as result from a Counter (any kind) It gives access to a list of signatures, with counts, and optionally with list of corresponding entities
 */
class IFSelect_SignatureList extends Standard_Transient {
}

/**
 * This class runs transformations made by Modifiers, as the ModelCopier does when it produces files (the same set of Modifiers can then be used, as to transform the starting Model, as at file sending time).
 */
class IFSelect_TransformStandard extends IFSelect_Transformer {
}

/**
 * A Transformer defines the way an InterfaceModel is transformed (without sending it to a file). In order to work, each type of Transformer defines it method Perform, it can be parametred as needed.
 */
class IFSelect_Transformer extends Standard_Transient {
}

/**
 * This class defines the (empty) frame which can be used to enrich a XSTEP set with new capabilities In particular, a specific WorkLibrary must give the way for Reading a File into a Model, and Writing a Model to a File Thus, it is possible to define several Work Libraries for each norm, but recommanded to define one general class for each one : this general class will define the Read and Write methods.
 */
class IFSelect_WorkLibrary extends Standard_Transient {
}

/**
 * This class can be used to simply manage a process such as splitting a file, extracting a set of Entities ... It allows to manage different types of Variables : Integer or Text Parameters, Selections, Dispatches, in addition to a ShareOut. To each of these variables, a unique Integer Identifier is attached. A Name can be attached too as desired.
 */
class IFSelect_WorkSession extends Standard_Transient {
}

/**
 * Actor to write Shape to IGES
 */
class IGESControl_ActorWrite extends Transfer_ActorOfFinderProcess {
}

class IGESControl_AlgoContainer extends IGESToBRep_AlgoContainer {
}

/**
 * Controller for IGES-5.1
 */
class IGESControl_Controller extends XSControl_Controller {
}

/**
 * Translates IGES boundary entity (types 141, 142 and 508) in Advanced Data Exchange. Redefines translation and treatment methods from inherited open class IGESToBRep_IGESBoundary.
 */
class IGESControl_IGESBoundary extends IGESToBRep_IGESBoundary {
}

class IGESControl_IGESBoundary_1 extends IGESControl_IGESBoundary {}

class IGESControl_IGESBoundary_2 extends IGESControl_IGESBoundary {}

/**
 * Reads IGES files, checks them and translates their contents into Open CASCADE models. The IGES data can be that of a whole model or that of a specific list of entities in the model. As in XSControl_Reader, you specify the list using a selection. For translation of iges files it is possible to use the following sequence: To change parameters of translation class Interface_Static should be used before the beginning of translation (see IGES Parameters and General Parameters) Creation of reader IGESControl_Reader reader; To load a file in a model use method: reader.ReadFile("filename.igs") To check a loading file use method Check: reader.Check(failsonly); where failsonly is equal to Standard_True or Standard_False; To print the results of load: reader.PrintCheckLoad(failsonly,mode) where mode is equal to the value of enumeration IFSelect_PrintCount To transfer entities from a model the following methods can be used: for the whole model reader.TransferRoots(onlyvisible); where onlyvisible is equal to Standard_True or Standard_False; To transfer a list of entities: reader.TransferList(list); To transfer one entity reader.TransferEntity(ent) or reader.Transfer(num); To obtain a result the following method can be used: reader.IsDone() reader.NbShapes() and reader.Shape(num); or reader.OneShape(); To print the results of transfer use method: reader.PrintTransferInfo(failwarn,mode); where printfail is equal to the value of enumeration IFSelect_PrintFail, mode see above. Gets correspondence between an IGES entity and a result shape obtained therefrom. reader.TransientProcess(); TopoDS_Shape shape = TransferBRep::ShapeResult(reader.TransientProcess(),ent);
 */
class IGESControl_Reader extends XSControl_Reader {
}

class IGESControl_Reader_1 extends IGESControl_Reader {}

class IGESControl_Reader_2 extends IGESControl_Reader {}

class IGESControl_ToolContainer extends IGESToBRep_ToolContainer {
}

/**
 * This class creates and writes IGES files from CAS.CADE models. An IGES file can be written to an existing IGES file or to a new one. The translation can be performed in one or several operations. Each translation operation outputs a distinct root entity in the IGES file. To write an IGES file it is possible to use the following sequence: To modify the IGES file header or to change translation parameters it is necessary to use class Interface_Static (see IGESParameters and GeneralParameters).
 */
class IGESControl_Writer {
}

class IGESControl_Writer_1 extends IGESControl_Writer {}

class IGESControl_Writer_2 extends IGESControl_Writer {}

class IGESControl_Writer_3 extends IGESControl_Writer {}

/**
 * Interface class representing discrete 3d curve of edge. Indexation of points starts from zero.
 */
class IMeshData_Curve extends IMeshData_ParametersList {
}

/**
 * Interface class representing discrete model of a shape.
 */
class IMeshData_Model extends IMeshData_Shape {
}

/**
 * Interface class representing pcurve of edge associated with discrete face. Indexation of points starts from zero.
 */
class IMeshData_PCurve extends IMeshData_ParametersList {
}

/**
 * Interface class representing list of parameters on curve.
 */
class IMeshData_ParametersList extends Standard_Transient {
}

/**
 * Interface class representing model with associated TopoDS_Shape. Intended for inheritance by structures and algorithms keeping reference TopoDS_Shape.
 */
class IMeshData_Shape extends Standard_Transient {
}

/**
 * Extension interface class providing status functionality.
 */
class IMeshData_StatusOwner {
}

/**
 * Interface class representing shaped model with deflection.
 */
class IMeshData_TessellatedShape extends IMeshData_Shape {
}

/**
 * Interface class representing context of BRepMesh algorithm. Intended to cache discrete model and instances of tools for its processing.
 */
class IMeshTools_Context extends IMeshData_Shape {
}

/**
 * Interface class providing API for edge tessellation tools.
 */
class IMeshTools_CurveTessellator extends Standard_Transient {
}

/**
 * Interface class providing API for algorithms intended to create mesh for discrete face.
 */
class IMeshTools_MeshAlgo extends Standard_Transient {
}

/**
 * Base interface for factories producing instances of triangulation algorithms taking into account type of surface of target face.
 */
class IMeshTools_MeshAlgoFactory extends Standard_Transient {
}

/**
 * Builds mesh for each face of shape without triangulation. In case if some faces of shape have already been triangulated checks deflection of existing polygonal model and re-uses it if deflection satisfies the specified parameter. Otherwise nullifies existing triangulation and build triangulation anew.
 */
class IMeshTools_MeshBuilder extends Message_Algorithm {
}

class IMeshTools_MeshBuilder_1 extends IMeshTools_MeshBuilder {}

class IMeshTools_MeshBuilder_2 extends IMeshTools_MeshBuilder {}

/**
 * Interface class providing API for algorithms intended to update or modify discrete model.
 */
class IMeshTools_ModelAlgo extends Standard_Transient {
}

/**
 * Interface class represents API for tool building discrete model.
 */
class IMeshTools_ModelBuilder extends Message_Algorithm {
}

/**
 * Explores TopoDS_Shape for parts to be meshed - faces and free edges.
 */
class IMeshTools_ShapeExplorer extends IMeshData_Shape {
}

/**
 * Interface class for shape visitor.
 */
class IMeshTools_ShapeVisitor extends Standard_Transient {
}

/**
 * Image class that support file reading/writing operations using auxiliary image library. Supported image formats: - *.bmp - bitmap image, lossless format without compression. - *.ppm - PPM (Portable Pixmap Format), lossless format without compression. - *.png - PNG (Portable Network Graphics) lossless format with compression. - *.jpg, *.jpe, *.jpeg - JPEG/JIFF (Joint Photographic Experts Group) lossy format (compressed with quality losses). YUV color space used (automatically converted from/to RGB). - *.tif, *.tiff - TIFF (Tagged Image File Format). - *.tga - TGA (Truevision Targa Graphic), lossless format. - *.gif - GIF (Graphical Interchange Format), lossy format. Color stored using palette (up to 256 distinct colors). - *.exr - OpenEXR high dynamic-range format (supports float pixel formats).
 */
class Image_AlienPixMap extends Image_PixMap {
}

/**
 * This class compares two images pixel-by-pixel. It uses the following methods to ignore the difference between images: - Black/White comparison. It makes the images 2-colored before the comparison. - Equality with tolerance. Colors of two pixels are considered the same if the differnce of their color is less than a tolerance. - Border filter. The algorithm ignores alone independent pixels, which are different on both images, ignores the "border effect" - the difference caused by triangles located at angle about 0 or 90 degrees to the user.
 */
class Image_Diff extends Standard_Transient {
}

/**
 * Class represents packed image plane.
 */
class Image_PixMap extends Standard_Transient {
}

/**
 * Structure to manage image buffer.
 */
class Image_PixMapData extends NCollection_Buffer {
}

/**
 * Texture image definition. The image can be stored as path to image file, as file path with the given offset and as a data buffer of encoded image.
 */
class Image_Texture extends Standard_Transient {
}

class Image_Texture_1 extends Image_Texture {}

class Image_Texture_2 extends Image_Texture {}

class Image_Texture_3 extends Image_Texture {}

/**
 * Implementation of the analytical intersection between: - two Lin2d, - two Circ2d, - a Lin2d and a Circ2d, - an element of gp (Lin2d, Circ2d, Elips2d, Parab2d, Hypr2d) and another conic. No tolerance is given for all the intersections: the tolerance will be the "precision machine".
 */
class IntAna2d_AnaIntersection {
}

class IntAna2d_AnaIntersection_1 extends IntAna2d_AnaIntersection {}

class IntAna2d_AnaIntersection_2 extends IntAna2d_AnaIntersection {}

class IntAna2d_AnaIntersection_3 extends IntAna2d_AnaIntersection {}

class IntAna2d_AnaIntersection_4 extends IntAna2d_AnaIntersection {}

class IntAna2d_AnaIntersection_5 extends IntAna2d_AnaIntersection {}

class IntAna2d_AnaIntersection_6 extends IntAna2d_AnaIntersection {}

class IntAna2d_AnaIntersection_7 extends IntAna2d_AnaIntersection {}

class IntAna2d_AnaIntersection_8 extends IntAna2d_AnaIntersection {}

class IntAna2d_AnaIntersection_9 extends IntAna2d_AnaIntersection {}

/**
 * Definition of a conic by its implicit quadaratic equation: A.X**2 + B.Y**2 + 2.C.X*Y + 2.D.X + 2.E.Y + F = 0.
 */
class IntAna2d_Conic {
}

class IntAna2d_Conic_1 extends IntAna2d_Conic {}

class IntAna2d_Conic_2 extends IntAna2d_Conic {}

class IntAna2d_Conic_3 extends IntAna2d_Conic {}

class IntAna2d_Conic_4 extends IntAna2d_Conic {}

class IntAna2d_Conic_5 extends IntAna2d_Conic {}

/**
 * Geometrical intersection between two 2d elements.
 */
class IntAna2d_IntPoint {
}

class IntAna2d_IntPoint_1 extends IntAna2d_IntPoint {}

class IntAna2d_IntPoint_2 extends IntAna2d_IntPoint {}

class IntAna2d_IntPoint_3 extends IntAna2d_IntPoint {}

/**
 * Definition of a parametric Curve which is the result of the intersection between two quadrics.
 */
class IntAna_Curve {
}

/**
 * Intersection between 3 planes. The algorithm searches for an intersection point. If two of the planes are parallel or identical, IsEmpty returns TRUE.
 */
class IntAna_Int3Pln {
}

class IntAna_Int3Pln_1 extends IntAna_Int3Pln {}

class IntAna_Int3Pln_2 extends IntAna_Int3Pln {}

/**
 * This class provides the analytic intersection between a conic defined as an element of gp (Lin,Circ,Elips, Parab,Hypr) and a quadric as defined in the class Quadric from IntAna. The intersection between a conic and a plane is treated as a special case.
 */
class IntAna_IntConicQuad {
}

class IntAna_IntConicQuad_1 extends IntAna_IntConicQuad {}

class IntAna_IntConicQuad_2 extends IntAna_IntConicQuad {}

class IntAna_IntConicQuad_3 extends IntAna_IntConicQuad {}

class IntAna_IntConicQuad_4 extends IntAna_IntConicQuad {}

class IntAna_IntConicQuad_5 extends IntAna_IntConicQuad {}

class IntAna_IntConicQuad_6 extends IntAna_IntConicQuad {}

class IntAna_IntConicQuad_7 extends IntAna_IntConicQuad {}

class IntAna_IntConicQuad_8 extends IntAna_IntConicQuad {}

class IntAna_IntConicQuad_9 extends IntAna_IntConicQuad {}

class IntAna_IntConicQuad_10 extends IntAna_IntConicQuad {}

class IntAna_IntConicQuad_11 extends IntAna_IntConicQuad {}

/**
 * Intersection between a line and a torus.
 */
class IntAna_IntLinTorus {
}

class IntAna_IntLinTorus_1 extends IntAna_IntLinTorus {}

class IntAna_IntLinTorus_2 extends IntAna_IntLinTorus {}

/**
 * This class provides the analytic intersection between a cylinder or a cone from gp and another quadric, as defined in the class Quadric from IntAna. This algorithm is used when the geometric intersection (class QuadQuadGeo from IntAna) returns no geometric solution. The result of the intersection may be - Curves as defined in the class Curve from IntAna - Points (Pnt from gp)
 */
class IntAna_IntQuadQuad {
}

class IntAna_IntQuadQuad_1 extends IntAna_IntQuadQuad {}

class IntAna_IntQuadQuad_2 extends IntAna_IntQuadQuad {}

class IntAna_IntQuadQuad_3 extends IntAna_IntQuadQuad {}

/**
 * Geometric intersections between two natural quadrics (Sphere , Cylinder , Cone , Pln from gp). The possible intersections are : - 1 point - 1 or 2 line(s) - 1 Point and 1 Line - 1 circle - 1 ellipse - 1 parabola - 1 or 2 hyperbola(s). - Empty : there is no intersection between the two quadrics. - Same : the quadrics are identical - NoGeometricSolution : there may be an intersection, but it is necessary to use an analytic algorithm to determine it. See class IntQuadQuad from IntAna.
 */
class IntAna_QuadQuadGeo {
}

class IntAna_QuadQuadGeo_1 extends IntAna_QuadQuadGeo {}

class IntAna_QuadQuadGeo_2 extends IntAna_QuadQuadGeo {}

class IntAna_QuadQuadGeo_3 extends IntAna_QuadQuadGeo {}

class IntAna_QuadQuadGeo_4 extends IntAna_QuadQuadGeo {}

class IntAna_QuadQuadGeo_5 extends IntAna_QuadQuadGeo {}

class IntAna_QuadQuadGeo_6 extends IntAna_QuadQuadGeo {}

class IntAna_QuadQuadGeo_7 extends IntAna_QuadQuadGeo {}

class IntAna_QuadQuadGeo_8 extends IntAna_QuadQuadGeo {}

class IntAna_QuadQuadGeo_9 extends IntAna_QuadQuadGeo {}

class IntAna_QuadQuadGeo_10 extends IntAna_QuadQuadGeo {}

class IntAna_QuadQuadGeo_11 extends IntAna_QuadQuadGeo {}

class IntAna_QuadQuadGeo_12 extends IntAna_QuadQuadGeo {}

class IntAna_QuadQuadGeo_13 extends IntAna_QuadQuadGeo {}

class IntAna_QuadQuadGeo_14 extends IntAna_QuadQuadGeo {}

class IntAna_QuadQuadGeo_15 extends IntAna_QuadQuadGeo {}

class IntAna_QuadQuadGeo_16 extends IntAna_QuadQuadGeo {}

/**
 * This class provides a description of Quadrics by their Coefficients in natural coordinate system.
 */
class IntAna_Quadric {
}

class IntAna_Quadric_1 extends IntAna_Quadric {}

class IntAna_Quadric_2 extends IntAna_Quadric {}

class IntAna_Quadric_3 extends IntAna_Quadric {}

class IntAna_Quadric_4 extends IntAna_Quadric {}

class IntAna_Quadric_5 extends IntAna_Quadric {}

class IntCurveSurface_HInter extends IntCurveSurface_Intersection {
}

class IntCurveSurface_Intersection {
}

/**
 * Definition of an interserction point between a curve and a surface.
 */
class IntCurveSurface_IntersectionPoint {
}

class IntCurveSurface_IntersectionPoint_1 extends IntCurveSurface_IntersectionPoint {}

class IntCurveSurface_IntersectionPoint_2 extends IntCurveSurface_IntersectionPoint {}

/**
 * A IntersectionSegment describes a segment of curve (w1,w2) where distance(C(w),Surface) is less than a given tolerances.
 */
class IntCurveSurface_IntersectionSegment {
}

class IntCurveSurface_IntersectionSegment_1 extends IntCurveSurface_IntersectionSegment {}

class IntCurveSurface_IntersectionSegment_2 extends IntCurveSurface_IntersectionSegment {}

class IntCurveSurface_TheCSFunctionOfHInter extends math_FunctionSetWithDerivatives {
}

class IntCurveSurface_TheExactHInter {
}

class IntCurveSurface_TheExactHInter_1 extends IntCurveSurface_TheExactHInter {}

class IntCurveSurface_TheExactHInter_2 extends IntCurveSurface_TheExactHInter {}

class IntCurveSurface_TheHCurveTool {
}

class IntCurveSurface_TheInterferenceOfHInter extends Intf_Interference {
}

class IntCurveSurface_TheInterferenceOfHInter_1 extends IntCurveSurface_TheInterferenceOfHInter {}

class IntCurveSurface_TheInterferenceOfHInter_2 extends IntCurveSurface_TheInterferenceOfHInter {}

class IntCurveSurface_TheInterferenceOfHInter_3 extends IntCurveSurface_TheInterferenceOfHInter {}

class IntCurveSurface_TheInterferenceOfHInter_4 extends IntCurveSurface_TheInterferenceOfHInter {}

class IntCurveSurface_TheInterferenceOfHInter_5 extends IntCurveSurface_TheInterferenceOfHInter {}

class IntCurveSurface_TheInterferenceOfHInter_6 extends IntCurveSurface_TheInterferenceOfHInter {}

class IntCurveSurface_TheInterferenceOfHInter_7 extends IntCurveSurface_TheInterferenceOfHInter {}

class IntCurveSurface_ThePolygonOfHInter {
}

class IntCurveSurface_ThePolygonOfHInter_1 extends IntCurveSurface_ThePolygonOfHInter {}

class IntCurveSurface_ThePolygonOfHInter_2 extends IntCurveSurface_ThePolygonOfHInter {}

class IntCurveSurface_ThePolygonOfHInter_3 extends IntCurveSurface_ThePolygonOfHInter {}

class IntCurveSurface_ThePolygonToolOfHInter {
}

class IntCurveSurface_ThePolyhedronToolOfHInter {
}

class IntCurveSurface_TheQuadCurvExactHInter {
}

class IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter extends math_FunctionWithDerivative {
}

/**
 * Implementation of the ImpTool from IntImpParGen for conics of gp.
 */
class IntCurve_IConicTool {
}

class IntCurve_IConicTool_1 extends IntCurve_IConicTool {}

class IntCurve_IConicTool_2 extends IntCurve_IConicTool {}

class IntCurve_IConicTool_3 extends IntCurve_IConicTool {}

class IntCurve_IConicTool_4 extends IntCurve_IConicTool {}

class IntCurve_IConicTool_5 extends IntCurve_IConicTool {}

class IntCurve_IConicTool_6 extends IntCurve_IConicTool {}

class IntCurve_IConicTool_7 extends IntCurve_IConicTool {}

/**
 * Provides methods to intersect two conics. The exception ConstructionError is raised in constructors or in Perform methods when a domain (Domain from IntRes2d) is not correct, i-e when a Circle (Circ2d from gp) or an Ellipse (i-e Elips2d from gp) do not have a closed domain (use the SetEquivalentParameters method for a domain on a circle or an ellipse).
 */
class IntCurve_IntConicConic extends IntRes2d_Intersection {
}

class IntCurve_IntConicConic_1 extends IntCurve_IntConicConic {}

class IntCurve_IntConicConic_2 extends IntCurve_IntConicConic {}

class IntCurve_IntConicConic_3 extends IntCurve_IntConicConic {}

class IntCurve_IntConicConic_4 extends IntCurve_IntConicConic {}

class IntCurve_IntConicConic_5 extends IntCurve_IntConicConic {}

class IntCurve_IntConicConic_6 extends IntCurve_IntConicConic {}

class IntCurve_IntConicConic_7 extends IntCurve_IntConicConic {}

class IntCurve_IntConicConic_8 extends IntCurve_IntConicConic {}

class IntCurve_IntConicConic_9 extends IntCurve_IntConicConic {}

class IntCurve_IntConicConic_10 extends IntCurve_IntConicConic {}

class IntCurve_IntConicConic_11 extends IntCurve_IntConicConic {}

class IntCurve_IntConicConic_12 extends IntCurve_IntConicConic {}

class IntCurve_IntConicConic_13 extends IntCurve_IntConicConic {}

class IntCurve_IntConicConic_14 extends IntCurve_IntConicConic {}

class IntCurve_IntConicConic_15 extends IntCurve_IntConicConic {}

class IntCurve_IntConicConic_16 extends IntCurve_IntConicConic {}

class IntCurve_IntImpConicParConic extends IntRes2d_Intersection {
}

class IntCurve_IntImpConicParConic_1 extends IntCurve_IntImpConicParConic {}

class IntCurve_IntImpConicParConic_2 extends IntCurve_IntImpConicParConic {}

class IntCurve_MyImpParToolOfIntImpConicParConic extends math_FunctionWithDerivative {
}

/**
 * This class represents a conic from gp as a parametric curve ( in order to be used by the class PConicTool from IntCurve).
 */
class IntCurve_PConic {
}

class IntCurve_PConic_1 extends IntCurve_PConic {}

class IntCurve_PConic_2 extends IntCurve_PConic {}

class IntCurve_PConic_3 extends IntCurve_PConic {}

class IntCurve_PConic_4 extends IntCurve_PConic {}

class IntCurve_PConic_5 extends IntCurve_PConic {}

class IntCurve_PConic_6 extends IntCurve_PConic {}

/**
 * Implementation of the ParTool from IntImpParGen for conics of gp, using the class PConic from IntCurve.
 */
class IntCurve_PConicTool {
}

/**
 * This class provides a tool which computes the parameter of a point near a parametric conic.
 */
class IntCurve_ProjectOnPConicTool {
}

class IntCurvesFace_Intersector {
}

class IntCurvesFace_ShapeIntersector {
}

/**
 * Implementation of an intersection line described by a parametrized curve.
 */
class IntPatch_ALine extends IntPatch_Line {
}

class IntPatch_ALine_1 extends IntPatch_ALine {}

class IntPatch_ALine_2 extends IntPatch_ALine {}

class IntPatch_ALine_3 extends IntPatch_ALine {}

class IntPatch_ALineToWLine {
}

class IntPatch_ArcFunction extends math_FunctionWithDerivative {
}

/**
 * this function is associated to the intersection between a curve on surface and a surface .
 */
class IntPatch_CSFunction extends math_FunctionSetWithDerivatives {
}

class IntPatch_CurvIntSurf {
}

class IntPatch_CurvIntSurf_1 extends IntPatch_CurvIntSurf {}

class IntPatch_CurvIntSurf_2 extends IntPatch_CurvIntSurf {}

/**
 * Implementation of an intersection line represented by a conic.
 */
class IntPatch_GLine extends IntPatch_Line {
}

class IntPatch_GLine_1 extends IntPatch_GLine {}

class IntPatch_GLine_2 extends IntPatch_GLine {}

class IntPatch_GLine_3 extends IntPatch_GLine {}

class IntPatch_GLine_4 extends IntPatch_GLine {}

class IntPatch_GLine_5 extends IntPatch_GLine {}

class IntPatch_GLine_6 extends IntPatch_GLine {}

class IntPatch_GLine_7 extends IntPatch_GLine {}

class IntPatch_GLine_8 extends IntPatch_GLine {}

class IntPatch_GLine_9 extends IntPatch_GLine {}

class IntPatch_GLine_10 extends IntPatch_GLine {}

class IntPatch_GLine_11 extends IntPatch_GLine {}

class IntPatch_GLine_12 extends IntPatch_GLine {}

class IntPatch_GLine_13 extends IntPatch_GLine {}

class IntPatch_GLine_14 extends IntPatch_GLine {}

class IntPatch_GLine_15 extends IntPatch_GLine {}

class IntPatch_HCurve2dTool {
}

/**
 * Tool for the intersection between 2 surfaces. Regroupe pour l instant les methodes hors Adaptor3d...
 */
class IntPatch_HInterTool {
}

/**
 * Implementation of the intersection between two quadric patches : Plane, Cone, Cylinder or Sphere.
 */
class IntPatch_ImpImpIntersection {
}

class IntPatch_ImpImpIntersection_1 extends IntPatch_ImpImpIntersection {}

class IntPatch_ImpImpIntersection_2 extends IntPatch_ImpImpIntersection {}

/**
 * Implementation of the intersection between a natural quadric patch : Plane, Cone, Cylinder or Sphere and a bi-parametrised surface.
 */
class IntPatch_ImpPrmIntersection {
}

class IntPatch_ImpPrmIntersection_1 extends IntPatch_ImpPrmIntersection {}

class IntPatch_ImpPrmIntersection_2 extends IntPatch_ImpPrmIntersection {}

/**
 * Computes the interference between two polyhedra or the self interference of a polyhedron. Points of intersection, polylines of intersection and zones of tangence.
 */
class IntPatch_InterferencePolyhedron extends Intf_Interference {
}

class IntPatch_InterferencePolyhedron_1 extends IntPatch_InterferencePolyhedron {}

class IntPatch_InterferencePolyhedron_2 extends IntPatch_InterferencePolyhedron {}

class IntPatch_InterferencePolyhedron_3 extends IntPatch_InterferencePolyhedron {}

/**
 * This class provides a generic algorithm to intersect 2 surfaces.
 */
class IntPatch_Intersection {
}

class IntPatch_Intersection_1 extends IntPatch_Intersection {}

class IntPatch_Intersection_2 extends IntPatch_Intersection {}

class IntPatch_Intersection_3 extends IntPatch_Intersection {}

/**
 * Definition of an intersection line between two surfaces. A line may be either geometric : line, circle, ellipse, parabola, hyperbola, as defined in the class GLine, or analytic, as defined in the class ALine, or defined by a set of points (coming from a walking algorithm) as defined in the class WLine.
 */
class IntPatch_Line extends Standard_Transient {
}

/**
 * The intersections algorithms compute the intersection on two surfaces and return the intersections lines as IntPatch_Line.
 */
class IntPatch_LineConstructor {
}

/**
 * Definition of an intersection point between two surfaces. Such a point is contains geometrical informations (see the Value method) and logical informations.
 */
class IntPatch_Point {
}

/**
 * Definition of an intersection line between two surfaces. A line defined by a set of points (e.g. coming from a walking algorithm) as defined in the class WLine or RLine (Restriction line).
 */
class IntPatch_PointLine extends IntPatch_Line {
}

class IntPatch_PolyArc extends IntPatch_Polygo {
}

class IntPatch_PolyLine extends IntPatch_Polygo {
}

class IntPatch_PolyLine_1 extends IntPatch_PolyLine {}

class IntPatch_PolyLine_2 extends IntPatch_PolyLine {}

class IntPatch_Polygo extends Intf_Polygon2d {
}

/**
 * Describe the signature of a polyedral surface with only triangular facets and the necessary informations to compute the interferences.
 */
class IntPatch_PolyhedronTool {
}

/**
 * Implementation of the Intersection between two bi-parametrised surfaces.
 */
class IntPatch_PrmPrmIntersection {
}

class IntPatch_PrmPrmIntersection_T3Bits {
}

/**
 * trouver les points d intersection entre la ligne de cheminement et les arcs de restriction
 */
class IntPatch_RstInt {
}

class IntPatch_SpecialPoints {
}

class IntPatch_TheIWLineOfTheIWalking extends Standard_Transient {
}

class IntPatch_TheIWalking {
}

class IntPatch_ThePathPointOfTheSOnBounds {
}

class IntPatch_ThePathPointOfTheSOnBounds_1 extends IntPatch_ThePathPointOfTheSOnBounds {}

class IntPatch_ThePathPointOfTheSOnBounds_2 extends IntPatch_ThePathPointOfTheSOnBounds {}

class IntPatch_ThePathPointOfTheSOnBounds_3 extends IntPatch_ThePathPointOfTheSOnBounds {}

class IntPatch_TheSOnBounds {
}

class IntPatch_TheSearchInside {
}

class IntPatch_TheSearchInside_1 extends IntPatch_TheSearchInside {}

class IntPatch_TheSearchInside_2 extends IntPatch_TheSearchInside {}

class IntPatch_TheSegmentOfTheSOnBounds {
}

class IntPatch_TheSurfFunction extends math_FunctionSetWithDerivatives {
}

class IntPatch_TheSurfFunction_1 extends IntPatch_TheSurfFunction {}

class IntPatch_TheSurfFunction_2 extends IntPatch_TheSurfFunction {}

class IntPatch_TheSurfFunction_3 extends IntPatch_TheSurfFunction {}

/**
 * Definition of set of points as a result of the intersection between 2 parametrised patches.
 */
class IntPatch_WLine extends IntPatch_PointLine {
}

class IntPatch_WLine_1 extends IntPatch_WLine {}

class IntPatch_WLine_2 extends IntPatch_WLine {}

class IntPatch_WLine_3 extends IntPatch_WLine {}

/**
 * IntPatch_WLineTool provides set of static methods related to walking lines.
 */
class IntPatch_WLineTool {
}

/**
 * The class represents the couple of indices with additional characteristics such as analyzed flag and an angle. In IntPolyh_MaillageAffinage algorithm the class is used as a couple of interfering triangles with the intersection angle.
 */
class IntPolyh_Couple {
}

class IntPolyh_Couple_1 extends IntPolyh_Couple {}

class IntPolyh_Couple_2 extends IntPolyh_Couple {}

class IntPolyh_CoupleMapHasher {
}

/**
 * The class represents the edge built between the two IntPolyh points. It is linked to two IntPolyh triangles.
 */
class IntPolyh_Edge {
}

class IntPolyh_Edge_1 extends IntPolyh_Edge {}

class IntPolyh_Edge_2 extends IntPolyh_Edge {}

/**
 * API algorithm for intersection of two surfaces by intersection of their triangulations.
 */
class IntPolyh_Intersection {
}

class IntPolyh_Intersection_1 extends IntPolyh_Intersection {}

class IntPolyh_Intersection_2 extends IntPolyh_Intersection {}

class IntPolyh_Intersection_3 extends IntPolyh_Intersection {}

/**
 * The class represents the point on the surface with both 3D and 2D points.
 */
class IntPolyh_Point {
}

class IntPolyh_Point_1 extends IntPolyh_Point {}

class IntPolyh_Point_2 extends IntPolyh_Point {}

class IntPolyh_SectionLine {
}

class IntPolyh_SectionLine_1 extends IntPolyh_SectionLine {}

class IntPolyh_SectionLine_2 extends IntPolyh_SectionLine {}

class IntPolyh_StartPoint {
}

class IntPolyh_StartPoint_1 extends IntPolyh_StartPoint {}

class IntPolyh_StartPoint_2 extends IntPolyh_StartPoint {}

/**
 * The class provides tools for surface sampling.
 */
class IntPolyh_Tools {
}

/**
 * The class represents the triangle built from three IntPolyh points and three IntPolyh edges.
 */
class IntPolyh_Triangle {
}

class IntPolyh_Triangle_1 extends IntPolyh_Triangle {}

class IntPolyh_Triangle_2 extends IntPolyh_Triangle {}

/**
 * Definition of the domain of parameter on a 2d-curve. Most of the time, a domain is defined by two extremities. An extremity is made of : - a point in 2d-space (Pnt2d from gp), - a parameter on the curve, - a tolerance in the 2d-space. Sometimes, it can be made of 0 or 1 point ( for an infinite or semi-infinite line for example).
 */
class IntRes2d_Domain {
}

class IntRes2d_Domain_1 extends IntRes2d_Domain {}

class IntRes2d_Domain_2 extends IntRes2d_Domain {}

class IntRes2d_Domain_3 extends IntRes2d_Domain {}

/**
 * Defines the root class of all the Intersections between two 2D-Curves, and provides all the methods about the results of the Intersections Algorithms.
 */
class IntRes2d_Intersection {
}

/**
 * Definition of an intersection point between two 2D curves.
 */
class IntRes2d_IntersectionPoint {
}

class IntRes2d_IntersectionPoint_1 extends IntRes2d_IntersectionPoint {}

class IntRes2d_IntersectionPoint_2 extends IntRes2d_IntersectionPoint {}

/**
 * Definition of an intersection curve between two 2D curves.
 */
class IntRes2d_IntersectionSegment {
}

class IntRes2d_IntersectionSegment_1 extends IntRes2d_IntersectionSegment {}

class IntRes2d_IntersectionSegment_2 extends IntRes2d_IntersectionSegment {}

class IntRes2d_IntersectionSegment_3 extends IntRes2d_IntersectionSegment {}

class IntRes2d_IntersectionSegment_4 extends IntRes2d_IntersectionSegment {}

/**
 * Definition of the type of transition near an intersection point between two curves. The transition is either a "true transition", which means that one of the curves goes inside or outside the area defined by the other curve near the intersection, or a "touch transition" which means that the first curve does not cross the other one, or an "undecided" transition, which means that the curves are superposed.
 */
class IntRes2d_Transition {
}

class IntRes2d_Transition_1 extends IntRes2d_Transition {}

class IntRes2d_Transition_2 extends IntRes2d_Transition {}

class IntRes2d_Transition_3 extends IntRes2d_Transition {}

class IntRes2d_Transition_4 extends IntRes2d_Transition {}

/**
 * template class for a topological tool. This tool is linked with the surface on which the classification has to be made.
 */
class IntStart_SITopolTool extends Standard_Transient {
}

/**
 * This package provides resources for all the packages concerning the intersection between surfaces.
 */
class IntSurf {
}

/**
 * creation d 'un couple de 2 entiers
 */
class IntSurf_Couple {
}

class IntSurf_Couple_1 extends IntSurf_Couple {}

class IntSurf_Couple_2 extends IntSurf_Couple {}

/**
 * Definition of a point solution of the intersection between an implicit an a parametrised surface. These points are passing points on the intersection lines, or starting points for the closed lines on the parametrised surface.
 */
class IntSurf_InteriorPoint {
}

class IntSurf_InteriorPoint_1 extends IntSurf_InteriorPoint {}

class IntSurf_InteriorPoint_2 extends IntSurf_InteriorPoint {}

/**
 * This class provides a tool on the "interior point" that can be used to instantiates the Walking algorithmes (see package IntWalk).
 */
class IntSurf_InteriorPointTool {
}

class IntSurf_LineOn2S extends Standard_Transient {
}

class IntSurf_PathPoint {
}

class IntSurf_PathPoint_1 extends IntSurf_PathPoint {}

class IntSurf_PathPoint_2 extends IntSurf_PathPoint {}

class IntSurf_PathPointTool {
}

/**
 * This class defines the geometric informations for an intersection point between 2 surfaces : The coordinates ( Pnt from gp ), and two parametric coordinates.
 */
class IntSurf_PntOn2S {
}

class IntSurf_Quadric {
}

class IntSurf_Quadric_1 extends IntSurf_Quadric {}

class IntSurf_Quadric_2 extends IntSurf_Quadric {}

class IntSurf_Quadric_3 extends IntSurf_Quadric {}

class IntSurf_Quadric_4 extends IntSurf_Quadric {}

class IntSurf_Quadric_5 extends IntSurf_Quadric {}

class IntSurf_Quadric_6 extends IntSurf_Quadric {}

/**
 * This class provides a tool on a quadric that can be used to instantiates the Walking algorithmes (see package IntWalk) with a Quadric from IntSurf as implicit surface.
 */
class IntSurf_QuadricTool {
}

/**
 * Definition of the transition at the intersection between an intersection line and a restriction curve on a surface.
 */
class IntSurf_Transition {
}

class IntSurf_Transition_1 extends IntSurf_Transition {}

class IntSurf_Transition_2 extends IntSurf_Transition {}

class IntSurf_Transition_3 extends IntSurf_Transition {}

/**
 * Contains classes for intersection and classification purposes and accompanying classes
 */
class IntTools {
}

/**
 * base class for range index management
 */
class IntTools_BaseRangeSample {
}

class IntTools_BaseRangeSample_1 extends IntTools_BaseRangeSample {}

class IntTools_BaseRangeSample_2 extends IntTools_BaseRangeSample {}

/**
 * The class BeanFaceIntersector computes ranges of parameters on the curve of a bean(part of edge) that bound the parts of bean which are on the surface of a face according to edge and face tolerances. Warning: The real boundaries of the face are not taken into account, Most of the result parts of the bean lays only inside the region of the surface, which includes the inside of the face. And the parts which are out of this region can be excluded from the result.
 */
class IntTools_BeanFaceIntersector {
}

class IntTools_BeanFaceIntersector_1 extends IntTools_BeanFaceIntersector {}

class IntTools_BeanFaceIntersector_2 extends IntTools_BeanFaceIntersector {}

class IntTools_BeanFaceIntersector_3 extends IntTools_BeanFaceIntersector {}

class IntTools_BeanFaceIntersector_4 extends IntTools_BeanFaceIntersector {}

class IntTools_CArray1OfInteger {
}

class IntTools_CArray1OfInteger_1 extends IntTools_CArray1OfInteger {}

class IntTools_CArray1OfInteger_2 extends IntTools_CArray1OfInteger {}

class IntTools_CArray1OfReal {
}

class IntTools_CArray1OfReal_1 extends IntTools_CArray1OfReal {}

class IntTools_CArray1OfReal_2 extends IntTools_CArray1OfReal {}

/**
 * The class is to describe a common part between two edges in 3-d space.
 */
class IntTools_CommonPrt {
}

class IntTools_CommonPrt_1 extends IntTools_CommonPrt {}

class IntTools_CommonPrt_2 extends IntTools_CommonPrt {}

/**
 * The class is a container of one 3D curve, two 2D curves and two Tolerance values. It is used in the Face/Face intersection algorithm to store the results of intersection. In this context: **the 3D curve** is the intersection curve; **the 2D curves** are the PCurves of the 3D curve on the intersecting faces; **the tolerance** is the valid tolerance for 3D curve computed as maximal deviation between 3D curve and 2D curves (or surfaces in case there are no 2D curves); **the tangential tolerance** is the maximal distance from 3D curve to the end of the tangential zone between faces in terms of their tolerance values.
 */
class IntTools_Curve {
}

class IntTools_Curve_1 extends IntTools_Curve {}

class IntTools_Curve_2 extends IntTools_Curve {}

class IntTools_CurveRangeLocalizeData {
}

/**
 * class for range index management of curve
 */
class IntTools_CurveRangeSample extends IntTools_BaseRangeSample {
}

class IntTools_CurveRangeSample_1 extends IntTools_CurveRangeSample {}

class IntTools_CurveRangeSample_2 extends IntTools_CurveRangeSample {}

/**
 * class for range index management of curve
 */
class IntTools_CurveRangeSampleMapHasher {
}

/**
 * The class provides Edge/Edge intersection algorithm based on the intersection between edges bounding boxes.
 */
class IntTools_EdgeEdge {
}

class IntTools_EdgeEdge_1 extends IntTools_EdgeEdge {}

class IntTools_EdgeEdge_2 extends IntTools_EdgeEdge {}

class IntTools_EdgeEdge_3 extends IntTools_EdgeEdge {}

/**
 * The class provides Edge/Face intersection algorithm to determine common parts between edge and face in 3-d space. Common parts between Edge and Face can be: - Vertices - in case of intersection or touching; - Edge - in case of full coincidence of the edge with the face.
 */
class IntTools_EdgeFace {
}

/**
 * Class provides an algorithm to classify a 2d Point in 2d space of face using boundaries of the face.
 */
class IntTools_FClass2d {
}

class IntTools_FClass2d_1 extends IntTools_FClass2d {}

class IntTools_FClass2d_2 extends IntTools_FClass2d {}

/**
 * This class provides the intersection of face's underlying surfaces.
 */
class IntTools_FaceFace {
}

/**
 * class MarkedRangeSet provides continuous set of ranges marked with flags
 */
class IntTools_MarkedRangeSet {
}

class IntTools_MarkedRangeSet_1 extends IntTools_MarkedRangeSet {}

class IntTools_MarkedRangeSet_2 extends IntTools_MarkedRangeSet {}

class IntTools_MarkedRangeSet_3 extends IntTools_MarkedRangeSet {}

/**
 * Contains two points PntOnFace from IntTools and a flag
 */
class IntTools_PntOn2Faces {
}

class IntTools_PntOn2Faces_1 extends IntTools_PntOn2Faces {}

class IntTools_PntOn2Faces_2 extends IntTools_PntOn2Faces {}

/**
 * The class describes the 1-d range [myFirst, myLast].
 */
class IntTools_Range {
}

class IntTools_Range_1 extends IntTools_Range {}

class IntTools_Range_2 extends IntTools_Range {}

/**
 * The class is to describe the root of function of one variable for Edge/Edge and Edge/Surface algorithms.
 */
class IntTools_Root {
}

class IntTools_Root_1 extends IntTools_Root {}

class IntTools_Root_2 extends IntTools_Root {}

/**
 * The class provides the computation of a working (shrunk) range [t1, t2] for the 3D-curve of the edge.
 */
class IntTools_ShrunkRange {
}

class IntTools_SurfaceRangeLocalizeData {
}

class IntTools_SurfaceRangeLocalizeData_1 extends IntTools_SurfaceRangeLocalizeData {}

class IntTools_SurfaceRangeLocalizeData_2 extends IntTools_SurfaceRangeLocalizeData {}

class IntTools_SurfaceRangeLocalizeData_3 extends IntTools_SurfaceRangeLocalizeData {}

/**
 * class for range index management of surface
 */
class IntTools_SurfaceRangeSample {
}

class IntTools_SurfaceRangeSample_1 extends IntTools_SurfaceRangeSample {}

class IntTools_SurfaceRangeSample_2 extends IntTools_SurfaceRangeSample {}

class IntTools_SurfaceRangeSample_3 extends IntTools_SurfaceRangeSample {}

class IntTools_SurfaceRangeSample_4 extends IntTools_SurfaceRangeSample {}

class IntTools_SurfaceRangeSampleMapHasher {
}

/**
 * The class contains handy static functions dealing with the geometry and topology.
 */
class IntTools_Tools {
}

/**
 * Class redefine methods of TopolTool from Adaptor3d concerning sample points
 */
class IntTools_TopolTool extends Adaptor3d_TopolTool {
}

class IntTools_TopolTool_1 extends IntTools_TopolTool {}

class IntTools_TopolTool_2 extends IntTools_TopolTool {}

/**
 * IntTools_WLineTool provides set of static methods related to walking lines.
 */
class IntTools_WLineTool {
}

/**
 * This class implements an algorithm to determine the intersection between 2 parametrized surfaces, marching from a starting point. The intersection line starts and ends on the natural surface's boundaries .
 */
class IntWalk_PWalking {
}

class IntWalk_PWalking_1 extends IntWalk_PWalking {}

class IntWalk_PWalking_2 extends IntWalk_PWalking {}

class IntWalk_TheFunctionOfTheInt2S extends math_FunctionSetWithDerivatives {
}

class IntWalk_TheInt2S {
}

class IntWalk_TheInt2S_1 extends IntWalk_TheInt2S {}

class IntWalk_TheInt2S_2 extends IntWalk_TheInt2S {}

/**
 * A bit map simply allows to associate a boolean flag to each item of a list, such as a list of entities, etc... numbered between 1 and a positive count nbitems
 */
class Interface_BitMap {
}

class Interface_BitMap_1 extends Interface_BitMap {}

class Interface_BitMap_2 extends Interface_BitMap {}

class Interface_BitMap_3 extends Interface_BitMap {}

/**
 * This class manages categories A category is defined by a name and a number, and can be seen as a way of rough classification, i.e. less precise than a cdl type. Hence, it is possible to dispatch every entity in about a dozen of categories, twenty is a reasonable maximum.
 */
class Interface_Category {
}

class Interface_Category_1 extends Interface_Category {}

class Interface_Category_2 extends Interface_Category {}

class Interface_Category_3 extends Interface_Category {}

/**
 * Defines a Check, as a list of Fail or Warning Messages under a literal form, which can be empty. A Check can also bring an Entity, which is the Entity to which the messages apply (this Entity may be any Transient Object).
 */
class Interface_Check extends Standard_Transient {
}

class Interface_Check_1 extends Interface_Check {}

class Interface_Check_2 extends Interface_Check {}

class Interface_CheckFailure extends Interface_InterfaceError {
}

class Interface_CheckFailure_1 extends Interface_CheckFailure {}

class Interface_CheckFailure_2 extends Interface_CheckFailure {}

/**
 * Result of a Check operation (especially from InterfaceModel)
 */
class Interface_CheckIterator {
}

class Interface_CheckIterator_1 extends Interface_CheckIterator {}

class Interface_CheckIterator_2 extends Interface_CheckIterator {}

/**
 * Performs Checks on Entities, using General Service Library and Modules to work. Works on one Entity or on a complete Model
 */
class Interface_CheckTool {
}

class Interface_CheckTool_1 extends Interface_CheckTool {}

class Interface_CheckTool_2 extends Interface_CheckTool {}

class Interface_CheckTool_3 extends Interface_CheckTool {}

class Interface_CheckTool_4 extends Interface_CheckTool {}

/**
 * This deferred class describes the services required by CopyTool to work. They are very simple and correspond basically to the management of an indexed map. But they can be provided by various classes which can control a Transfer. Each Starting Entity have at most one Result (Mapping one-one)
 */
class Interface_CopyControl extends Standard_Transient {
}

/**
 * Manages a Map for the need of single Transfers, such as Copies In such transfer, Starting Entities are read from a unique Starting Model, and each transferred Entity is bound to one and only one Result, which cannot be changed later.
 */
class Interface_CopyMap extends Interface_CopyControl {
}

/**
 * Performs Deep Copies of sets of Entities Allows to perform Copy of Interface Entities from a Model to another one. Works by calling general services GetFromAnother and GetImplied. Uses a CopyMap to bind a unique Result to each Copied Entity
 */
class Interface_CopyTool {
}

class Interface_CopyTool_1 extends Interface_CopyTool {}

class Interface_CopyTool_2 extends Interface_CopyTool {}

class Interface_CopyTool_3 extends Interface_CopyTool {}

/**
 * Auxiliary class for EntityList. An EntityList designates an EntityCluster, which brings itself an fixed maximum count of Entities. If it is full, it gives access to another cluster ("Next"). This class is intended to give a good compromise between access time (faster than a Sequence, good for little count) and memory use (better than a Sequence in any case, overall for little count, better than an Array for a very little count. It is designed for a light management. Remark that a new Item may not be Null, because this is the criterium used for "End of List"
 */
class Interface_EntityCluster extends Standard_Transient {
}

class Interface_EntityCluster_1 extends Interface_EntityCluster {}

class Interface_EntityCluster_2 extends Interface_EntityCluster {}

class Interface_EntityCluster_3 extends Interface_EntityCluster {}

class Interface_EntityCluster_4 extends Interface_EntityCluster {}

/**
 * Defines an Iterator on Entities. Allows considering of various criteria
 */
class Interface_EntityIterator {
}

class Interface_EntityIterator_1 extends Interface_EntityIterator {}

class Interface_EntityIterator_2 extends Interface_EntityIterator {}

/**
 * This class defines a list of Entities (Transient Objects), it can be used as a field of other Transient classes, with these features : - oriented to define a little list, that is, slower than an Array or a Map of Entities for a big count (about 100 and over), but faster than a Sequence - allows to work as a Sequence, limited to Clear, Append, Remove, Access to an Item identified by its rank in the list - space saving, compared to a Sequence, especially for little amounts; better than an Array for a very little amount (less than 10) but less good for a greater amount
 */
class Interface_EntityList {
}

/**
 * Auxiliary class to store a litteral parameter in a file intermediate directory or in an UndefinedContent : a reference type Parameter detains an Integer which is used to address a record in the directory. FileParameter is intended to be stored in a ParamSet : hence memory management is performed by ParamSet, which calls Clear to work, while the Destructor (see Destroy) does nothing. Also a FileParameter can be read for consultation only, not to be read from a Structure to be included into another one.
 */
class Interface_FileParameter {
}

/**
 * Defines services which are required to load an InterfaceModel from a File. Typically, it may firstly transform a system file into a FileReaderData object, then work on it, not longer considering file contents, to load an Interface Model. It may also work on a FileReaderData already loaded.
 */
class Interface_FileReaderTool {
}

/**
 * This class converts a floting number (Real) to a string It can be used if the standard C-C++ output functions (sprintf or std::cout<<) are not convenient. That is to say : - to suppress trailing '0' and 'E+00' (if desired) - to control exponant output and floating point output
 */
class Interface_FloatWriter {
}

/**
 * GTool - General Tool for a Model Provides the functions performed by Protocol/GeneralModule for entities of a Model, and recorded in a GeneralLib Optimized : once an entity has been queried, the GeneralLib is not longer queried Shareable between several users : as a Handle
 */
class Interface_GTool extends Standard_Transient {
}

class Interface_GTool_1 extends Interface_GTool {}

class Interface_GTool_2 extends Interface_GTool {}

class Interface_GeneralLib {
}

class Interface_GeneralLib_1 extends Interface_GeneralLib {}

class Interface_GeneralLib_2 extends Interface_GeneralLib {}

class Interface_GlobalNodeOfGeneralLib extends Standard_Transient {
}

class Interface_GlobalNodeOfReaderLib extends Standard_Transient {
}

/**
 * Defines general form for classes of graph algorithms on Interfaces, this form is that of EntityIterator Each sub-class fills it according to its own algorithm This also allows to combine any graph result to others, all being given under one unique form
 */
class Interface_GraphContent extends Interface_EntityIterator {
}

class Interface_GraphContent_1 extends Interface_GraphContent {}

class Interface_GraphContent_2 extends Interface_GraphContent {}

class Interface_GraphContent_3 extends Interface_GraphContent {}

class Interface_GraphContent_4 extends Interface_GraphContent {}

/**
 * This class detains the data which describe a Graph. A Graph has two lists, one for shared refs, one for sharing refs (the reverses). Each list comprises, for each Entity of the Model of the Graph, a list of Entities (shared or sharing). In fact, entities are identified by their numbers in the Model or Graph : this gives better performances.
 */
class Interface_IntList {
}

class Interface_IntList_1 extends Interface_IntList {}

class Interface_IntList_2 extends Interface_IntList {}

class Interface_IntList_3 extends Interface_IntList {}

/**
 * An Integer through a Handle (i.e. managed as TShared)
 */
class Interface_IntVal extends Standard_Transient {
}

class Interface_InterfaceError extends Standard_Failure {
}

class Interface_InterfaceError_1 extends Interface_InterfaceError {}

class Interface_InterfaceError_2 extends Interface_InterfaceError {}

class Interface_InterfaceMismatch extends Interface_InterfaceError {
}

class Interface_InterfaceMismatch_1 extends Interface_InterfaceMismatch {}

class Interface_InterfaceMismatch_2 extends Interface_InterfaceMismatch {}

/**
 * Defines an (Indexed) Set of data corresponding to a complete Transfer by a File Interface, i.e. File Header and Transient Entities (Objects) contained in a File. Contained Entities are identified in the Model by unique and consecutive Numbers.
 */
class Interface_InterfaceModel extends Standard_Transient {
}

/**
 * Simple Management of a Line Buffer, to be used by Interface File Writers. While a String is suitable to do that, this class ensures an optimised Memory Management, because this is a hard point of File Writing.
 */
class Interface_LineBuffer {
}

/**
 * This class gives a set of functions to manage and use a list of translated messages (messagery)
 */
class Interface_MSG {
}

class Interface_MSG_1 extends Interface_MSG {}

class Interface_MSG_2 extends Interface_MSG {}

class Interface_MSG_3 extends Interface_MSG {}

class Interface_MSG_4 extends Interface_MSG {}

class Interface_MSG_5 extends Interface_MSG {}

class Interface_MSG_6 extends Interface_MSG {}

class Interface_MapAsciiStringHasher {
}

class Interface_NodeOfGeneralLib extends Standard_Transient {
}

class Interface_NodeOfReaderLib extends Standard_Transient {
}

class Interface_ParamList extends Standard_Transient {
}

/**
 * Defines an ordered set of FileParameters, in a way to be efficient as in memory requirement or in speed
 */
class Interface_ParamSet extends Standard_Transient {
}

/**
 * General description of Interface Protocols. A Protocol defines a set of Entity types. This class provides also the notion of Active Protocol, as a working context, defined once then exploited by various Tools and Libraries.
 */
class Interface_Protocol extends Standard_Transient {
}

class Interface_ReaderLib {
}

class Interface_ReaderLib_1 extends Interface_ReaderLib {}

class Interface_ReaderLib_2 extends Interface_ReaderLib {}

/**
 * Defines unitary operations required to read an Entity from a File (see FileReaderData, FileReaderTool), under control of a FileReaderTool. The initial creation is performed by a GeneralModule (set in GeneralLib). Then, which remains is Loading data from the FileReaderData to the Entity
 */
class Interface_ReaderModule extends Standard_Transient {
}

/**
 * A ReportEntity is produced to aknowledge and memorize the binding between a Check and an Entity. The Check can bring Fails (+ Warnings if any), or only Warnings. If it is empty, the Report Entity is for an Unknown Entity.
 */
class Interface_ReportEntity extends Standard_Transient {
}

class Interface_ReportEntity_1 extends Interface_ReportEntity {}

class Interface_ReportEntity_2 extends Interface_ReportEntity {}

/**
 * This class manages statistics to be queried asynchronously. Way of use : An operator describes a STAT form then fills it according to its progression. This produces a state of advancement of the process. This state can then be queried asynchronously : typically it is summarised as a percentage. There are also an identification of the current state, and informations on processed volume.
 */
class Interface_STAT {
}

class Interface_STAT_1 extends Interface_STAT {}

class Interface_STAT_2 extends Interface_STAT {}

/**
 * This class only says for each Entity of a Model, if it is Shared or not by one or more other(s) of this Model It uses the General Service "Shared".
 */
class Interface_ShareFlags {
}

class Interface_ShareFlags_1 extends Interface_ShareFlags {}

class Interface_ShareFlags_2 extends Interface_ShareFlags {}

class Interface_ShareFlags_3 extends Interface_ShareFlags {}

class Interface_ShareFlags_4 extends Interface_ShareFlags {}

class Interface_ShareFlags_5 extends Interface_ShareFlags {}

/**
 * Builds the Graph of Dependancies, from the General Service "Shared" -> builds for each Entity of a Model, the Shared and Sharing Lists, and gives access to them. Allows to complete with Implied References (which are not regarded as Shared Entities, but are nevertheless Referenced), this can be usefull for Reference Checking
 */
class Interface_ShareTool {
}

class Interface_ShareTool_1 extends Interface_ShareTool {}

class Interface_ShareTool_2 extends Interface_ShareTool {}

class Interface_ShareTool_3 extends Interface_ShareTool {}

class Interface_ShareTool_4 extends Interface_ShareTool {}

class Interface_ShareTool_5 extends Interface_ShareTool {}

class Interface_ShareTool_6 extends Interface_ShareTool {}

/**
 * Signature to give the Label from the Model
 */
class Interface_SignLabel extends MoniTool_SignText {
}

/**
 * Provides the basic service to get a type name, according to a norm It can be used for other classes (general signatures ...)
 */
class Interface_SignType extends MoniTool_SignText {
}

/**
 * This class gives a way to manage meaningfull static variables, used as "global" parameters in various procedures.
 */
class Interface_Static extends Interface_TypedValue {
}

class Interface_Static_1 extends Interface_Static {}

class Interface_Static_2 extends Interface_Static {}

/**
 * Now strictly equivalent to TypedValue from MoniTool, except for ParamType which remains for compatibility reasons
 */
class Interface_TypedValue extends MoniTool_TypedValue {
}

/**
 * Defines resources for an "Undefined Entity" : such an Entity is used to describe an Entity which complies with the Norm, but of an Unknown Type : hence it is kept under a literal form (avoiding to loose data). UndefinedContent offers a way to store a list of Parameters, as literals or references to other Entities
 */
class Interface_UndefinedContent extends Standard_Transient {
}

class Interval {
}

class Interval_1 extends Interval {}

class Interval_2 extends Interval {}

class Interval_3 extends Interval {}

class Interval_4 extends Interval {}

/**
 * Interference computation between polygons, lines and polyhedra with only triangular facets. These objects are polygonal representations of complex curves and triangulated representations of complex surfaces.
 */
class Intf {
}

/**
 * Describes the Interference computation result between polygon2d or polygon3d or polyhedron (as three sequences of points of intersection, polylines of intersection and zones de tangence).
 */
class Intf_Interference {
}

/**
 * Computes the interference between two polygons or the self intersection of a polygon in two dimensions.
 */
class Intf_InterferencePolygon2d extends Intf_Interference {
}

class Intf_InterferencePolygon2d_1 extends Intf_InterferencePolygon2d {}

class Intf_InterferencePolygon2d_2 extends Intf_InterferencePolygon2d {}

class Intf_InterferencePolygon2d_3 extends Intf_InterferencePolygon2d {}

/**
 * Describes the necessary polygon information to compute the interferences.
 */
class Intf_Polygon2d {
}

/**
 * Describe a polyline of intersection between two polyhedra as a sequence of points of intersection.
 */
class Intf_SectionLine {
}

class Intf_SectionLine_1 extends Intf_SectionLine {}

class Intf_SectionLine_2 extends Intf_SectionLine {}

/**
 * Describes an intersection point between polygons and polyedra.
 */
class Intf_SectionPoint {
}

class Intf_SectionPoint_1 extends Intf_SectionPoint {}

class Intf_SectionPoint_2 extends Intf_SectionPoint {}

class Intf_SectionPoint_3 extends Intf_SectionPoint {}

/**
 * Describes a zone of tangence between polygons or polyhedra as a sequence of points of intersection.
 */
class Intf_TangentZone {
}

class Intf_TangentZone_1 extends Intf_TangentZone {}

class Intf_TangentZone_2 extends Intf_TangentZone {}

/**
 * Provides services to create box for infinites lines in a given contexte.
 */
class Intf_Tool {
}

/**
 * **-----------**** Other ***---* IsBefore ***----------* IsJustBefore ***---------------* IsOverlappingAtStart ***------------------------* IsJustEnclosingAtEnd ***-----------------------------------* IsEnclosing ***----* IsJustOverlappingAtStart ***-------------* IsSimilar ***------------------------* IsJustEnclosingAtStart ***-* IsInside ***------* IsJustOverlappingAtEnd ***-----------------* IsOverlappingAtEnd ***--------* IsJustAfter ***---* IsAfter
 */
class Intrv_Interval {
}

class Intrv_Interval_1 extends Intrv_Interval {}

class Intrv_Interval_2 extends Intrv_Interval {}

class Intrv_Interval_3 extends Intrv_Interval {}

/**
 * The class Intervals is a sorted sequence of non overlapping Real Intervals.
 */
class Intrv_Intervals {
}

class Intrv_Intervals_1 extends Intrv_Intervals {}

class Intrv_Intervals_2 extends Intrv_Intervals {}

class Intrv_Intervals_3 extends Intrv_Intervals {}

class LDOMBasicString {
}

class LDOMBasicString_1 extends LDOMBasicString {}

class LDOMBasicString_2 extends LDOMBasicString {}

class LDOMBasicString_3 extends LDOMBasicString {}

class LDOMBasicString_4 extends LDOMBasicString {}

class LDOMBasicString_5 extends LDOMBasicString {}

class LDOMBasicString_6 extends LDOMBasicString {}

class LDOMParser {
}

class LDOM_Attr extends LDOM_Node {
}

class LDOM_Attr_1 extends LDOM_Attr {}

class LDOM_Attr_2 extends LDOM_Attr {}

class LDOM_BasicAttribute extends LDOM_BasicNode {
}

class LDOM_BasicElement extends LDOM_BasicNode {
}

class LDOM_BasicNode {
}

class LDOM_BasicText extends LDOM_BasicNode {
}

class LDOM_CDATASection extends LDOM_Text {
}

class LDOM_CDATASection_1 extends LDOM_CDATASection {}

class LDOM_CDATASection_2 extends LDOM_CDATASection {}

class LDOM_CharReference {
}

class LDOM_CharacterData extends LDOM_Node {
}

class LDOM_CharacterData_1 extends LDOM_CharacterData {}

class LDOM_CharacterData_2 extends LDOM_CharacterData {}

class LDOM_Comment extends LDOM_CharacterData {
}

class LDOM_Comment_1 extends LDOM_Comment {}

class LDOM_Comment_2 extends LDOM_Comment {}

class LDOM_Document {
}

class LDOM_Document_1 extends LDOM_Document {}

class LDOM_Document_2 extends LDOM_Document {}

class LDOM_DocumentType {
}

class LDOM_Element extends LDOM_Node {
}

class LDOM_Element_1 extends LDOM_Element {}

class LDOM_Element_2 extends LDOM_Element {}

class LDOM_LDOMImplementation {
}

class LDOM_NodeList {
}

class LDOM_NodeList_1 extends LDOM_NodeList {}

class LDOM_NodeList_2 extends LDOM_NodeList {}

/**
 * Subclass if std::ostream allowing to increase performance of outputting data into a string avoiding reallocation of buffer. Class LDOM_OSStream implements output into a sequence of strings and getting the result as a string. It inherits Standard_OStream (std::ostream). Beside methods of std::ostream, it also has additional useful methods: str(), Length() and Clear().
 */
class LDOM_OSStream extends Standard_OStream {
}

}

class LDOM_Text extends LDOM_CharacterData {
}

class LDOM_Text_1 extends LDOM_Text {}

class LDOM_Text_2 extends LDOM_Text {}

class LDOM_XmlReader {
}

class LDOM_XmlWriter {
}

class LProp3d_CLProps {
}

class LProp3d_CLProps_1 extends LProp3d_CLProps {}

class LProp3d_CLProps_2 extends LProp3d_CLProps {}

class LProp3d_CLProps_3 extends LProp3d_CLProps {}

class LProp3d_CurveTool {
}

class LProp3d_SLProps {
}

class LProp3d_SLProps_1 extends LProp3d_SLProps {}

class LProp3d_SLProps_2 extends LProp3d_SLProps {}

class LProp3d_SLProps_3 extends LProp3d_SLProps {}

class LProp3d_SurfaceTool {
}

/**
 * Computes the locals extremas of curvature of a gp curve Remark : a gp curve has not inflection.
 */
class LProp_AnalyticCurInf {
}

class LProp_BadContinuity extends Standard_Failure {
}

class LProp_BadContinuity_1 extends LProp_BadContinuity {}

class LProp_BadContinuity_2 extends LProp_BadContinuity {}

/**
 * Stores the parameters of a curve 2d or 3d corresponding to the curvature's extremas and the Inflection's Points.
 */
class LProp_CurAndInf {
}

class LProp_NotDefined extends Standard_Failure {
}

class LProp_NotDefined_1 extends LProp_NotDefined {}

class LProp_NotDefined_2 extends LProp_NotDefined {}

/**
 * Multiple services concerning 1d functions.
 */
class Law {
}

/**
 * Law Function based on a BSpline curve 1d. Package methods and classes are implemented in package Law to construct the basis curve with several constraints.
 */
class Law_BSpFunc extends Law_Function {
}

class Law_BSpFunc_1 extends Law_BSpFunc {}

class Law_BSpFunc_2 extends Law_BSpFunc {}

/**
 * Definition of the 1D B_spline curve.
 */
class Law_BSpline extends Standard_Transient {
}

class Law_BSpline_1 extends Law_BSpline {}

class Law_BSpline_2 extends Law_BSpline {}

/**
 * For a B-spline curve the discontinuities are localised at the knot values and between two knots values the B-spline is infinitely continuously differentiable. At a knot of range index the continuity is equal to : Degree - Mult (Index) where Degree is the degree of the basis B-spline functions and Mult the multiplicity of the knot of range Index. If for your computation you need to have B-spline curves with a minima of continuity it can be interesting to know between which knot values, a B-spline curve arc, has a continuity of given order. This algorithm computes the indexes of the knots where you should split the curve, to obtain arcs with a constant continuity given at the construction time. The splitting values are in the range [FirstUKnotValue, LastUKnotValue] (See class B-spline curve from package Geom). If you just want to compute the local derivatives on the curve you don't need to create the B-spline curve arcs, you can use the functions LocalD1, LocalD2, LocalD3, LocalDN of the class BSplineCurve.
 */
class Law_BSplineKnotSplitting {
}

/**
 * Loi composite constituee d une liste de lois de ranges consecutifs. Cette implementation un peu lourde permet de reunir en une seule loi des portions de loi construites de facon independantes (par exemple en interactif) et de lancer le walking d un coup a l echelle d une ElSpine. CET OBJET REPOND DONC A UN PROBLEME D IMPLEMENTATION SPECIFIQUE AUX CONGES!!!
 */
class Law_Composite extends Law_Function {
}

class Law_Composite_1 extends Law_Composite {}

class Law_Composite_2 extends Law_Composite {}

/**
 * Loi constante
 */
class Law_Constant extends Law_Function {
}

/**
 * Root class for evolution laws.
 */
class Law_Function extends Standard_Transient {
}

/**
 * Provides an evolution law that interpolates a set of parameter and value pairs (wi, radi)
 */
class Law_Interpol extends Law_BSpFunc {
}

/**
 * Describes an linear evolution law.
 */
class Law_Linear extends Law_Function {
}

/**
 * Describes an "S" evolution law.
 */
class Law_S extends Law_BSpFunc {
}

/**
 * Provides tools to implement local topological operations on a shape.
 */
class LocOpe {
}

class LocOpe_BuildShape {
}

class LocOpe_BuildShape_1 extends LocOpe_BuildShape {}

class LocOpe_BuildShape_2 extends LocOpe_BuildShape {}

class LocOpe_BuildWires {
}

class LocOpe_BuildWires_1 extends LocOpe_BuildWires {}

class LocOpe_BuildWires_2 extends LocOpe_BuildWires {}

/**
 * This class provides the intersection between a set of axis or a circle and the faces of a shape. The intersection points are sorted in increasing parameter along each axis or circle.
 */
class LocOpe_CSIntersector {
}

class LocOpe_CSIntersector_1 extends LocOpe_CSIntersector {}

class LocOpe_CSIntersector_2 extends LocOpe_CSIntersector {}

/**
 * This class provides the intersection between an axis or a circle and the faces of a shape. The intersection points are sorted in increasing parameter along the axis.
 */
class LocOpe_CurveShapeIntersector {
}

class LocOpe_CurveShapeIntersector_1 extends LocOpe_CurveShapeIntersector {}

class LocOpe_CurveShapeIntersector_2 extends LocOpe_CurveShapeIntersector {}

class LocOpe_CurveShapeIntersector_3 extends LocOpe_CurveShapeIntersector {}

/**
 * Defines a pipe (near from Pipe from BRepFill), with modifications provided for the Pipe feature.
 */
class LocOpe_DPrism {
}

class LocOpe_DPrism_1 extends LocOpe_DPrism {}

class LocOpe_DPrism_2 extends LocOpe_DPrism {}

class LocOpe_FindEdges {
}

class LocOpe_FindEdges_1 extends LocOpe_FindEdges {}

class LocOpe_FindEdges_2 extends LocOpe_FindEdges {}

class LocOpe_FindEdgesInFace {
}

class LocOpe_FindEdgesInFace_1 extends LocOpe_FindEdgesInFace {}

class LocOpe_FindEdgesInFace_2 extends LocOpe_FindEdgesInFace {}

class LocOpe_GeneratedShape extends Standard_Transient {
}

class LocOpe_Generator {
}

class LocOpe_Generator_1 extends LocOpe_Generator {}

class LocOpe_Generator_2 extends LocOpe_Generator {}

class LocOpe_GluedShape extends LocOpe_GeneratedShape {
}

class LocOpe_GluedShape_1 extends LocOpe_GluedShape {}

class LocOpe_GluedShape_2 extends LocOpe_GluedShape {}

class LocOpe_Gluer {
}

class LocOpe_Gluer_1 extends LocOpe_Gluer {}

class LocOpe_Gluer_2 extends LocOpe_Gluer {}

/**
 * Defines a linear form (using Prism from BRepSweep) with modifications provided for the LinearForm feature.
 */
class LocOpe_LinearForm {
}

class LocOpe_LinearForm_1 extends LocOpe_LinearForm {}

class LocOpe_LinearForm_2 extends LocOpe_LinearForm {}

class LocOpe_LinearForm_3 extends LocOpe_LinearForm {}

/**
 * Defines a pipe (near from Pipe from BRepFill), with modifications provided for the Pipe feature.
 */
class LocOpe_Pipe {
}

class LocOpe_PntFace {
}

class LocOpe_PntFace_1 extends LocOpe_PntFace {}

class LocOpe_PntFace_2 extends LocOpe_PntFace {}

/**
 * Defines a prism (using Prism from BRepSweep) with modifications provided for the Prism feature.
 */
class LocOpe_Prism {
}

class LocOpe_Prism_1 extends LocOpe_Prism {}

class LocOpe_Prism_2 extends LocOpe_Prism {}

class LocOpe_Prism_3 extends LocOpe_Prism {}

/**
 * This class provides a tool to realize the following operations on a shape : - split a face of the shape with a wire, - put draft angle on both side of the wire. For each side, the draft angle may be different.
 */
class LocOpe_SplitDrafts {
}

class LocOpe_SplitDrafts_1 extends LocOpe_SplitDrafts {}

class LocOpe_SplitDrafts_2 extends LocOpe_SplitDrafts {}

/**
 * Provides a tool to cut : - edges with a vertices, - faces with wires, and rebuilds the shape containing the edges and the faces.
 */
class LocOpe_SplitShape {
}

class LocOpe_SplitShape_1 extends LocOpe_SplitShape {}

class LocOpe_SplitShape_2 extends LocOpe_SplitShape {}

class LocOpe_Spliter {
}

class LocOpe_Spliter_1 extends LocOpe_Spliter {}

class LocOpe_Spliter_2 extends LocOpe_Spliter {}

class LocOpe_WiresOnShape extends Standard_Transient {
}

/**
 * This package gives tools to check the local continuity between two points situated on two curves or two surfaces.
 */
class LocalAnalysis {
}

/**
 * This class gives tools to check local continuity C0 C1 C2 G1 G2 between two points situated on two curves
 */
class LocalAnalysis_CurveContinuity {
}

/**
 * This class gives tools to check local continuity C0 C1 C2 G1 G2 between two points situated on two surfaces
 */
class LocalAnalysis_SurfaceContinuity {
}

class LocalAnalysis_SurfaceContinuity_1 extends LocalAnalysis_SurfaceContinuity {}

class LocalAnalysis_SurfaceContinuity_2 extends LocalAnalysis_SurfaceContinuity {}

class LocalAnalysis_SurfaceContinuity_3 extends LocalAnalysis_SurfaceContinuity {}

/**
 * BiInt is a set of two integers.
 */
class MAT2d_BiInt {
}

/**
 * Constructs a circuit on a set of lines. EquiCircuit gives a Circuit passing by all the lines in a set and all the connexions of the minipath associated.
 */
class MAT2d_Circuit extends Standard_Transient {
}

/**
 * A Connexion links two lines of items in a set of lines. It s contains two points and their paramatric definitions on the lines. The items can be points or curves.
 */
class MAT2d_Connexion extends Standard_Transient {
}

class MAT2d_Connexion_1 extends MAT2d_Connexion {}

class MAT2d_Connexion_2 extends MAT2d_Connexion {}

class MAT2d_MapBiIntHasher {
}

/**
 * this class contains the generic algoritm of computation of the bisecting locus.
 */
class MAT2d_Mat2d {
}

/**
 * MiniPath computes a path to link all the lines in a set of lines. The path is described as a set of connexions.
 */
class MAT2d_MiniPath {
}

/**
 * Set of the methods useful for the MAT's computation. Tool2d contains the geometry of the bisecting locus.
 */
class MAT2d_Tool2d {
}

/**
 * An Arc is associated to each Bisecting of the mat.
 */
class MAT_Arc extends Standard_Transient {
}

/**
 * A BasicELt is associated to each elemtary constituant of the figure.
 */
class MAT_BasicElt extends Standard_Transient {
}

class MAT_Bisector extends Standard_Transient {
}

class MAT_Edge extends Standard_Transient {
}

/**
 * The Class Graph permits the exploration of the Bisector Locus.
 */
class MAT_Graph extends Standard_Transient {
}

class MAT_ListOfBisector extends Standard_Transient {
}

class MAT_ListOfEdge extends Standard_Transient {
}

/**
 * Node of Graph.
 */
class MAT_Node extends Standard_Transient {
}

class MAT_TListNodeOfListOfBisector extends Standard_Transient {
}

class MAT_TListNodeOfListOfBisector_1 extends MAT_TListNodeOfListOfBisector {}

class MAT_TListNodeOfListOfBisector_2 extends MAT_TListNodeOfListOfBisector {}

class MAT_TListNodeOfListOfEdge extends Standard_Transient {
}

class MAT_TListNodeOfListOfEdge_1 extends MAT_TListNodeOfListOfEdge {}

class MAT_TListNodeOfListOfEdge_2 extends MAT_TListNodeOfListOfEdge {}

/**
 * Definition of Zone of Proximity of a BasicElt : ---------------------------------------------- A Zone of proximity is the set of the points which are more near from the BasicElt than any other.
 */
class MAT_Zone extends Standard_Transient {
}

class MAT_Zone_1 extends MAT_Zone {}

class MAT_Zone_2 extends MAT_Zone {}

class MeshVS_Buffer {
}

/**
 * Sensitive entity covering entire mesh for global selection.
 */
class MeshVS_CommonSensitiveEntity extends Select3D_SensitiveSet {
}

/**
 * The deferred class using for the following tasks: 1) Receiving geometry data about single element of node by its number; 2) Receiving type of element or node by its number; 3) Receiving topological information about links between element and nodes it consist of; 4) Receiving information about what element cover this node; 5) Receiving information about all nodes and elements the object consist of 6) Activation of advanced mesh selection. In the advanced mesh selection mode there is created: - one owner for the whole mesh and for all selection modes - one sensitive entity for the whole mesh and for each selection mode Receiving of IDs of detected entities (nodes and elements) in a viewer is achieved by implementation of a group of methods GetDetectedEntities.
 */
class MeshVS_DataSource extends Standard_Transient {
}

class MeshVS_DataSource3D extends MeshVS_DataSource {
}

/**
 * The class provides default class which helps to represent node displacements by deformed mesh This class has an internal handle to canonical non-deformed mesh data source and map of displacement vectors. The displacement can be magnified to useful size. All methods is implemented with calling the corresponding methods of non-deformed data source.
 */
class MeshVS_DeformedDataSource extends MeshVS_DataSource {
}

/**
 * This class provided the common interface to share between classes big set of constants affecting to object appearance. By default, this class can store integers, doubles, OCC colors, OCC materials. Each of OCC enum members can be stored as integers.
 */
class MeshVS_Drawer extends Standard_Transient {
}

/**
 * This class allows to create owners to all elements or nodes, both hidden and shown, but these owners user cannot select "by hands" in viewer. They means for internal application tasks, for example, receiving all owners, both for hidden and shown entities.
 */
class MeshVS_DummySensitiveEntity extends Select3D_SensitiveEntity {
}

/**
 * This class provides methods to create presentation of elements with assigned colors. The class contains two color maps: map of same colors for front and back side of face and map of different ones,
 */
class MeshVS_ElementalColorPrsBuilder extends MeshVS_PrsBuilder {
}

/**
 * the main class provides interface to create mesh presentation as a whole
 */
class MeshVS_Mesh extends AIS_InteractiveObject {
}

/**
 * The custom owner. This class provides methods to store owner information: 1) An address of element or node data structure 2) Type of node or element owner assigned 3) ID of node or element owner assigned
 */
class MeshVS_MeshEntityOwner extends SelectMgr_EntityOwner {
}

/**
 * The custom mesh owner used for advanced mesh selection. This class provides methods to store information: 1) IDs of hilighted mesh nodes and elements 2) IDs of mesh nodes and elements selected on the mesh
 */
class MeshVS_MeshOwner extends SelectMgr_EntityOwner {
}

/**
 * This class provides methods to compute base mesh presentation
 */
class MeshVS_MeshPrsBuilder extends MeshVS_PrsBuilder {
}

/**
 * This class provides methods to create presentation of nodes with assigned color. There are two ways of presentation building 1. Without using texture. In this case colors of nodes are specified with DataMapOfIntegerColor and presentation is built with gradient fill between these nodes (default behaviour) 2. Using texture. In this case presentation is built with spectrum filling between nodes. For example, if one node has blue color and second one has violet color, parameters of this class may be set to fill presentation between nodes with solar spectrum. Methods: UseTexture - activates/deactivates this way SetColorMap - sets colors used for generation of texture SetColorindices - specifies correspondence between node IDs and indices of colors from color map
 */
class MeshVS_NodalColorPrsBuilder extends MeshVS_PrsBuilder {
}

/**
 * This class is parent for all builders using in MeshVS_Mesh. It provides base fields and methods all buildes need.
 */
class MeshVS_PrsBuilder extends Standard_Transient {
}

/**
 * This class provides custom sensitive face, which will be selected if it center is in rectangle.
 */
class MeshVS_SensitiveFace extends Select3D_SensitiveFace {
}

/**
 * This class provides custom mesh sensitive entity used in advanced mesh selection.
 */
class MeshVS_SensitiveMesh extends Select3D_SensitiveEntity {
}

/**
 * This class is used to detect selection of a polyhedron. The main principle of detection algorithm is to search for overlap with each polyhedron's face separately, treating them as planar convex polygons.
 */
class MeshVS_SensitivePolyhedron extends Select3D_SensitiveEntity {
}

/**
 * This class contains description of planar quadrangle and defines methods for its detection by OCCT BVH selection mechanism
 */
class MeshVS_SensitiveQuad extends Select3D_SensitiveEntity {
}

class MeshVS_SensitiveQuad_1 extends MeshVS_SensitiveQuad {}

class MeshVS_SensitiveQuad_2 extends MeshVS_SensitiveQuad {}

/**
 * This class provides custom sensitive face, which will be selected if it center is in rectangle.
 */
class MeshVS_SensitiveSegment extends Select3D_SensitiveSegment {
}

/**
 * This class provides methods to create text data presentation. It store map of texts assigned with nodes or elements.
 */
class MeshVS_TextPrsBuilder extends MeshVS_PrsBuilder {
}

/**
 * This class provides auxiliary methods to create differents aspects
 */
class MeshVS_Tool {
}

/**
 * This class provides methods to create vector data presentation. It store map of vectors assigned with nodes or elements. In simplified mode vectors draws with thickened ends instead of arrows
 */
class MeshVS_VectorPrsBuilder extends MeshVS_PrsBuilder {
}

/**
 * Defines - tools to work with messages - basic tools intended for progress indication
 */
class Message {
}

/**
 * Base class of the hierarchy of classes describing various situations occurring during execution of some algorithm or procedure.
 */
class Message_Alert extends Standard_Transient {
}

/**
 * Class Message_Algorithm is intended to be the base class for classes implementing algorithms or any operations that need to provide extended information on its execution to the caller / user.
 */
class Message_Algorithm extends Standard_Transient {
}

/**
 * Tiny class for extended handling of error / execution status of algorithm in universal way.
 */
class Message_ExecStatus {
}

class Message_ExecStatus_1 extends Message_ExecStatus {}

class Message_ExecStatus_2 extends Message_ExecStatus {}

/**
 * Messenger is API class providing general-purpose interface for libraries that may issue text messages without knowledge of how these messages will be further processed.
 */
class Message_Messenger extends Standard_Transient {
}

class Message_Messenger_1 extends Message_Messenger {}

class Message_Messenger_2 extends Message_Messenger {}

/**
 * This class provides a tool for constructing the parametrized message basing on resources loaded by Message_MsgFile tool.
 */
class Message_Msg {
}

class Message_Msg_1 extends Message_Msg {}

class Message_Msg_2 extends Message_Msg {}

class Message_Msg_3 extends Message_Msg {}

class Message_Msg_4 extends Message_Msg {}

/**
 * A tool providing facility to load definitions of message strings from resource file(s).
 */
class Message_MsgFile {
}

/**
 * Abstract interface class defining printer as output context for text messages
 */
class Message_Printer extends Standard_Transient {
}

/**
 * Implementation of a message printer associated with an std::ostream The std::ostream may be either externally defined one (e.g. std::cout), or file stream maintained internally (depending on constructor).
 */
class Message_PrinterOStream extends Message_Printer {
}

class Message_PrinterOStream_1 extends Message_PrinterOStream {}

class Message_PrinterOStream_2 extends Message_PrinterOStream {}

/**
 * Implementation of a message printer associated with system log. Implemented for the following systems: - Windows, through ReportEventW(). - Android, through __android_log_write(). - UNIX/Linux, through syslog().
 */
class Message_PrinterSystemLog extends Message_Printer {
}

/**
 * Defines abstract interface from program to the "user". This includes progress indication and user break mechanisms.
 */
class Message_ProgressIndicator extends Standard_Transient {
}

/**
 * Internal data structure for scale in ProgressIndicator
 */
class Message_ProgressScale {
}

/**
 * This class is a tool allowing to manage opening/closing scopes in the ProgressIndicator in convenient and safe way.
 */
class Message_ProgressSentry {
}

class Message_ProgressSentry_1 extends Message_ProgressSentry {}

class Message_ProgressSentry_2 extends Message_ProgressSentry {}

/**
 * Container for alert messages, sorted according to their gravity.
 */
class Message_Report extends Standard_Transient {
}

/**
 * a AttrList allows to record a list of attributes as Transients which can be edited, changed ... Each one is identified by a name
 */
class MoniTool_AttrList {
}

class MoniTool_AttrList_1 extends MoniTool_AttrList {}

class MoniTool_AttrList_2 extends MoniTool_AttrList {}

/**
 * This class is intended to record data attached to a case to be exploited. Cases can be : * internal, i.e. for immediate debug for instance, on an abnormal exception, fill a CaseData in a DB (see class DB) then look at its content by XSDRAW * to record abnormal situation, which cause a warning or fail message, for instance during a transfer This will allow, firstly to build a more comprehensive message (with associated data), secondly to help seeing "what happened" * to record data in order to fix a problem If a CASE is well defined and its fix is well known too, recording a CaseData which identifies the CASE will allow to furstherly call the appropriate fix routine
 */
class MoniTool_CaseData extends Standard_Transient {
}

/**
 * Gives informations on an object Used as template to instantiate Elem, etc This class is for Transient
 */
class MoniTool_DataInfo {
}

/**
 * ElemHasher defines HashCode for Element, which is : ask a Element its HashCode ! Because this is the Element itself which brings the HashCode for its Key
 */
class MoniTool_ElemHasher {
}

/**
 * a Element allows to map any kind of object as a Key for a Map. This works by defining, for a Hash Code, that of the real Key, not of the Element which acts only as an intermediate. When a Map asks for the HashCode of a Element, this one returns the code it has determined at creation time
 */
class MoniTool_Element extends Standard_Transient {
}

/**
 * An Integer through a Handle (i.e. managed as TShared)
 */
class MoniTool_IntVal extends Standard_Transient {
}

/**
 * The auxiliary class provides hash code for mapping objects
 */
class MoniTool_MTHasher {
}

/**
 * A Real through a Handle (i.e. managed as TShared)
 */
class MoniTool_RealVal extends Standard_Transient {
}

/**
 * Signs HShape according to its real content (type of Shape) Context is not used
 */
class MoniTool_SignShape extends MoniTool_SignText {
}

/**
 * Provides the basic service to get a text which identifies an object in a context It can be used for other classes (general signatures ...) It can also be used to build a message in which an object is to be identified
 */
class MoniTool_SignText extends Standard_Transient {
}

/**
 * This class manages Statistics to be queried asynchronously.
 */
class MoniTool_Stat {
}

class MoniTool_Stat_1 extends MoniTool_Stat {}

class MoniTool_Stat_2 extends MoniTool_Stat {}

/**
 * Provides convenient service on global timers accessed by string name, mostly aimed for debugging purposes
 */
class MoniTool_Timer extends Standard_Transient {
}

/**
 * A tool to facilitate using MoniTool_Timer functionality by automatically ensuring consistency of start/stop actions
 */
class MoniTool_TimerSentry {
}

class MoniTool_TimerSentry_1 extends MoniTool_TimerSentry {}

class MoniTool_TimerSentry_2 extends MoniTool_TimerSentry {}

/**
 * an TransientElem defines an Element for a specific input class its definition includes the value of the Key to be mapped, and the HashCoder associated to the class of the Key
 */
class MoniTool_TransientElem extends MoniTool_Element {
}

/**
 * This class allows to dynamically manage .. typed values, i.e. values which have an alphanumeric expression, but with controls. Such as "must be an Integer" or "Enumerative Text" etc
 */
class MoniTool_TypedValue extends Standard_Transient {
}

class MoniTool_TypedValue_1 extends MoniTool_TypedValue {}

class MoniTool_TypedValue_2 extends MoniTool_TypedValue {}

class MyDirectPolynomialRoots {
}

class MyDirectPolynomialRoots_1 extends MyDirectPolynomialRoots {}

class MyDirectPolynomialRoots_2 extends MyDirectPolynomialRoots {}

/**
 * define a PinPoint geometric Constraint used to load a Non Linear Plate
 */
class NLPlate_HGPPConstraint extends Standard_Transient {
}

/**
 * define a PinPoint G0 Constraint used to load a Non Linear Plate
 */
class NLPlate_HPG0Constraint extends NLPlate_HGPPConstraint {
}

/**
 * define a PinPoint G0+G1 Constraint used to load a Non Linear Plate
 */
class NLPlate_HPG0G1Constraint extends NLPlate_HPG0Constraint {
}

/**
 * define a PinPoint G0+G2 Constraint used to load a Non Linear Plate
 */
class NLPlate_HPG0G2Constraint extends NLPlate_HPG0G1Constraint {
}

/**
 * define a PinPoint G0+G3 Constraint used to load a Non Linear Plate
 */
class NLPlate_HPG0G3Constraint extends NLPlate_HPG0G2Constraint {
}

/**
 * define a PinPoint (no G0) G1 Constraint used to load a Non Linear Plate
 */
class NLPlate_HPG1Constraint extends NLPlate_HGPPConstraint {
}

/**
 * define a PinPoint (no G0) G2 Constraint used to load a Non Linear Plate
 */
class NLPlate_HPG2Constraint extends NLPlate_HPG1Constraint {
}

/**
 * define a PinPoint (no G0) G3 Constraint used to load a Non Linear Plate
 */
class NLPlate_HPG3Constraint extends NLPlate_HPG2Constraint {
}

class NLPlate_NLPlate {
}

/**
 * Set of Operating Sytem Dependent (OSD) Tools
 */
class OSD {
}

/**
 * This class measures CPU time (both user and system) consumed by current process or thread. The chronometer can be started and stopped multiple times, and measures cumulative time.
 */
class OSD_Chronometer {
}

/**
 * Management of directories (a set of directory oriented tools)
 */
class OSD_Directory extends OSD_FileNode {
}

class OSD_Directory_1 extends OSD_Directory {}

class OSD_Directory_2 extends OSD_Directory {}

/**
 * Manages a breadth-only search for sub-directories in the specified Path. There is no specific order of results.
 */
class OSD_DirectoryIterator {
}

class OSD_DirectoryIterator_1 extends OSD_DirectoryIterator {}

class OSD_DirectoryIterator_2 extends OSD_DirectoryIterator {}

/**
 * Disk management (a set of disk oriented tools)
 */
class OSD_Disk {
}

class OSD_Disk_1 extends OSD_Disk {}

class OSD_Disk_2 extends OSD_Disk {}

class OSD_Disk_3 extends OSD_Disk {}

/**
 * Management of system environment variables An environment variable is composed of a variable name and its value.
 */
class OSD_Environment {
}

class OSD_Environment_1 extends OSD_Environment {}

class OSD_Environment_2 extends OSD_Environment {}

class OSD_Environment_3 extends OSD_Environment {}

/**
 * Accurate management of OSD specific errors.
 */
class OSD_Error {
}

class OSD_Exception extends Standard_Failure {
}

class OSD_Exception_1 extends OSD_Exception {}

class OSD_Exception_2 extends OSD_Exception {}

class OSD_Exception_ACCESS_VIOLATION extends OSD_Exception {
}

class OSD_Exception_ACCESS_VIOLATION_1 extends OSD_Exception_ACCESS_VIOLATION {}

class OSD_Exception_ACCESS_VIOLATION_2 extends OSD_Exception_ACCESS_VIOLATION {}

class OSD_Exception_ARRAY_BOUNDS_EXCEEDED extends OSD_Exception {
}

class OSD_Exception_ARRAY_BOUNDS_EXCEEDED_1 extends OSD_Exception_ARRAY_BOUNDS_EXCEEDED {}

class OSD_Exception_ARRAY_BOUNDS_EXCEEDED_2 extends OSD_Exception_ARRAY_BOUNDS_EXCEEDED {}

class OSD_Exception_CTRL_BREAK extends OSD_Exception {
}

class OSD_Exception_CTRL_BREAK_1 extends OSD_Exception_CTRL_BREAK {}

class OSD_Exception_CTRL_BREAK_2 extends OSD_Exception_CTRL_BREAK {}

class OSD_Exception_FLT_DENORMAL_OPERAND extends OSD_Exception {
}

class OSD_Exception_FLT_DENORMAL_OPERAND_1 extends OSD_Exception_FLT_DENORMAL_OPERAND {}

class OSD_Exception_FLT_DENORMAL_OPERAND_2 extends OSD_Exception_FLT_DENORMAL_OPERAND {}

class OSD_Exception_FLT_DIVIDE_BY_ZERO extends OSD_Exception {
}

class OSD_Exception_FLT_DIVIDE_BY_ZERO_1 extends OSD_Exception_FLT_DIVIDE_BY_ZERO {}

class OSD_Exception_FLT_DIVIDE_BY_ZERO_2 extends OSD_Exception_FLT_DIVIDE_BY_ZERO {}

class OSD_Exception_FLT_INEXACT_RESULT extends OSD_Exception {
}

class OSD_Exception_FLT_INEXACT_RESULT_1 extends OSD_Exception_FLT_INEXACT_RESULT {}

class OSD_Exception_FLT_INEXACT_RESULT_2 extends OSD_Exception_FLT_INEXACT_RESULT {}

class OSD_Exception_FLT_INVALID_OPERATION extends OSD_Exception {
}

class OSD_Exception_FLT_INVALID_OPERATION_1 extends OSD_Exception_FLT_INVALID_OPERATION {}

class OSD_Exception_FLT_INVALID_OPERATION_2 extends OSD_Exception_FLT_INVALID_OPERATION {}

class OSD_Exception_FLT_OVERFLOW extends OSD_Exception {
}

class OSD_Exception_FLT_OVERFLOW_1 extends OSD_Exception_FLT_OVERFLOW {}

class OSD_Exception_FLT_OVERFLOW_2 extends OSD_Exception_FLT_OVERFLOW {}

class OSD_Exception_FLT_STACK_CHECK extends OSD_Exception {
}

class OSD_Exception_FLT_STACK_CHECK_1 extends OSD_Exception_FLT_STACK_CHECK {}

class OSD_Exception_FLT_STACK_CHECK_2 extends OSD_Exception_FLT_STACK_CHECK {}

class OSD_Exception_FLT_UNDERFLOW extends OSD_Exception {
}

class OSD_Exception_FLT_UNDERFLOW_1 extends OSD_Exception_FLT_UNDERFLOW {}

class OSD_Exception_FLT_UNDERFLOW_2 extends OSD_Exception_FLT_UNDERFLOW {}

class OSD_Exception_ILLEGAL_INSTRUCTION extends OSD_Exception {
}

class OSD_Exception_ILLEGAL_INSTRUCTION_1 extends OSD_Exception_ILLEGAL_INSTRUCTION {}

class OSD_Exception_ILLEGAL_INSTRUCTION_2 extends OSD_Exception_ILLEGAL_INSTRUCTION {}

class OSD_Exception_INT_DIVIDE_BY_ZERO extends OSD_Exception {
}

class OSD_Exception_INT_DIVIDE_BY_ZERO_1 extends OSD_Exception_INT_DIVIDE_BY_ZERO {}

class OSD_Exception_INT_DIVIDE_BY_ZERO_2 extends OSD_Exception_INT_DIVIDE_BY_ZERO {}

class OSD_Exception_INT_OVERFLOW extends OSD_Exception {
}

class OSD_Exception_INT_OVERFLOW_1 extends OSD_Exception_INT_OVERFLOW {}

class OSD_Exception_INT_OVERFLOW_2 extends OSD_Exception_INT_OVERFLOW {}

class OSD_Exception_INVALID_DISPOSITION extends OSD_Exception {
}

class OSD_Exception_INVALID_DISPOSITION_1 extends OSD_Exception_INVALID_DISPOSITION {}

class OSD_Exception_INVALID_DISPOSITION_2 extends OSD_Exception_INVALID_DISPOSITION {}

class OSD_Exception_IN_PAGE_ERROR extends OSD_Exception {
}

class OSD_Exception_IN_PAGE_ERROR_1 extends OSD_Exception_IN_PAGE_ERROR {}

class OSD_Exception_IN_PAGE_ERROR_2 extends OSD_Exception_IN_PAGE_ERROR {}

class OSD_Exception_NONCONTINUABLE_EXCEPTION extends OSD_Exception {
}

class OSD_Exception_NONCONTINUABLE_EXCEPTION_1 extends OSD_Exception_NONCONTINUABLE_EXCEPTION {}

class OSD_Exception_NONCONTINUABLE_EXCEPTION_2 extends OSD_Exception_NONCONTINUABLE_EXCEPTION {}

class OSD_Exception_PRIV_INSTRUCTION extends OSD_Exception {
}

class OSD_Exception_PRIV_INSTRUCTION_1 extends OSD_Exception_PRIV_INSTRUCTION {}

class OSD_Exception_PRIV_INSTRUCTION_2 extends OSD_Exception_PRIV_INSTRUCTION {}

class OSD_Exception_STACK_OVERFLOW extends OSD_Exception {
}

class OSD_Exception_STACK_OVERFLOW_1 extends OSD_Exception_STACK_OVERFLOW {}

class OSD_Exception_STACK_OVERFLOW_2 extends OSD_Exception_STACK_OVERFLOW {}

class OSD_Exception_STATUS_NO_MEMORY extends OSD_Exception {
}

class OSD_Exception_STATUS_NO_MEMORY_1 extends OSD_Exception_STATUS_NO_MEMORY {}

class OSD_Exception_STATUS_NO_MEMORY_2 extends OSD_Exception_STATUS_NO_MEMORY {}

/**
 * Manages a breadth-only search for files in the specified Path. There is no specific order of results.
 */
class OSD_FileIterator {
}

class OSD_FileIterator_1 extends OSD_FileIterator {}

class OSD_FileIterator_2 extends OSD_FileIterator {}

/**
 * Carries information about a Host System version ,host name, nodename ...
 */
class OSD_Host {
}

/**
 * This class provides the possibility to set callback for memory allocation/deallocation. On MS Windows, it works only in Debug builds. It relies on the debug CRT function _CrtSetAllocHook (see MSDN for help).
 */
class OSD_MAllocHook {
}

/**
 * This class provide information about memory utilized by current process. This information includes: - Private Memory - synthetic value that tries to filter out the memory usage only by the process itself (allocated for data and stack), excluding dynamic libraries. These pages may be in RAM or in SWAP. - Virtual Memory - amount of reserved and committed memory in the user-mode portion of the virtual address space. Notice that this counter includes reserved memory (not yet in used) and shared between processes memory (libraries). - Working Set - set of memory pages in the virtual address space of the process that are currently resident in physical memory (RAM). These pages are available for an application to use without triggering a page fault. - Pagefile Usage - space allocated for the pagefile, in bytes. Those pages may or may not be in memory (RAM) thus this counter couldn't be used to estimate how many active pages doesn't present in RAM.
 */
class OSD_MemInfo {
}

class OSD_OSDError extends Standard_Failure {
}

class OSD_OSDError_1 extends OSD_OSDError {}

class OSD_OSDError_2 extends OSD_OSDError {}

/**
 * This class enables measuring the CPU time between two points of code execution, regardless of the scope of these points of code. A meter is identified by its name (string). So multiple objects in various places of user code may point to the same meter. The results will be printed on stdout upon finish of the program. For details see OSD_PerfMeter.h
 */
class OSD_PerfMeter {
}

class OSD_PerfMeter_1 extends OSD_PerfMeter {}

class OSD_PerfMeter_2 extends OSD_PerfMeter {}

/**
 * A set of system process tools
 */
class OSD_Process {
}

/**
 * This class provides data to manage file protection Example:These rights are treated in a system dependent manner : On UNIX you have User,Group and Other rights On VMS you have Owner,Group,World and System rights An automatic conversion is done between OSD and UNIX/VMS.
 */
class OSD_Protection {
}

class OSD_Protection_1 extends OSD_Protection {}

class OSD_Protection_2 extends OSD_Protection {}

class OSD_SIGBUS extends OSD_Signal {
}

class OSD_SIGBUS_1 extends OSD_SIGBUS {}

class OSD_SIGBUS_2 extends OSD_SIGBUS {}

class OSD_SIGHUP extends OSD_Signal {
}

class OSD_SIGHUP_1 extends OSD_SIGHUP {}

class OSD_SIGHUP_2 extends OSD_SIGHUP {}

class OSD_SIGILL extends OSD_Signal {
}

class OSD_SIGILL_1 extends OSD_SIGILL {}

class OSD_SIGILL_2 extends OSD_SIGILL {}

class OSD_SIGINT extends OSD_Signal {
}

class OSD_SIGINT_1 extends OSD_SIGINT {}

class OSD_SIGINT_2 extends OSD_SIGINT {}

class OSD_SIGKILL extends OSD_Signal {
}

class OSD_SIGKILL_1 extends OSD_SIGKILL {}

class OSD_SIGKILL_2 extends OSD_SIGKILL {}

class OSD_SIGQUIT extends OSD_Signal {
}

class OSD_SIGQUIT_1 extends OSD_SIGQUIT {}

class OSD_SIGQUIT_2 extends OSD_SIGQUIT {}

class OSD_SIGSEGV extends OSD_Signal {
}

class OSD_SIGSEGV_1 extends OSD_SIGSEGV {}

class OSD_SIGSEGV_2 extends OSD_SIGSEGV {}

class OSD_SIGSYS extends OSD_Signal {
}

class OSD_SIGSYS_1 extends OSD_SIGSYS {}

class OSD_SIGSYS_2 extends OSD_SIGSYS {}

/**
 * Interface to dynamic library loader. Provides tools to load a shared library and retrieve the address of an entry point.
 */
class OSD_SharedLibrary {
}

class OSD_SharedLibrary_1 extends OSD_SharedLibrary {}

class OSD_SharedLibrary_2 extends OSD_SharedLibrary {}

class OSD_Signal extends Standard_Failure {
}

class OSD_Signal_1 extends OSD_Signal {}

class OSD_Signal_2 extends OSD_Signal {}

/**
 * A simple platform-intependent interface to execute and control threads.
 */
class OSD_Thread {
}

class OSD_Thread_1 extends OSD_Thread {}

class OSD_Thread_2 extends OSD_Thread {}

class OSD_Thread_3 extends OSD_Thread {}

/**
 * Working on heterogeneous platforms we need to use the system call gettimeofday. This function is portable and it measures ELAPSED time and CPU time in seconds and microseconds. Example: OSD_Timer aTimer; aTimer.Start(); // Start the timers (t1). ..... // Do something. aTimer.Stop(); // Stop the timers (t2). aTimer.Show(); // Give the elapsed time between t1 and t2. // Give also the process CPU time between // t1 and t2.
 */
class OSD_Timer extends OSD_Chronometer {
}

class PCDM {
}

class PCDM_DOMHeaderParser extends LDOMParser {
}

class PCDM_Document extends Standard_Persistent {
}

class PCDM_DriverError extends Standard_Failure {
}

class PCDM_DriverError_1 extends PCDM_DriverError {}

class PCDM_DriverError_2 extends PCDM_DriverError {}

class PCDM_ReadWriter extends Standard_Transient {
}

class PCDM_ReadWriter_1 extends PCDM_ReadWriter {
}

class PCDM_Reader extends Standard_Transient {
}

class PCDM_Reference {
}

class PCDM_Reference_1 extends PCDM_Reference {}

class PCDM_Reference_2 extends PCDM_Reference {}

class PCDM_ReferenceIterator extends Standard_Transient {
}

class PCDM_RetrievalDriver extends PCDM_Reader {
}

/**
 * persistent implemention of storage.
 */
class PCDM_StorageDriver extends PCDM_Writer {
}

class PCDM_Writer extends Standard_Transient {
}

/**
 * PLib means Polynomial functions library. This pk provides basic computation functions for polynomial functions. Note: weight arrays can be passed by pointer for some functions so that NULL pointer is valid. That means no weights passed.
 */
class PLib {
}

/**
 * To work with different polynomial's Bases
 */
class PLib_Base extends Standard_Transient {
}

class PLib_DoubleJacobiPolynomial {
}

class PLib_DoubleJacobiPolynomial_1 extends PLib_DoubleJacobiPolynomial {}

class PLib_DoubleJacobiPolynomial_2 extends PLib_DoubleJacobiPolynomial {}

/**
 * This class provides method to work with Jacobi Polynomials relativly to an order of constraint q = myWorkDegree-2*(myNivConstr+1) Jk(t) for k=0,q compose the Jacobi Polynomial base relativly to the weigth W(t) iorder is the integer value for the constraints: iorder = 0 <=> ConstraintOrder = GeomAbs_C0 iorder = 1 <=> ConstraintOrder = GeomAbs_C1 iorder = 2 <=> ConstraintOrder = GeomAbs_C2 P(t) = H(t) + W(t) * Q(t) Where W(t) = (1-t**2)**(2*iordre+2) the coefficients JacCoeff represents P(t) JacCoeff are stored as follow:
 */
class PLib_HermitJacobi extends PLib_Base {
}

/**
 * This class provides method to work with Jacobi Polynomials relativly to an order of constraint q = myWorkDegree-2*(myNivConstr+1) Jk(t) for k=0,q compose the Jacobi Polynomial base relativly to the weigth W(t) iorder is the integer value for the constraints: iorder = 0 <=> ConstraintOrder = GeomAbs_C0 iorder = 1 <=> ConstraintOrder = GeomAbs_C1 iorder = 2 <=> ConstraintOrder = GeomAbs_C2 P(t) = R(t) + W(t) * Q(t) Where W(t) = (1-t**2)**(2*iordre+2) the coefficients JacCoeff represents P(t) JacCoeff are stored as follow:
 */
class PLib_JacobiPolynomial extends PLib_Base {
}

class PeriodicInterval {
}

class PeriodicInterval_1 extends PeriodicInterval {}

class PeriodicInterval_2 extends PeriodicInterval {}

class PeriodicInterval_3 extends PeriodicInterval {}

/**
 * define an order 1 derivatives of a 3d valued function of a 2d variable
 */
class Plate_D1 {
}

class Plate_D1_1 extends Plate_D1 {}

class Plate_D1_2 extends Plate_D1 {}

/**
 * define an order 2 derivatives of a 3d valued function of a 2d variable
 */
class Plate_D2 {
}

class Plate_D2_1 extends Plate_D2 {}

class Plate_D2_2 extends Plate_D2 {}

/**
 * define an order 3 derivatives of a 3d valued function of a 2d variable
 */
class Plate_D3 {
}

class Plate_D3_1 extends Plate_D3 {}

class Plate_D3_2 extends Plate_D3 {}

/**
 * define a G1, G2 or G3 constraint on the Plate using weaker constraint than GtoCConstraint
 */
class Plate_FreeGtoCConstraint {
}

class Plate_FreeGtoCConstraint_1 extends Plate_FreeGtoCConstraint {}

class Plate_FreeGtoCConstraint_2 extends Plate_FreeGtoCConstraint {}

class Plate_FreeGtoCConstraint_3 extends Plate_FreeGtoCConstraint {}

/**
 * force a set of UV points to translate without deformation
 */
class Plate_GlobalTranslationConstraint {
}

/**
 * define a G1, G2 or G3 constraint on the Plate
 */
class Plate_GtoCConstraint {
}

class Plate_GtoCConstraint_1 extends Plate_GtoCConstraint {}

class Plate_GtoCConstraint_2 extends Plate_GtoCConstraint {}

class Plate_GtoCConstraint_3 extends Plate_GtoCConstraint {}

class Plate_GtoCConstraint_4 extends Plate_GtoCConstraint {}

class Plate_GtoCConstraint_5 extends Plate_GtoCConstraint {}

class Plate_GtoCConstraint_6 extends Plate_GtoCConstraint {}

class Plate_GtoCConstraint_7 extends Plate_GtoCConstraint {}

/**
 * constraint a point to belong to a straight line
 */
class Plate_LineConstraint {
}

/**
 * define on or several constraints as linear combination of the X,Y and Z components of a set of PinPointConstraint
 */
class Plate_LinearScalarConstraint {
}

class Plate_LinearScalarConstraint_1 extends Plate_LinearScalarConstraint {}

class Plate_LinearScalarConstraint_2 extends Plate_LinearScalarConstraint {}

class Plate_LinearScalarConstraint_3 extends Plate_LinearScalarConstraint {}

class Plate_LinearScalarConstraint_4 extends Plate_LinearScalarConstraint {}

class Plate_LinearScalarConstraint_5 extends Plate_LinearScalarConstraint {}

/**
 * define on or several constraints as linear combination of PinPointConstraint unlike the LinearScalarConstraint, usage of this kind of constraint preserve the X,Y and Z uncoupling.
 */
class Plate_LinearXYZConstraint {
}

class Plate_LinearXYZConstraint_1 extends Plate_LinearXYZConstraint {}

class Plate_LinearXYZConstraint_2 extends Plate_LinearXYZConstraint {}

class Plate_LinearXYZConstraint_3 extends Plate_LinearXYZConstraint {}

class Plate_LinearXYZConstraint_4 extends Plate_LinearXYZConstraint {}

/**
 * define a constraint on the Plate
 */
class Plate_PinpointConstraint {
}

class Plate_PinpointConstraint_1 extends Plate_PinpointConstraint {}

class Plate_PinpointConstraint_2 extends Plate_PinpointConstraint {}

/**
 * constraint a point to belong to a Plane
 */
class Plate_PlaneConstraint {
}

/**
 * This class implement a variationnal spline algorithm able to define a two variable function satisfying some constraints and minimizing an energy like criterion.
 */
class Plate_Plate {
}

class Plate_Plate_1 extends Plate_Plate {}

class Plate_Plate_2 extends Plate_Plate {}

/**
 * define m PinPointConstraint driven by m unknown
 */
class Plate_SampledCurveConstraint {
}

class Plugin {
}

class Plugin_Failure extends Standard_Failure {
}

class Plugin_Failure_1 extends Plugin_Failure {}

class Plugin_Failure_2 extends Plugin_Failure {}

/**
 * This package provides classes and services to handle :
 */
class Poly {
}

/**
 * Link between two mesh nodes that is created by existing triangle(s). Keeps reference to the opposite node of each incident triangle. The referred node with index "0" is always on the left side of the link, the one with the index "1" is always on the right side. It is possible to find both incident triangles using the method Poly_CoherentTriangulation::FindTriangle(). Any Link can store an arbitrary pointer that is called Attribute.
 */
class Poly_CoherentLink {
}

class Poly_CoherentLink_1 extends Poly_CoherentLink {}

class Poly_CoherentLink_2 extends Poly_CoherentLink {}

class Poly_CoherentLink_3 extends Poly_CoherentLink {}

/**
 * Node of coherent triangulation. Contains: Coordinates of a 3D point defining the node location 2D point coordinates List of triangles that use this Node Integer index, normally the index of the node in the original triangulation
 */
class Poly_CoherentNode extends gp_XYZ {
}

class Poly_CoherentNode_1 extends Poly_CoherentNode {}

class Poly_CoherentNode_2 extends Poly_CoherentNode {}

/**
 * Data class used in Poly_CoherentTriangultion. Implements a triangle with references to its neighbours.
 */
class Poly_CoherentTriangle {
}

class Poly_CoherentTriangle_1 extends Poly_CoherentTriangle {}

class Poly_CoherentTriangle_2 extends Poly_CoherentTriangle {}

/**
 * Triangulation structure that allows to: Store the connectivity of each triangle with up to 3 neighbouring ones and with the corresponding 3rd nodes on them, Store the connectivity of each node with all triangles that share this node Add nodes and triangles to the structure, Find all triangles sharing a single or a couple of nodes Remove triangles from structure Optionally create Links between pairs of nodes according to the current triangulation. Convert from/to Poly_Triangulation structure.
 */
class Poly_CoherentTriangulation extends Standard_Transient {
}

class Poly_CoherentTriangulation_1 extends Poly_CoherentTriangulation {}

class Poly_CoherentTriangulation_2 extends Poly_CoherentTriangulation {}

/**
 * Provides an algorithm to explore, inside a triangulation, the adjacency data for a node or a triangle. Adjacency data for a node consists of triangles which contain the node. Adjacency data for a triangle consists of: - the 3 adjacent triangles which share an edge of the triangle, - and the 3 nodes which are the other nodes of these adjacent triangles. Example Inside a triangulation, a triangle T has nodes n1, n2 and n3. It has adjacent triangles AT1, AT2 and AT3 where: - AT1 shares the nodes n2 and n3, - AT2 shares the nodes n3 and n1, - AT3 shares the nodes n1 and n2. It has adjacent nodes an1, an2 and an3 where: - an1 is the third node of AT1, - an2 is the third node of AT2, - an3 is the third node of AT3. So triangle AT1 is composed of nodes n2, n3 and an1. There are two ways of using this algorithm. - From a given node you can look for one triangle that passes through the node, then look for the triangles adjacent to this triangle, then the adjacent nodes. You can thus explore the triangulation step by step (functions Triangle, Triangles and Nodes). - From a given node you can look for all the triangles that pass through the node (iteration method, using the functions Initialize, More, Next and Value). A Connect object can be seen as a tool which analyzes a triangulation and translates it into a series of triangles. By doing this, it provides an interface with other tools and applications working on basic triangles, and which do not work directly with a Poly_Triangulation.
 */
class Poly_Connect {
}

class Poly_Connect_1 extends Poly_Connect {}

class Poly_Connect_2 extends Poly_Connect {}

/**
 * Make loops from a set of connected links. A link is represented by a pair of integer indices of nodes.
 */
class Poly_MakeLoops {
}

class Poly_MakeLoops2D extends Poly_MakeLoops {
}

class Poly_MakeLoops3D extends Poly_MakeLoops {
}

/**
 * Provides a polygon in 2D space (for example, in the parametric space of a surface). It is generally an approximate representation of a curve. A Polygon2D is defined by a table of nodes. Each node is a 2D point. If the polygon is closed, the point of closure is repeated at the end of the table of nodes.
 */
class Poly_Polygon2D extends Standard_Transient {
}

class Poly_Polygon2D_1 extends Poly_Polygon2D {}

class Poly_Polygon2D_2 extends Poly_Polygon2D {}

/**
 * This class Provides a polygon in 3D space. It is generally an approximate representation of a curve. A Polygon3D is defined by a table of nodes. Each node is a 3D point. If the polygon is closed, the point of closure is repeated at the end of the table of nodes. If the polygon is an approximate representation of a curve, you can associate with each of its nodes the value of the parameter of the corresponding point on the curve.
 */
class Poly_Polygon3D extends Standard_Transient {
}

class Poly_Polygon3D_1 extends Poly_Polygon3D {}

class Poly_Polygon3D_2 extends Poly_Polygon3D {}

class Poly_Polygon3D_3 extends Poly_Polygon3D {}

/**
 * This class provides a polygon in 3D space, based on the triangulation of a surface. It may be the approximate representation of a curve on the surface, or more generally the shape. A PolygonOnTriangulation is defined by a table of nodes. Each node is an index in the table of nodes specific to a triangulation, and represents a point on the surface. If the polygon is closed, the index of the point of closure is repeated at the end of the table of nodes. If the polygon is an approximate representation of a curve on a surface, you can associate with each of its nodes the value of the parameter of the corresponding point on the curve.represents a 3d Polygon
 */
class Poly_PolygonOnTriangulation extends Standard_Transient {
}

class Poly_PolygonOnTriangulation_1 extends Poly_PolygonOnTriangulation {}

class Poly_PolygonOnTriangulation_2 extends Poly_PolygonOnTriangulation {}

class Poly_PolygonOnTriangulation_3 extends Poly_PolygonOnTriangulation {}

/**
 * Describes a component triangle of a triangulation (Poly_Triangulation object). A Triangle is defined by a triplet of nodes. Each node is an index in the table of nodes specific to an existing triangulation of a shape, and represents a point on the surface.
 */
class Poly_Triangle {
}

class Poly_Triangle_1 extends Poly_Triangle {}

class Poly_Triangle_2 extends Poly_Triangle {}

/**
 * Provides a triangulation for a surface, a set of surfaces, or more generally a shape. A triangulation consists of an approximate representation of the actual shape, using a collection of points and triangles. The points are located on the surface. The edges of the triangles connect adjacent points with a straight line that approximates the true curve on the surface. A triangulation comprises: - A table of 3D nodes (3D points on the surface). - A table of triangles. Each triangle (Poly_Triangle object) comprises a triplet of indices in the table of 3D nodes specific to the triangulation. - A table of 2D nodes (2D points), parallel to the table of 3D nodes. This table is optional. If it exists, the coordinates of a 2D point are the (u, v) parameters of the corresponding 3D point on the surface approximated by the triangulation. - A deflection (optional), which maximizes the distance from a point on the surface to the corresponding point on its approximate triangulation. In many cases, algorithms do not need to work with the exact representation of a surface. A triangular representation induces simpler and more robust adjusting, faster performances, and the results are as good. This is a Transient class.
 */
class Poly_Triangulation extends Standard_Transient {
}

class Poly_Triangulation_1 extends Poly_Triangulation {}

class Poly_Triangulation_2 extends Poly_Triangulation {}

class Poly_Triangulation_3 extends Poly_Triangulation {}

class Poly_Triangulation_4 extends Poly_Triangulation {}

/**
 * The Precision package offers a set of functions defining precision criteria for use in conventional situations when comparing two numbers. Generalities It is not advisable to use floating number equality. Instead, the difference between numbers must be compared with a given precision, i.e. : Standard_Real x1, x2 ; x1 = ... x2 = ... If ( x1 == x2 ) ... should not be used and must be written as indicated below: Standard_Real x1, x2 ; Standard_Real Precision = ... x1 = ... x2 = ... If ( Abs ( x1 - x2 ) < Precision ) ... Likewise, when ordering floating numbers, you must take the following into account : Standard_Real x1, x2 ; Standard_Real Precision = ... x1 = ... ! a large number x2 = ... ! another large number If ( x1 < x2 - Precision ) ... is incorrect when x1 and x2 are large numbers ; it is better to write : Standard_Real x1, x2 ; Standard_Real Precision = ... x1 = ... ! a large number x2 = ... ! another large number If ( x2 - x1 > Precision ) ... Precision in Cas.Cade Generally speaking, the precision criterion is not implicit in Cas.Cade. Low-level geometric algorithms accept precision criteria as arguments. As a rule, they should not refer directly to the precision criteria provided by the Precision package. On the other hand, high-level modeling algorithms have to provide the low-level geometric algorithms that they call, with a precision criteria. One way of doing this is to use the above precision criteria. Alternatively, the high-level algorithms can have their own system for precision management. For example, the Topology Data Structure stores precision criteria for each elementary shape (as a vertex, an edge or a face). When a new topological object is constructed, the precision criteria are taken from those provided by the Precision package, and stored in the related data structure. Later, a topological algorithm which analyses these objects will work with the values stored in the data structure. Also, if this algorithm is to build a new topological object, from these precision criteria, it will compute a new precision criterion for the new topological object, and write it into the data structure of the new topological object. The different precision criteria offered by the Precision package, cover the most common requirements of geometric algorithms, such as intersections, approximations, and so on. The choice of precision depends on the algorithm and on the geometric space. The geometric space may be : - a "real" 2D or 3D space, where the lengths are measured in meters, millimeters, microns, inches, etc ..., or - a "parametric" space, 1D on a curve or 2D on a surface, where lengths have no dimension. The choice of precision criteria for real space depends on the choice of the product, as it is based on the accuracy of the machine and the unit of measurement. The choice of precision criteria for parametric space depends on both the accuracy of the machine and the dimensions of the curve or the surface, since the parametric precision criterion and the real precision criterion are linked : if the curve is defined by the equation P(t), the inequation : Abs ( t2 - t1 ) < ParametricPrecision means that the parameters t1 and t2 are considered to be equal, and the inequation : Distance ( P(t2) , P(t1) ) < RealPrecision means that the points P(t1) and P(t2) are considered to be coincident. It seems to be the same idea, and it would be wonderful if these two inequations were equivalent. Note that this is rarely the case ! What is provided in this package? The Precision package provides : - a set of real space precision criteria for the algorithms, in view of checking distances and angles, - a set of parametric space precision criteria for the algorithms, in view of checking both : - the equality of parameters in a parametric space, - or the coincidence of points in the real space, by using parameter values, - the notion of infinite value, composed of a value assumed to be infinite, and checking tests designed to verify if any value could be considered as infinite. All the provided functions are very simple. The returned values result from the adaptation of the applications developed by the Open CASCADE company to Open CASCADE algorithms. The main interest of these functions lies in that it incites engineers developing applications to ask questions on precision factors. Which one is to be used in such or such case ? Tolerance criteria are context dependent. They must first choose : - either to work in real space, - or to work in parametric space, - or to work in a combined real and parametric space. They must next decide which precision factor will give the best answer to the current problem. Within an application environment, it is crucial to master precision even though this process may take a great deal of time.
 */
class Precision {
}

/**
 * The projLib package first provides projection of curves on a plane along a given Direction. The result will be a 3D curve. The ProjLib package provides projection of curves on surfaces to compute the curve in the parametric space.
 */
class ProjLib {
}

class ProjLib_CompProjectedCurve extends Adaptor2d_Curve2d {
}

class ProjLib_CompProjectedCurve_1 extends ProjLib_CompProjectedCurve {}

class ProjLib_CompProjectedCurve_2 extends ProjLib_CompProjectedCurve {}

class ProjLib_CompProjectedCurve_3 extends ProjLib_CompProjectedCurve {}

/**
 * Approximate the projection of a 3d curve on an analytic surface and stores the result in Approx. The result is a 2d curve. For approximation some parameters are used, including required tolerance of approximation. Tolerance is maximal possible value of 3d deviation of 3d projection of projected curve from "exact" 3d projection. Since algorithm searches 2d curve on surface, required 2d tolerance is computed from 3d tolerance with help of U,V resolutions of surface. 3d and 2d tolerances have sence only for curves on surface, it defines precision of projecting and approximation and have nothing to do with distance between the projected curve and the surface.
 */
class ProjLib_ComputeApprox {
}

class ProjLib_ComputeApprox_1 extends ProjLib_ComputeApprox {}

class ProjLib_ComputeApprox_2 extends ProjLib_ComputeApprox {}

/**
 * Approximate the projection of a 3d curve on an polar surface and stores the result in Approx. The result is a 2d curve. The evaluation of the current point of the 2d curve is done with the evaluation of the extrema P3d - Surface. For approximation some parameters are used, including required tolerance of approximation. Tolerance is maximal possible value of 3d deviation of 3d projection of projected curve from "exact" 3d projection. Since algorithm searches 2d curve on surface, required 2d tolerance is computed from 3d tolerance with help of U,V resolutions of surface. 3d and 2d tolerances have sence only for curves on surface, it defines precision of projecting and approximation and have nothing to do with distance between the projected curve and the surface.
 */
class ProjLib_ComputeApproxOnPolarSurface {
}

class ProjLib_ComputeApproxOnPolarSurface_1 extends ProjLib_ComputeApproxOnPolarSurface {}

class ProjLib_ComputeApproxOnPolarSurface_2 extends ProjLib_ComputeApproxOnPolarSurface {}

class ProjLib_ComputeApproxOnPolarSurface_3 extends ProjLib_ComputeApproxOnPolarSurface {}

class ProjLib_ComputeApproxOnPolarSurface_4 extends ProjLib_ComputeApproxOnPolarSurface {}

/**
 * Projects elementary curves on a cone.
 */
class ProjLib_Cone extends ProjLib_Projector {
}

class ProjLib_Cone_1 extends ProjLib_Cone {}

class ProjLib_Cone_2 extends ProjLib_Cone {}

class ProjLib_Cone_3 extends ProjLib_Cone {}

class ProjLib_Cone_4 extends ProjLib_Cone {}

/**
 * Projects elementary curves on a cylinder.
 */
class ProjLib_Cylinder extends ProjLib_Projector {
}

class ProjLib_Cylinder_1 extends ProjLib_Cylinder {}

class ProjLib_Cylinder_2 extends ProjLib_Cylinder {}

class ProjLib_Cylinder_3 extends ProjLib_Cylinder {}

class ProjLib_Cylinder_4 extends ProjLib_Cylinder {}

class ProjLib_Cylinder_5 extends ProjLib_Cylinder {}

class ProjLib_HCompProjectedCurve extends Adaptor2d_HCurve2d {
}

class ProjLib_HCompProjectedCurve_1 extends ProjLib_HCompProjectedCurve {}

class ProjLib_HCompProjectedCurve_2 extends ProjLib_HCompProjectedCurve {}

class ProjLib_HProjectedCurve extends Adaptor2d_HCurve2d {
}

class ProjLib_HProjectedCurve_1 extends ProjLib_HProjectedCurve {}

class ProjLib_HProjectedCurve_2 extends ProjLib_HProjectedCurve {}

/**
 * Projects elementary curves on a plane.
 */
class ProjLib_Plane extends ProjLib_Projector {
}

class ProjLib_Plane_1 extends ProjLib_Plane {}

class ProjLib_Plane_2 extends ProjLib_Plane {}

class ProjLib_Plane_3 extends ProjLib_Plane {}

class ProjLib_Plane_4 extends ProjLib_Plane {}

class ProjLib_Plane_5 extends ProjLib_Plane {}

class ProjLib_Plane_6 extends ProjLib_Plane {}

class ProjLib_Plane_7 extends ProjLib_Plane {}

class ProjLib_PrjFunc extends math_FunctionSetWithDerivatives {
}

class ProjLib_PrjResolve {
}

/**
 * Class used to project a 3d curve on a plane. The result will be a 3d curve.
 */
class ProjLib_ProjectOnPlane extends Adaptor3d_Curve {
}

class ProjLib_ProjectOnPlane_1 extends ProjLib_ProjectOnPlane {}

class ProjLib_ProjectOnPlane_2 extends ProjLib_ProjectOnPlane {}

class ProjLib_ProjectOnPlane_3 extends ProjLib_ProjectOnPlane {}

/**
 * Compute the 2d-curve. Try to solve the particular case if possible. Otherwize, an approximation is done. For approximation some parameters are used, including required tolerance of approximation. Tolerance is maximal possible value of 3d deviation of 3d projection of projected curve from "exact" 3d projection. Since algorithm searches 2d curve on surface, required 2d tolerance is computed from 3d tolerance with help of U,V resolutions of surface. 3d and 2d tolerances have sence only for curves on surface, it defines precision of projecting and approximation and have nothing to do with distance between the projected curve and the surface.
 */
class ProjLib_ProjectedCurve extends Adaptor2d_Curve2d {
}

class ProjLib_ProjectedCurve_1 extends ProjLib_ProjectedCurve {}

class ProjLib_ProjectedCurve_2 extends ProjLib_ProjectedCurve {}

class ProjLib_ProjectedCurve_3 extends ProjLib_ProjectedCurve {}

class ProjLib_ProjectedCurve_4 extends ProjLib_ProjectedCurve {}

/**
 * Root class for projection algorithms, stores the result.
 */
class ProjLib_Projector {
}

/**
 * Projects elementary curves on a sphere.
 */
class ProjLib_Sphere extends ProjLib_Projector {
}

class ProjLib_Sphere_1 extends ProjLib_Sphere {}

class ProjLib_Sphere_2 extends ProjLib_Sphere {}

class ProjLib_Sphere_3 extends ProjLib_Sphere {}

/**
 * Projects elementary curves on a torus.
 */
class ProjLib_Torus extends ProjLib_Projector {
}

class ProjLib_Torus_1 extends ProjLib_Torus {}

class ProjLib_Torus_2 extends ProjLib_Torus {}

class ProjLib_Torus_3 extends ProjLib_Torus {}

/**
 * The Prs3d package provides the following services - a presentation object (the context for all modifications to the display, its presentation will be displayed in every view of an active viewer) - an attribute manager governing how objects such as color, width, and type of line are displayed; these are generic objects, whereas those in StdPrs are specific geometries and topologies. - generic algorithms providing default settings for objects such as points, curves, surfaces and shapes - a root object which provides the abstract framework for the DsgPrs definitions at work in display of dimensions, relations and trihedra.
 */
class Prs3d {
}

/**
 * Provides class methods to draw an arrow at a given location, along a given direction and using a given angle.
 */
class Prs3d_Arrow extends Prs3d_Root {
}

/**
 * A framework for displaying arrows in representations of dimensions and relations.
 */
class Prs3d_ArrowAspect extends Prs3d_BasicAspect {
}

class Prs3d_ArrowAspect_1 extends Prs3d_ArrowAspect {}

class Prs3d_ArrowAspect_2 extends Prs3d_ArrowAspect {}

class Prs3d_ArrowAspect_3 extends Prs3d_ArrowAspect {}

/**
 * All basic Prs3d_xxxAspect must inherits from this class The aspect classes qualifies how to represent a given kind of object.
 */
class Prs3d_BasicAspect extends Standard_Transient {
}

/**
 * A framework to define the display of datums.
 */
class Prs3d_DatumAspect extends Prs3d_BasicAspect {
}

/**
 * defines the attributes when drawing a Length Presentation.
 */
class Prs3d_DimensionAspect extends Prs3d_BasicAspect {
}

/**
 * This class provides units for two dimension groups: - lengthes (length, radius, diameter) - angles
 */
class Prs3d_DimensionUnits {
}

class Prs3d_DimensionUnits_1 extends Prs3d_DimensionUnits {}

class Prs3d_DimensionUnits_2 extends Prs3d_DimensionUnits {}

/**
 * A graphic attribute manager which governs how objects such as color, width, line thickness and deflection are displayed. A drawer includes an instance of the Aspect classes with particular default values.
 */
class Prs3d_Drawer extends Graphic3d_PresentationAttributes {
}

class Prs3d_InvalidAngle extends Standard_RangeError {
}

class Prs3d_InvalidAngle_1 extends Prs3d_InvalidAngle {}

class Prs3d_InvalidAngle_2 extends Prs3d_InvalidAngle {}

/**
 * A framework to define the display attributes of isoparameters. This framework can be used to modify the default setting for isoparameters in Prs3d_Drawer.
 */
class Prs3d_IsoAspect extends Prs3d_LineAspect {
}

/**
 * A framework for defining how a line will be displayed in a presentation. Aspects of line display include width, color and type of line. The definition set by this class is then passed to the attribute manager Prs3d_Drawer. Any object which requires a value for line aspect as an argument may then be given the attribute manager as a substitute argument in the form of a field such as myDrawer for example.
 */
class Prs3d_LineAspect extends Prs3d_BasicAspect {
}

class Prs3d_LineAspect_1 extends Prs3d_LineAspect {}

class Prs3d_LineAspect_2 extends Prs3d_LineAspect {}

/**
 * A framework to define the display of planes.
 */
class Prs3d_PlaneAspect extends Prs3d_BasicAspect {
}

/**
 * This class defines attributes for the points The points are drawn using markers, whose size does not depend on the zoom value of the views.
 */
class Prs3d_PointAspect extends Prs3d_BasicAspect {
}

class Prs3d_PointAspect_1 extends Prs3d_PointAspect {}

class Prs3d_PointAspect_2 extends Prs3d_PointAspect {}

class Prs3d_PointAspect_3 extends Prs3d_PointAspect {}

/**
 * Defines a "shadow" of existing presentation object with custom aspects.
 */
class Prs3d_PresentationShadow extends Graphic3d_Structure {
}

/**
 * A projector object. This object defines the parameters of a view for a visualization algorithm. It is, for example, used by the hidden line removal algorithms.
 */
class Prs3d_Projector extends Standard_Transient {
}

class Prs3d_Projector_1 extends Prs3d_Projector {}

class Prs3d_Projector_2 extends Prs3d_Projector {}

/**
 * A root class for the standard presentation algorithms of the StdPrs package.
 */
class Prs3d_Root {
}

/**
 * A framework to define the display of shading. The attributes which make up this definition include: - fill aspect - color, and - material
 */
class Prs3d_ShadingAspect extends Prs3d_BasicAspect {
}

class Prs3d_ShadingAspect_1 extends Prs3d_ShadingAspect {}

class Prs3d_ShadingAspect_2 extends Prs3d_ShadingAspect {}

/**
 * describes the behaviour requested for a wireframe shape presentation.
 */
class Prs3d_ShapeTool {
}

/**
 * A framework to define the display of texts.
 */
class Prs3d_Text extends Prs3d_Root {
}

/**
 * Defines the attributes when displaying a text.
 */
class Prs3d_TextAspect extends Prs3d_BasicAspect {
}

class Prs3d_TextAspect_1 extends Prs3d_TextAspect {}

class Prs3d_TextAspect_2 extends Prs3d_TextAspect {}

/**
 * Standard presentation algorithm that outputs graphical primitives for cylindrical surface.
 */
class Prs3d_ToolCylinder extends Prs3d_ToolQuadric {
}

/**
 * Standard presentation algorithm that outputs graphical primitives for disk surface.
 */
class Prs3d_ToolDisk extends Prs3d_ToolQuadric {
}

/**
 * Standard presentation algorithm that outputs graphical primitives for disk surface.
 */
class Prs3d_ToolSector extends Prs3d_ToolQuadric {
}

/**
 * Standard presentation algorithm that outputs graphical primitives for spherical surface.
 */
class Prs3d_ToolSphere extends Prs3d_ToolQuadric {
}

/**
 * A framework to supply the Graphic3d structure of the object to be presented. On the first display request, this structure is created by calling the appropriate algorithm and retaining this framework for further display. This abstract framework is inherited in Application Interactive Services (AIS), notably by AIS_InteractiveObject. Consequently, 3D presentation should be handled by the relevant daughter classes and their member functions in AIS. This is particularly true in the creation of new interactive objects.
 */
class PrsMgr_PresentableObject extends Standard_Transient {
}

class PrsMgr_Presentation extends Graphic3d_Structure {
}

/**
 * A framework to manage 3D displays, graphic entities and their updates. Used in the AIS package (Application Interactive Services), to enable the advanced user to define the default display mode of a new interactive object which extends the list of signatures and types. Definition of new display types is handled by calling the presentation algorithms provided by the StdPrs package.
 */
class PrsMgr_PresentationManager extends Standard_Transient {
}

/**
 * This class allows the definition of an RGB color as triplet of 3 normalized floating point values (red, green, blue).
 */
class Quantity_Color {
}

class Quantity_Color_1 extends Quantity_Color {}

class Quantity_Color_2 extends Quantity_Color {}

class Quantity_Color_3 extends Quantity_Color {}

class Quantity_Color_4 extends Quantity_Color {}

/**
 * The pair of Quantity_Color and Alpha component (1.0 opaque, 0.0 transparent).
 */
class Quantity_ColorRGBA {
}

class Quantity_ColorRGBA_1 extends Quantity_ColorRGBA {}

class Quantity_ColorRGBA_2 extends Quantity_ColorRGBA {}

class Quantity_ColorRGBA_3 extends Quantity_ColorRGBA {}

class Quantity_ColorRGBA_4 extends Quantity_ColorRGBA {}

class Quantity_ColorRGBA_5 extends Quantity_ColorRGBA {}

/**
 * This class provides services to manage date information. A date represents the following time intervals: year, month, day, hour, minute, second, millisecond and microsecond. Current time is expressed in elapsed seconds and microseconds beginning from 00:00 GMT, January 1, 1979 (zero hour). The valid date can only be later than this one. Note: a Period object gives the interval between two dates.
 */
class Quantity_Date {
}

class Quantity_Date_1 extends Quantity_Date {}

class Quantity_Date_2 extends Quantity_Date {}

class Quantity_DateDefinitionError extends Standard_DomainError {
}

class Quantity_DateDefinitionError_1 extends Quantity_DateDefinitionError {}

class Quantity_DateDefinitionError_2 extends Quantity_DateDefinitionError {}

/**
 * Manages date intervals. For example, a Period object gives the interval between two dates. A period is expressed in seconds and microseconds.
 */
class Quantity_Period {
}

class Quantity_Period_1 extends Quantity_Period {}

class Quantity_Period_2 extends Quantity_Period {}

class Quantity_PeriodDefinitionError extends Standard_DomainError {
}

class Quantity_PeriodDefinitionError_1 extends Quantity_PeriodDefinitionError {}

class Quantity_PeriodDefinitionError_2 extends Quantity_PeriodDefinitionError {}

/**
 * The glTF (GL Transmission Format) mesh reader into XDE document.
 */
class RWGltf_CafReader extends RWMesh_CafReader {
}

/**
 * glTF writer context from XCAF document.
 */
class RWGltf_CafWriter extends Standard_Transient {
}

/**
 * Mesh data wrapper for delayed primitive array loading from glTF file. Class inherits Poly_Triangulation so that it can be put temporarily into TopoDS_Face within assembly structure, to be replaced with proper Poly_Triangulation loaded later on.
 */
class RWGltf_GltfLatePrimitiveArray extends Poly_Triangulation {
}

/**
 * Material manager for exporting into glTF format.
 */
class RWGltf_GltfMaterialMap extends RWMesh_MaterialMap {
}

/**
 * rapidjson::Writer wrapper for forward declaration.
 */
class RWGltf_GltfOStreamWriter {
}

/**
 * An element within primitive array - vertex attribute or element indexes.
 */
class RWGltf_GltfPrimArrayData {
}

class RWGltf_GltfPrimArrayData_1 extends RWGltf_GltfPrimArrayData {}

class RWGltf_GltfPrimArrayData_2 extends RWGltf_GltfPrimArrayData {}

/**
 * Indexed map of scene nodes with custom search algorithm.
 */
class RWGltf_GltfSceneNodeMap {
}

/**
 * glTF 1.0 format common (obsolete) material definition.
 */
class RWGltf_MaterialCommon extends Standard_Transient {
}

/**
 * glTF 2.0 format PBR material definition.
 */
class RWGltf_MaterialMetallicRoughness extends Standard_Transient {
}

/**
 * Interface for reading primitive array from glTF buffer.
 */
class RWGltf_PrimitiveArrayReader extends Standard_Transient {
}

/**
 * RWGltf_PrimitiveArrayReader implementation creating Poly_Triangulation.
 */
class RWGltf_TriangulationReader extends RWGltf_PrimitiveArrayReader {
}

class RWHeaderSection {
}

/**
 * Read & Write Module for FileDescription
 */
class RWHeaderSection_RWFileDescription {
}

/**
 * Read & Write Module for FileName
 */
class RWHeaderSection_RWFileName {
}

/**
 * Read & Write Module for FileSchema
 */
class RWHeaderSection_RWFileSchema {
}

/**
 * General module to read and write HeaderSection entities
 */
class RWHeaderSection_ReadWriteModule extends StepData_ReadWriteModule {
}

/**
 * The general interface for importing mesh data into XDE document.
 */
class RWMesh_CafReader extends Standard_Transient {
}

/**
 * Coordinate system converter defining the following tools: - Initialization for commonly used coordinate systems Z-up and Y-up. - Perform length unit conversion (scaling). - Conversion of three basic elements: a) mesh node Positions, b) mesh node Normals, c) model nodes Transformations (locations).
 */
class RWMesh_CoordinateSystemConverter {
}

/**
 * Auxiliary class to iterate through triangulated faces.
 */
class RWMesh_FaceIterator {
}

/**
 * Material manager. Provides an interface for collecting all materials within the document before writing it into file, and for copying associated image files (textures) into sub-folder near by exported model.
 */
class RWMesh_MaterialMap {
}

/**
 * This class provides methods to read and write triangulation from / to the OBJ files.
 */
class RWObj {
}

/**
 * The OBJ mesh reader into XDE document.
 */
class RWObj_CafReader extends RWMesh_CafReader {
}

/**
 * Interface to store shape attributes into document.
 */
class RWObj_IShapeReceiver {
}

/**
 * Reader of mtl files.
 */
class RWObj_MtlReader {
}

/**
 * An abstract class implementing procedure to read OBJ file.
 */
class RWObj_Reader extends Standard_Transient {
}

/**
 * RWObj_Reader implementation dumping OBJ file into Poly_Triangulation.
 */
class RWObj_TriangulationReader extends RWObj_Reader {
}

/**
 * Read & Write tool for CcDesignApproval
 */
class RWStepAP203_RWCcDesignApproval {
}

/**
 * Read & Write tool for CcDesignCertification
 */
class RWStepAP203_RWCcDesignCertification {
}

/**
 * Read & Write tool for CcDesignContract
 */
class RWStepAP203_RWCcDesignContract {
}

/**
 * Read & Write tool for CcDesignDateAndTimeAssignment
 */
class RWStepAP203_RWCcDesignDateAndTimeAssignment {
}

/**
 * Read & Write tool for CcDesignPersonAndOrganizationAssignment
 */
class RWStepAP203_RWCcDesignPersonAndOrganizationAssignment {
}

/**
 * Read & Write tool for CcDesignSecurityClassification
 */
class RWStepAP203_RWCcDesignSecurityClassification {
}

/**
 * Read & Write tool for CcDesignSpecificationReference
 */
class RWStepAP203_RWCcDesignSpecificationReference {
}

/**
 * Read & Write tool for Change
 */
class RWStepAP203_RWChange {
}

/**
 * Read & Write tool for ChangeRequest
 */
class RWStepAP203_RWChangeRequest {
}

/**
 * Read & Write tool for StartRequest
 */
class RWStepAP203_RWStartRequest {
}

/**
 * Read & Write tool for StartWork
 */
class RWStepAP203_RWStartWork {
}

class RWStepAP214 {
}

/**
 * Read & Write Module for AppliedApprovalAssignment
 */
class RWStepAP214_RWAppliedApprovalAssignment {
}

/**
 * Read & Write Module for AppliedDateAndTimeAssignment
 */
class RWStepAP214_RWAppliedDateAndTimeAssignment {
}

/**
 * Read & Write Module for AppliedDateAssignment
 */
class RWStepAP214_RWAppliedDateAssignment {
}

/**
 * Read & Write Module for AppliedDocumentReference
 */
class RWStepAP214_RWAppliedDocumentReference {
}

/**
 * Read & Write tool for AppliedExternalIdentificationAssignment
 */
class RWStepAP214_RWAppliedExternalIdentificationAssignment {
}

/**
 * Read & Write tool for AppliedGroupAssignment
 */
class RWStepAP214_RWAppliedGroupAssignment {
}

/**
 * Read & Write Module for AppliedOrganizationAssignment
 */
class RWStepAP214_RWAppliedOrganizationAssignment {
}

/**
 * Read & Write Module for AppliedPersonAndOrganizationAssignment
 */
class RWStepAP214_RWAppliedPersonAndOrganizationAssignment {
}

/**
 * Read & Write Module for AppliedPresentedItem
 */
class RWStepAP214_RWAppliedPresentedItem {
}

class RWStepAP214_RWAppliedSecurityClassificationAssignment {
}

/**
 * Read & Write Module for AutoDesignActualDateAndTimeAssignment
 */
class RWStepAP214_RWAutoDesignActualDateAndTimeAssignment {
}

/**
 * Read & Write Module for AutoDesignActualDateAssignment
 */
class RWStepAP214_RWAutoDesignActualDateAssignment {
}

/**
 * Read & Write Module for AutoDesignApprovalAssignment
 */
class RWStepAP214_RWAutoDesignApprovalAssignment {
}

/**
 * Read & Write Module for AutoDesignDateAndPersonAssignment
 */
class RWStepAP214_RWAutoDesignDateAndPersonAssignment {
}

/**
 * Read & Write Module for AutoDesignDocumentReference
 */
class RWStepAP214_RWAutoDesignDocumentReference {
}

/**
 * Read & Write Module for AutoDesignGroupAssignment
 */
class RWStepAP214_RWAutoDesignGroupAssignment {
}

/**
 * Read & Write Module for AutoDesignNominalDateAndTimeAssignment
 */
class RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment {
}

/**
 * Read & Write Module for AutoDesignNominalDateAssignment
 */
class RWStepAP214_RWAutoDesignNominalDateAssignment {
}

/**
 * Read & Write Module for AutoDesignOrganizationAssignment
 */
class RWStepAP214_RWAutoDesignOrganizationAssignment {
}

/**
 * Read & Write Module for AutoDesignPersonAndOrganizationAssignment
 */
class RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment {
}

/**
 * Read & Write Module for AutoDesignPresentedItem
 */
class RWStepAP214_RWAutoDesignPresentedItem {
}

/**
 * Read & Write Module for AutoDesignSecurityClassificationAssignment
 */
class RWStepAP214_RWAutoDesignSecurityClassificationAssignment {
}

/**
 * Read & Write tool for Class
 */
class RWStepAP214_RWClass {
}

/**
 * Read & Write tool for ExternallyDefinedClass
 */
class RWStepAP214_RWExternallyDefinedClass {
}

/**
 * Read & Write tool for ExternallyDefinedGeneralProperty
 */
class RWStepAP214_RWExternallyDefinedGeneralProperty {
}

/**
 * Read & Write tool for RepItemGroup
 */
class RWStepAP214_RWRepItemGroup {
}

/**
 * General module to read and write StepAP214 entities
 */
class RWStepAP214_ReadWriteModule extends StepData_ReadWriteModule {
}

/**
 * Read & Write Module for DraughtingModelItemAssociation
 */
class RWStepAP242_RWDraughtingModelItemAssociation {
}

/**
 * Read & Write Module for GeometricItemSpecificUsage
 */
class RWStepAP242_RWGeometricItemSpecificUsage {
}

/**
 * Read & Write Module for IdAttribute
 */
class RWStepAP242_RWIdAttribute {
}

/**
 * Read & Write Module for ItemIdentifiedRepresentationUsage
 */
class RWStepAP242_RWItemIdentifiedRepresentationUsage {
}

/**
 * Read & Write tool for Action
 */
class RWStepBasic_RWAction {
}

/**
 * Read & Write tool for ActionAssignment
 */
class RWStepBasic_RWActionAssignment {
}

/**
 * Read & Write tool for ActionMethod
 */
class RWStepBasic_RWActionMethod {
}

/**
 * Read & Write tool for ActionRequestAssignment
 */
class RWStepBasic_RWActionRequestAssignment {
}

/**
 * Read & Write tool for ActionRequestSolution
 */
class RWStepBasic_RWActionRequestSolution {
}

/**
 * Read & Write Module for Address
 */
class RWStepBasic_RWAddress {
}

/**
 * Read & Write Module for ApplicationContext
 */
class RWStepBasic_RWApplicationContext {
}

/**
 * Read & Write Module for ApplicationContextElement
 */
class RWStepBasic_RWApplicationContextElement {
}

/**
 * Read & Write Module for ApplicationProtocolDefinition
 */
class RWStepBasic_RWApplicationProtocolDefinition {
}

/**
 * Read & Write Module for Approval
 */
class RWStepBasic_RWApproval {
}

/**
 * Read & Write Module for ApprovalDateTime
 */
class RWStepBasic_RWApprovalDateTime {
}

/**
 * Read & Write Module for ApprovalPersonOrganization
 */
class RWStepBasic_RWApprovalPersonOrganization {
}

/**
 * Read & Write Module for ApprovalRelationship
 */
class RWStepBasic_RWApprovalRelationship {
}

/**
 * Read & Write Module for ApprovalRole
 */
class RWStepBasic_RWApprovalRole {
}

/**
 * Read & Write Module for ApprovalStatus
 */
class RWStepBasic_RWApprovalStatus {
}

/**
 * Read & Write Module for CalendarDate
 */
class RWStepBasic_RWCalendarDate {
}

/**
 * Read & Write tool for Certification
 */
class RWStepBasic_RWCertification {
}

/**
 * Read & Write tool for CertificationAssignment
 */
class RWStepBasic_RWCertificationAssignment {
}

/**
 * Read & Write tool for CertificationType
 */
class RWStepBasic_RWCertificationType {
}

/**
 * Read & Write tool for CharacterizedObject
 */
class RWStepBasic_RWCharacterizedObject {
}

/**
 * Read & Write tool for Contract
 */
class RWStepBasic_RWContract {
}

/**
 * Read & Write tool for ContractAssignment
 */
class RWStepBasic_RWContractAssignment {
}

/**
 * Read & Write tool for ContractType
 */
class RWStepBasic_RWContractType {
}

/**
 * Read & Write Module for ConversionBasedUnit
 */
class RWStepBasic_RWConversionBasedUnit {
}

/**
 * Read & Write Module for RWConversionBasedUnitAndAreaUnit
 */
class RWStepBasic_RWConversionBasedUnitAndAreaUnit {
}

/**
 * Read & Write Module for ConversionBasedUnitAndLengthUnit
 */
class RWStepBasic_RWConversionBasedUnitAndLengthUnit {
}

/**
 * Read & Write Module for ConversionBasedUnitAndMassUnit
 */
class RWStepBasic_RWConversionBasedUnitAndMassUnit {
}

/**
 * Read & Write Module for ConversionBasedUnitAndPlaneAngleUnit
 */
class RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit {
}

/**
 * Read & Write Module for ConversionBasedUnitAndRatioUnit
 */
class RWStepBasic_RWConversionBasedUnitAndRatioUnit {
}

/**
 * Read & Write Module for ConversionBasedUnitAndSolidAngleUnit
 */
class RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit {
}

/**
 * Read & Write Module for ConversionBasedUnitAndTimeUnit
 */
class RWStepBasic_RWConversionBasedUnitAndTimeUnit {
}

/**
 * Read & Write Module for ConversionBasedUnitAndVolumeUnit
 */
class RWStepBasic_RWConversionBasedUnitAndVolumeUnit {
}

/**
 * Read & Write Module for CoordinatedUniversalTimeOffset
 */
class RWStepBasic_RWCoordinatedUniversalTimeOffset {
}

/**
 * Read & Write Module for Date
 */
class RWStepBasic_RWDate {
}

/**
 * Read & Write Module for DateAndTime
 */
class RWStepBasic_RWDateAndTime {
}

/**
 * Read & Write Module for DateRole
 */
class RWStepBasic_RWDateRole {
}

/**
 * Read & Write Module for DateTimeRole
 */
class RWStepBasic_RWDateTimeRole {
}

/**
 * Read & Write Module for DerivedUnit
 */
class RWStepBasic_RWDerivedUnit {
}

/**
 * Read & Write Module for DerivedUnitElement
 */
class RWStepBasic_RWDerivedUnitElement {
}

/**
 * Read & Write Module for DimensionalExponents
 */
class RWStepBasic_RWDimensionalExponents {
}

/**
 * Read & Write tool for Document
 */
class RWStepBasic_RWDocument {
}

/**
 * Read & Write tool for DocumentFile
 */
class RWStepBasic_RWDocumentFile {
}

/**
 * Read & Write tool for DocumentProductAssociation
 */
class RWStepBasic_RWDocumentProductAssociation {
}

/**
 * Read & Write tool for DocumentProductEquivalence
 */
class RWStepBasic_RWDocumentProductEquivalence {
}

/**
 * Read & Write Module for DocumentRelationship
 */
class RWStepBasic_RWDocumentRelationship {
}

/**
 * Read & Write tool for DocumentRepresentationType
 */
class RWStepBasic_RWDocumentRepresentationType {
}

/**
 * Read & Write Module for DocumentType
 */
class RWStepBasic_RWDocumentType {
}

/**
 * Read & Write Module for DocumentUsageConstraint
 */
class RWStepBasic_RWDocumentUsageConstraint {
}

/**
 * Read & Write Module for Effectivity
 */
class RWStepBasic_RWEffectivity {
}

/**
 * Read & Write tool for EffectivityAssignment
 */
class RWStepBasic_RWEffectivityAssignment {
}

/**
 * Read & Write tool for EulerAngles
 */
class RWStepBasic_RWEulerAngles {
}

/**
 * Read & Write tool for ExternalIdentificationAssignment
 */
class RWStepBasic_RWExternalIdentificationAssignment {
}

/**
 * Read & Write tool for ExternalSource
 */
class RWStepBasic_RWExternalSource {
}

/**
 * Read & Write tool for ExternallyDefinedItem
 */
class RWStepBasic_RWExternallyDefinedItem {
}

/**
 * Read & Write tool for GeneralProperty
 */
class RWStepBasic_RWGeneralProperty {
}

/**
 * Read & Write tool for Group
 */
class RWStepBasic_RWGroup {
}

/**
 * Read & Write tool for GroupAssignment
 */
class RWStepBasic_RWGroupAssignment {
}

/**
 * Read & Write tool for GroupRelationship
 */
class RWStepBasic_RWGroupRelationship {
}

/**
 * Read & Write tool for IdentificationAssignment
 */
class RWStepBasic_RWIdentificationAssignment {
}

/**
 * Read & Write tool for IdentificationRole
 */
class RWStepBasic_RWIdentificationRole {
}

/**
 * Read & Write Module for LengthMeasureWithUnit
 */
class RWStepBasic_RWLengthMeasureWithUnit {
}

/**
 * Read & Write Module for LengthUnit
 */
class RWStepBasic_RWLengthUnit {
}

/**
 * Read & Write Module for LocalTime
 */
class RWStepBasic_RWLocalTime {
}

/**
 * Read & Write Module for MassMeasureWithUnit
 */
class RWStepBasic_RWMassMeasureWithUnit {
}

/**
 * Read & Write tool for MassUnit
 */
class RWStepBasic_RWMassUnit {
}

/**
 * Read & Write Module for MeasureWithUnit
 */
class RWStepBasic_RWMeasureWithUnit {
}

/**
 * Read & Write Module for MechanicalContext
 */
class RWStepBasic_RWMechanicalContext {
}

/**
 * Read & Write tool for NameAssignment
 */
class RWStepBasic_RWNameAssignment {
}

/**
 * Read & Write Module for NamedUnit
 */
class RWStepBasic_RWNamedUnit {
}

/**
 * Read & Write tool for ObjectRole
 */
class RWStepBasic_RWObjectRole {
}

/**
 * Read & Write Module for OrdinalDate
 */
class RWStepBasic_RWOrdinalDate {
}

/**
 * Read & Write Module for Organization
 */
class RWStepBasic_RWOrganization {
}

/**
 * Read & Write Module for OrganizationRole
 */
class RWStepBasic_RWOrganizationRole {
}

/**
 * Read & Write Module for OrganizationalAddress
 */
class RWStepBasic_RWOrganizationalAddress {
}

/**
 * Read & Write Module for Person
 */
class RWStepBasic_RWPerson {
}

/**
 * Read & Write Module for PersonAndOrganization
 */
class RWStepBasic_RWPersonAndOrganization {
}

/**
 * Read & Write Module for PersonAndOrganizationRole
 */
class RWStepBasic_RWPersonAndOrganizationRole {
}

/**
 * Read & Write Module for PersonalAddress
 */
class RWStepBasic_RWPersonalAddress {
}

/**
 * Read & Write Module for PlaneAngleMeasureWithUnit
 */
class RWStepBasic_RWPlaneAngleMeasureWithUnit {
}

/**
 * Read & Write Module for PlaneAngleUnit
 */
class RWStepBasic_RWPlaneAngleUnit {
}

/**
 * Read & Write Module for Product
 */
class RWStepBasic_RWProduct {
}

/**
 * Read & Write Module for ProductCategory
 */
class RWStepBasic_RWProductCategory {
}

/**
 * Read & Write tool for ProductCategoryRelationship
 */
class RWStepBasic_RWProductCategoryRelationship {
}

/**
 * Read & Write tool for ProductConceptContext
 */
class RWStepBasic_RWProductConceptContext {
}

/**
 * Read & Write Module for ProductContext
 */
class RWStepBasic_RWProductContext {
}

/**
 * Read & Write Module for ProductDefinition
 */
class RWStepBasic_RWProductDefinition {
}

/**
 * Read & Write Module for ProductDefinitionContext
 */
class RWStepBasic_RWProductDefinitionContext {
}

/**
 * Read & Write Module for ProductDefinitionEffectivity
 */
class RWStepBasic_RWProductDefinitionEffectivity {
}

/**
 * Read & Write Module for ProductDefinitionFormation
 */
class RWStepBasic_RWProductDefinitionFormation {
}

/**
 * Read & Write tool for ProductDefinitionFormationRelationship
 */
class RWStepBasic_RWProductDefinitionFormationRelationship {
}

/**
 * Read & Write Module for ProductDefinitionFormationWithSpecifiedSource
 */
class RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource {
}

/**
 * Read & Write Module for ProductDefinitionReference
 */
class RWStepBasic_RWProductDefinitionReference {
}

/**
 * Read & Write Module for ProductDefinitionReferenceWithLocalRepresentation
 */
class RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation {
}

/**
 * Read & Write tool for ProductDefinitionRelationship
 */
class RWStepBasic_RWProductDefinitionRelationship {
}

/**
 * Read & Write Module for ProductDefinitionWithAssociatedDocuments
 */
class RWStepBasic_RWProductDefinitionWithAssociatedDocuments {
}

/**
 * Read & Write Module for ProductRelatedProductCategory
 */
class RWStepBasic_RWProductRelatedProductCategory {
}

/**
 * Read & Write Module for ProductType
 */
class RWStepBasic_RWProductType {
}

/**
 * Read & Write Module for RatioMeasureWithUnit
 */
class RWStepBasic_RWRatioMeasureWithUnit {
}

/**
 * Read & Write tool for RoleAssociation
 */
class RWStepBasic_RWRoleAssociation {
}

/**
 * Read & Write Module for SecurityClassification
 */
class RWStepBasic_RWSecurityClassification {
}

/**
 * Read & Write Module for SecurityClassificationLevel
 */
class RWStepBasic_RWSecurityClassificationLevel {
}

/**
 * Read & Write Module for SiUnit
 */
class RWStepBasic_RWSiUnit {
}

/**
 * Read & Write Module for SiUnitAndAreaUnit
 */
class RWStepBasic_RWSiUnitAndAreaUnit {
}

/**
 * Read & Write Module for SiUnitAndLengthUnit
 */
class RWStepBasic_RWSiUnitAndLengthUnit {
}

/**
 * Read & Write Module for SiUnitAndMassUnit
 */
class RWStepBasic_RWSiUnitAndMassUnit {
}

/**
 * Read & Write Module for SiUnitAndPlaneAngleUnit
 */
class RWStepBasic_RWSiUnitAndPlaneAngleUnit {
}

/**
 * Read & Write Module for SiUnitAndRatioUnit
 */
class RWStepBasic_RWSiUnitAndRatioUnit {
}

/**
 * Read & Write Module for SiUnitAndSolidAngleUnit
 */
class RWStepBasic_RWSiUnitAndSolidAngleUnit {
}

/**
 * Read & Write Module for SiUnitAndThermodynamicTemperatureUnit
 */
class RWStepBasic_RWSiUnitAndThermodynamicTemperatureUnit {
}

/**
 * Read & Write Module for SiUnitAndTimeUnit
 */
class RWStepBasic_RWSiUnitAndTimeUnit {
}

/**
 * Read & Write Module for SiUnitAndVolumeUnit
 */
class RWStepBasic_RWSiUnitAndVolumeUnit {
}

/**
 * Read & Write Module for SolidAngleMeasureWithUnit
 */
class RWStepBasic_RWSolidAngleMeasureWithUnit {
}

/**
 * Read & Write Module for SolidAngleUnit
 */
class RWStepBasic_RWSolidAngleUnit {
}

/**
 * Read & Write tool for ThermodynamicTemperatureUnit
 */
class RWStepBasic_RWThermodynamicTemperatureUnit {
}

/**
 * Read & Write Module for UncertaintyMeasureWithUnit
 */
class RWStepBasic_RWUncertaintyMeasureWithUnit {
}

/**
 * Read & Write tool for VersionedActionRequest
 */
class RWStepBasic_RWVersionedActionRequest {
}

/**
 * Read & Write Module for WeekOfYearAndDayDate
 */
class RWStepBasic_RWWeekOfYearAndDayDate {
}

/**
 * Read & Write tool for AngularityTolerance
 */
class RWStepDimTol_RWAngularityTolerance {
}

/**
 * Read & Write tool for CircularRunoutTolerance
 */
class RWStepDimTol_RWCircularRunoutTolerance {
}

/**
 * Read & Write tool for CoaxialityTolerance
 */
class RWStepDimTol_RWCoaxialityTolerance {
}

/**
 * Read & Write tool for CommonDatum
 */
class RWStepDimTol_RWCommonDatum {
}

/**
 * Read & Write tool for ConcentricityTolerance
 */
class RWStepDimTol_RWConcentricityTolerance {
}

/**
 * Read & Write tool for CylindricityTolerance
 */
class RWStepDimTol_RWCylindricityTolerance {
}

/**
 * Read & Write tool for Datum
 */
class RWStepDimTol_RWDatum {
}

/**
 * Read & Write tool for DatumFeature
 */
class RWStepDimTol_RWDatumFeature {
}

/**
 * Read & Write tool for DatumReference
 */
class RWStepDimTol_RWDatumReference {
}

/**
 * Read & Write tool for DatumReferenceElement
 */
class RWStepDimTol_RWDatumReferenceCompartment {
}

/**
 * Read & Write tool for DatumReferenceElement
 */
class RWStepDimTol_RWDatumReferenceElement {
}

/**
 * Read & Write tool for DatumReferenceModifierWithValue
 */
class RWStepDimTol_RWDatumReferenceModifierWithValue {
}

/**
 * Read & Write tool for DatumSystem
 */
class RWStepDimTol_RWDatumSystem {
}

/**
 * Read & Write tool for DatumTarget
 */
class RWStepDimTol_RWDatumTarget {
}

/**
 * Read & Write tool for FlatnessTolerance
 */
class RWStepDimTol_RWFlatnessTolerance {
}

/**
 * Read & Write tool for GeneralDatumReference
 */
class RWStepDimTol_RWGeneralDatumReference {
}

/**
 * Read & Write Module for GeoTolAndGeoTolWthDatRef
 */
class RWStepDimTol_RWGeoTolAndGeoTolWthDatRef {
}

/**
 * Read & Write Module for GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol
 */
class RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol {
}

/**
 * Read & Write Module for GeoTolAndGeoTolWthDatRefAndGeoTolWthMod
 */
class RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod {
}

/**
 * Read & Write Module for ReprItemAndLengthMeasureWithUni
 */
class RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol {
}

/**
 * Read & Write Module for GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol
 */
class RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol {
}

/**
 * Read & Write Module for GeoTolAndGeoTolWthMaxTol
 */
class RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol {
}

/**
 * Read & Write Module for GeoTolAndGeoTolWthMod
 */
class RWStepDimTol_RWGeoTolAndGeoTolWthMod {
}

/**
 * Read & Write tool for GeometricTolerance
 */
class RWStepDimTol_RWGeometricTolerance {
}

/**
 * Read & Write tool for GeometricToleranceRelationship
 */
class RWStepDimTol_RWGeometricToleranceRelationship {
}

/**
 * Read & Write tool for GeometricToleranceWithDatumReference
 */
class RWStepDimTol_RWGeometricToleranceWithDatumReference {
}

/**
 * Read & Write tool for GeometricToleranceWithDefinedAreaUnit
 */
class RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit {
}

/**
 * Read & Write tool for GeometricToleranceWithDefinedUnit
 */
class RWStepDimTol_RWGeometricToleranceWithDefinedUnit {
}

/**
 * Read & Write tool for GeometricToleranceWithMaximumTolerance
 */
class RWStepDimTol_RWGeometricToleranceWithMaximumTolerance {
}

/**
 * Read & Write tool for GeometricToleranceWithModifiers
 */
class RWStepDimTol_RWGeometricToleranceWithModifiers {
}

/**
 * Read & Write tool for LineProfileTolerance
 */
class RWStepDimTol_RWLineProfileTolerance {
}

/**
 * Read & Write tool for ModifiedGeometricTolerance
 */
class RWStepDimTol_RWModifiedGeometricTolerance {
}

/**
 * Read & Write tool for NonUniformZoneDefinition
 */
class RWStepDimTol_RWNonUniformZoneDefinition {
}

/**
 * Read & Write tool for ParallelismTolerance
 */
class RWStepDimTol_RWParallelismTolerance {
}

/**
 * Read & Write tool for PerpendicularityTolerance
 */
class RWStepDimTol_RWPerpendicularityTolerance {
}

/**
 * Read & Write tool for PlacedDatumTargetFeature
 */
class RWStepDimTol_RWPlacedDatumTargetFeature {
}

/**
 * Read & Write tool for PositionTolerance
 */
class RWStepDimTol_RWPositionTolerance {
}

/**
 * Read & Write tool for ProjectedZoneDefinition
 */
class RWStepDimTol_RWProjectedZoneDefinition {
}

/**
 * Read & Write tool for RoundnessTolerance
 */
class RWStepDimTol_RWRoundnessTolerance {
}

/**
 * Read & Write tool for RunoutZoneDefinition
 */
class RWStepDimTol_RWRunoutZoneDefinition {
}

/**
 * Read & Write tool for RunoutZoneOrientation
 */
class RWStepDimTol_RWRunoutZoneOrientation {
}

/**
 * Read & Write tool for StraightnessTolerance
 */
class RWStepDimTol_RWStraightnessTolerance {
}

/**
 * Read & Write tool for SurfaceProfileTolerance
 */
class RWStepDimTol_RWSurfaceProfileTolerance {
}

/**
 * Read & Write tool for SymmetryTolerance
 */
class RWStepDimTol_RWSymmetryTolerance {
}

/**
 * Read & Write tool for ToleranceZone
 */
class RWStepDimTol_RWToleranceZone {
}

/**
 * Read & Write tool for ToleranceZoneDefinition
 */
class RWStepDimTol_RWToleranceZoneDefinition {
}

/**
 * Read & Write tool for ToleranceZoneForm
 */
class RWStepDimTol_RWToleranceZoneForm {
}

/**
 * Read & Write tool for TotalRunoutTolerance
 */
class RWStepDimTol_RWTotalRunoutTolerance {
}

/**
 * Read & Write tool for UnequallyDisposedGeometricTolerance
 */
class RWStepDimTol_RWUnequallyDisposedGeometricTolerance {
}

/**
 * Read & Write tool for AnalysisItemWithinRepresentation
 */
class RWStepElement_RWAnalysisItemWithinRepresentation {
}

/**
 * Read & Write tool for Curve3dElementDescriptor
 */
class RWStepElement_RWCurve3dElementDescriptor {
}

/**
 * Read & Write tool for CurveElementEndReleasePacket
 */
class RWStepElement_RWCurveElementEndReleasePacket {
}

/**
 * Read & Write tool for CurveElementSectionDefinition
 */
class RWStepElement_RWCurveElementSectionDefinition {
}

/**
 * Read & Write tool for CurveElementSectionDerivedDefinitions
 */
class RWStepElement_RWCurveElementSectionDerivedDefinitions {
}

/**
 * Read & Write tool for ElementDescriptor
 */
class RWStepElement_RWElementDescriptor {
}

/**
 * Read & Write tool for ElementMaterial
 */
class RWStepElement_RWElementMaterial {
}

/**
 * Read & Write tool for Surface3dElementDescriptor
 */
class RWStepElement_RWSurface3dElementDescriptor {
}

/**
 * Read & Write tool for SurfaceElementProperty
 */
class RWStepElement_RWSurfaceElementProperty {
}

/**
 * Read & Write tool for SurfaceSection
 */
class RWStepElement_RWSurfaceSection {
}

/**
 * Read & Write tool for SurfaceSectionField
 */
class RWStepElement_RWSurfaceSectionField {
}

/**
 * Read & Write tool for SurfaceSectionFieldConstant
 */
class RWStepElement_RWSurfaceSectionFieldConstant {
}

/**
 * Read & Write tool for SurfaceSectionFieldVarying
 */
class RWStepElement_RWSurfaceSectionFieldVarying {
}

/**
 * Read & Write tool for UniformSurfaceSection
 */
class RWStepElement_RWUniformSurfaceSection {
}

/**
 * Read & Write tool for Volume3dElementDescriptor
 */
class RWStepElement_RWVolume3dElementDescriptor {
}

/**
 * Read & Write tool for AlignedCurve3dElementCoordinateSystem
 */
class RWStepFEA_RWAlignedCurve3dElementCoordinateSystem {
}

/**
 * Read & Write tool for AlignedSurface3dElementCoordinateSystem
 */
class RWStepFEA_RWAlignedSurface3dElementCoordinateSystem {
}

/**
 * Read & Write tool for ArbitraryVolume3dElementCoordinateSystem
 */
class RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem {
}

/**
 * Read & Write tool for ConstantSurface3dElementCoordinateSystem
 */
class RWStepFEA_RWConstantSurface3dElementCoordinateSystem {
}

/**
 * Read & Write tool for Curve3dElementProperty
 */
class RWStepFEA_RWCurve3dElementProperty {
}

/**
 * Read & Write tool for Curve3dElementRepresentation
 */
class RWStepFEA_RWCurve3dElementRepresentation {
}

/**
 * Read & Write tool for CurveElementEndOffset
 */
class RWStepFEA_RWCurveElementEndOffset {
}

/**
 * Read & Write tool for CurveElementEndRelease
 */
class RWStepFEA_RWCurveElementEndRelease {
}

/**
 * Read & Write tool for CurveElementInterval
 */
class RWStepFEA_RWCurveElementInterval {
}

/**
 * Read & Write tool for CurveElementIntervalConstant
 */
class RWStepFEA_RWCurveElementIntervalConstant {
}

/**
 * Read & Write tool for CurveElementIntervalLinearlyVarying
 */
class RWStepFEA_RWCurveElementIntervalLinearlyVarying {
}

/**
 * Read & Write tool for CurveElementLocation
 */
class RWStepFEA_RWCurveElementLocation {
}

/**
 * Read & Write tool for DummyNode
 */
class RWStepFEA_RWDummyNode {
}

/**
 * Read & Write tool for ElementGeometricRelationship
 */
class RWStepFEA_RWElementGeometricRelationship {
}

/**
 * Read & Write tool for ElementGroup
 */
class RWStepFEA_RWElementGroup {
}

/**
 * Read & Write tool for ElementRepresentation
 */
class RWStepFEA_RWElementRepresentation {
}

/**
 * Read & Write tool for FeaAreaDensity
 */
class RWStepFEA_RWFeaAreaDensity {
}

/**
 * Read & Write tool for FeaAxis2Placement3d
 */
class RWStepFEA_RWFeaAxis2Placement3d {
}

/**
 * Read & Write tool for FeaCurveSectionGeometricRelationship
 */
class RWStepFEA_RWFeaCurveSectionGeometricRelationship {
}

/**
 * Read & Write tool for FeaGroup
 */
class RWStepFEA_RWFeaGroup {
}

/**
 * Read & Write tool for FeaLinearElasticity
 */
class RWStepFEA_RWFeaLinearElasticity {
}

/**
 * Read & Write tool for FeaMassDensity
 */
class RWStepFEA_RWFeaMassDensity {
}

/**
 * Read & Write tool for FeaMaterialPropertyRepresentation
 */
class RWStepFEA_RWFeaMaterialPropertyRepresentation {
}

/**
 * Read & Write tool for FeaMaterialPropertyRepresentationItem
 */
class RWStepFEA_RWFeaMaterialPropertyRepresentationItem {
}

/**
 * Read & Write tool for FeaModel
 */
class RWStepFEA_RWFeaModel {
}

/**
 * Read & Write tool for FeaModel3d
 */
class RWStepFEA_RWFeaModel3d {
}

/**
 * Read & Write tool for FeaModelDefinition
 */
class RWStepFEA_RWFeaModelDefinition {
}

/**
 * Read & Write tool for FeaMoistureAbsorption
 */
class RWStepFEA_RWFeaMoistureAbsorption {
}

/**
 * Read & Write tool for FeaParametricPoint
 */
class RWStepFEA_RWFeaParametricPoint {
}

/**
 * Read & Write tool for FeaRepresentationItem
 */
class RWStepFEA_RWFeaRepresentationItem {
}

/**
 * Read & Write tool for FeaSecantCoefficientOfLinearThermalExpansion
 */
class RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion {
}

/**
 * Read & Write tool for FeaShellBendingStiffness
 */
class RWStepFEA_RWFeaShellBendingStiffness {
}

/**
 * Read & Write tool for FeaShellMembraneBendingCouplingStiffness
 */
class RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness {
}

/**
 * Read & Write tool for FeaShellMembraneStiffness
 */
class RWStepFEA_RWFeaShellMembraneStiffness {
}

/**
 * Read & Write tool for FeaShellShearStiffness
 */
class RWStepFEA_RWFeaShellShearStiffness {
}

/**
 * Read & Write tool for FeaSurfaceSectionGeometricRelationship
 */
class RWStepFEA_RWFeaSurfaceSectionGeometricRelationship {
}

/**
 * Read & Write tool for FeaTangentialCoefficientOfLinearThermalExpansion
 */
class RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion {
}

/**
 * Read & Write tool for FreedomAndCoefficient
 */
class RWStepFEA_RWFreedomAndCoefficient {
}

/**
 * Read & Write tool for FreedomsList
 */
class RWStepFEA_RWFreedomsList {
}

/**
 * Read & Write tool for GeometricNode
 */
class RWStepFEA_RWGeometricNode {
}

/**
 * Read & Write tool for Node
 */
class RWStepFEA_RWNode {
}

/**
 * Read & Write tool for NodeDefinition
 */
class RWStepFEA_RWNodeDefinition {
}

/**
 * Read & Write tool for NodeGroup
 */
class RWStepFEA_RWNodeGroup {
}

/**
 * Read & Write tool for NodeRepresentation
 */
class RWStepFEA_RWNodeRepresentation {
}

/**
 * Read & Write tool for NodeSet
 */
class RWStepFEA_RWNodeSet {
}

/**
 * Read & Write tool for NodeWithSolutionCoordinateSystem
 */
class RWStepFEA_RWNodeWithSolutionCoordinateSystem {
}

/**
 * Read & Write tool for NodeWithVector
 */
class RWStepFEA_RWNodeWithVector {
}

/**
 * Read & Write tool for ParametricCurve3dElementCoordinateDirection
 */
class RWStepFEA_RWParametricCurve3dElementCoordinateDirection {
}

/**
 * Read & Write tool for ParametricCurve3dElementCoordinateSystem
 */
class RWStepFEA_RWParametricCurve3dElementCoordinateSystem {
}

/**
 * Read & Write tool for ParametricSurface3dElementCoordinateSystem
 */
class RWStepFEA_RWParametricSurface3dElementCoordinateSystem {
}

/**
 * Read & Write tool for Surface3dElementRepresentation
 */
class RWStepFEA_RWSurface3dElementRepresentation {
}

/**
 * Read & Write tool for Volume3dElementRepresentation
 */
class RWStepFEA_RWVolume3dElementRepresentation {
}

/**
 * Read & Write tool for AllAroundShapeAspect
 */
class RWStepRepr_RWAllAroundShapeAspect {
}

/**
 * Read & Write tool for Apex
 */
class RWStepRepr_RWApex {
}

/**
 * Read & Write tool for AssemblyComponentUsage
 */
class RWStepRepr_RWAssemblyComponentUsage {
}

/**
 * Read & Write Module for AssemblyComponentUsageSubstitute
 */
class RWStepRepr_RWAssemblyComponentUsageSubstitute {
}

/**
 * Read & Write tool for BetweenShapeAspect
 */
class RWStepRepr_RWBetweenShapeAspect {
}

/**
 * Read & Write tool for CentreOfSymmetry
 */
class RWStepRepr_RWCentreOfSymmetry {
}

/**
 * Read & Write Module for CharacterizedRepresentation
 */
class RWStepRepr_RWCharacterizedRepresentation {
}

/**
 * Read & Write Module for CompGroupShAspAndCompShAspAndDatumFeatAndShAsp
 */
class RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp {
}

/**
 * Read & Write Module for CompShAspAndDatumFeatAndShAsp
 */
class RWStepRepr_RWCompShAspAndDatumFeatAndShAsp {
}

/**
 * Read & Write tool for CompositeGroupShapeAspect
 */
class RWStepRepr_RWCompositeGroupShapeAspect {
}

/**
 * Read & Write tool for CompositeShapeAspect
 */
class RWStepRepr_RWCompositeShapeAspect {
}

/**
 * Read & Write Module for CompoundRepresentationItem
 */
class RWStepRepr_RWCompoundRepresentationItem {
}

/**
 * Read & Write tool for ConfigurationDesign
 */
class RWStepRepr_RWConfigurationDesign {
}

/**
 * Read & Write tool for ConfigurationEffectivity
 */
class RWStepRepr_RWConfigurationEffectivity {
}

/**
 * Read & Write tool for ConfigurationItem
 */
class RWStepRepr_RWConfigurationItem {
}

/**
 * Read & Write Module for ConstructiveGeometryRepresentation
 */
class RWStepRepr_RWConstructiveGeometryRepresentation {
}

/**
 * Read & Write Module for ConstructiveGeometryRepresentationRelationship
 */
class RWStepRepr_RWConstructiveGeometryRepresentationRelationship {
}

/**
 * Read & Write tool for ContinuosShapeAspect
 */
class RWStepRepr_RWContinuosShapeAspect {
}

/**
 * Read & Write tool for DataEnvironment
 */
class RWStepRepr_RWDataEnvironment {
}

/**
 * Read & Write Module for DefinitionalRepresentation
 */
class RWStepRepr_RWDefinitionalRepresentation {
}

/**
 * Read & Write tool for DerivedShapeAspect
 */
class RWStepRepr_RWDerivedShapeAspect {
}

/**
 * Read & Write Module for DescriptiveRepresentationItem
 */
class RWStepRepr_RWDescriptiveRepresentationItem {
}

/**
 * Read & Write tool for Extension
 */
class RWStepRepr_RWExtension {
}

/**
 * Read & Write tool for FeatureForDatumTargetRelationship
 */
class RWStepRepr_RWFeatureForDatumTargetRelationship {
}

/**
 * Read & Write Module for FunctionallyDefinedTransformation
 */
class RWStepRepr_RWFunctionallyDefinedTransformation {
}

/**
 * Read & Write tool for GeometricAlignment
 */
class RWStepRepr_RWGeometricAlignment {
}

/**
 * Read & Write Module for GlobalUncertaintyAssignedContext
 */
class RWStepRepr_RWGlobalUncertaintyAssignedContext {
}

/**
 * Read & Write Module for GlobalUnitAssignedContext
 */
class RWStepRepr_RWGlobalUnitAssignedContext {
}

/**
 * Read & Write Module for IntegerRepresentationItem
 */
class RWStepRepr_RWIntegerRepresentationItem {
}

/**
 * Read & Write Module for ItemDefinedTransformation
 */
class RWStepRepr_RWItemDefinedTransformation {
}

/**
 * Read & Write tool for MakeFromUsageOption
 */
class RWStepRepr_RWMakeFromUsageOption {
}

/**
 * Read & Write Module for MappedItem
 */
class RWStepRepr_RWMappedItem {
}

/**
 * Read & Write Module for MaterialDesignation
 */
class RWStepRepr_RWMaterialDesignation {
}

/**
 * Read & Write tool for MaterialProperty
 */
class RWStepRepr_RWMaterialProperty {
}

/**
 * Read & Write tool for MaterialPropertyRepresentation
 */
class RWStepRepr_RWMaterialPropertyRepresentation {
}

/**
 * Read & Write Module for MeasureRepresentationItem
 */
class RWStepRepr_RWMeasureRepresentationItem {
}

/**
 * Read & Write tool for ParallelOffset
 */
class RWStepRepr_RWParallelOffset {
}

/**
 * Read & Write Module for ParametricRepresentationContext
 */
class RWStepRepr_RWParametricRepresentationContext {
}

/**
 * Read & Write tool for PerpendicularTo
 */
class RWStepRepr_RWPerpendicularTo {
}

/**
 * Read & Write tool for ProductConcept
 */
class RWStepRepr_RWProductConcept {
}

/**
 * Read & Write tool for ProductDefinitionShape
 */
class RWStepRepr_RWProductDefinitionShape {
}

/**
 * Read & Write tool for PropertyDefinition
 */
class RWStepRepr_RWPropertyDefinition {
}

/**
 * Read & Write tool for PropertyDefinitionRelationship
 */
class RWStepRepr_RWPropertyDefinitionRelationship {
}

/**
 * Read & Write tool for PropertyDefinitionRepresentation
 */
class RWStepRepr_RWPropertyDefinitionRepresentation {
}

/**
 * Read & Write tool for QuantifiedAssemblyComponentUsage
 */
class RWStepRepr_RWQuantifiedAssemblyComponentUsage {
}

/**
 * Read & Write Module for ReprItemAndLengthMeasureWithUni
 */
class RWStepRepr_RWReprItemAndLengthMeasureWithUnit {
}

/**
 * Read & Write Module for ReprItemAndLengthMeasureWithUnitAndQRI
 */
class RWStepRepr_RWReprItemAndLengthMeasureWithUnitAndQRI {
}

/**
 * Read & Write Module for ReprItemAndPlaneAngleMeasureWithUni
 */
class RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnit {
}

/**
 * Read & Write Module for ReprItemAndPlaneAngleMeasureWithUnitAndQRI
 */
class RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnitAndQRI {
}

/**
 * Read & Write Module for Representation
 */
class RWStepRepr_RWRepresentation {
}

/**
 * Read & Write Module for RepresentationContext
 */
class RWStepRepr_RWRepresentationContext {
}

/**
 * Read & Write Module for RepresentationItem
 */
class RWStepRepr_RWRepresentationItem {
}

/**
 * Read & Write Module for RepresentationMap
 */
class RWStepRepr_RWRepresentationMap {
}

/**
 * Read & Write Module for RepresentationRelationship
 */
class RWStepRepr_RWRepresentationRelationship {
}

/**
 * Read & Write Module for RepresentationRelationshipWithTransformation
 */
class RWStepRepr_RWRepresentationRelationshipWithTransformation {
}

/**
 * Read & Write Module for ShapeAspect
 */
class RWStepRepr_RWShapeAspect {
}

/**
 * Read & Write tool for ShapeAspectDerivingRelationship
 */
class RWStepRepr_RWShapeAspectDerivingRelationship {
}

/**
 * Read & Write tool for ShapeAspectRelationship
 */
class RWStepRepr_RWShapeAspectRelationship {
}

/**
 * Read & Write tool for ShapeAspectTransition
 */
class RWStepRepr_RWShapeAspectTransition {
}

/**
 * Read & Write Module for ShapeRepresentationRelationshipWithTransformation
 */
class RWStepRepr_RWShapeRepresentationRelationshipWithTransformation {
}

/**
 * Read & Write tool for SpecifiedHigherUsageOccurrence
 */
class RWStepRepr_RWSpecifiedHigherUsageOccurrence {
}

/**
 * Read & Write tool for StructuralResponseProperty
 */
class RWStepRepr_RWStructuralResponseProperty {
}

/**
 * Read & Write tool for StructuralResponsePropertyDefinitionRepresentation
 */
class RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation {
}

/**
 * Read & Write tool for Tangent
 */
class RWStepRepr_RWTangent {
}

/**
 * Read & Write Module for ValueRepresentationItem
 */
class RWStepRepr_RWValueRepresentationItem {
}

/**
 * Read & Write Module for AdvancedBrepShapeRepresentation
 */
class RWStepShape_RWAdvancedBrepShapeRepresentation {
}

/**
 * Read & Write Module for AdvancedFace
 */
class RWStepShape_RWAdvancedFace {
}

/**
 * Read & Write tool for AngularLocation
 */
class RWStepShape_RWAngularLocation {
}

/**
 * Read & Write tool for AngularSize
 */
class RWStepShape_RWAngularSize {
}

/**
 * Read & Write Module for Block
 */
class RWStepShape_RWBlock {
}

/**
 * Read & Write Module for BooleanResult
 */
class RWStepShape_RWBooleanResult {
}

/**
 * Read & Write Module for BoxDomain
 */
class RWStepShape_RWBoxDomain {
}

/**
 * Read & Write Module for BoxedHalfSpace
 */
class RWStepShape_RWBoxedHalfSpace {
}

/**
 * Read & Write Module for ClosedShell
 */
class RWStepShape_RWClosedShell {
}

/**
 * Read & Write tool for CompoundShapeRepresentation
 */
class RWStepShape_RWCompoundShapeRepresentation {
}

/**
 * Read & Write tool for ConnectedEdgeSet
 */
class RWStepShape_RWConnectedEdgeSet {
}

/**
 * Read & Write Module for ConnectedFaceSet
 */
class RWStepShape_RWConnectedFaceSet {
}

/**
 * Read & Write tool for ConnectedFaceShapeRepresentation
 */
class RWStepShape_RWConnectedFaceShapeRepresentation {
}

/**
 * Read & Write tool for ConnectedFaceSubSet
 */
class RWStepShape_RWConnectedFaceSubSet {
}

/**
 * Read & Write Module for ContextDependentShapeRepresentation
 */
class RWStepShape_RWContextDependentShapeRepresentation {
}

/**
 * Read & Write Module for CsgShapeRepresentation
 */
class RWStepShape_RWCsgShapeRepresentation {
}

/**
 * Read & Write Module for CsgSolid
 */
class RWStepShape_RWCsgSolid {
}

/**
 * Read & Write Module for ConversionBasedUnitAndLengthUnit
 */
class RWStepShape_RWDefinitionalRepresentationAndShapeRepresentation {
}

/**
 * Read & Write tool for DimensionalCharacteristicRepresentation
 */
class RWStepShape_RWDimensionalCharacteristicRepresentation {
}

/**
 * Read & Write tool for DimensionalLocation
 */
class RWStepShape_RWDimensionalLocation {
}

/**
 * Read & Write tool for DimensionalLocationWithPath
 */
class RWStepShape_RWDimensionalLocationWithPath {
}

/**
 * Read & Write tool for DimensionalSize
 */
class RWStepShape_RWDimensionalSize {
}

/**
 * Read & Write tool for DimensionalSizeWithPath
 */
class RWStepShape_RWDimensionalSizeWithPath {
}

/**
 * Read & Write Module for Edge
 */
class RWStepShape_RWEdge {
}

/**
 * Read & Write tool for EdgeBasedWireframeModel
 */
class RWStepShape_RWEdgeBasedWireframeModel {
}

/**
 * Read & Write tool for EdgeBasedWireframeShapeRepresentation
 */
class RWStepShape_RWEdgeBasedWireframeShapeRepresentation {
}

/**
 * Read & Write Module for ExtrudedAreaSolid
 */
class RWStepShape_RWExtrudedAreaSolid {
}

/**
 * Read & Write Module for ExtrudedFaceSolid
 */
class RWStepShape_RWExtrudedFaceSolid {
}

/**
 * Read & Write Module for Face
 */
class RWStepShape_RWFace {
}

/**
 * Read & Write tool for FaceBasedSurfaceModel
 */
class RWStepShape_RWFaceBasedSurfaceModel {
}

/**
 * Read & Write Module for FaceOuterBound
 */
class RWStepShape_RWFaceOuterBound {
}

/**
 * Read & Write Module for FaceSurface
 */
class RWStepShape_RWFaceSurface {
}

/**
 * Read & Write Module for FacetedBrep
 */
class RWStepShape_RWFacetedBrep {
}

/**
 * Read & Write Module for FacetedBrepAndBrepWithVoids
 */
class RWStepShape_RWFacetedBrepAndBrepWithVoids {
}

/**
 * Read & Write Module for FacetedBrepShapeRepresentation
 */
class RWStepShape_RWFacetedBrepShapeRepresentation {
}

/**
 * Read & Write Module for GeometricCurveSet
 */
class RWStepShape_RWGeometricCurveSet {
}

/**
 * Read & Write Module for GeometricSet
 */
class RWStepShape_RWGeometricSet {
}

/**
 * Read & Write Module for GeometricallyBoundedSurfaceShapeRepresentation
 */
class RWStepShape_RWGeometricallyBoundedSurfaceShapeRepresentation {
}

/**
 * Read & Write Module for GeometricallyBoundedWireframeShapeRepresentation
 */
class RWStepShape_RWGeometricallyBoundedWireframeShapeRepresentation {
}

/**
 * Read & Write Module for HalfSpaceSolid
 */
class RWStepShape_RWHalfSpaceSolid {
}

/**
 * Read & Write Module for LimitsAndFits
 */
class RWStepShape_RWLimitsAndFits {
}

/**
 * Read & Write Module for Loop
 */
class RWStepShape_RWLoop {
}

/**
 * Read & Write Module for LoopAndPath
 */
class RWStepShape_RWLoopAndPath {
}

/**
 * Read & Write Module for ManifoldSolidBrep
 */
class RWStepShape_RWManifoldSolidBrep {
}

/**
 * Read & Write Module for ManifoldSurfaceShapeRepresentation
 */
class RWStepShape_RWManifoldSurfaceShapeRepresentation {
}

/**
 * Read & Write Module for MeasureQualification
 */
class RWStepShape_RWMeasureQualification {
}

/**
 * Read & Write Module for MeasureRepresentationItemAndQualifiedRepresentationItem
 */
class RWStepShape_RWMeasureRepresentationItemAndQualifiedRepresentationItem {
}

/**
 * Read & Write tool for NonManifoldSurfaceShapeRepresentation
 */
class RWStepShape_RWNonManifoldSurfaceShapeRepresentation {
}

/**
 * Read & Write Module for OpenShell
 */
class RWStepShape_RWOpenShell {
}

/**
 * Read & Write Module for OrientedClosedShell
 */
class RWStepShape_RWOrientedClosedShell {
}

/**
 * Read & Write Module for OrientedEdge
 */
class RWStepShape_RWOrientedEdge {
}

/**
 * Read & Write Module for OrientedFace
 */
class RWStepShape_RWOrientedFace {
}

/**
 * Read & Write Module for OrientedOpenShell
 */
class RWStepShape_RWOrientedOpenShell {
}

/**
 * Read & Write Module for OrientedPath
 */
class RWStepShape_RWOrientedPath {
}

/**
 * Read & Write Module for Path
 */
class RWStepShape_RWPath {
}

/**
 * Read & Write Module for PlusMinusTolerance
 */
class RWStepShape_RWPlusMinusTolerance {
}

/**
 * Read & Write tool for PointRepresentation
 */
class RWStepShape_RWPointRepresentation {
}

/**
 * Read & Write Module for PolyLoop
 */
class RWStepShape_RWPolyLoop {
}

/**
 * Read & Write Module for PrecisionQualifier
 */
class RWStepShape_RWPrecisionQualifier {
}

/**
 * Read & Write Module for QualifiedRepresentationItem
 */
class RWStepShape_RWQualifiedRepresentationItem {
}

/**
 * Read & Write Module for RevolvedAreaSolid
 */
class RWStepShape_RWRevolvedAreaSolid {
}

class RWStepShape_RWRevolvedFaceSolid {
}

/**
 * Read & Write Module for RightAngularWedge
 */
class RWStepShape_RWRightAngularWedge {
}

/**
 * Read & Write Module for RightCircularCone
 */
class RWStepShape_RWRightCircularCone {
}

/**
 * Read & Write Module for RightCircularCylinder
 */
class RWStepShape_RWRightCircularCylinder {
}

/**
 * Read & Write tool for SeamEdge
 */
class RWStepShape_RWSeamEdge {
}

/**
 * Read & Write tool for ShapeDefinitionRepresentation
 */
class RWStepShape_RWShapeDefinitionRepresentation {
}

/**
 * Read & Write tool for ShapeDimensionRepresentation
 */
class RWStepShape_RWShapeDimensionRepresentation {
}

/**
 * Read & Write Module for ShapeRepresentation
 */
class RWStepShape_RWShapeRepresentation {
}

/**
 * Read & Write tool for ShapeRepresentationWithParameters
 */
class RWStepShape_RWShapeRepresentationWithParameters {
}

/**
 * Read & Write Module for ShellBasedSurfaceModel
 */
class RWStepShape_RWShellBasedSurfaceModel {
}

/**
 * Read & Write Module for SolidModel
 */
class RWStepShape_RWSolidModel {
}

/**
 * Read & Write Module for SolidReplica
 */
class RWStepShape_RWSolidReplica {
}

/**
 * Read & Write Module for Sphere
 */
class RWStepShape_RWSphere {
}

/**
 * Read & Write tool for Subedge
 */
class RWStepShape_RWSubedge {
}

/**
 * Read & Write tool for Subface
 */
class RWStepShape_RWSubface {
}

/**
 * Read & Write Module for SweptAreaSolid
 */
class RWStepShape_RWSweptAreaSolid {
}

/**
 * Read & Write Module for SweptFaceSolid
 */
class RWStepShape_RWSweptFaceSolid {
}

/**
 * Read & Write Module for ToleranceValue
 */
class RWStepShape_RWToleranceValue {
}

/**
 * Read & Write Module for TopologicalRepresentationItem
 */
class RWStepShape_RWTopologicalRepresentationItem {
}

/**
 * Read & Write Module for Torus
 */
class RWStepShape_RWTorus {
}

/**
 * Read & Write Module for TransitionalShapeRepresentation
 */
class RWStepShape_RWTransitionalShapeRepresentation {
}

/**
 * Read & Write Module for TypeQualifier
 */
class RWStepShape_RWTypeQualifier {
}

/**
 * Read & Write tool for ValueFormatTypeQualifier
 */
class RWStepShape_RWValueFormatTypeQualifier {
}

/**
 * Read & Write Module for Vertex
 */
class RWStepShape_RWVertex {
}

/**
 * Read & Write Module for VertexLoop
 */
class RWStepShape_RWVertexLoop {
}

/**
 * Read & Write Module for VertexPoint
 */
class RWStepShape_RWVertexPoint {
}

/**
 * Read & Write Module for AnnotationCurveOccurrence
 */
class RWStepVisual_RWAnnotationCurveOccurrence {
}

/**
 * Read & Write Module for AnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem
 */
class RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem {
}

/**
 * Read & Write Module for AnnotationFillArea
 */
class RWStepVisual_RWAnnotationFillArea {
}

/**
 * Read & Write Module for AnnotationFillAreaOccurrence
 */
class RWStepVisual_RWAnnotationFillAreaOccurrence {
}

/**
 * Read & Write Module for AnnotationOccurrence
 */
class RWStepVisual_RWAnnotationOccurrence {
}

/**
 * Read & Write Module for AnnotationPlane
 */
class RWStepVisual_RWAnnotationPlane {
}

/**
 * Read & Write Module for AreaInSet
 */
class RWStepVisual_RWAreaInSet {
}

/**
 * Read & Write Module for BackgroundColour
 */
class RWStepVisual_RWBackgroundColour {
}

/**
 * Read & Write Module for CameraImage
 */
class RWStepVisual_RWCameraImage {
}

/**
 * Read & Write Module for CameraModel
 */
class RWStepVisual_RWCameraModel {
}

/**
 * Read & Write Module for CameraModelD2
 */
class RWStepVisual_RWCameraModelD2 {
}

/**
 * Read & Write Module for CameraModelD3
 */
class RWStepVisual_RWCameraModelD3 {
}

/**
 * Read & Write Module for CameraModelD3MultiClipping
 */
class RWStepVisual_RWCameraModelD3MultiClipping {
}

/**
 * Read & Write Module for CameraModelD3MultiClippingIntersection
 */
class RWStepVisual_RWCameraModelD3MultiClippingIntersection {
}

/**
 * Read & Write Module for CameraModelD3MultiClippingUnion
 */
class RWStepVisual_RWCameraModelD3MultiClippingUnion {
}

/**
 * Read & Write Module for CameraUsage
 */
class RWStepVisual_RWCameraUsage {
}

/**
 * Read & Write Module for complex STEP entity Characterized_Object & Characterized_Representation & Draughting_Model & Representation
 */
class RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation {
}

/**
 * Read & Write Module for Colour
 */
class RWStepVisual_RWColour {
}

/**
 * Read & Write Module for ColourRgb
 */
class RWStepVisual_RWColourRgb {
}

/**
 * Read & Write Module for ColourSpecification
 */
class RWStepVisual_RWColourSpecification {
}

/**
 * Read & Write Module for CompositeText
 */
class RWStepVisual_RWCompositeText {
}

/**
 * Read & Write Module for CompositeTextWithExtent
 */
class RWStepVisual_RWCompositeTextWithExtent {
}

/**
 * Read & Write Module for ContextDependentInvisibility
 */
class RWStepVisual_RWContextDependentInvisibility {
}

/**
 * Read & Write Module for ContextDependentOverRidingStyledItem
 */
class RWStepVisual_RWContextDependentOverRidingStyledItem {
}

/**
 * Read & Write Module for AnnotationOccurrence
 */
class RWStepVisual_RWCoordinatesList {
}

/**
 * Read & Write Module for CurveStyle
 */
class RWStepVisual_RWCurveStyle {
}

/**
 * Read & Write Module for CurveStyleFont
 */
class RWStepVisual_RWCurveStyleFont {
}

/**
 * Read & Write Module for CurveStyleFontPattern
 */
class RWStepVisual_RWCurveStyleFontPattern {
}

/**
 * Read & Write Module for DraughtingCallout
 */
class RWStepVisual_RWDraughtingCallout {
}

/**
 * Read & Write tool for DraughtingModel
 */
class RWStepVisual_RWDraughtingModel {
}

/**
 * Read & Write Module for DraughtingPreDefinedColour
 */
class RWStepVisual_RWDraughtingPreDefinedColour {
}

/**
 * Read & Write Module for DraughtingPreDefinedCurveFont
 */
class RWStepVisual_RWDraughtingPreDefinedCurveFont {
}

/**
 * Read & Write tool for ExternallyDefinedCurveFont
 */
class RWStepVisual_RWExternallyDefinedCurveFont {
}

/**
 * Read & Write Module for FillAreaStyle
 */
class RWStepVisual_RWFillAreaStyle {
}

/**
 * Read & Write Module for FillAreaStyleColour
 */
class RWStepVisual_RWFillAreaStyleColour {
}

/**
 * Read & Write Module for Invisibility
 */
class RWStepVisual_RWInvisibility {
}

/**
 * Read & Write Module for MechanicalDesignGeometricPresentationArea
 */
class RWStepVisual_RWMechanicalDesignGeometricPresentationArea {
}

/**
 * Read & Write Module for MechanicalDesignGeometricPresentationRepresentation
 */
class RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation {
}

/**
 * Read & Write Module for OverRidingStyledItem
 */
class RWStepVisual_RWOverRidingStyledItem {
}

/**
 * Read & Write Module for PlanarBox
 */
class RWStepVisual_RWPlanarBox {
}

/**
 * Read & Write Module for PlanarExtent
 */
class RWStepVisual_RWPlanarExtent {
}

/**
 * Read & Write Module for PointStyle
 */
class RWStepVisual_RWPointStyle {
}

/**
 * Read & Write Module for PreDefinedColour
 */
class RWStepVisual_RWPreDefinedColour {
}

/**
 * Read & Write Module for PreDefinedCurveFont
 */
class RWStepVisual_RWPreDefinedCurveFont {
}

/**
 * Read & Write Module for PreDefinedItem
 */
class RWStepVisual_RWPreDefinedItem {
}

/**
 * Read & Write Module for PresentationArea
 */
class RWStepVisual_RWPresentationArea {
}

/**
 * Read & Write Module for PresentationLayerAssignment
 */
class RWStepVisual_RWPresentationLayerAssignment {
}

/**
 * Read & Write Module for PresentationLayerUsage
 */
class RWStepVisual_RWPresentationLayerUsage {
}

/**
 * Read & Write Module for PresentationRepresentation
 */
class RWStepVisual_RWPresentationRepresentation {
}

/**
 * Read & Write Module for PresentationSet
 */
class RWStepVisual_RWPresentationSet {
}

/**
 * Read & Write Module for PresentationSize
 */
class RWStepVisual_RWPresentationSize {
}

/**
 * Read & Write Module for PresentationStyleAssignment
 */
class RWStepVisual_RWPresentationStyleAssignment {
}

/**
 * Read & Write Module for PresentationStyleByContext
 */
class RWStepVisual_RWPresentationStyleByContext {
}

/**
 * Read & Write Module for PresentationView
 */
class RWStepVisual_RWPresentationView {
}

/**
 * Read & Write Module for PresentedItemRepresentation
 */
class RWStepVisual_RWPresentedItemRepresentation {
}

/**
 * Read & Write Module for StyledItem
 */
class RWStepVisual_RWStyledItem {
}

/**
 * Read & Write Module for SurfaceSideStyle
 */
class RWStepVisual_RWSurfaceSideStyle {
}

/**
 * Read & Write Module for SurfaceStyleBoundary
 */
class RWStepVisual_RWSurfaceStyleBoundary {
}

/**
 * Read & Write Module for SurfaceStyleControlGrid
 */
class RWStepVisual_RWSurfaceStyleControlGrid {
}

/**
 * Read & Write Module for SurfaceStyleFillArea
 */
class RWStepVisual_RWSurfaceStyleFillArea {
}

/**
 * Read & Write Module for SurfaceStyleParameterLine
 */
class RWStepVisual_RWSurfaceStyleParameterLine {
}

/**
 * Read & Write Module for SurfaceStyleSegmentationCurve
 */
class RWStepVisual_RWSurfaceStyleSegmentationCurve {
}

/**
 * Read & Write Module for SurfaceStyleSilhouette
 */
class RWStepVisual_RWSurfaceStyleSilhouette {
}

/**
 * Read & Write Module for SurfaceStyleUsage
 */
class RWStepVisual_RWSurfaceStyleUsage {
}

/**
 * Read & Write Module for Template
 */
class RWStepVisual_RWTemplate {
}

/**
 * Read & Write Module for TemplateInstance
 */
class RWStepVisual_RWTemplateInstance {
}

/**
 * Read & Write Module for AnnotationOccurrence
 */
class RWStepVisual_RWTessellatedAnnotationOccurrence {
}

/**
 * Read & Write Module for AnnotationOccurrence
 */
class RWStepVisual_RWTessellatedCurveSet {
}

/**
 * Read & Write Module for AnnotationOccurrence
 */
class RWStepVisual_RWTessellatedGeometricSet {
}

/**
 * Read & Write Module for AnnotationOccurrence
 */
class RWStepVisual_RWTessellatedItem {
}

/**
 * Read & Write Module for TextLiteral
 */
class RWStepVisual_RWTextLiteral {
}

/**
 * Read & Write Module for TextStyle
 */
class RWStepVisual_RWTextStyle {
}

/**
 * Read & Write Module for TextStyleForDefinedFont
 */
class RWStepVisual_RWTextStyleForDefinedFont {
}

/**
 * Read & Write Module for TextStyleWithBoxCharacteristics
 */
class RWStepVisual_RWTextStyleWithBoxCharacteristics {
}

/**
 * Read & Write Module for ViewVolume
 */
class RWStepVisual_RWViewVolume {
}

/**
 * This class provides methods to read and write triangulation from / to the STL files.
 */
class RWStl {
}

/**
 * An abstract class implementing procedure to read STL file.
 */
class RWStl_Reader extends Standard_Transient {
}

class Resource_LexicalCompare {
}

/**
 * Defines a resource structure and its management methods.
 */
class Resource_Manager extends Standard_Transient {
}

class Resource_Manager_1 extends Resource_Manager {}

class Resource_Manager_2 extends Resource_Manager {}

class Resource_NoSuchResource extends Standard_NoSuchObject {
}

class Resource_NoSuchResource_1 extends Resource_NoSuchResource {}

class Resource_NoSuchResource_2 extends Resource_NoSuchResource {}

/**
 * This class provides functions used to convert a non-ASCII C string given in ANSI, EUC, GB or SJIS format, to a Unicode string of extended characters, and vice versa.
 */
class Resource_Unicode {
}

/**
 * Extends ActorWrite from STEPControl by analysis of whether shape is assembly (based on information from DECAF)
 */
class STEPCAFControl_ActorWrite extends STEPControl_ActorWrite {
}

/**
 * Extends Controller from STEPControl in order to provide ActorWrite adapted for writing assemblies from DECAF Note that ActorRead from STEPControl is used for reading (inherited automatically)
 */
class STEPCAFControl_Controller extends STEPControl_Controller {
}

/**
 * Auxiliary class serving as container for data resulting from translation of external file
 */
class STEPCAFControl_ExternFile extends Standard_Transient {
}

/**
 * This class provides tools for access (read) the GDT properties.
 */
class STEPCAFControl_GDTProperty {
}

/**
 * Provides a tool to read STEP file and put it into DECAF document. Besides transfer of shapes (including assemblies) provided by STEPControl, supports also colors and part names
 */
class STEPCAFControl_Reader {
}

class STEPCAFControl_Reader_1 extends STEPCAFControl_Reader {}

class STEPCAFControl_Reader_2 extends STEPCAFControl_Reader {}

/**
 * Provides a tool to write DECAF document to the STEP file. Besides transfer of shapes (including assemblies) provided by STEPControl, supports also colors and part names
 */
class STEPCAFControl_Writer {
}

class STEPCAFControl_Writer_1 extends STEPCAFControl_Writer {}

class STEPCAFControl_Writer_2 extends STEPCAFControl_Writer {}

/**
 * Defines tools for creation and investigation STEP constructs used for representing various kinds of data, such as product and assembly structure, unit contexts, associated information The creation of these structures is made according to currently active schema (AP203 or AP214 CD2 or DIS) This is taken from parameter write.step.schema
 */
class STEPConstruct {
}

/**
 * Maintains context specific for AP203 (required data and management information such as persons, dates, approvals etc.) It contains static entities (which can be shared), default values for person and organisation, and also provides tool for creating management entities around specific part (SDR).
 */
class STEPConstruct_AP203Context {
}

/**
 * This operator creates and checks an item of an assembly, from its basic data : a ShapeRepresentation, a Location ...
 */
class STEPConstruct_Assembly {
}

/**
 * Maintains global context tool for writing. Gives access to Product Definition Context (one per Model) Maintains ApplicationProtocolDefinition entity (common for all products) Also maintains context specific for AP203 and provides set of methods to work with various STEP constructs as required by Actor
 */
class STEPConstruct_ContextTool {
}

class STEPConstruct_ContextTool_1 extends STEPConstruct_ContextTool {}

class STEPConstruct_ContextTool_2 extends STEPConstruct_ContextTool {}

/**
 * Provides a tool for analyzing (reading) and creating (writing) references to external files in STEP
 */
class STEPConstruct_ExternRefs extends STEPConstruct_Tool {
}

class STEPConstruct_ExternRefs_1 extends STEPConstruct_ExternRefs {}

class STEPConstruct_ExternRefs_2 extends STEPConstruct_ExternRefs {}

/**
 * Provides tools for creating STEP structures associated with part (SDR), such as PRODUCT, PDF etc., as requied by current schema Also allows to investigate and modify this data
 */
class STEPConstruct_Part {
}

class STEPConstruct_PointHasher {
}

/**
 * Provides a mechanism for reading and writing shape styles (such as color) to and from the STEP file This tool maintains a list of styles, either taking them from STEP model (reading), or filling it by calls to AddStyle or directly (writing). Some methods deal with general structures of styles and presentations in STEP, but there are methods which deal with particular implementation of colors (as described in RP)
 */
class STEPConstruct_Styles extends STEPConstruct_Tool {
}

class STEPConstruct_Styles_1 extends STEPConstruct_Styles {}

class STEPConstruct_Styles_2 extends STEPConstruct_Styles {}

/**
 * Provides basic functionalities for tools which are intended for encoding/decoding specific STEP constructs
 */
class STEPConstruct_Tool {
}

class STEPConstruct_Tool_1 extends STEPConstruct_Tool {}

class STEPConstruct_Tool_2 extends STEPConstruct_Tool {}

/**
 * Tool for creation (encoding) and decoding (for writing and reading accordingly) context defining units and tolerances (uncerntanties)
 */
class STEPConstruct_UnitContext {
}

/**
 * This class provides tools for access (write and read) the validation properties on shapes in the STEP file. These are surface area, solid volume and centroid.
 */
class STEPConstruct_ValidationProps extends STEPConstruct_Tool {
}

class STEPConstruct_ValidationProps_1 extends STEPConstruct_ValidationProps {}

class STEPConstruct_ValidationProps_2 extends STEPConstruct_ValidationProps {}

/**
 * This class performs the transfer of an Entity from AP214 and AP203, either Geometric or Topologic.
 */
class STEPControl_ActorRead extends Transfer_ActorOfTransientProcess {
}

/**
 * This class performs the transfer of a Shape from TopoDS to AP203 or AP214 (CD2 or DIS)
 */
class STEPControl_ActorWrite extends Transfer_ActorOfFinderProcess {
}

/**
 * defines basic controller for STEP processor
 */
class STEPControl_Controller extends XSControl_Controller {
}

/**
 * Reads STEP files, checks them and translates their contents into Open CASCADE models. The STEP data can be that of a whole model or that of a specific list of entities in the model. As in XSControl_Reader, you specify the list using a selection. For the translation of iges files it is possible to use next sequence: To change translation parameters class Interface_Static should be used before beginning of translation (see STEP Parameters and General Parameters) Creation of reader - STEPControl_Reader reader; To load s file in a model use method reader.ReadFile("filename.stp") To print load results reader.PrintCheckLoad(failsonly,mode) where mode is equal to the value of enumeration IFSelect_PrintCount For definition number of candidates : Standard_Integer nbroots = reader. NbRootsForTransfer(); To transfer entities from a model the following methods can be used: for the whole model - reader.TransferRoots(); to transfer a list of entities: reader.TransferList(list); to transfer one entity Handle(Standard_Transient) ent = reader.RootForTransfer(num); reader.TransferEntity(ent), or reader.TransferOneRoot(num), or reader.TransferOne(num), or reader.TransferRoot(num) To obtain the result the following method can be used: reader.NbShapes() and reader.Shape(num); or reader.OneShape(); To print the results of transfer use method: reader.PrintCheckTransfer(failwarn,mode); where printfail is equal to the value of enumeration IFSelect_PrintFail, mode see above; or reader.PrintStatsTransfer(); Gets correspondence between a STEP entity and a result shape obtained from it. Handle(XSControl_WorkSession) WS = reader.WS(); if ( WS->TransferReader()->HasResult(ent) ) TopoDS_Shape shape = WS->TransferReader()->ShapeResult(ent);
 */
class STEPControl_Reader extends XSControl_Reader {
}

class STEPControl_Reader_1 extends STEPControl_Reader {}

class STEPControl_Reader_2 extends STEPControl_Reader {}

/**
 * This class creates and writes STEP files from Open CASCADE models. A STEP file can be written to an existing STEP file or to a new one. Translation can be performed in one or several operations. Each translation operation outputs a distinct root entity in the STEP file.
 */
class STEPControl_Writer {
}

class STEPControl_Writer_1 extends STEPControl_Writer {}

class STEPControl_Writer_2 extends STEPControl_Writer {}

/**
 * Provides tools to exploit and edit a set of STEP data : editors, selections ..
 */
class STEPEdit {
}

/**
 * EditContext is an Editor fit for Product Definition Context (one per Model) , i.e. : - ProductDefinition - ApplicationProtocolDefinition - ProductRelatedProductCategory
 */
class STEPEdit_EditContext extends IFSelect_Editor {
}

/**
 * EditSDR is an Editor fit for a Shape Definition Representation which designates a Product Definition
 */
class STEPEdit_EditSDR extends IFSelect_Editor {
}

class STEPSelections_AssemblyComponent extends Standard_Transient {
}

class STEPSelections_AssemblyComponent_1 extends STEPSelections_AssemblyComponent {}

class STEPSelections_AssemblyComponent_2 extends STEPSelections_AssemblyComponent {}

class STEPSelections_AssemblyExplorer {
}

class STEPSelections_AssemblyLink extends Standard_Transient {
}

class STEPSelections_AssemblyLink_1 extends STEPSelections_AssemblyLink {}

class STEPSelections_AssemblyLink_2 extends STEPSelections_AssemblyLink {}

class STEPSelections_HSequenceOfAssemblyLink extends Standard_Transient {
}

class STEPSelections_HSequenceOfAssemblyLink_1 extends STEPSelections_HSequenceOfAssemblyLink {}

class STEPSelections_HSequenceOfAssemblyLink_2 extends STEPSelections_HSequenceOfAssemblyLink {}

class STEPSelections_SelectAssembly extends IFSelect_SelectExplore {
}

class STEPSelections_SelectDerived extends StepSelect_StepType {
}

/**
 * This selection returns "STEP faces"
 */
class STEPSelections_SelectFaces extends IFSelect_SelectExplore {
}

class STEPSelections_SelectForTransfer extends XSControl_SelectForTransfer {
}

class STEPSelections_SelectForTransfer_1 extends STEPSelections_SelectForTransfer {}

class STEPSelections_SelectForTransfer_2 extends STEPSelections_SelectForTransfer {}

/**
 * This selection returns "curves in the geometric_set (except composite curves)"
 */
class STEPSelections_SelectGSCurves extends IFSelect_SelectExplore {
}

class STEPSelections_SelectInstances extends IFSelect_SelectExplore {
}

/**
 * Index buffer for BVH tree.
 */
class Select3D_BVHIndexBuffer extends Graphic3d_Buffer {
}

/**
 * This class handles the selection of arbitrary point set with internal type of sensitivity. The main principle is to split the point set given onto planar convex polygons and search for the overlap with one or more of them through traverse of BVH tree.
 */
class Select3D_InteriorSensitivePointSet extends Select3D_SensitiveSet {
}

class Select3D_PointData {
}

/**
 * A framework to define selection by a sensitive box.
 */
class Select3D_SensitiveBox extends Select3D_SensitiveEntity {
}

class Select3D_SensitiveBox_1 extends Select3D_SensitiveBox {}

class Select3D_SensitiveBox_2 extends Select3D_SensitiveBox {}

/**
 * A framework to define sensitive 3D arcs and circles. In some cases this class can raise Standard_ConstructionError and Standard_OutOfRange exceptions. For more details see Select3D_SensitivePoly.
 */
class Select3D_SensitiveCircle extends Select3D_SensitivePoly {
}

class Select3D_SensitiveCircle_1 extends Select3D_SensitiveCircle {}

class Select3D_SensitiveCircle_2 extends Select3D_SensitiveCircle {}

class Select3D_SensitiveCircle_3 extends Select3D_SensitiveCircle {}

class Select3D_SensitiveCircle_4 extends Select3D_SensitiveCircle {}

/**
 * A framework to define a sensitive 3D curve. In some cases this class can raise Standard_ConstructionError and Standard_OutOfRange exceptions. For more details see Select3D_SensitivePoly.
 */
class Select3D_SensitiveCurve extends Select3D_SensitivePoly {
}

class Select3D_SensitiveCurve_1 extends Select3D_SensitiveCurve {}

class Select3D_SensitiveCurve_2 extends Select3D_SensitiveCurve {}

class Select3D_SensitiveCurve_3 extends Select3D_SensitiveCurve {}

/**
 * Abstract framework to define 3D sensitive entities.
 */
class Select3D_SensitiveEntity extends Standard_Transient {
}

/**
 * Sensitive Entity to make a face selectable. In some cases this class can raise Standard_ConstructionError and Standard_OutOfRange exceptions. For more details see Select3D_SensitivePoly.
 */
class Select3D_SensitiveFace extends Select3D_SensitiveEntity {
}

class Select3D_SensitiveFace_1 extends Select3D_SensitiveFace {}

class Select3D_SensitiveFace_2 extends Select3D_SensitiveFace {}

/**
 * A framework to define selection of a sensitive group by a sensitive entity which is a set of 3D sensitive entities. Remark: 2 modes are possible for rectangle selection the group is considered selected 1) when all the entities inside are selected in the rectangle 2) only one entity inside is selected by the rectangle By default the "Match All entities" mode is set.
 */
class Select3D_SensitiveGroup extends Select3D_SensitiveSet {
}

class Select3D_SensitiveGroup_1 extends Select3D_SensitiveGroup {}

class Select3D_SensitiveGroup_2 extends Select3D_SensitiveGroup {}

/**
 * A framework to define sensitive 3D points.
 */
class Select3D_SensitivePoint extends Select3D_SensitiveEntity {
}

/**
 * Sensitive Entity to make a face selectable. In some cases this class can raise Standard_ConstructionError and Standard_OutOfRange exceptions from its member Select3D_PointData myPolyg.
 */
class Select3D_SensitivePoly extends Select3D_SensitiveSet {
}

class Select3D_SensitivePoly_1 extends Select3D_SensitivePoly {}

class Select3D_SensitivePoly_2 extends Select3D_SensitivePoly {}

class Select3D_SensitivePoly_3 extends Select3D_SensitivePoly {}

/**
 * Sensitive for triangulation or point set defined by Primitive Array. The primitives can be optionally combined into patches within BVH tree to reduce its building time in expense of extra traverse time.
 */
class Select3D_SensitivePrimitiveArray extends Select3D_SensitiveSet {
}

/**
 * A framework to define sensitive zones along a segment One gives the 3D start and end point
 */
class Select3D_SensitiveSegment extends Select3D_SensitiveEntity {
}

/**
 * This class is base class for handling overlap detection of complex sensitive entities. It provides an interface for building BVH tree for some set of entities. Thereby, each iteration of overlap detection is a traverse of BVH tree in fact. To use speed-up hierarchical structure in a custom complex sensitive entity, it is necessary to make that custom entity a descendant of this class and organize sub-entities in some container which allows referencing to elements by index. Note that methods taking index as a parameter are used for BVH build and the range of given index is [0; Size() - 1]. For example of usage see Select3D_SensitiveTriangulation.
 */
class Select3D_SensitiveSet extends Select3D_SensitiveEntity {
}

/**
 * A framework to define selection of triangles in a view. This comes into play in the detection of meshing and triangulation in surfaces. In some cases this class can raise Standard_ConstructionError and Standard_OutOfRange exceptions. For more details see Select3D_SensitivePoly.
 */
class Select3D_SensitiveTriangle extends Select3D_SensitiveEntity {
}

/**
 * A framework to define selection of a sensitive entity made of a set of triangles.
 */
class Select3D_SensitiveTriangulation extends Select3D_SensitiveSet {
}

class Select3D_SensitiveTriangulation_1 extends Select3D_SensitiveTriangulation {}

class Select3D_SensitiveTriangulation_2 extends Select3D_SensitiveTriangulation {}

/**
 * A framework to define selection of a wire owner by an elastic wire band.
 */
class Select3D_SensitiveWire extends Select3D_SensitiveSet {
}

/**
 * interface class for dynamic selection
 */
class SelectBasics {
}

/**
 * This class provides an interface for selecting volume manager, which is responsible for all overlap detection methods and calculation of minimum depth, distance to center of geometry and detected closest point on entity.
 */
class SelectBasics_SelectingVolumeManager {
}

/**
 * A framework to define a selection filter for two or more types of entity.
 */
class SelectMgr_AndFilter extends SelectMgr_CompositionFilter {
}

/**
 * This class is an interface for different types of selecting frustums, defining different selection types, like point, box or polyline selection. It contains signatures of functions for detection of overlap by sensitive entity and initializes some data for building the selecting frustum
 */
class SelectMgr_BaseFrustum extends Standard_Transient {
}

/**
 * A framework to define a compound filter composed of two or more simple filters.
 */
class SelectMgr_CompositionFilter extends SelectMgr_Filter {
}

/**
 * A framework to define classes of owners of sensitive primitives. The owner is the link between application and selection data structures. For the application to make its own objects selectable, it must define owner classes inheriting this framework.
 */
class SelectMgr_EntityOwner extends Standard_Transient {
}

class SelectMgr_EntityOwner_1 extends SelectMgr_EntityOwner {}

class SelectMgr_EntityOwner_2 extends SelectMgr_EntityOwner {}

class SelectMgr_EntityOwner_3 extends SelectMgr_EntityOwner {}

/**
 * The root class to define filter objects for selection. Advance handling of objects requires the services of filters. These only allow dynamic detection and selection of objects which correspond to the criteria defined in each. Eight standard filters inheriting SelectMgr_Filter are defined in Open CASCADE. You can create your own filters by defining new filter classes inheriting this framework. You use these filters by loading them into an AIS interactive context.
 */
class SelectMgr_Filter extends Standard_Transient {
}

/**
 * The purpose of this class is to provide unified interface for building selecting frustum depending on current camera projection and orientation matrices, window size and viewport parameters.
 */
class SelectMgr_FrustumBuilder extends Standard_Transient {
}

/**
 * A framework to define an or selection filter. This selects one or another type of sensitive entity.
 */
class SelectMgr_OrFilter extends SelectMgr_CompositionFilter {
}

}

/**
 * A framework to supply the structure of the object to be selected. At the first pick, this structure is created by calling the appropriate algorithm and retaining this framework for further picking. This abstract framework is inherited in Application Interactive Services (AIS), notably in AIS_InteractiveObject. Consequently, 3D selection should be handled by the relevant daughter classes and their member functions in AIS. This is particularly true in the creation of new interactive objects.
 */
class SelectMgr_SelectableObject extends PrsMgr_PresentableObject {
}

/**
 * The purpose of this class is to organize all selectable objects into data structure, allowing to build set of BVH trees for each transformation persistence subclass of selectable objects. This allow to minify number of updates for BVH trees - for example 2D persistent object subclass depends only on camera's projection and the corresponding BVH tree needs to be updated when camera's projection parameters change, while another tree for non-persistent objects can be left unchanged in this case.
 */
class SelectMgr_SelectableObjectSet {
}

/**
 * This class is used to switch between active selecting volumes depending on selection type chosen by the user
 */
class SelectMgr_SelectingVolumeManager extends SelectBasics_SelectingVolumeManager {
}

/**
 * Represents the state of a given selection mode for a Selectable Object. Contains all the sensitive entities available for this mode. An interactive object can have an indefinite number of modes of selection, each representing a "decomposition" into sensitive primitives; each primitive has an Owner (SelectMgr_EntityOwner) which allows us to identify the exact entity which has been detected. Each Selection mode is identified by an index. The set of sensitive primitives which correspond to a given mode is stocked in a SelectMgr_Selection object. By Convention, the default selection mode which allows us to grasp the Interactive object in its entirety will be mode 0. AIS_Trihedron : 4 selection modes - mode 0 : selection of a trihedron - mode 1 : selection of the origin of the trihedron - mode 2 : selection of the axes - mode 3 : selection of the planes XOY, YOZ, XOZ when you activate one of modes 1 2 3 4 , you pick AIS objects of type: - AIS_Point - AIS_Axis (and information on the type of axis) - AIS_Plane (and information on the type of plane). AIS_PlaneTrihedron offers 3 selection modes: - mode 0 : selection of the whole trihedron - mode 1 : selection of the origin of the trihedron - mode 2 : selection of the axes - same remarks as for the Trihedron. AIS_Shape : 7 maximum selection modes, depending on the complexity of the shape : - mode 0 : selection of the AIS_Shape - mode 1 : selection of the vertices - mode 2 : selection of the edges - mode 3 : selection of the wires - mode 4 : selection of the faces - mode 5 : selection of the shells - mode 6 : selection of the constituent solids.
 */
class SelectMgr_Selection extends Standard_Transient {
}

/**
 * A framework to manage selection from the point of view of viewer selectors. These can be added and removed, and selection modes can be activated and deactivated. In addition, objects may be known to all selectors or only to some.
 */
class SelectMgr_SelectionManager extends Standard_Transient {
}

/**
 * The purpose of this class is to mark sensitive entities selectable or not depending on current active selection of parent object for proper BVH traverse
 */
class SelectMgr_SensitiveEntity extends Standard_Transient {
}

/**
 * This class is used to store all calculated sensitive entites of one selectable object. It provides an interface for building BVH tree which is used to speed-up the performance of searching for overlap among sensitives of one selectable object
 */
class SelectMgr_SensitiveEntitySet extends BVH_PrimitiveSet3d {
}

/**
 * This class provides data and criterion for sorting candidate entities in the process of interactive selection by mouse click
 */
class SelectMgr_SortCriterion {
}

/**
 * An internal class for calculation of current largest tolerance value which will be applied for creation of selecting frustum by default. Each time the selection set is deactivated, maximum tolerance value will be recalculated. If a user enables custom precision using StdSelect_ViewerSelector3d::SetPixelTolerance, it will be applied to all sensitive entities without any checks.
 */
class SelectMgr_ToleranceMap {
}

}

/**
 * This class is used to handle polyline selection. The main principle of polyline selection algorithm is to split the polygon defined by polyline onto triangles. Than each of them is considered as a base for triangular frustum building. In other words, each triangle vertiex will be projected from 2d screen space to 3d world space onto near and far view frustum planes. Thus, the projected triangles make up the bases of selecting frustum. When the set of such frustums is created, the function determining selection iterates through triangular frustum set and searches for overlap with any frustum.
 */
class SelectMgr_TriangularFrustumSet extends SelectMgr_BaseFrustum {
}

/**
 * Class for handling depth clipping range. It is used to perform checks in case if global (for the whole view) clipping planes are defined inside of SelectMgr_RectangularFrustum class methods.
 */
class SelectMgr_ViewClipRange {
}

/**
 * A framework to define finding, sorting the sensitive primitives in a view. Services are also provided to define the return of the owners of those primitives selected. The primitives are sorted by criteria such as priority of the primitive or its depth in the view relative to that of other primitives. Note that in 3D, the inheriting framework StdSelect_ViewerSelector3d is only to be used if you do not want to use the services provided by AIS. Two tools are available to find and select objects found at a given position in the view. If you want to select the owners of all the objects detected at point x,y,z you use the Init - More - Next - Picked loop. If, on the other hand, you want to select only one object detected at that point, you use the Init - More - OnePicked loop. In this iteration, More is used to see if an object was picked and OnePicked, to get the object closest to the pick position. Viewer selectors are driven by SelectMgr_SelectionManager, and manipulate the SelectMgr_Selection objects given to them by the selection manager.
 */
class SelectMgr_ViewerSelector extends Standard_Transient {
}

class ShapeAlgo {
}

class ShapeAlgo_AlgoContainer extends Standard_Transient {
}

/**
 * Returns tools used by AlgoContainer
 */
class ShapeAlgo_ToolContainer extends Standard_Transient {
}

/**
 * This package is intended to analyze geometrical objects and topological shapes. Analysis domain includes both exploring geometrical and topological properties of shapes and checking their conformance to Open CASCADE requirements. The directions of analysis provided by tools of this package are: computing quantities of subshapes, computing parameters of points on curve and surface, computing surface singularities, checking edge and wire consistency, checking edges order in the wire, checking face bounds orientation, checking small faces, analyzing shape tolerances, analyzing of free bounds of the shape.
 */
class ShapeAnalysis {
}

}

/**
 * Analysis of the face size
 */
class ShapeAnalysis_CheckSmallFace {
}

/**
 * Analyzing tool for 2d or 3d curve. Computes parameters of projected point onto a curve.
 */
class ShapeAnalysis_Curve {
}

/**
 * Tool for analyzing the edge. Queries geometrical representations of the edge (3d curve, pcurve on the given face or surface) and topological sub-shapes (bounding vertices). Provides methods for analyzing geometry and topology consistency (3d and pcurve(s) consistency, their adjacency to the vertices).
 */
class ShapeAnalysis_Edge {
}

/**
 * This class is intended to represent free bound and to store its properties.
 */
class ShapeAnalysis_FreeBoundData extends Standard_Transient {
}

class ShapeAnalysis_FreeBoundData_1 extends ShapeAnalysis_FreeBoundData {}

class ShapeAnalysis_FreeBoundData_2 extends ShapeAnalysis_FreeBoundData {}

/**
 * This class is intended to output free bounds of the shape.
 */
class ShapeAnalysis_FreeBounds {
}

class ShapeAnalysis_FreeBounds_1 extends ShapeAnalysis_FreeBounds {}

class ShapeAnalysis_FreeBounds_2 extends ShapeAnalysis_FreeBounds {}

class ShapeAnalysis_FreeBounds_3 extends ShapeAnalysis_FreeBounds {}

/**
 * This class is intended to calculate shape free bounds properties. This class provides the following functionalities: - calculates area of the contour, - calculates perimeter of the contour, - calculates ratio of average length to average width of the contour, - estimates average width of contour, - finds the notches (narrow 'V'-like sub-contour) on the contour.
 */
class ShapeAnalysis_FreeBoundsProperties {
}

class ShapeAnalysis_FreeBoundsProperties_1 extends ShapeAnalysis_FreeBoundsProperties {}

class ShapeAnalysis_FreeBoundsProperties_2 extends ShapeAnalysis_FreeBoundsProperties {}

class ShapeAnalysis_FreeBoundsProperties_3 extends ShapeAnalysis_FreeBoundsProperties {}

/**
 * Analyzing tool aimed to work on primitive geometrical objects
 */
class ShapeAnalysis_Geom {
}

class ShapeAnalysis_HSequenceOfFreeBounds extends Standard_Transient {
}

class ShapeAnalysis_HSequenceOfFreeBounds_1 extends ShapeAnalysis_HSequenceOfFreeBounds {}

class ShapeAnalysis_HSequenceOfFreeBounds_2 extends ShapeAnalysis_HSequenceOfFreeBounds {}

/**
 * Dumps shape contents
 */
class ShapeAnalysis_ShapeContents {
}

/**
 * Tool for computing shape tolerances (minimal, maximal, average), finding shape with tolerance matching given criteria, setting or limitating tolerances.
 */
class ShapeAnalysis_ShapeTolerance {
}

/**
 * This class provides operators to analyze edges orientation in the shell.
 */
class ShapeAnalysis_Shell {
}

/**
 * Complements standard tool Geom_Surface by providing additional functionality for detection surface singularities, checking spatial surface closure and computing projections of 3D points onto a surface.
 */
class ShapeAnalysis_Surface extends Standard_Transient {
}

/**
 * This tool is used for transferring parameters from 3d curve of the edge to pcurve and vice versa.
 */
class ShapeAnalysis_TransferParameters extends Standard_Transient {
}

class ShapeAnalysis_TransferParameters_1 extends ShapeAnalysis_TransferParameters {}

class ShapeAnalysis_TransferParameters_2 extends ShapeAnalysis_TransferParameters {}

/**
 * This tool is used for transferring parameters from 3d curve of the edge to pcurve and vice versa. This tool transfers parameters with help of projection points from curve 3d on curve 2d and vice versa
 */
class ShapeAnalysis_TransferParametersProj extends ShapeAnalysis_TransferParameters {
}

class ShapeAnalysis_TransferParametersProj_1 extends ShapeAnalysis_TransferParametersProj {}

class ShapeAnalysis_TransferParametersProj_2 extends ShapeAnalysis_TransferParametersProj {}

/**
 * This class provides analysis of a wire to be compliant to CAS.CADE requirements.
 */
class ShapeAnalysis_Wire extends Standard_Transient {
}

class ShapeAnalysis_Wire_1 extends ShapeAnalysis_Wire {}

class ShapeAnalysis_Wire_2 extends ShapeAnalysis_Wire {}

class ShapeAnalysis_Wire_3 extends ShapeAnalysis_Wire {}

/**
 * This class is intended to control and, if possible, redefine the order of a list of edges which define a wire Edges are not given directly, but as their bounds (start,end)
 */
class ShapeAnalysis_WireOrder {
}

class ShapeAnalysis_WireOrder_1 extends ShapeAnalysis_WireOrder {}

class ShapeAnalysis_WireOrder_2 extends ShapeAnalysis_WireOrder {}

/**
 * Analyzes and records status of vertices in a Wire
 */
class ShapeAnalysis_WireVertex {
}

/**
 * This package provides basic building tools for other packages in ShapeHealing. These tools are rather internal for ShapeHealing .
 */
class ShapeBuild {
}

/**
 * This class provides low-level operators for building an edge 3d curve, copying edge with replaced vertices etc.
 */
class ShapeBuild_Edge {
}

/**
 * Rebuilds a Shape by making pre-defined substitutions on some of its components
 */
class ShapeBuild_ReShape extends BRepTools_ReShape {
}

/**
 * Provides low-level functions used for constructing vertices
 */
class ShapeBuild_Vertex {
}

/**
 * This package provides new algorithms for constructing new geometrical objects and topological shapes. It complements and extends algorithms available in Open CASCADE topological and geometrical toolkist. The functionality provided by this package are the following: projecting curves on surface, adjusting curve to have given start and end points. P
 */
class ShapeConstruct {
}

/**
 * Adjusts curve to have start and end points at the given points (currently works on lines and B-Splines only)
 */
class ShapeConstruct_Curve {
}

class ShapeConstruct_MakeTriangulation extends BRepBuilderAPI_MakeShape {
}

class ShapeConstruct_MakeTriangulation_1 extends ShapeConstruct_MakeTriangulation {}

class ShapeConstruct_MakeTriangulation_2 extends ShapeConstruct_MakeTriangulation {}

/**
 * This tool provides a method for computing pcurve by projecting 3d curve onto a surface. Projection is done by 23 or more points (this number is changed for B-Splines according to the following rule: the total number of the points is not less than number of spans * (degree + 1); it is increased recursively starting with 23 and is added with 22 until the condition is fulfilled). Isoparametric cases (if curve corresponds to U=const or V=const on the surface) are recognized with the given precision.
 */
class ShapeConstruct_ProjectCurveOnSurface extends Standard_Transient {
}

/**
 * This package is intended to convert geometrical objects and topological. The modifications of one geometrical object to another (one) geometrical object are provided. The supported modifications are the following: conversion of BSpline and Bezier surfaces to analytical form, conversion of indirect elementary surfaces (with left-handed coordinate systems) into direct ones, conversion of elementary surfaces to surfaces of revolution, conversion of surface of linear extrusion, revolution, offset surface to bspline, modification of parameterization, degree, number of segments of bspline surfaces, scale the shape.
 */
class ShapeCustom {
}

/**
 * this tool intended for aproximation surfaces, curves and pcurves with specified degree , max number of segments, tolerance 2d, tolerance 3d. Specified continuity can be reduced if approximation with specified continuity was not done.
 */
class ShapeCustom_BSplineRestriction extends ShapeCustom_Modification {
}

class ShapeCustom_BSplineRestriction_1 extends ShapeCustom_BSplineRestriction {}

class ShapeCustom_BSplineRestriction_2 extends ShapeCustom_BSplineRestriction {}

class ShapeCustom_BSplineRestriction_3 extends ShapeCustom_BSplineRestriction {}

/**
 * implement a modification for BRepTools Modifier algortihm. Converts Surface of Linear Exctrusion, Revolution and Offset surfaces into BSpline Surface according to flags.
 */
class ShapeCustom_ConvertToBSpline extends ShapeCustom_Modification {
}

/**
 * implements a modification for the BRepTools Modifier algortihm. Converts all elementary surfaces into surfaces of revolution.
 */
class ShapeCustom_ConvertToRevolution extends ShapeCustom_Modification {
}

/**
 * Converts BSpline curve to periodic
 */
class ShapeCustom_Curve {
}

class ShapeCustom_Curve_1 extends ShapeCustom_Curve {}

class ShapeCustom_Curve_2 extends ShapeCustom_Curve {}

/**
 * Converts curve2d to analytical form with given precision or simpify curve2d.
 */
class ShapeCustom_Curve2d {
}

/**
 * implements a modification for the BRepTools Modifier algortihm. Will redress indirect surfaces.
 */
class ShapeCustom_DirectModification extends ShapeCustom_Modification {
}

/**
 * A base class of Modification's from ShapeCustom. Implements message sending mechanism.
 */
class ShapeCustom_Modification extends BRepTools_Modification {
}

/**
 * This class is axuluary tool which contains parameters for BSplineRestriction class.
 */
class ShapeCustom_RestrictionParameters extends Standard_Transient {
}

/**
 * Converts a surface to the analitical form with given precision. Conversion is done only the surface is bspline of bezier and this can be approximed by some analytical surface with that precision.
 */
class ShapeCustom_Surface {
}

class ShapeCustom_Surface_1 extends ShapeCustom_Surface {}

class ShapeCustom_Surface_2 extends ShapeCustom_Surface {}

/**
 * implements a modification for the BRepTools Modifier algortihm. Converts all elementary surfaces into surfaces of revolution.
 */
class ShapeCustom_SweptToElementary extends ShapeCustom_Modification {
}

/**
 * Complements BRepTools_TrsfModification to provide reversible scaling regarding tolerances. Uses actual tolerances (attached to the shapes) not ones returned by BRep_Tool::Tolerance to work with tolerances lower than Precision::Confusion.
 */
class ShapeCustom_TrsfModification extends BRepTools_TrsfModification {
}

/**
 * This package provides general tools and data structures common for other packages in SHAPEWORKS and extending CAS.CADE structures. The following items are provided by this package: - enumeration Status used for coding status flags in methods inside the SHAPEWORKS - enumeration Parametrisation used for setting global parametrisation on the composite surface - class CompositeSurface representing a composite surface made of a grid of surface patches - class WireData representing a wire in the form of ordered list of edges - class MsgRegistrator for attaching messages to the objects - tools for exploring the shapes - tools for creating new shapes.
 */
class ShapeExtend {
}

/**
 * Abstract class that can be used for attaching messages to the objects (e.g. shapes). It is used by ShapeHealing algorithms to attach a message describing encountered case (e.g. removing small edge from a wire).
 */
class ShapeExtend_BasicMsgRegistrator extends Standard_Transient {
}

/**
 * Defines a curve which consists of several segments. Implements basic interface to it.
 */
class ShapeExtend_ComplexCurve extends Geom_Curve {
}

/**
 * Composite surface is represented by a grid of surfaces (patches) connected geometrically. Patches may have different parametrisation ranges, but they should be parametrised in the same manner so that parameter of each patch (u,v) can be converted to global parameter on the whole surface (U,V) with help of linear transformation:
 */
class ShapeExtend_CompositeSurface extends Geom_Surface {
}

class ShapeExtend_CompositeSurface_1 extends ShapeExtend_CompositeSurface {}

class ShapeExtend_CompositeSurface_2 extends ShapeExtend_CompositeSurface {}

class ShapeExtend_CompositeSurface_3 extends ShapeExtend_CompositeSurface {}

/**
 * This class is intended to explore shapes and convert different representations (list, sequence, compound) of complex shapes. It provides tools for: - obtaining type of the shapes in context of TopoDS_Compound, - exploring shapes in context of TopoDS_Compound, - converting different representations of shapes (list, sequence, compound).
 */
class ShapeExtend_Explorer {
}

/**
 * Attaches messages to the objects (generic Transient or shape). The objects of this class are transmitted to the Shape Healing algorithms so that they could collect messages occurred during processing.
 */
class ShapeExtend_MsgRegistrator extends ShapeExtend_BasicMsgRegistrator {
}

/**
 * This class provides a data structure necessary for work with the wire as with ordered list of edges, what is required for many algorithms. The advantage of this class is that it allows to work with wires which are not correct. The object of the class ShapeExtend_WireData can be initialized by TopoDS_Wire, and converted back to TopoDS_Wire. An edge in the wire is defined by its rank number. Operations of accessing, adding and removing edge at the given rank number are provided. On the whole wire, operations of circular permutation and reversing (both orientations of all edges and order of edges) are provided as well. This class also provides a method to check if the edge in the wire is a seam (if the wire lies on a face). This class is handled by reference. Such an approach gives the following advantages: 1. Sharing the object of this class strongly optimizes the processes of analysis and fixing performed in parallel on the wire stored in the form of this class. Fixing tool (e.g. ShapeFix_Wire) fixes problems one by one using analyzing tool (e.g. ShapeAnalysis_Wire). Sharing allows not to reinitialize each time the analyzing tool with modified ShapeExtend_WireData what consumes certain time. 2. No copying of contents. The object of ShapeExtend_WireData class has quite big size, returning it as a result of the function would cause additional copying of contents if this class were one handled by value. Moreover, this class is stored as a field in other classes which are they returned as results of functions, storing only a handle to ShapeExtend_WireData saves time and memory.
 */
class ShapeExtend_WireData extends Standard_Transient {
}

class ShapeExtend_WireData_1 extends ShapeExtend_WireData {}

class ShapeExtend_WireData_2 extends ShapeExtend_WireData {}

/**
 * This package provides algorithms for fixing problematic (violating Open CASCADE requirements) shapes. Tools from package ShapeAnalysis are used for detecting the problems. The detecting and fixing is done taking in account various criteria implemented in BRepCheck package. Each class of package ShapeFix deals with one certain type of shapes or with some family of problems.
 */
class ShapeFix {
}

/**
 * This class is intended to create a shell from the composite surface (grid of surfaces) and set of wires. It may be either division of the supporting surface of the face, or creating a shape corresponding to face on composite surface which is missing in CAS.CADE but exists in some other systems.
 */
class ShapeFix_ComposeShell extends ShapeFix_Root {
}

/**
 * Rebuilds edges to connect with new vertices, was moved from ShapeBuild. Makes vertices to be shared to connect edges, updates positions and tolerances for shared vertices. Accepts edges bounded by two vertices each.
 */
class ShapeFix_EdgeConnect {
}

/**
 * Project 3D point (vertex) on pcurves to find Vertex Parameter on parametric representation of an edge
 */
class ShapeFix_EdgeProjAux extends Standard_Transient {
}

class ShapeFix_EdgeProjAux_1 extends ShapeFix_EdgeProjAux {}

class ShapeFix_EdgeProjAux_2 extends ShapeFix_EdgeProjAux {}

/**
 * This operator allows to perform various fixes on face and its wires: fixes provided by ShapeFix_Wire, fixing orientation of wires, addition of natural bounds, fixing of missing seam edge, and detection and removal of null-area wires
 */
class ShapeFix_Face extends ShapeFix_Root {
}

class ShapeFix_Face_1 extends ShapeFix_Face {}

class ShapeFix_Face_2 extends ShapeFix_Face {}

/**
 * Rebuilds connectivity between faces in shell
 */
class ShapeFix_FaceConnect {
}

/**
 * Fixing face with small size
 */
class ShapeFix_FixSmallFace extends ShapeFix_Root {
}

/**
 * Fixing solids with small size
 */
class ShapeFix_FixSmallSolid extends ShapeFix_Root {
}

/**
 * This class is intended to output free bounds of the shape (free bounds are the wires consisting of edges referenced by the only face). For building free bounds it uses ShapeAnalysis_FreeBounds class. This class complements it with the feature to reduce the number of open wires. This reduction is performed with help of connecting several adjacent open wires one to another what can lead to: 1. making an open wire with greater length out of several open wires 2. making closed wire out of several open wires
 */
class ShapeFix_FreeBounds {
}

class ShapeFix_FreeBounds_1 extends ShapeFix_FreeBounds {}

class ShapeFix_FreeBounds_2 extends ShapeFix_FreeBounds {}

class ShapeFix_FreeBounds_3 extends ShapeFix_FreeBounds {}

/**
 * Tool for fixing selfintersecting wire and intersecting wires
 */
class ShapeFix_IntersectionTool {
}

/**
 * Root class for fixing operations Provides context for recording changes (optional), basic precision value and limit (minimal and maximal) values for tolerances, and message registrator
 */
class ShapeFix_Root extends Standard_Transient {
}

/**
 * Fixing shape in general
 */
class ShapeFix_Shape extends ShapeFix_Root {
}

class ShapeFix_Shape_1 extends ShapeFix_Shape {}

class ShapeFix_Shape_2 extends ShapeFix_Shape {}

/**
 * Modifies tolerances of sub-shapes (vertices, edges, faces)
 */
class ShapeFix_ShapeTolerance {
}

/**
 * Fixing orientation of faces in shell
 */
class ShapeFix_Shell extends ShapeFix_Root {
}

class ShapeFix_Shell_1 extends ShapeFix_Shell {}

class ShapeFix_Shell_2 extends ShapeFix_Shell {}

/**
 * Provides method to build a solid from a shells and orients them in order to have a valid solid with finite volume
 */
class ShapeFix_Solid extends ShapeFix_Root {
}

class ShapeFix_Solid_1 extends ShapeFix_Solid {}

class ShapeFix_Solid_2 extends ShapeFix_Solid {}

/**
 * Two wires have common vertex - this case is valid in BRep model and isn't valid in STEP => before writing into STEP it is necessary to split this vertex (each wire must has one vertex)
 */
class ShapeFix_SplitCommonVertex extends ShapeFix_Root {
}

/**
 * Tool for splitting and cutting edges; includes methods used in OverlappingTool and IntersectionTool
 */
class ShapeFix_SplitTool {
}

/**
 * This class provides a set of tools for repairing a wire.
 */
class ShapeFix_Wire extends ShapeFix_Root {
}

class ShapeFix_Wire_1 extends ShapeFix_Wire {}

class ShapeFix_Wire_2 extends ShapeFix_Wire {}

/**
 * Fixing disconnected edges in the wire Fixes vertices in the wire on the basis of pre-analysis made by ShapeAnalysis_WireVertex (given as argument). The Wire has formerly been loaded in a ShapeExtend_WireData.
 */
class ShapeFix_WireVertex {
}

/**
 * Provides methods for fixing wireframe of shape
 */
class ShapeFix_Wireframe extends ShapeFix_Root {
}

class ShapeFix_Wireframe_1 extends ShapeFix_Wireframe {}

class ShapeFix_Wireframe_2 extends ShapeFix_Wireframe {}

class ShapePersistent {
}

class ShapePersistent_HArray1 {
}

class ShapePersistent_HArray2 {
}

class ShapePersistent_HSequence {
}

/**
 * Shape Processing module allows to define and apply general Shape Processing as a customizable sequence of Shape Healing operators. The customization is implemented via user-editable resource file which defines sequence of operators to be executed and their parameters.
 */
class ShapeProcess {
}

/**
 * Applies one of the sequence read from resource file.
 */
class ShapeProcessAPI_ApplySequence {
}

/**
 * Provides convenient interface to resource file Allows to load resource file and get values of attributes starting from some scope, for example if scope is defined as "ToV4" and requested parameter is "exec.op", value of "ToV4.exec.op" parameter from the resource file will be returned
 */
class ShapeProcess_Context extends Standard_Transient {
}

class ShapeProcess_Context_1 extends ShapeProcess_Context {}

class ShapeProcess_Context_2 extends ShapeProcess_Context {}

/**
 * Provides a set of following operators
 */
class ShapeProcess_OperLibrary {
}

/**
 * Abstract Operator class providing a tool to perform an operation on Context
 */
class ShapeProcess_Operator extends Standard_Transient {
}

/**
 * Extends Context to handle shapes Contains map of shape-shape, and messages attached to shapes
 */
class ShapeProcess_ShapeContext extends ShapeProcess_Context {
}

class ShapeProcess_ShapeContext_1 extends ShapeProcess_ShapeContext {}

class ShapeProcess_ShapeContext_2 extends ShapeProcess_ShapeContext {}

/**
 * Defines operator as container for static function OperFunc. This allows user to create new operators without creation of new classes
 */
class ShapeProcess_UOperator extends ShapeProcess_Operator {
}

/**
 * This package provides tools for splitting and converting shapes by some criteria. It provides modifications of the kind when one topological object can be converted or splitted to several ones. In particular this package contains high level API classes which perform: converting geometry of shapes up to given continuity, splitting revolutions by U to segments less than given value, converting to beziers, splitting closed faces.
 */
class ShapeUpgrade {
}

class ShapeUpgrade_ClosedEdgeDivide extends ShapeUpgrade_EdgeDivide {
}

/**
 * Divides a Face with one or more seam edge to avoid closed faces. Splitting is performed by U and V direction. The number of resulting faces can be defined by user.
 */
class ShapeUpgrade_ClosedFaceDivide extends ShapeUpgrade_FaceDivide {
}

class ShapeUpgrade_ClosedFaceDivide_1 extends ShapeUpgrade_ClosedFaceDivide {}

class ShapeUpgrade_ClosedFaceDivide_2 extends ShapeUpgrade_ClosedFaceDivide {}

/**
 * converts/splits a 2d curve to a list of beziers
 */
class ShapeUpgrade_ConvertCurve2dToBezier extends ShapeUpgrade_SplitCurve2d {
}

/**
 * converts/splits a 3d curve of any type to a list of beziers
 */
class ShapeUpgrade_ConvertCurve3dToBezier extends ShapeUpgrade_SplitCurve3d {
}

/**
 * Converts a plane, bspline surface, surface of revolution, surface of extrusion, offset surface to grid of bezier basis surface ( bezier surface, surface of revolution based on bezier curve, offset surface based on any previous type).
 */
class ShapeUpgrade_ConvertSurfaceToBezierBasis extends ShapeUpgrade_SplitSurface {
}

class ShapeUpgrade_EdgeDivide extends ShapeUpgrade_Tool {
}

/**
 * Divides a Face (both edges in the wires, by splitting curves and pcurves, and the face itself, by splitting supporting surface) according to splitting criteria. * The domain of the face to divide is defined by the PCurves of the wires on the Face.
 */
class ShapeUpgrade_FaceDivide extends ShapeUpgrade_Tool {
}

class ShapeUpgrade_FaceDivide_1 extends ShapeUpgrade_FaceDivide {}

class ShapeUpgrade_FaceDivide_2 extends ShapeUpgrade_FaceDivide {}

/**
 * Divides face by max area criterium.
 */
class ShapeUpgrade_FaceDivideArea extends ShapeUpgrade_FaceDivide {
}

class ShapeUpgrade_FaceDivideArea_1 extends ShapeUpgrade_FaceDivideArea {}

class ShapeUpgrade_FaceDivideArea_2 extends ShapeUpgrade_FaceDivideArea {}

class ShapeUpgrade_FixSmallBezierCurves extends ShapeUpgrade_FixSmallCurves {
}

class ShapeUpgrade_FixSmallCurves extends ShapeUpgrade_Tool {
}

/**
 * Removes all internal wires having area less than specified min area
 */
class ShapeUpgrade_RemoveInternalWires extends ShapeUpgrade_Tool {
}

class ShapeUpgrade_RemoveInternalWires_1 extends ShapeUpgrade_RemoveInternalWires {}

class ShapeUpgrade_RemoveInternalWires_2 extends ShapeUpgrade_RemoveInternalWires {}

/**
 * Removes all locations sub-shapes of specified shape
 */
class ShapeUpgrade_RemoveLocations extends Standard_Transient {
}

/**
 * API class for performing conversion of 3D, 2D curves to bezier curves and surfaces to bezier based surfaces ( bezier surface, surface of revolution based on bezier curve, offset surface based on any previous type).
 */
class ShapeUpgrade_ShapeConvertToBezier extends ShapeUpgrade_ShapeDivide {
}

class ShapeUpgrade_ShapeConvertToBezier_1 extends ShapeUpgrade_ShapeConvertToBezier {}

class ShapeUpgrade_ShapeConvertToBezier_2 extends ShapeUpgrade_ShapeConvertToBezier {}

/**
 * Divides a all faces in shell with given criteria Shell.
 */
class ShapeUpgrade_ShapeDivide {
}

class ShapeUpgrade_ShapeDivide_1 extends ShapeUpgrade_ShapeDivide {}

class ShapeUpgrade_ShapeDivide_2 extends ShapeUpgrade_ShapeDivide {}

/**
 * Splits all surfaces of revolution, cylindrical, toroidal, conical, spherical surfaces in the given shape so that each resulting segment covers not more than defined number of degrees (to segments less than 90).
 */
class ShapeUpgrade_ShapeDivideAngle extends ShapeUpgrade_ShapeDivide {
}

class ShapeUpgrade_ShapeDivideAngle_1 extends ShapeUpgrade_ShapeDivideAngle {}

class ShapeUpgrade_ShapeDivideAngle_2 extends ShapeUpgrade_ShapeDivideAngle {}

/**
 * Divides faces from sprcified shape by max area criterium.
 */
class ShapeUpgrade_ShapeDivideArea extends ShapeUpgrade_ShapeDivide {
}

class ShapeUpgrade_ShapeDivideArea_1 extends ShapeUpgrade_ShapeDivideArea {}

class ShapeUpgrade_ShapeDivideArea_2 extends ShapeUpgrade_ShapeDivideArea {}

/**
 * Divides all closed faces in the shape. Class ShapeUpgrade_ClosedFaceDivide is used as divide tool.
 */
class ShapeUpgrade_ShapeDivideClosed extends ShapeUpgrade_ShapeDivide {
}

class ShapeUpgrade_ShapeDivideClosedEdges extends ShapeUpgrade_ShapeDivide {
}

/**
 * API Tool for converting shapes with C0 geometry into C1 ones
 */
class ShapeUpgrade_ShapeDivideContinuity extends ShapeUpgrade_ShapeDivide {
}

class ShapeUpgrade_ShapeDivideContinuity_1 extends ShapeUpgrade_ShapeDivideContinuity {}

class ShapeUpgrade_ShapeDivideContinuity_2 extends ShapeUpgrade_ShapeDivideContinuity {}

/**
 * This class provides a tool for applying sewing algorithm from BRepBuilderAPI: it takes a shape, calls sewing for each shell, and then replaces sewed shells with use of ShapeBuild_ReShape
 */
class ShapeUpgrade_ShellSewing {
}

/**
 * Splits a curve with a criterion.
 */
class ShapeUpgrade_SplitCurve extends Standard_Transient {
}

/**
 * Splits a 2d curve with a criterion.
 */
class ShapeUpgrade_SplitCurve2d extends ShapeUpgrade_SplitCurve {
}

/**
 * Corrects/splits a 2d curve with a continuity criterion. Tolerance is used to correct the curve at a knot that respects geometrically the criterion, in order to reduce the multiplicity of the knot.
 */
class ShapeUpgrade_SplitCurve2dContinuity extends ShapeUpgrade_SplitCurve2d {
}

/**
 * Splits a 3d curve with a criterion.
 */
class ShapeUpgrade_SplitCurve3d extends ShapeUpgrade_SplitCurve {
}

/**
 * Corrects/splits a 2d curve with a continuity criterion. Tolerance is used to correct the curve at a knot that respects geometrically the criterion, in order to reduce the multiplicity of the knot.
 */
class ShapeUpgrade_SplitCurve3dContinuity extends ShapeUpgrade_SplitCurve3d {
}

/**
 * Splits a Surface with a criterion.
 */
class ShapeUpgrade_SplitSurface extends Standard_Transient {
}

/**
 * Splits a surfaces of revolution, cylindrical, toroidal, conical, spherical so that each resulting segment covers not more than defined number of degrees.
 */
class ShapeUpgrade_SplitSurfaceAngle extends ShapeUpgrade_SplitSurface {
}

/**
 * Split surface in the parametric space in according specified number of splits on the
 */
class ShapeUpgrade_SplitSurfaceArea extends ShapeUpgrade_SplitSurface {
}

/**
 * Splits a Surface with a continuity criterion. At the present moment C1 criterion is used only. This tool works with tolerance. If C0 surface can be corrected at a knot with given tolerance then the surface is corrected, otherwise it is spltted at that knot.
 */
class ShapeUpgrade_SplitSurfaceContinuity extends ShapeUpgrade_SplitSurface {
}

/**
 * Tool is a root class for splitting classes Provides context for recording changes, basic precision value and limit (minimal and maximal) values for tolerances
 */
class ShapeUpgrade_Tool extends Standard_Transient {
}

/**
 * This tool tries to unify faces and edges of the shape which lie on the same geometry. Faces/edges are considering as 'same-domain' if a group of neighbouring faces/edges are lying on coincident surfaces/curves. In this case these faces/edges can be unified into one face/edge. ShapeUpgrade_UnifySameDomain is initialized by a shape and the next optional parameters: UnifyFaces - tries to unify all possible faces UnifyEdges - tries to unify all possible edges ConcatBSplines - if this flag is set to true then all neighbouring edges, which lay on BSpline or Bezier curves with C1 continuity on their common vertices, will be merged into one common edge.
 */
class ShapeUpgrade_UnifySameDomain extends Standard_Transient {
}

class ShapeUpgrade_UnifySameDomain_1 extends ShapeUpgrade_UnifySameDomain {}

class ShapeUpgrade_UnifySameDomain_2 extends ShapeUpgrade_UnifySameDomain {}

/**
 * Divides edges in the wire lying on the face or free wires or free edges with a criterion. Splits 3D curve and pcurve(s) of the edge on the face. Other pcurves which may be associated with the edge are simply copied. If 3D curve is splitted then pcurve on the face is splitted as well, and wice-versa. Input shape is not modified. The modifications made are recorded in external context (ShapeBuild_ReShape). This tool is applied to all edges before splitting them in order to keep sharing.
 */
class ShapeUpgrade_WireDivide extends ShapeUpgrade_Tool {
}

/**
 * The package Standard provides global memory allocator and other basic services used by other OCCT components.
 */
class Standard {
}

class Standard_AbortiveTransaction extends Standard_Failure {
}

class Standard_AbortiveTransaction_1 extends Standard_AbortiveTransaction {}

class Standard_AbortiveTransaction_2 extends Standard_AbortiveTransaction {}

}

/**
 * This class intended to temporary switch C locale and logically equivalent to setlocale(LC_ALL, "C"). It is intended to format text regardless of user locale settings (for import/export functionality). Thus following calls to sprintf, atoi and other functions will use "C" locale. Destructor of this class will return original locale.
 */
class Standard_CLocaleSentry {
}

/**
 * This is boolean flag intended for communication between threads. One thread sets this flag to TRUE to indicate some event happened and another thread either waits this event or checks periodically its state to perform job.
 */
class Standard_Condition {
}

class Standard_ConstructionError extends Standard_DomainError {
}

class Standard_ConstructionError_1 extends Standard_ConstructionError {}

class Standard_ConstructionError_2 extends Standard_ConstructionError {}

class Standard_DimensionError extends Standard_DomainError {
}

class Standard_DimensionError_1 extends Standard_DimensionError {}

class Standard_DimensionError_2 extends Standard_DimensionError {}

class Standard_DimensionMismatch extends Standard_DimensionError {
}

class Standard_DimensionMismatch_1 extends Standard_DimensionMismatch {}

class Standard_DimensionMismatch_2 extends Standard_DimensionMismatch {}

class Standard_DivideByZero extends Standard_NumericError {
}

class Standard_DivideByZero_1 extends Standard_DivideByZero {}

class Standard_DivideByZero_2 extends Standard_DivideByZero {}

class Standard_DomainError extends Standard_Failure {
}

class Standard_DomainError_1 extends Standard_DomainError {}

class Standard_DomainError_2 extends Standard_DomainError {}

/**
 * This interface has some tool methods for stream (in JSON format) processing.
 */
class Standard_Dump {
}

/**
 * Simple sentry class providing convenient interface to dump. Appends start and last rows in dump with class name key. An example of the using: for ClassName, the result is: "ClassName" { ... } Create instance of that class in the first row of Dump.
 */
class Standard_DumpSentry {
}

/**
 * Forms the root of the entire exception hierarchy.
 */
class Standard_Failure extends Standard_Transient {
}

class Standard_Failure_1 extends Standard_Failure {}

class Standard_Failure_2 extends Standard_Failure {}

class Standard_Failure_3 extends Standard_Failure {}

class Standard_GUID {
}

class Standard_GUID_1 extends Standard_GUID {}

class Standard_GUID_2 extends Standard_GUID {}

class Standard_GUID_3 extends Standard_GUID {}

class Standard_GUID_4 extends Standard_GUID {}

class Standard_GUID_5 extends Standard_GUID {}

class Standard_GUID_6 extends Standard_GUID {}

class Standard_ImmutableObject extends Standard_DomainError {
}

class Standard_ImmutableObject_1 extends Standard_ImmutableObject {}

class Standard_ImmutableObject_2 extends Standard_ImmutableObject {}

class Standard_LicenseError extends Standard_Failure {
}

class Standard_LicenseError_1 extends Standard_LicenseError {}

class Standard_LicenseError_2 extends Standard_LicenseError {}

class Standard_LicenseNotFound extends Standard_LicenseError {
}

class Standard_LicenseNotFound_1 extends Standard_LicenseNotFound {}

class Standard_LicenseNotFound_2 extends Standard_LicenseNotFound {}

/**
 * Open CASCADE memory manager optimized for speed.
 */
class Standard_MMgrOpt extends Standard_MMgrRoot {
}

/**
 * Implementation of raw OCC memory manager which uses standard C functions: malloc (or calloc), free and realloc without any optimization
 */
class Standard_MMgrRaw extends Standard_MMgrRoot {
}

/**
 * Root class for Open CASCADE mmemory managers. Defines only abstract interface functions.
 */
class Standard_MMgrRoot {
}

/**
 * Implementation of OCC memory manager which uses Intel TBB scalable allocator.
 */
class Standard_MMgrTBBalloc extends Standard_MMgrRoot {
}

class Standard_MultiplyDefined extends Standard_DomainError {
}

class Standard_MultiplyDefined_1 extends Standard_MultiplyDefined {}

class Standard_MultiplyDefined_2 extends Standard_MultiplyDefined {}

}

class Standard_NegativeValue extends Standard_RangeError {
}

class Standard_NegativeValue_1 extends Standard_NegativeValue {}

class Standard_NegativeValue_2 extends Standard_NegativeValue {}

class Standard_NoMoreObject extends Standard_DomainError {
}

class Standard_NoMoreObject_1 extends Standard_NoMoreObject {}

class Standard_NoMoreObject_2 extends Standard_NoMoreObject {}

class Standard_NoSuchObject extends Standard_DomainError {
}

class Standard_NoSuchObject_1 extends Standard_NoSuchObject {}

class Standard_NoSuchObject_2 extends Standard_NoSuchObject {}

class Standard_NotImplemented extends Standard_ProgramError {
}

class Standard_NotImplemented_1 extends Standard_NotImplemented {}

class Standard_NotImplemented_2 extends Standard_NotImplemented {}

class Standard_NullObject extends Standard_DomainError {
}

class Standard_NullObject_1 extends Standard_NullObject {}

class Standard_NullObject_2 extends Standard_NullObject {}

class Standard_NullValue extends Standard_RangeError {
}

class Standard_NullValue_1 extends Standard_NullValue {}

class Standard_NullValue_2 extends Standard_NullValue {}

class Standard_NumericError extends Standard_Failure {
}

class Standard_NumericError_1 extends Standard_NumericError {}

class Standard_NumericError_2 extends Standard_NumericError {}

/**
 * Standard_OutOfMemory exception is defined explicitly and not by macro DEFINE_STANDARD_EXCEPTION, to avoid necessity of dynamic memory allocations during throwing and stack unwinding:
 */
class Standard_OutOfMemory extends Standard_ProgramError {
}

class Standard_OutOfRange extends Standard_RangeError {
}

class Standard_OutOfRange_1 extends Standard_OutOfRange {}

class Standard_OutOfRange_2 extends Standard_OutOfRange {}

class Standard_Overflow extends Standard_NumericError {
}

class Standard_Overflow_1 extends Standard_Overflow {}

class Standard_Overflow_2 extends Standard_Overflow {}

/**
 * Root of "persistent" classes, a legacy support of object oriented databases, now outdated.
 */
class Standard_Persistent extends Standard_Transient {
}

class Standard_ProgramError extends Standard_Failure {
}

class Standard_ProgramError_1 extends Standard_ProgramError {}

class Standard_ProgramError_2 extends Standard_ProgramError {}

class Standard_RangeError extends Standard_DomainError {
}

class Standard_RangeError_1 extends Standard_RangeError {}

class Standard_RangeError_2 extends Standard_RangeError {}

/**
 * Auxiliary tool for buffered reading from input stream within chunks of constant size.
 */
class Standard_ReadBuffer {
}

/**
 * Auxiliary tool for buffered reading of lines from input stream.
 */
class Standard_ReadLineBuffer {
}

class Standard_TooManyUsers extends Standard_LicenseError {
}

class Standard_TooManyUsers_1 extends Standard_TooManyUsers {}

class Standard_TooManyUsers_2 extends Standard_TooManyUsers {}

/**
 * Abstract class which forms the root of the entire Transient class hierarchy.
 */
class Standard_Transient {
}

class Standard_Transient_1 extends Standard_Transient {}

class Standard_Transient_2 extends Standard_Transient {}

/**
 * This class provides legacy interface (type descriptor) to run-time type information (RTTI) for OCCT classes inheriting from Standard_Transient.
 */
class Standard_Type extends Standard_Transient {
}

class Standard_TypeMismatch extends Standard_DomainError {
}

class Standard_TypeMismatch_1 extends Standard_TypeMismatch {}

class Standard_TypeMismatch_2 extends Standard_TypeMismatch {}

class Standard_Underflow extends Standard_NumericError {
}

class Standard_Underflow_1 extends Standard_Underflow {}

class Standard_Underflow_2 extends Standard_Underflow {}

class StdDrivers {
}

/**
 * retrieval driver of a Part document
 */
class StdDrivers_DocumentRetrievalDriver extends StdLDrivers_DocumentRetrievalDriver {
}

class StdFail_InfiniteSolutions extends Standard_Failure {
}

class StdFail_InfiniteSolutions_1 extends StdFail_InfiniteSolutions {}

class StdFail_InfiniteSolutions_2 extends StdFail_InfiniteSolutions {}

class StdFail_NotDone extends Standard_Failure {
}

class StdFail_NotDone_1 extends StdFail_NotDone {}

class StdFail_NotDone_2 extends StdFail_NotDone {}

class StdFail_Undefined extends Standard_Failure {
}

class StdFail_Undefined_1 extends StdFail_Undefined {}

class StdFail_Undefined_2 extends StdFail_Undefined {}

class StdFail_UndefinedDerivative extends Standard_DomainError {
}

class StdFail_UndefinedDerivative_1 extends StdFail_UndefinedDerivative {}

class StdFail_UndefinedDerivative_2 extends StdFail_UndefinedDerivative {}

class StdFail_UndefinedValue extends Standard_DomainError {
}

class StdFail_UndefinedValue_1 extends StdFail_UndefinedValue {}

class StdFail_UndefinedValue_2 extends StdFail_UndefinedValue {}

class StdLDrivers {
}

/**
 * retrieval driver of a Part document
 */
class StdLDrivers_DocumentRetrievalDriver extends PCDM_RetrievalDriver {
}

class StdLPersistent {
}

class StdLPersistent_Collection {
}

class StdLPersistent_Data extends StdObjMgt_Persistent {
}

class StdLPersistent_Dependency {
}

class StdLPersistent_Document extends StdObjMgt_Persistent {
}

class StdLPersistent_Function {
}

class StdLPersistent_HArray1 {
}

class StdLPersistent_HArray1OfPersistent extends Standard_Transient {
}

class StdLPersistent_HArray1OfPersistent_1 extends StdLPersistent_HArray1OfPersistent {}

class StdLPersistent_HArray1OfPersistent_2 extends StdLPersistent_HArray1OfPersistent {}

class StdLPersistent_HArray1OfPersistent_3 extends StdLPersistent_HArray1OfPersistent {}

class StdLPersistent_HArray1OfPersistent_4 extends StdLPersistent_HArray1OfPersistent {}

class StdLPersistent_HArray2 {
}

class StdLPersistent_HArray2OfPersistent extends Standard_Transient {
}

class StdLPersistent_HArray2OfPersistent_1 extends StdLPersistent_HArray2OfPersistent {}

class StdLPersistent_HArray2OfPersistent_2 extends StdLPersistent_HArray2OfPersistent {}

class StdLPersistent_HArray2OfPersistent_3 extends StdLPersistent_HArray2OfPersistent {}

class StdLPersistent_HString {
}

class StdLPersistent_NamedData {
}

class StdLPersistent_Real {
}

class StdLPersistent_TreeNode {
}

class StdLPersistent_Value {
}

class StdLPersistent_Variable {
}

class StdLPersistent_Void {
}

class StdLPersistent_XLink {
}

class StdObjMgt_MapOfInstantiators {
}

/**
 * Root class for a temporary persistent object that reads data from a file and then creates transient object using the data.
 */
class StdObjMgt_Persistent extends Standard_Transient {
}

/**
 * Auxiliary data used to read persistent objects from a file.
 */
class StdObjMgt_ReadData {
}

class StdObjMgt_SharedObject {
}

/**
 * Auxiliary data used to write persistent objects to a file.
 */
class StdObjMgt_WriteData {
}

class StdObject_Location {
}

class StdObject_Shape {
}

class StdPersistent {
}

class StdPersistent_DataXtd {
}

class StdPersistent_DataXtd_Constraint {
}

class StdPersistent_DataXtd_PatternStd {
}

class StdPersistent_HArray1 {
}

class StdPersistent_HArray1OfShape1 extends Standard_Transient {
}

class StdPersistent_HArray1OfShape1_1 extends StdPersistent_HArray1OfShape1 {}

class StdPersistent_HArray1OfShape1_2 extends StdPersistent_HArray1OfShape1 {}

class StdPersistent_HArray1OfShape1_3 extends StdPersistent_HArray1OfShape1 {}

class StdPersistent_HArray1OfShape1_4 extends StdPersistent_HArray1OfShape1 {}

class StdPersistent_Naming {
}

class StdPersistent_PPrsStd {
}

class StdPersistent_TopoDS {
}

/**
 * Tool for computing bounding box presentation.
 */
class StdPrs_BndBox extends Prs3d_Root {
}

/**
 * A framework to define display of lines, arcs of circles and conic sections. This is done with a fixed number of points, which can be modified.
 */
class StdPrs_Curve extends Prs3d_Root {
}

/**
 * A framework to provide display of any curve with respect to the maximal chordal deviation defined in the Prs3d_Drawer attributes manager.
 */
class StdPrs_DeflectionCurve extends Prs3d_Root {
}

/**
 * Instantiates Prs3d_PolyHLRShape to define a display of a shape where hidden and visible lines are identified with respect to a given projection. StdPrs_HLRPolyShape works with a polyhedral simplification of the shape whereas StdPrs_HLRShape takes the shape itself into account. When you use StdPrs_HLRShape, you obtain an exact result, whereas, when you use StdPrs_HLRPolyShape, you reduce computation time but obtain polygonal segments. The polygonal algorithm is used.
 */
class StdPrs_HLRPolyShape extends Prs3d_Root {
}

class StdPrs_HLRShape extends Prs3d_Root {
}

class StdPrs_HLRToolShape {
}

/**
 * Tool for computing isoline representation for a face or surface. Depending on a flags set to the given Prs3d_Drawer instance, on-surface (is used by default) or on-triangulation isoline builder algorithm will be used. If the given shape is not triangulated, on-surface isoline builder will be applied regardless of Prs3d_Drawer flags.
 */
class StdPrs_Isolines extends Prs3d_Root {
}

/**
 * A framework to display infinite planes.
 */
class StdPrs_Plane extends Prs3d_Root {
}

/**
 * A framework to provide display of Bezier or BSpline curves (by drawing a broken line linking the poles of the curve).
 */
class StdPrs_PoleCurve extends Prs3d_Root {
}

/**
 * Auxiliary procedures to prepare Shaded presentation of specified shape.
 */
class StdPrs_ShadedShape extends Prs3d_Root {
}

/**
 * Computes the shading presentation of surfaces. Draws a surface by drawing the isoparametric curves with respect to a maximal chordial deviation. The number of isoparametric curves to be drawn and their color are controlled by the furnished Drawer.
 */
class StdPrs_ShadedSurface extends Prs3d_Root {
}

class StdPrs_ToolPoint {
}

/**
 * Iterator over 2D curves restricting a face (skipping internal/external edges). In addition, the algorithm skips NULL curves - IsInvalidGeometry() can be checked if this should be handled within algorithm.
 */
class StdPrs_ToolRFace {
}

class StdPrs_ToolRFace_1 extends StdPrs_ToolRFace {}

class StdPrs_ToolRFace_2 extends StdPrs_ToolRFace {}

class StdPrs_ToolTriangulatedShape {
}

class StdPrs_ToolVertex {
}

/**
 * A framework to provide display of U and V isoparameters of faces, while allowing you to impose a deflection on them. Computes the wireframe presentation of faces with restrictions by displaying a given number of U and/or V isoparametric curves. The isoparametric curves are drawn with respect to a maximal chordial deviation. The presentation includes the restriction curves.
 */
class StdPrs_WFDeflectionRestrictedFace extends Prs3d_Root {
}

/**
 * Draws a surface by drawing the isoparametric curves with respect to a maximal chordial deviation. The number of isoparametric curves to be drawn and their color are controlled by the furnished Drawer.
 */
class StdPrs_WFDeflectionSurface extends Prs3d_Root {
}

/**
 * Computes the presentation of surfaces by drawing a double network of lines linking the poles of the surface in the two parametric direction. The number of lines to be drawn is controlled by the NetworkNumber of the given Drawer.
 */
class StdPrs_WFPoleSurface extends Prs3d_Root {
}

class StdPrs_WFRestrictedFace extends Prs3d_Root {
}

/**
 * Tool for computing wireframe presentation of a TopoDS_Shape.
 */
class StdPrs_WFShape extends Prs3d_Root {
}

/**
 * Computes the wireframe presentation of surfaces by displaying a given number of U and/or V isoparametric curves. The isoparametric curves are drawn with respect to a given number of points.
 */
class StdPrs_WFSurface extends Prs3d_Root {
}

/**
 * The StdSelect package provides the following services - the definition of selection modes for topological shapes - the definition of several concrete filtertandard Selection2d.ap classes - 2D and 3D viewer selectors. Note that each new Interactive Object must have all its selection modes defined. Standard Classes is useful to build 3D Selectable Objects, and to process 3D Selections:
 */
class StdSelect {
}

/**
 * Defines Specific Owners for Sensitive Primitives (Sensitive Segments,Circles...). Used in Dynamic Selection Mechanism. A BRepOwner has an Owner (the shape it represents) and Users (One or More Transient entities). The highlight-unhighlight methods are empty and must be redefined by each User.
 */
class StdSelect_BRepOwner extends SelectMgr_EntityOwner {
}

class StdSelect_BRepOwner_1 extends StdSelect_BRepOwner {}

class StdSelect_BRepOwner_2 extends StdSelect_BRepOwner {}

class StdSelect_BRepOwner_3 extends StdSelect_BRepOwner {}

/**
 * Tool to create specific selections (sets of primitives) for Shapes from Topology. These Selections may be used in dynamic selection Mechanism Given a Shape and a mode of selection (selection of vertices, edges,faces ...) , This Tool Computes corresponding sensitive primitives, puts them in an entity called Selection (see package SelectMgr) and returns it.
 */
class StdSelect_BRepSelectionTool {
}

/**
 * A framework to define a filter to select a specific type of edge. The types available include: - any edge - a linear edge - a circular edge.
 */
class StdSelect_EdgeFilter extends SelectMgr_Filter {
}

/**
 * A framework to define a filter to select a specific type of face. The types available include: - any face - a planar face - a cylindrical face - a spherical face - a toroidal face - a revol face.
 */
class StdSelect_FaceFilter extends SelectMgr_Filter {
}

/**
 * allows entities owners to be hilighted independantly from PresentableObjects
 */
class StdSelect_Prs extends Prs3d_Presentation {
}

/**
 * Presentable shape only for purpose of display for BRepOwner...
 */
class StdSelect_Shape extends PrsMgr_PresentableObject {
}

/**
 * A filter framework which allows you to define a filter for a specific shape type. The types available include: - compound - compsolid - solid - shell - face - wire - edge - vertex.
 */
class StdSelect_ShapeTypeFilter extends SelectMgr_Filter {
}

/**
 * Selector Usable by Viewers from V3d
 */
class StdSelect_ViewerSelector3d extends SelectMgr_ViewerSelector {
}

/**
 * StdStorage package is used to write and read persistent objects. These objects are read and written by a retrieval or storage algorithm (compatible with legacy Storage_Schema) in a container (disk, memory, network ...). Drivers (FSD_File objects) assign a physical container for data to be stored or retrieved. The standard procedure for an application in reading a container is to call one of the Read functions providing either a file path or a driver opened for reading. Thes function update the instance of the StdStorage_Data class which contains the data being read. The standard procedure for an application in writing a container is the following: - open the driver in writing mode, - create an instance of the StdStorage_Data class, then add the persistent data to write with the function AddRoot, - call the function Write from the storage, setting the driver and the Storage_Data instance as parameters, - close the driver.
 */
class StdStorage {
}

class StdStorage_Bucket {
}

class StdStorage_Bucket_1 extends StdStorage_Bucket {}

class StdStorage_Bucket_2 extends StdStorage_Bucket {}

class StdStorage_BucketIterator {
}

class StdStorage_BucketOfPersistent {
}

/**
 * A picture memorizing the stored in a container (for example, in a file). A StdStorage_Data object represents either: - persistent data to be written into a container, or - persistent data which are read from a container. A StdStorage_Data object is used in both the storage and retrieval operations: - Storage mechanism: create an empty StdStorage_Data object, then add successively persistent objects (roots) to be stored using the StdStorage_RootData's function AddRoot. When the set of data is complete, write it to a container using the function Write in your StdStorage algorithm. - Retrieval mechanism: a StdStorage_Data object is returned by the Read function from your StdStorage algorithm. Use the StdStorage_RootData's functions NumberOfRoots and Roots to find the roots which were stored in the read container. The roots of a StdStorage_Data object may share references on objects. The shared internal references of a StdStorage_Data object are maintained by the storage/retrieval mechanism. Note: References shared by objects which are contained in two distinct StdStorage_Data objects are not maintained by the storage/retrieval mechanism: external references are not supported by Storage_Schema algorithm
 */
class StdStorage_Data extends Standard_Transient {
}

class StdStorage_HSequenceOfRoots extends Standard_Transient {
}

class StdStorage_HSequenceOfRoots_1 extends StdStorage_HSequenceOfRoots {}

class StdStorage_HSequenceOfRoots_2 extends StdStorage_HSequenceOfRoots {}

/**
 * Storage header data section that contains some auxiliary information (application name, schema version, creation date, comments and so on...)
 */
class StdStorage_HeaderData extends Standard_Transient {
}

/**
 * Describes a named persistent root
 */
class StdStorage_Root extends Standard_Transient {
}

class StdStorage_Root_1 extends StdStorage_Root {}

class StdStorage_Root_2 extends StdStorage_Root {}

/**
 * Storage root data section contains root persistent objects
 */
class StdStorage_RootData extends Standard_Transient {
}

/**
 * Storage type data section keeps association between persistent textual types and their numbers
 */
class StdStorage_TypeData extends Standard_Transient {
}

/**
 * Representation of STEP SELECT type ApprovedItem
 */
class StepAP203_ApprovedItem extends StepData_SelectType {
}

/**
 * Representation of STEP entity CcDesignApproval
 */
class StepAP203_CcDesignApproval extends StepBasic_ApprovalAssignment {
}

/**
 * Representation of STEP entity CcDesignCertification
 */
class StepAP203_CcDesignCertification extends StepBasic_CertificationAssignment {
}

/**
 * Representation of STEP entity CcDesignContract
 */
class StepAP203_CcDesignContract extends StepBasic_ContractAssignment {
}

/**
 * Representation of STEP entity CcDesignDateAndTimeAssignment
 */
class StepAP203_CcDesignDateAndTimeAssignment extends StepBasic_DateAndTimeAssignment {
}

/**
 * Representation of STEP entity CcDesignPersonAndOrganizationAssignment
 */
class StepAP203_CcDesignPersonAndOrganizationAssignment extends StepBasic_PersonAndOrganizationAssignment {
}

/**
 * Representation of STEP entity CcDesignSecurityClassification
 */
class StepAP203_CcDesignSecurityClassification extends StepBasic_SecurityClassificationAssignment {
}

/**
 * Representation of STEP entity CcDesignSpecificationReference
 */
class StepAP203_CcDesignSpecificationReference extends StepBasic_DocumentReference {
}

/**
 * Representation of STEP SELECT type CertifiedItem
 */
class StepAP203_CertifiedItem extends StepData_SelectType {
}

/**
 * Representation of STEP entity Change
 */
class StepAP203_Change extends StepBasic_ActionAssignment {
}

/**
 * Representation of STEP entity ChangeRequest
 */
class StepAP203_ChangeRequest extends StepBasic_ActionRequestAssignment {
}

/**
 * Representation of STEP SELECT type ChangeRequestItem
 */
class StepAP203_ChangeRequestItem extends StepData_SelectType {
}

/**
 * Representation of STEP SELECT type ClassifiedItem
 */
class StepAP203_ClassifiedItem extends StepData_SelectType {
}

/**
 * Representation of STEP SELECT type ContractedItem
 */
class StepAP203_ContractedItem extends StepData_SelectType {
}

/**
 * Representation of STEP SELECT type DateTimeItem
 */
class StepAP203_DateTimeItem extends StepData_SelectType {
}

class StepAP203_HArray1OfApprovedItem extends Standard_Transient {
}

class StepAP203_HArray1OfApprovedItem_1 extends StepAP203_HArray1OfApprovedItem {}

class StepAP203_HArray1OfApprovedItem_2 extends StepAP203_HArray1OfApprovedItem {}

class StepAP203_HArray1OfApprovedItem_3 extends StepAP203_HArray1OfApprovedItem {}

class StepAP203_HArray1OfApprovedItem_4 extends StepAP203_HArray1OfApprovedItem {}

class StepAP203_HArray1OfCertifiedItem extends Standard_Transient {
}

class StepAP203_HArray1OfCertifiedItem_1 extends StepAP203_HArray1OfCertifiedItem {}

class StepAP203_HArray1OfCertifiedItem_2 extends StepAP203_HArray1OfCertifiedItem {}

class StepAP203_HArray1OfCertifiedItem_3 extends StepAP203_HArray1OfCertifiedItem {}

class StepAP203_HArray1OfCertifiedItem_4 extends StepAP203_HArray1OfCertifiedItem {}

class StepAP203_HArray1OfChangeRequestItem extends Standard_Transient {
}

class StepAP203_HArray1OfChangeRequestItem_1 extends StepAP203_HArray1OfChangeRequestItem {}

class StepAP203_HArray1OfChangeRequestItem_2 extends StepAP203_HArray1OfChangeRequestItem {}

class StepAP203_HArray1OfChangeRequestItem_3 extends StepAP203_HArray1OfChangeRequestItem {}

class StepAP203_HArray1OfChangeRequestItem_4 extends StepAP203_HArray1OfChangeRequestItem {}

class StepAP203_HArray1OfClassifiedItem extends Standard_Transient {
}

class StepAP203_HArray1OfClassifiedItem_1 extends StepAP203_HArray1OfClassifiedItem {}

class StepAP203_HArray1OfClassifiedItem_2 extends StepAP203_HArray1OfClassifiedItem {}

class StepAP203_HArray1OfClassifiedItem_3 extends StepAP203_HArray1OfClassifiedItem {}

class StepAP203_HArray1OfClassifiedItem_4 extends StepAP203_HArray1OfClassifiedItem {}

class StepAP203_HArray1OfContractedItem extends Standard_Transient {
}

class StepAP203_HArray1OfContractedItem_1 extends StepAP203_HArray1OfContractedItem {}

class StepAP203_HArray1OfContractedItem_2 extends StepAP203_HArray1OfContractedItem {}

class StepAP203_HArray1OfContractedItem_3 extends StepAP203_HArray1OfContractedItem {}

class StepAP203_HArray1OfContractedItem_4 extends StepAP203_HArray1OfContractedItem {}

class StepAP203_HArray1OfDateTimeItem extends Standard_Transient {
}

class StepAP203_HArray1OfDateTimeItem_1 extends StepAP203_HArray1OfDateTimeItem {}

class StepAP203_HArray1OfDateTimeItem_2 extends StepAP203_HArray1OfDateTimeItem {}

class StepAP203_HArray1OfDateTimeItem_3 extends StepAP203_HArray1OfDateTimeItem {}

class StepAP203_HArray1OfDateTimeItem_4 extends StepAP203_HArray1OfDateTimeItem {}

class StepAP203_HArray1OfPersonOrganizationItem extends Standard_Transient {
}

class StepAP203_HArray1OfPersonOrganizationItem_1 extends StepAP203_HArray1OfPersonOrganizationItem {}

class StepAP203_HArray1OfPersonOrganizationItem_2 extends StepAP203_HArray1OfPersonOrganizationItem {}

class StepAP203_HArray1OfPersonOrganizationItem_3 extends StepAP203_HArray1OfPersonOrganizationItem {}

class StepAP203_HArray1OfPersonOrganizationItem_4 extends StepAP203_HArray1OfPersonOrganizationItem {}

class StepAP203_HArray1OfSpecifiedItem extends Standard_Transient {
}

class StepAP203_HArray1OfSpecifiedItem_1 extends StepAP203_HArray1OfSpecifiedItem {}

class StepAP203_HArray1OfSpecifiedItem_2 extends StepAP203_HArray1OfSpecifiedItem {}

class StepAP203_HArray1OfSpecifiedItem_3 extends StepAP203_HArray1OfSpecifiedItem {}

class StepAP203_HArray1OfSpecifiedItem_4 extends StepAP203_HArray1OfSpecifiedItem {}

class StepAP203_HArray1OfStartRequestItem extends Standard_Transient {
}

class StepAP203_HArray1OfStartRequestItem_1 extends StepAP203_HArray1OfStartRequestItem {}

class StepAP203_HArray1OfStartRequestItem_2 extends StepAP203_HArray1OfStartRequestItem {}

class StepAP203_HArray1OfStartRequestItem_3 extends StepAP203_HArray1OfStartRequestItem {}

class StepAP203_HArray1OfStartRequestItem_4 extends StepAP203_HArray1OfStartRequestItem {}

class StepAP203_HArray1OfWorkItem extends Standard_Transient {
}

class StepAP203_HArray1OfWorkItem_1 extends StepAP203_HArray1OfWorkItem {}

class StepAP203_HArray1OfWorkItem_2 extends StepAP203_HArray1OfWorkItem {}

class StepAP203_HArray1OfWorkItem_3 extends StepAP203_HArray1OfWorkItem {}

class StepAP203_HArray1OfWorkItem_4 extends StepAP203_HArray1OfWorkItem {}

/**
 * Representation of STEP SELECT type PersonOrganizationItem
 */
class StepAP203_PersonOrganizationItem extends StepData_SelectType {
}

/**
 * Representation of STEP SELECT type SpecifiedItem
 */
class StepAP203_SpecifiedItem extends StepData_SelectType {
}

/**
 * Representation of STEP entity StartRequest
 */
class StepAP203_StartRequest extends StepBasic_ActionRequestAssignment {
}

/**
 * Representation of STEP SELECT type StartRequestItem
 */
class StepAP203_StartRequestItem extends StepData_SelectType {
}

/**
 * Representation of STEP entity StartWork
 */
class StepAP203_StartWork extends StepBasic_ActionAssignment {
}

/**
 * Representation of STEP SELECT type WorkItem
 */
class StepAP203_WorkItem extends StepData_SelectType {
}

/**
 * Basic tool for working with AP209 model
 */
class StepAP209_Construct extends STEPConstruct_Tool {
}

class StepAP209_Construct_1 extends StepAP209_Construct {}

class StepAP209_Construct_2 extends StepAP209_Construct {}

/**
 * Complete AP214 CC1 , Revision 4 Upgrading from Revision 2 to Revision 4 : 26 Mar 1997 Splitting in sub-schemas : 5 Nov 1997
 */
class StepAP214 {
}

class StepAP214_AppliedApprovalAssignment extends StepBasic_ApprovalAssignment {
}

class StepAP214_AppliedDateAndTimeAssignment extends StepBasic_DateAndTimeAssignment {
}

class StepAP214_AppliedDateAssignment extends StepBasic_DateAssignment {
}

class StepAP214_AppliedDocumentReference extends StepBasic_DocumentReference {
}

/**
 * Representation of STEP entity AppliedExternalIdentificationAssignment
 */
class StepAP214_AppliedExternalIdentificationAssignment extends StepBasic_ExternalIdentificationAssignment {
}

/**
 * Representation of STEP entity AppliedGroupAssignment
 */
class StepAP214_AppliedGroupAssignment extends StepBasic_GroupAssignment {
}

class StepAP214_AppliedOrganizationAssignment extends StepBasic_OrganizationAssignment {
}

class StepAP214_AppliedPersonAndOrganizationAssignment extends StepBasic_PersonAndOrganizationAssignment {
}

class StepAP214_AppliedPresentedItem extends StepVisual_PresentedItem {
}

class StepAP214_AppliedSecurityClassificationAssignment extends StepBasic_SecurityClassificationAssignment {
}

class StepAP214_ApprovalItem extends StepData_SelectType {
}

class StepAP214_AutoDesignActualDateAndTimeAssignment extends StepBasic_DateAndTimeAssignment {
}

class StepAP214_AutoDesignActualDateAssignment extends StepBasic_DateAssignment {
}

class StepAP214_AutoDesignApprovalAssignment extends StepBasic_ApprovalAssignment {
}

class StepAP214_AutoDesignDateAndPersonAssignment extends StepBasic_PersonAndOrganizationAssignment {
}

class StepAP214_AutoDesignDateAndPersonItem extends StepData_SelectType {
}

class StepAP214_AutoDesignDateAndTimeItem extends StepData_SelectType {
}

class StepAP214_AutoDesignDatedItem extends StepData_SelectType {
}

class StepAP214_AutoDesignDocumentReference extends StepBasic_DocumentReference {
}

class StepAP214_AutoDesignGeneralOrgItem extends StepData_SelectType {
}

class StepAP214_AutoDesignGroupAssignment extends StepBasic_GroupAssignment {
}

class StepAP214_AutoDesignGroupedItem extends StepData_SelectType {
}

class StepAP214_AutoDesignNominalDateAndTimeAssignment extends StepBasic_DateAndTimeAssignment {
}

class StepAP214_AutoDesignNominalDateAssignment extends StepBasic_DateAssignment {
}

class StepAP214_AutoDesignOrganizationAssignment extends StepBasic_OrganizationAssignment {
}

class StepAP214_AutoDesignOrganizationItem extends StepAP214_AutoDesignGeneralOrgItem {
}

class StepAP214_AutoDesignPersonAndOrganizationAssignment extends StepBasic_PersonAndOrganizationAssignment {
}

class StepAP214_AutoDesignPresentedItem extends StepVisual_PresentedItem {
}

class StepAP214_AutoDesignPresentedItemSelect extends StepData_SelectType {
}

class StepAP214_AutoDesignReferencingItem extends StepData_SelectType {
}

class StepAP214_AutoDesignSecurityClassificationAssignment extends StepBasic_SecurityClassificationAssignment {
}

/**
 * Representation of STEP entity Class
 */
class StepAP214_Class extends StepBasic_Group {
}

class StepAP214_DateAndTimeItem extends StepAP214_ApprovalItem {
}

class StepAP214_DateItem extends StepAP214_ApprovalItem {
}

class StepAP214_DocumentReferenceItem extends StepData_SelectType {
}

/**
 * Representation of STEP SELECT type ExternalIdentificationItem
 */
class StepAP214_ExternalIdentificationItem extends StepData_SelectType {
}

/**
 * Representation of STEP entity ExternallyDefinedClass
 */
class StepAP214_ExternallyDefinedClass extends StepAP214_Class {
}

/**
 * Representation of STEP entity ExternallyDefinedGeneralProperty
 */
class StepAP214_ExternallyDefinedGeneralProperty extends StepBasic_GeneralProperty {
}

class StepAP214_GroupItem extends StepData_SelectType {
}

class StepAP214_HArray1OfApprovalItem extends Standard_Transient {
}

class StepAP214_HArray1OfApprovalItem_1 extends StepAP214_HArray1OfApprovalItem {}

class StepAP214_HArray1OfApprovalItem_2 extends StepAP214_HArray1OfApprovalItem {}

class StepAP214_HArray1OfApprovalItem_3 extends StepAP214_HArray1OfApprovalItem {}

class StepAP214_HArray1OfApprovalItem_4 extends StepAP214_HArray1OfApprovalItem {}

class StepAP214_HArray1OfAutoDesignDateAndPersonItem extends Standard_Transient {
}

class StepAP214_HArray1OfAutoDesignDateAndPersonItem_1 extends StepAP214_HArray1OfAutoDesignDateAndPersonItem {}

class StepAP214_HArray1OfAutoDesignDateAndPersonItem_2 extends StepAP214_HArray1OfAutoDesignDateAndPersonItem {}

class StepAP214_HArray1OfAutoDesignDateAndPersonItem_3 extends StepAP214_HArray1OfAutoDesignDateAndPersonItem {}

class StepAP214_HArray1OfAutoDesignDateAndPersonItem_4 extends StepAP214_HArray1OfAutoDesignDateAndPersonItem {}

class StepAP214_HArray1OfAutoDesignDateAndTimeItem extends Standard_Transient {
}

class StepAP214_HArray1OfAutoDesignDateAndTimeItem_1 extends StepAP214_HArray1OfAutoDesignDateAndTimeItem {}

class StepAP214_HArray1OfAutoDesignDateAndTimeItem_2 extends StepAP214_HArray1OfAutoDesignDateAndTimeItem {}

class StepAP214_HArray1OfAutoDesignDateAndTimeItem_3 extends StepAP214_HArray1OfAutoDesignDateAndTimeItem {}

class StepAP214_HArray1OfAutoDesignDateAndTimeItem_4 extends StepAP214_HArray1OfAutoDesignDateAndTimeItem {}

class StepAP214_HArray1OfAutoDesignDatedItem extends Standard_Transient {
}

class StepAP214_HArray1OfAutoDesignDatedItem_1 extends StepAP214_HArray1OfAutoDesignDatedItem {}

class StepAP214_HArray1OfAutoDesignDatedItem_2 extends StepAP214_HArray1OfAutoDesignDatedItem {}

class StepAP214_HArray1OfAutoDesignDatedItem_3 extends StepAP214_HArray1OfAutoDesignDatedItem {}

class StepAP214_HArray1OfAutoDesignDatedItem_4 extends StepAP214_HArray1OfAutoDesignDatedItem {}

class StepAP214_HArray1OfAutoDesignGeneralOrgItem extends Standard_Transient {
}

class StepAP214_HArray1OfAutoDesignGeneralOrgItem_1 extends StepAP214_HArray1OfAutoDesignGeneralOrgItem {}

class StepAP214_HArray1OfAutoDesignGeneralOrgItem_2 extends StepAP214_HArray1OfAutoDesignGeneralOrgItem {}

class StepAP214_HArray1OfAutoDesignGeneralOrgItem_3 extends StepAP214_HArray1OfAutoDesignGeneralOrgItem {}

class StepAP214_HArray1OfAutoDesignGeneralOrgItem_4 extends StepAP214_HArray1OfAutoDesignGeneralOrgItem {}

class StepAP214_HArray1OfAutoDesignGroupedItem extends Standard_Transient {
}

class StepAP214_HArray1OfAutoDesignGroupedItem_1 extends StepAP214_HArray1OfAutoDesignGroupedItem {}

class StepAP214_HArray1OfAutoDesignGroupedItem_2 extends StepAP214_HArray1OfAutoDesignGroupedItem {}

class StepAP214_HArray1OfAutoDesignGroupedItem_3 extends StepAP214_HArray1OfAutoDesignGroupedItem {}

class StepAP214_HArray1OfAutoDesignGroupedItem_4 extends StepAP214_HArray1OfAutoDesignGroupedItem {}

class StepAP214_HArray1OfAutoDesignPresentedItemSelect extends Standard_Transient {
}

class StepAP214_HArray1OfAutoDesignPresentedItemSelect_1 extends StepAP214_HArray1OfAutoDesignPresentedItemSelect {}

class StepAP214_HArray1OfAutoDesignPresentedItemSelect_2 extends StepAP214_HArray1OfAutoDesignPresentedItemSelect {}

class StepAP214_HArray1OfAutoDesignPresentedItemSelect_3 extends StepAP214_HArray1OfAutoDesignPresentedItemSelect {}

class StepAP214_HArray1OfAutoDesignPresentedItemSelect_4 extends StepAP214_HArray1OfAutoDesignPresentedItemSelect {}

class StepAP214_HArray1OfAutoDesignReferencingItem extends Standard_Transient {
}

class StepAP214_HArray1OfAutoDesignReferencingItem_1 extends StepAP214_HArray1OfAutoDesignReferencingItem {}

class StepAP214_HArray1OfAutoDesignReferencingItem_2 extends StepAP214_HArray1OfAutoDesignReferencingItem {}

class StepAP214_HArray1OfAutoDesignReferencingItem_3 extends StepAP214_HArray1OfAutoDesignReferencingItem {}

class StepAP214_HArray1OfAutoDesignReferencingItem_4 extends StepAP214_HArray1OfAutoDesignReferencingItem {}

class StepAP214_HArray1OfDateAndTimeItem extends Standard_Transient {
}

class StepAP214_HArray1OfDateAndTimeItem_1 extends StepAP214_HArray1OfDateAndTimeItem {}

class StepAP214_HArray1OfDateAndTimeItem_2 extends StepAP214_HArray1OfDateAndTimeItem {}

class StepAP214_HArray1OfDateAndTimeItem_3 extends StepAP214_HArray1OfDateAndTimeItem {}

class StepAP214_HArray1OfDateAndTimeItem_4 extends StepAP214_HArray1OfDateAndTimeItem {}

class StepAP214_HArray1OfDateItem extends Standard_Transient {
}

class StepAP214_HArray1OfDateItem_1 extends StepAP214_HArray1OfDateItem {}

class StepAP214_HArray1OfDateItem_2 extends StepAP214_HArray1OfDateItem {}

class StepAP214_HArray1OfDateItem_3 extends StepAP214_HArray1OfDateItem {}

class StepAP214_HArray1OfDateItem_4 extends StepAP214_HArray1OfDateItem {}

class StepAP214_HArray1OfDocumentReferenceItem extends Standard_Transient {
}

class StepAP214_HArray1OfDocumentReferenceItem_1 extends StepAP214_HArray1OfDocumentReferenceItem {}

class StepAP214_HArray1OfDocumentReferenceItem_2 extends StepAP214_HArray1OfDocumentReferenceItem {}

class StepAP214_HArray1OfDocumentReferenceItem_3 extends StepAP214_HArray1OfDocumentReferenceItem {}

class StepAP214_HArray1OfDocumentReferenceItem_4 extends StepAP214_HArray1OfDocumentReferenceItem {}

class StepAP214_HArray1OfExternalIdentificationItem extends Standard_Transient {
}

class StepAP214_HArray1OfExternalIdentificationItem_1 extends StepAP214_HArray1OfExternalIdentificationItem {}

class StepAP214_HArray1OfExternalIdentificationItem_2 extends StepAP214_HArray1OfExternalIdentificationItem {}

class StepAP214_HArray1OfExternalIdentificationItem_3 extends StepAP214_HArray1OfExternalIdentificationItem {}

class StepAP214_HArray1OfExternalIdentificationItem_4 extends StepAP214_HArray1OfExternalIdentificationItem {}

class StepAP214_HArray1OfGroupItem extends Standard_Transient {
}

class StepAP214_HArray1OfGroupItem_1 extends StepAP214_HArray1OfGroupItem {}

class StepAP214_HArray1OfGroupItem_2 extends StepAP214_HArray1OfGroupItem {}

class StepAP214_HArray1OfGroupItem_3 extends StepAP214_HArray1OfGroupItem {}

class StepAP214_HArray1OfGroupItem_4 extends StepAP214_HArray1OfGroupItem {}

class StepAP214_HArray1OfOrganizationItem extends Standard_Transient {
}

class StepAP214_HArray1OfOrganizationItem_1 extends StepAP214_HArray1OfOrganizationItem {}

class StepAP214_HArray1OfOrganizationItem_2 extends StepAP214_HArray1OfOrganizationItem {}

class StepAP214_HArray1OfOrganizationItem_3 extends StepAP214_HArray1OfOrganizationItem {}

class StepAP214_HArray1OfOrganizationItem_4 extends StepAP214_HArray1OfOrganizationItem {}

class StepAP214_HArray1OfPersonAndOrganizationItem extends Standard_Transient {
}

class StepAP214_HArray1OfPersonAndOrganizationItem_1 extends StepAP214_HArray1OfPersonAndOrganizationItem {}

class StepAP214_HArray1OfPersonAndOrganizationItem_2 extends StepAP214_HArray1OfPersonAndOrganizationItem {}

class StepAP214_HArray1OfPersonAndOrganizationItem_3 extends StepAP214_HArray1OfPersonAndOrganizationItem {}

class StepAP214_HArray1OfPersonAndOrganizationItem_4 extends StepAP214_HArray1OfPersonAndOrganizationItem {}

class StepAP214_HArray1OfPresentedItemSelect extends Standard_Transient {
}

class StepAP214_HArray1OfPresentedItemSelect_1 extends StepAP214_HArray1OfPresentedItemSelect {}

class StepAP214_HArray1OfPresentedItemSelect_2 extends StepAP214_HArray1OfPresentedItemSelect {}

class StepAP214_HArray1OfPresentedItemSelect_3 extends StepAP214_HArray1OfPresentedItemSelect {}

class StepAP214_HArray1OfPresentedItemSelect_4 extends StepAP214_HArray1OfPresentedItemSelect {}

class StepAP214_HArray1OfSecurityClassificationItem extends Standard_Transient {
}

class StepAP214_HArray1OfSecurityClassificationItem_1 extends StepAP214_HArray1OfSecurityClassificationItem {}

class StepAP214_HArray1OfSecurityClassificationItem_2 extends StepAP214_HArray1OfSecurityClassificationItem {}

class StepAP214_HArray1OfSecurityClassificationItem_3 extends StepAP214_HArray1OfSecurityClassificationItem {}

class StepAP214_HArray1OfSecurityClassificationItem_4 extends StepAP214_HArray1OfSecurityClassificationItem {}

class StepAP214_OrganizationItem extends StepAP214_ApprovalItem {
}

class StepAP214_PersonAndOrganizationItem extends StepAP214_ApprovalItem {
}

class StepAP214_PresentedItemSelect extends StepData_SelectType {
}

/**
 * Protocol for StepAP214 Entities It requires StepAP214 as a Resource
 */
class StepAP214_Protocol extends StepData_Protocol {
}

/**
 * Representation of STEP entity RepItemGroup
 */
class StepAP214_RepItemGroup extends StepBasic_Group {
}

class StepAP214_SecurityClassificationItem extends StepAP214_ApprovalItem {
}

/**
 * Added for Dimensional Tolerances
 */
class StepAP242_DraughtingModelItemAssociation extends StepAP242_ItemIdentifiedRepresentationUsage {
}

/**
 * Added for Dimensional Tolerances
 */
class StepAP242_GeometricItemSpecificUsage extends StepAP242_ItemIdentifiedRepresentationUsage {
}

class StepAP242_IdAttribute extends Standard_Transient {
}

class StepAP242_IdAttributeSelect extends StepData_SelectType {
}

class StepAP242_ItemIdentifiedRepresentationUsage extends Standard_Transient {
}

class StepAP242_ItemIdentifiedRepresentationUsageDefinition extends StepData_SelectType {
}

/**
 * Representation of STEP entity Action
 */
class StepBasic_Action extends Standard_Transient {
}

/**
 * Representation of STEP entity ActionAssignment
 */
class StepBasic_ActionAssignment extends Standard_Transient {
}

/**
 * Representation of STEP entity ActionMethod
 */
class StepBasic_ActionMethod extends Standard_Transient {
}

/**
 * Representation of STEP entity ActionRequestAssignment
 */
class StepBasic_ActionRequestAssignment extends Standard_Transient {
}

/**
 * Representation of STEP entity ActionRequestSolution
 */
class StepBasic_ActionRequestSolution extends Standard_Transient {
}

class StepBasic_Address extends Standard_Transient {
}

class StepBasic_ApplicationContext extends Standard_Transient {
}

class StepBasic_ApplicationContextElement extends Standard_Transient {
}

class StepBasic_ApplicationProtocolDefinition extends Standard_Transient {
}

class StepBasic_Approval extends Standard_Transient {
}

class StepBasic_ApprovalAssignment extends Standard_Transient {
}

/**
 * Added from StepBasic Rev2 to Rev4
 */
class StepBasic_ApprovalDateTime extends Standard_Transient {
}

class StepBasic_ApprovalPersonOrganization extends Standard_Transient {
}

class StepBasic_ApprovalRelationship extends Standard_Transient {
}

class StepBasic_ApprovalRole extends Standard_Transient {
}

class StepBasic_ApprovalStatus extends Standard_Transient {
}

class StepBasic_AreaUnit extends StepBasic_NamedUnit {
}

class StepBasic_CalendarDate extends StepBasic_Date {
}

/**
 * Representation of STEP entity Certification
 */
class StepBasic_Certification extends Standard_Transient {
}

/**
 * Representation of STEP entity CertificationAssignment
 */
class StepBasic_CertificationAssignment extends Standard_Transient {
}

/**
 * Representation of STEP entity CertificationType
 */
class StepBasic_CertificationType extends Standard_Transient {
}

/**
 * Representation of STEP entity CharacterizedObject
 */
class StepBasic_CharacterizedObject extends Standard_Transient {
}

/**
 * Representation of STEP entity Contract
 */
class StepBasic_Contract extends Standard_Transient {
}

/**
 * Representation of STEP entity ContractAssignment
 */
class StepBasic_ContractAssignment extends Standard_Transient {
}

/**
 * Representation of STEP entity ContractType
 */
class StepBasic_ContractType extends Standard_Transient {
}

class StepBasic_ConversionBasedUnit extends StepBasic_NamedUnit {
}

class StepBasic_ConversionBasedUnitAndAreaUnit extends StepBasic_ConversionBasedUnit {
}

class StepBasic_ConversionBasedUnitAndLengthUnit extends StepBasic_ConversionBasedUnit {
}

class StepBasic_ConversionBasedUnitAndMassUnit extends StepBasic_ConversionBasedUnit {
}

class StepBasic_ConversionBasedUnitAndPlaneAngleUnit extends StepBasic_ConversionBasedUnit {
}

class StepBasic_ConversionBasedUnitAndRatioUnit extends StepBasic_ConversionBasedUnit {
}

class StepBasic_ConversionBasedUnitAndSolidAngleUnit extends StepBasic_ConversionBasedUnit {
}

class StepBasic_ConversionBasedUnitAndTimeUnit extends StepBasic_ConversionBasedUnit {
}

class StepBasic_ConversionBasedUnitAndVolumeUnit extends StepBasic_ConversionBasedUnit {
}

class StepBasic_CoordinatedUniversalTimeOffset extends Standard_Transient {
}

class StepBasic_Date extends Standard_Transient {
}

class StepBasic_DateAndTime extends Standard_Transient {
}

class StepBasic_DateAndTimeAssignment extends Standard_Transient {
}

class StepBasic_DateAssignment extends Standard_Transient {
}

class StepBasic_DateRole extends Standard_Transient {
}

class StepBasic_DateTimeRole extends Standard_Transient {
}

class StepBasic_DateTimeSelect extends StepData_SelectType {
}

/**
 * Added from StepBasic Rev2 to Rev4
 */
class StepBasic_DerivedUnit extends Standard_Transient {
}

/**
 * Added from StepBasic Rev2 to Rev4
 */
class StepBasic_DerivedUnitElement extends Standard_Transient {
}

/**
 * class added to Schema AP214 around April 1996
 */
class StepBasic_DesignContext extends StepBasic_ProductDefinitionContext {
}

class StepBasic_DigitalDocument extends StepBasic_Document {
}

class StepBasic_DimensionalExponents extends Standard_Transient {
}

/**
 * Representation of STEP entity Document
 */
class StepBasic_Document extends Standard_Transient {
}

/**
 * Representation of STEP entity DocumentFile
 */
class StepBasic_DocumentFile extends StepBasic_Document {
}

/**
 * Representation of STEP entity DocumentProductAssociation
 */
class StepBasic_DocumentProductAssociation extends Standard_Transient {
}

/**
 * Representation of STEP entity DocumentProductEquivalence
 */
class StepBasic_DocumentProductEquivalence extends StepBasic_DocumentProductAssociation {
}

class StepBasic_DocumentReference extends Standard_Transient {
}

class StepBasic_DocumentRelationship extends Standard_Transient {
}

/**
 * Representation of STEP entity DocumentRepresentationType
 */
class StepBasic_DocumentRepresentationType extends Standard_Transient {
}

class StepBasic_DocumentType extends Standard_Transient {
}

class StepBasic_DocumentUsageConstraint extends Standard_Transient {
}

class StepBasic_Effectivity extends Standard_Transient {
}

/**
 * Representation of STEP entity EffectivityAssignment
 */
class StepBasic_EffectivityAssignment extends Standard_Transient {
}

/**
 * Representation of STEP entity EulerAngles
 */
class StepBasic_EulerAngles extends Standard_Transient {
}

/**
 * Representation of STEP entity ExternalIdentificationAssignment
 */
class StepBasic_ExternalIdentificationAssignment extends StepBasic_IdentificationAssignment {
}

/**
 * Representation of STEP entity ExternalSource
 */
class StepBasic_ExternalSource extends Standard_Transient {
}

/**
 * Representation of STEP entity ExternallyDefinedItem
 */
class StepBasic_ExternallyDefinedItem extends Standard_Transient {
}

/**
 * Representation of STEP entity GeneralProperty
 */
class StepBasic_GeneralProperty extends Standard_Transient {
}

/**
 * Representation of STEP entity Group
 */
class StepBasic_Group extends Standard_Transient {
}

/**
 * Representation of STEP entity GroupAssignment
 */
class StepBasic_GroupAssignment extends Standard_Transient {
}

/**
 * Representation of STEP entity GroupRelationship
 */
class StepBasic_GroupRelationship extends Standard_Transient {
}

class StepBasic_HArray1OfApproval extends Standard_Transient {
}

class StepBasic_HArray1OfApproval_1 extends StepBasic_HArray1OfApproval {}

class StepBasic_HArray1OfApproval_2 extends StepBasic_HArray1OfApproval {}

class StepBasic_HArray1OfApproval_3 extends StepBasic_HArray1OfApproval {}

class StepBasic_HArray1OfApproval_4 extends StepBasic_HArray1OfApproval {}

class StepBasic_HArray1OfDerivedUnitElement extends Standard_Transient {
}

class StepBasic_HArray1OfDerivedUnitElement_1 extends StepBasic_HArray1OfDerivedUnitElement {}

class StepBasic_HArray1OfDerivedUnitElement_2 extends StepBasic_HArray1OfDerivedUnitElement {}

class StepBasic_HArray1OfDerivedUnitElement_3 extends StepBasic_HArray1OfDerivedUnitElement {}

class StepBasic_HArray1OfDerivedUnitElement_4 extends StepBasic_HArray1OfDerivedUnitElement {}

class StepBasic_HArray1OfDocument extends Standard_Transient {
}

class StepBasic_HArray1OfDocument_1 extends StepBasic_HArray1OfDocument {}

class StepBasic_HArray1OfDocument_2 extends StepBasic_HArray1OfDocument {}

class StepBasic_HArray1OfDocument_3 extends StepBasic_HArray1OfDocument {}

class StepBasic_HArray1OfDocument_4 extends StepBasic_HArray1OfDocument {}

class StepBasic_HArray1OfNamedUnit extends Standard_Transient {
}

class StepBasic_HArray1OfNamedUnit_1 extends StepBasic_HArray1OfNamedUnit {}

class StepBasic_HArray1OfNamedUnit_2 extends StepBasic_HArray1OfNamedUnit {}

class StepBasic_HArray1OfNamedUnit_3 extends StepBasic_HArray1OfNamedUnit {}

class StepBasic_HArray1OfNamedUnit_4 extends StepBasic_HArray1OfNamedUnit {}

class StepBasic_HArray1OfOrganization extends Standard_Transient {
}

class StepBasic_HArray1OfOrganization_1 extends StepBasic_HArray1OfOrganization {}

class StepBasic_HArray1OfOrganization_2 extends StepBasic_HArray1OfOrganization {}

class StepBasic_HArray1OfOrganization_3 extends StepBasic_HArray1OfOrganization {}

class StepBasic_HArray1OfOrganization_4 extends StepBasic_HArray1OfOrganization {}

class StepBasic_HArray1OfPerson extends Standard_Transient {
}

class StepBasic_HArray1OfPerson_1 extends StepBasic_HArray1OfPerson {}

class StepBasic_HArray1OfPerson_2 extends StepBasic_HArray1OfPerson {}

class StepBasic_HArray1OfPerson_3 extends StepBasic_HArray1OfPerson {}

class StepBasic_HArray1OfPerson_4 extends StepBasic_HArray1OfPerson {}

class StepBasic_HArray1OfProduct extends Standard_Transient {
}

class StepBasic_HArray1OfProduct_1 extends StepBasic_HArray1OfProduct {}

class StepBasic_HArray1OfProduct_2 extends StepBasic_HArray1OfProduct {}

class StepBasic_HArray1OfProduct_3 extends StepBasic_HArray1OfProduct {}

class StepBasic_HArray1OfProduct_4 extends StepBasic_HArray1OfProduct {}

class StepBasic_HArray1OfProductContext extends Standard_Transient {
}

class StepBasic_HArray1OfProductContext_1 extends StepBasic_HArray1OfProductContext {}

class StepBasic_HArray1OfProductContext_2 extends StepBasic_HArray1OfProductContext {}

class StepBasic_HArray1OfProductContext_3 extends StepBasic_HArray1OfProductContext {}

class StepBasic_HArray1OfProductContext_4 extends StepBasic_HArray1OfProductContext {}

class StepBasic_HArray1OfProductDefinition extends Standard_Transient {
}

class StepBasic_HArray1OfProductDefinition_1 extends StepBasic_HArray1OfProductDefinition {}

class StepBasic_HArray1OfProductDefinition_2 extends StepBasic_HArray1OfProductDefinition {}

class StepBasic_HArray1OfProductDefinition_3 extends StepBasic_HArray1OfProductDefinition {}

class StepBasic_HArray1OfProductDefinition_4 extends StepBasic_HArray1OfProductDefinition {}

class StepBasic_HArray1OfUncertaintyMeasureWithUnit extends Standard_Transient {
}

class StepBasic_HArray1OfUncertaintyMeasureWithUnit_1 extends StepBasic_HArray1OfUncertaintyMeasureWithUnit {}

class StepBasic_HArray1OfUncertaintyMeasureWithUnit_2 extends StepBasic_HArray1OfUncertaintyMeasureWithUnit {}

class StepBasic_HArray1OfUncertaintyMeasureWithUnit_3 extends StepBasic_HArray1OfUncertaintyMeasureWithUnit {}

class StepBasic_HArray1OfUncertaintyMeasureWithUnit_4 extends StepBasic_HArray1OfUncertaintyMeasureWithUnit {}

/**
 * Representation of STEP entity IdentificationAssignment
 */
class StepBasic_IdentificationAssignment extends Standard_Transient {
}

/**
 * Representation of STEP entity IdentificationRole
 */
class StepBasic_IdentificationRole extends Standard_Transient {
}

class StepBasic_LengthMeasureWithUnit extends StepBasic_MeasureWithUnit {
}

class StepBasic_LengthUnit extends StepBasic_NamedUnit {
}

class StepBasic_LocalTime extends Standard_Transient {
}

class StepBasic_MassMeasureWithUnit extends StepBasic_MeasureWithUnit {
}

/**
 * Representation of STEP entity MassUnit
 */
class StepBasic_MassUnit extends StepBasic_NamedUnit {
}

/**
 * for Select MeasureValue, i.e. : length_measure,time_measure,plane_angle_measure, solid_angle_measure,ratio_measure,parameter_value, context_dependent_measure,positive_length_measure, positive_plane_angle_measure,positive_ratio_measure, area_measure,volume_measure, count_measure
 */
class StepBasic_MeasureValueMember extends StepData_SelectReal {
}

class StepBasic_MeasureWithUnit extends Standard_Transient {
}

class StepBasic_MechanicalContext extends StepBasic_ProductContext {
}

/**
 * Representation of STEP entity NameAssignment
 */
class StepBasic_NameAssignment extends Standard_Transient {
}

class StepBasic_NamedUnit extends Standard_Transient {
}

/**
 * Representation of STEP entity ObjectRole
 */
class StepBasic_ObjectRole extends Standard_Transient {
}

class StepBasic_OrdinalDate extends StepBasic_Date {
}

class StepBasic_Organization extends Standard_Transient {
}

class StepBasic_OrganizationAssignment extends Standard_Transient {
}

class StepBasic_OrganizationRole extends Standard_Transient {
}

class StepBasic_OrganizationalAddress extends StepBasic_Address {
}

class StepBasic_Person extends Standard_Transient {
}

class StepBasic_PersonAndOrganization extends Standard_Transient {
}

class StepBasic_PersonAndOrganizationAssignment extends Standard_Transient {
}

class StepBasic_PersonAndOrganizationRole extends Standard_Transient {
}

class StepBasic_PersonOrganizationSelect extends StepData_SelectType {
}

class StepBasic_PersonalAddress extends StepBasic_Address {
}

class StepBasic_PhysicallyModeledProductDefinition extends StepBasic_ProductDefinition {
}

class StepBasic_PlaneAngleMeasureWithUnit extends StepBasic_MeasureWithUnit {
}

class StepBasic_PlaneAngleUnit extends StepBasic_NamedUnit {
}

class StepBasic_Product extends Standard_Transient {
}

class StepBasic_ProductCategory extends Standard_Transient {
}

/**
 * Representation of STEP entity ProductCategoryRelationship
 */
class StepBasic_ProductCategoryRelationship extends Standard_Transient {
}

/**
 * Representation of STEP entity ProductConceptContext
 */
class StepBasic_ProductConceptContext extends StepBasic_ApplicationContextElement {
}

class StepBasic_ProductContext extends StepBasic_ApplicationContextElement {
}

class StepBasic_ProductDefinition extends Standard_Transient {
}

class StepBasic_ProductDefinitionContext extends StepBasic_ApplicationContextElement {
}

class StepBasic_ProductDefinitionEffectivity extends StepBasic_Effectivity {
}

class StepBasic_ProductDefinitionFormation extends Standard_Transient {
}

/**
 * Representation of STEP entity ProductDefinitionFormationRelationship
 */
class StepBasic_ProductDefinitionFormationRelationship extends Standard_Transient {
}

class StepBasic_ProductDefinitionFormationWithSpecifiedSource extends StepBasic_ProductDefinitionFormation {
}

class StepBasic_ProductDefinitionOrReference extends StepData_SelectType {
}

/**
 * Representation of STEP entity Product_Definition_Reference
 */
class StepBasic_ProductDefinitionReference extends Standard_Transient {
}

class StepBasic_ProductDefinitionReferenceWithLocalRepresentation extends StepBasic_ProductDefinition {
}

/**
 * Representation of STEP entity ProductDefinitionRelationship
 */
class StepBasic_ProductDefinitionRelationship extends Standard_Transient {
}

class StepBasic_ProductDefinitionWithAssociatedDocuments extends StepBasic_ProductDefinition {
}

/**
 * Representation of STEP SELECT type ProductOrFormationOrDefinition
 */
class StepBasic_ProductOrFormationOrDefinition extends StepData_SelectType {
}

class StepBasic_ProductRelatedProductCategory extends StepBasic_ProductCategory {
}

class StepBasic_ProductType extends StepBasic_ProductRelatedProductCategory {
}

class StepBasic_RatioMeasureWithUnit extends StepBasic_MeasureWithUnit {
}

class StepBasic_RatioUnit extends StepBasic_NamedUnit {
}

/**
 * Representation of STEP entity RoleAssociation
 */
class StepBasic_RoleAssociation extends Standard_Transient {
}

/**
 * Representation of STEP SELECT type RoleSelect
 */
class StepBasic_RoleSelect extends StepData_SelectType {
}

class StepBasic_SecurityClassification extends Standard_Transient {
}

class StepBasic_SecurityClassificationAssignment extends Standard_Transient {
}

class StepBasic_SecurityClassificationLevel extends Standard_Transient {
}

class StepBasic_SiUnit extends StepBasic_NamedUnit {
}

class StepBasic_SiUnitAndAreaUnit extends StepBasic_SiUnit {
}

class StepBasic_SiUnitAndLengthUnit extends StepBasic_SiUnit {
}

class StepBasic_SiUnitAndMassUnit extends StepBasic_SiUnit {
}

class StepBasic_SiUnitAndPlaneAngleUnit extends StepBasic_SiUnit {
}

class StepBasic_SiUnitAndRatioUnit extends StepBasic_SiUnit {
}

class StepBasic_SiUnitAndSolidAngleUnit extends StepBasic_SiUnit {
}

class StepBasic_SiUnitAndThermodynamicTemperatureUnit extends StepBasic_SiUnit {
}

class StepBasic_SiUnitAndTimeUnit extends StepBasic_SiUnit {
}

class StepBasic_SiUnitAndVolumeUnit extends StepBasic_SiUnit {
}

/**
 * For immediate members of SizeSelect, i.e. : ParameterValue (a Real)
 */
class StepBasic_SizeMember extends StepData_SelectReal {
}

class StepBasic_SizeSelect extends StepData_SelectType {
}

class StepBasic_SolidAngleMeasureWithUnit extends StepBasic_MeasureWithUnit {
}

class StepBasic_SolidAngleUnit extends StepBasic_NamedUnit {
}

/**
 * Representation of STEP SELECT type SourceItem
 */
class StepBasic_SourceItem extends StepData_SelectType {
}

/**
 * Representation of STEP entity ThermodynamicTemperatureUnit
 */
class StepBasic_ThermodynamicTemperatureUnit extends StepBasic_NamedUnit {
}

class StepBasic_TimeMeasureWithUnit extends StepBasic_MeasureWithUnit {
}

class StepBasic_TimeUnit extends StepBasic_NamedUnit {
}

class StepBasic_UncertaintyMeasureWithUnit extends StepBasic_MeasureWithUnit {
}

/**
 * Implements a select type unit (NamedUnit or DerivedUnit)
 */
class StepBasic_Unit extends StepData_SelectType {
}

/**
 * Representation of STEP entity VersionedActionRequest
 */
class StepBasic_VersionedActionRequest extends Standard_Transient {
}

class StepBasic_VolumeUnit extends StepBasic_NamedUnit {
}

class StepBasic_WeekOfYearAndDayDate extends StepBasic_Date {
}

/**
 * Gives basic data definition for Step Interface. Any class of a data model described in EXPRESS Language is candidate to be managed by a Step Interface
 */
class StepData {
}

/**
 * General frame to describe entities with Description (Simple or Complex)
 */
class StepData_Described extends Standard_Transient {
}

/**
 * Describes a Complex Entity (Plex) as a list of Simple ones
 */
class StepData_ECDescr extends StepData_EDescr {
}

/**
 * This class is intended to describe the authorized form for an entity, either Simple or Plex
 */
class StepData_EDescr extends Standard_Transient {
}

/**
 * This class is intended to describe the authorized form for a Simple (not Plex) Entity, as a list of fields
 */
class StepData_ESDescr extends StepData_EDescr {
}

/**
 * This class gives a way of conversion between the value of an enumeration and its representation in STEP An enumeration corresponds to an integer with reserved values, which begin to 0 In STEP, it is represented by a name in capital letter and limited by two dots, e.g. .UNKNOWN.
 */
class StepData_EnumTool {
}

/**
 * Defines a generally defined Field for STEP data : can be used either in any kind of entity to implement it or in free format entities in a "late-binding" mode A field can have : no value (or derived), a single value of any kind, a list of value : single or double list
 */
class StepData_Field {
}

class StepData_Field_1 extends StepData_Field {}

class StepData_Field_2 extends StepData_Field {}

/**
 * Describes a list of fields, in a general way This basic class is for a null size list Subclasses are for 1, N (fixed) or Dynamic sizes
 */
class StepData_FieldList {
}

/**
 * Describes a list of ONE field
 */
class StepData_FieldList1 extends StepData_FieldList {
}

/**
 * Describes a list of fields, in a general way This basic class is for a null size list Subclasses are for 1, N (fixed) or Dynamic sizes
 */
class StepData_FieldListD extends StepData_FieldList {
}

/**
 * Describes a list of fields, in a general way This basic class is for a null size list Subclasses are for 1, N (fixed) or Dynamic sizes
 */
class StepData_FieldListN extends StepData_FieldList {
}

/**
 * A FileProtocol is defined as the addition of several already existing Protocols. It corresponds to the definition of a SchemaName with several Names, each one being attached to a specific Protocol. Thus, a File defined with a compound Schema is processed as any other one, once built the equivalent compound Protocol, a FileProtocol
 */
class StepData_FileProtocol extends StepData_Protocol {
}

class StepData_FileRecognizer extends Standard_Transient {
}

class StepData_GlobalNodeOfWriterLib extends Standard_Transient {
}

class StepData_HArray1OfField extends Standard_Transient {
}

class StepData_HArray1OfField_1 extends StepData_HArray1OfField {}

class StepData_HArray1OfField_2 extends StepData_HArray1OfField {}

class StepData_HArray1OfField_3 extends StepData_HArray1OfField {}

class StepData_HArray1OfField_4 extends StepData_HArray1OfField {}

class StepData_NodeOfWriterLib extends Standard_Transient {
}

/**
 * This class is intended to describe the authorized form for a parameter, as a type or a value for a field
 */
class StepData_PDescr extends Standard_Transient {
}

/**
 * A Plex (for Complex) Entity is defined as a list of Simple Members ("external mapping") The types of these members must be in alphabetic order
 */
class StepData_Plex extends StepData_Described {
}

/**
 * Description of Basic Protocol for Step The class Protocol from StepData itself describes a default Protocol, which recognizes only UnknownEntities. Sub-classes will redefine CaseNumber and, if necessary, NbResources and Resources.
 */
class StepData_Protocol extends Interface_Protocol {
}

/**
 * Defines basic File Access Module (Recognize, Read, Write) That is : ReaderModule (Recognize & Read) + Write for StepWriter (for a more centralized description) Warning : A sub-class of ReadWriteModule, which belongs to a particular Protocol, must use the same definition for Case Numbers (give the same Value for a StepType defined as a String from a File as the Protocol does for the corresponding Entity)
 */
class StepData_ReadWriteModule extends Interface_ReaderModule {
}

class StepData_SelectArrReal extends StepData_SelectNamed {
}

/**
 * A SelectInt is a SelectMember specialised for a basic integer type in a select which also accepts entities : this one has NO NAME. For a named select, see SelectNamed
 */
class StepData_SelectInt extends StepData_SelectMember {
}

/**
 * The general form for a Select Member. A Select Member can, either define a value of a basic type (such as an integer) with an additional information : a name or list of names which precise the meaning of this value or be an alternate value in a select, which also accepts an entity (in this case, the name is not mandatory)
 */
class StepData_SelectMember extends Standard_Transient {
}

/**
 * This select member can be of any kind, and be named But its takes more memory than some specialised ones This class allows one name for the instance
 */
class StepData_SelectNamed extends StepData_SelectMember {
}

/**
 * A SelectReal is a SelectMember specialised for a basic real type in a select which also accepts entities : this one has NO NAME For a named select, see SelectNamed
 */
class StepData_SelectReal extends StepData_SelectMember {
}

/**
 * SelectType is the basis used for SELECT_TYPE definitions from the EXPRESS form. A SELECT_TYPE in EXPRESS is an enumeration of Types, it corresponds in a way to a Super-Type, but with no specific Methods, and no exclusivity (a given Type can be member of several SELECT_TYPES, plus be itself a SUB_TYPE).
 */
class StepData_SelectType {
}

/**
 * A Simple Entity is defined by a type (which can heve super types) and a list of parameters
 */
class StepData_Simple extends StepData_Described {
}

/**
 * Provides a way to dump entities processed through STEP, with these features : - same form as for writing a STEP File (because it is clear and compact enough, even if the names of the fields do not appear) : thus, no additionnal resource is required - possibility to look for an entity itself (only its Type or with its content), an entity and it shared items (one level) or all the entities its refers to, directly or recursively.
 */
class StepData_StepDumper {
}

/**
 * Gives access to - entities in a STEP file, - the STEP file header.
 */
class StepData_StepModel extends Interface_InterfaceModel {
}

/**
 * Specific FileReaderData for Step Contains litteral description of entities (for each one : type as a string, ident, parameter list) provides references evaluation, plus access to litteral data and specific access methods (Boolean, XY, XYZ)
 */
class StepData_StepReaderData extends Interface_FileReaderData {
}

/**
 * Specific FileReaderTool for Step; works with FileReaderData provides references evaluation, plus access to litteral data and specific methods defined by FileReaderTool Remarks : works with a ReaderLib to load Entities
 */
class StepData_StepReaderTool extends Interface_FileReaderTool {
}

/**
 * manages atomic file writing, under control of StepModel (for general organisation of file) and each class of Transient (for its own parameters) : prepares text to be written then writes it A stream cannot be used because Step limits line length at 72 In more, a specific object offers more appropriate functions
 */
class StepData_StepWriter {
}

class StepData_WriterLib {
}

class StepData_WriterLib_1 extends StepData_WriterLib {}

class StepData_WriterLib_2 extends StepData_WriterLib {}

/**
 * Representation of STEP entity AngularityTolerance
 */
class StepDimTol_AngularityTolerance extends StepDimTol_GeometricToleranceWithDatumReference {
}

/**
 * Representation of STEP entity CircularRunoutTolerance
 */
class StepDimTol_CircularRunoutTolerance extends StepDimTol_GeometricToleranceWithDatumReference {
}

/**
 * Representation of STEP entity CoaxialityTolerance
 */
class StepDimTol_CoaxialityTolerance extends StepDimTol_GeometricToleranceWithDatumReference {
}

/**
 * Representation of STEP entity CommonDatum
 */
class StepDimTol_CommonDatum extends StepRepr_CompositeShapeAspect {
}

/**
 * Representation of STEP entity ConcentricityTolerance
 */
class StepDimTol_ConcentricityTolerance extends StepDimTol_GeometricToleranceWithDatumReference {
}

/**
 * Representation of STEP entity CylindricityTolerance
 */
class StepDimTol_CylindricityTolerance extends StepDimTol_GeometricTolerance {
}

/**
 * Representation of STEP entity Datum
 */
class StepDimTol_Datum extends StepRepr_ShapeAspect {
}

/**
 * Representation of STEP entity DatumFeature
 */
class StepDimTol_DatumFeature extends StepRepr_ShapeAspect {
}

class StepDimTol_DatumOrCommonDatum extends StepData_SelectType {
}

/**
 * Representation of STEP entity DatumReference
 */
class StepDimTol_DatumReference extends Standard_Transient {
}

/**
 * Representation of STEP entity DatumReferenceCompartment
 */
class StepDimTol_DatumReferenceCompartment extends StepDimTol_GeneralDatumReference {
}

/**
 * Representation of STEP entity DatumReferenceElement
 */
class StepDimTol_DatumReferenceElement extends StepDimTol_GeneralDatumReference {
}

class StepDimTol_DatumReferenceModifier extends StepData_SelectType {
}

/**
 * Representation of STEP entity DatumReferenceModifierWithValue
 */
class StepDimTol_DatumReferenceModifierWithValue extends Standard_Transient {
}

/**
 * Representation of STEP entity DatumSystem
 */
class StepDimTol_DatumSystem extends StepRepr_ShapeAspect {
}

class StepDimTol_DatumSystemOrReference extends StepData_SelectType {
}

/**
 * Representation of STEP entity DatumTarget
 */
class StepDimTol_DatumTarget extends StepRepr_ShapeAspect {
}

/**
 * Representation of STEP entity FlatnessTolerance
 */
class StepDimTol_FlatnessTolerance extends StepDimTol_GeometricTolerance {
}

/**
 * Representation of STEP entity GeneralDatumReference
 */
class StepDimTol_GeneralDatumReference extends StepRepr_ShapeAspect {
}

class StepDimTol_GeoTolAndGeoTolWthDatRef extends StepDimTol_GeometricTolerance {
}

class StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol extends StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod {
}

class StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod extends StepDimTol_GeometricTolerance {
}

class StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol extends StepDimTol_GeometricTolerance {
}

class StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol extends StepDimTol_GeoTolAndGeoTolWthDatRef {
}

class StepDimTol_GeoTolAndGeoTolWthMaxTol extends StepDimTol_GeoTolAndGeoTolWthMod {
}

class StepDimTol_GeoTolAndGeoTolWthMod extends StepDimTol_GeometricTolerance {
}

/**
 * Representation of STEP entity GeometricTolerance
 */
class StepDimTol_GeometricTolerance extends Standard_Transient {
}

/**
 * Representation of STEP entity GeometricToleranceRelationship
 */
class StepDimTol_GeometricToleranceRelationship extends Standard_Transient {
}

class StepDimTol_GeometricToleranceTarget extends StepData_SelectType {
}

/**
 * Representation of STEP entity GeometricToleranceWithDatumReference
 */
class StepDimTol_GeometricToleranceWithDatumReference extends StepDimTol_GeometricTolerance {
}

/**
 * Representation of STEP entity GeometricToleranceWithDefinedAreaUnit
 */
class StepDimTol_GeometricToleranceWithDefinedAreaUnit extends StepDimTol_GeometricToleranceWithDefinedUnit {
}

/**
 * Representation of STEP entity GeometricToleranceWithDefinedUnit
 */
class StepDimTol_GeometricToleranceWithDefinedUnit extends StepDimTol_GeometricTolerance {
}

/**
 * Representation of STEP entity GeometricToleranceWithMaximumTolerance
 */
class StepDimTol_GeometricToleranceWithMaximumTolerance extends StepDimTol_GeometricToleranceWithModifiers {
}

/**
 * Representation of STEP entity GeometricToleranceWithModifiers
 */
class StepDimTol_GeometricToleranceWithModifiers extends StepDimTol_GeometricTolerance {
}

class StepDimTol_HArray1OfDatumReference extends Standard_Transient {
}

class StepDimTol_HArray1OfDatumReference_1 extends StepDimTol_HArray1OfDatumReference {}

class StepDimTol_HArray1OfDatumReference_2 extends StepDimTol_HArray1OfDatumReference {}

class StepDimTol_HArray1OfDatumReference_3 extends StepDimTol_HArray1OfDatumReference {}

class StepDimTol_HArray1OfDatumReference_4 extends StepDimTol_HArray1OfDatumReference {}

class StepDimTol_HArray1OfDatumReferenceCompartment extends Standard_Transient {
}

class StepDimTol_HArray1OfDatumReferenceCompartment_1 extends StepDimTol_HArray1OfDatumReferenceCompartment {}

class StepDimTol_HArray1OfDatumReferenceCompartment_2 extends StepDimTol_HArray1OfDatumReferenceCompartment {}

class StepDimTol_HArray1OfDatumReferenceCompartment_3 extends StepDimTol_HArray1OfDatumReferenceCompartment {}

class StepDimTol_HArray1OfDatumReferenceCompartment_4 extends StepDimTol_HArray1OfDatumReferenceCompartment {}

class StepDimTol_HArray1OfDatumReferenceElement extends Standard_Transient {
}

class StepDimTol_HArray1OfDatumReferenceElement_1 extends StepDimTol_HArray1OfDatumReferenceElement {}

class StepDimTol_HArray1OfDatumReferenceElement_2 extends StepDimTol_HArray1OfDatumReferenceElement {}

class StepDimTol_HArray1OfDatumReferenceElement_3 extends StepDimTol_HArray1OfDatumReferenceElement {}

class StepDimTol_HArray1OfDatumReferenceElement_4 extends StepDimTol_HArray1OfDatumReferenceElement {}

class StepDimTol_HArray1OfDatumReferenceModifier extends Standard_Transient {
}

class StepDimTol_HArray1OfDatumReferenceModifier_1 extends StepDimTol_HArray1OfDatumReferenceModifier {}

class StepDimTol_HArray1OfDatumReferenceModifier_2 extends StepDimTol_HArray1OfDatumReferenceModifier {}

class StepDimTol_HArray1OfDatumReferenceModifier_3 extends StepDimTol_HArray1OfDatumReferenceModifier {}

class StepDimTol_HArray1OfDatumReferenceModifier_4 extends StepDimTol_HArray1OfDatumReferenceModifier {}

class StepDimTol_HArray1OfDatumSystemOrReference extends Standard_Transient {
}

class StepDimTol_HArray1OfDatumSystemOrReference_1 extends StepDimTol_HArray1OfDatumSystemOrReference {}

class StepDimTol_HArray1OfDatumSystemOrReference_2 extends StepDimTol_HArray1OfDatumSystemOrReference {}

class StepDimTol_HArray1OfDatumSystemOrReference_3 extends StepDimTol_HArray1OfDatumSystemOrReference {}

class StepDimTol_HArray1OfDatumSystemOrReference_4 extends StepDimTol_HArray1OfDatumSystemOrReference {}

class StepDimTol_HArray1OfGeometricToleranceModifier extends Standard_Transient {
}

class StepDimTol_HArray1OfGeometricToleranceModifier_1 extends StepDimTol_HArray1OfGeometricToleranceModifier {}

class StepDimTol_HArray1OfGeometricToleranceModifier_2 extends StepDimTol_HArray1OfGeometricToleranceModifier {}

class StepDimTol_HArray1OfGeometricToleranceModifier_3 extends StepDimTol_HArray1OfGeometricToleranceModifier {}

class StepDimTol_HArray1OfGeometricToleranceModifier_4 extends StepDimTol_HArray1OfGeometricToleranceModifier {}

class StepDimTol_HArray1OfToleranceZoneTarget extends Standard_Transient {
}

class StepDimTol_HArray1OfToleranceZoneTarget_1 extends StepDimTol_HArray1OfToleranceZoneTarget {}

class StepDimTol_HArray1OfToleranceZoneTarget_2 extends StepDimTol_HArray1OfToleranceZoneTarget {}

class StepDimTol_HArray1OfToleranceZoneTarget_3 extends StepDimTol_HArray1OfToleranceZoneTarget {}

class StepDimTol_HArray1OfToleranceZoneTarget_4 extends StepDimTol_HArray1OfToleranceZoneTarget {}

/**
 * Representation of STEP entity LineProfileTolerance
 */
class StepDimTol_LineProfileTolerance extends StepDimTol_GeometricTolerance {
}

/**
 * Representation of STEP entity ModifiedGeometricTolerance
 */
class StepDimTol_ModifiedGeometricTolerance extends StepDimTol_GeometricTolerance {
}

/**
 * Representation of STEP entity NonUniformZoneDefinition
 */
class StepDimTol_NonUniformZoneDefinition extends StepDimTol_ToleranceZoneDefinition {
}

/**
 * Representation of STEP entity ParallelismTolerance
 */
class StepDimTol_ParallelismTolerance extends StepDimTol_GeometricToleranceWithDatumReference {
}

/**
 * Representation of STEP entity PerpendicularityTolerance
 */
class StepDimTol_PerpendicularityTolerance extends StepDimTol_GeometricToleranceWithDatumReference {
}

/**
 * Representation of STEP entity PlacedDatumTargetFeature
 */
class StepDimTol_PlacedDatumTargetFeature extends StepDimTol_DatumTarget {
}

/**
 * Representation of STEP entity PositionTolerance
 */
class StepDimTol_PositionTolerance extends StepDimTol_GeometricTolerance {
}

/**
 * Representation of STEP entity ProjectedZoneDefinition
 */
class StepDimTol_ProjectedZoneDefinition extends StepDimTol_ToleranceZoneDefinition {
}

/**
 * Representation of STEP entity RoundnessTolerance
 */
class StepDimTol_RoundnessTolerance extends StepDimTol_GeometricTolerance {
}

/**
 * Representation of STEP entity ToleranceZoneDefinition
 */
class StepDimTol_RunoutZoneDefinition extends StepDimTol_ToleranceZoneDefinition {
}

/**
 * Added for Dimensional Tolerances
 */
class StepDimTol_RunoutZoneOrientation extends Standard_Transient {
}

/**
 * Representation of STEP SELECT type ShapeToleranceSelect
 */
class StepDimTol_ShapeToleranceSelect extends StepData_SelectType {
}

/**
 * Defines SimpleDatumReferenceModifier as unique member of DatumReferenceModifier Works with an EnumTool
 */
class StepDimTol_SimpleDatumReferenceModifierMember extends StepData_SelectInt {
}

/**
 * Representation of STEP entity StraightnessTolerance
 */
class StepDimTol_StraightnessTolerance extends StepDimTol_GeometricTolerance {
}

/**
 * Representation of STEP entity SurfaceProfileTolerance
 */
class StepDimTol_SurfaceProfileTolerance extends StepDimTol_GeometricTolerance {
}

/**
 * Representation of STEP entity SymmetryTolerance
 */
class StepDimTol_SymmetryTolerance extends StepDimTol_GeometricToleranceWithDatumReference {
}

/**
 * Representation of STEP entity ToleranceZone
 */
class StepDimTol_ToleranceZone extends StepRepr_ShapeAspect {
}

/**
 * Representation of STEP entity ToleranceZoneDefinition
 */
class StepDimTol_ToleranceZoneDefinition extends Standard_Transient {
}

/**
 * Added for Dimensional Tolerances
 */
class StepDimTol_ToleranceZoneForm extends Standard_Transient {
}

class StepDimTol_ToleranceZoneTarget extends StepData_SelectType {
}

/**
 * Representation of STEP entity TotalRunoutTolerance
 */
class StepDimTol_TotalRunoutTolerance extends StepDimTol_GeometricToleranceWithDatumReference {
}

/**
 * Representation of STEP entity UnequallyDisposedGeometricTolerance
 */
class StepDimTol_UnequallyDisposedGeometricTolerance extends StepDimTol_GeometricTolerance {
}

/**
 * Representation of STEP entity AnalysisItemWithinRepresentation
 */
class StepElement_AnalysisItemWithinRepresentation extends Standard_Transient {
}

/**
 * Representation of STEP entity Curve3dElementDescriptor
 */
class StepElement_Curve3dElementDescriptor extends StepElement_ElementDescriptor {
}

/**
 * Representation of STEP entity CurveElementEndReleasePacket
 */
class StepElement_CurveElementEndReleasePacket extends Standard_Transient {
}

/**
 * Representation of STEP SELECT type CurveElementFreedom
 */
class StepElement_CurveElementFreedom extends StepData_SelectType {
}

/**
 * Representation of member for STEP SELECT type CurveElementFreedom
 */
class StepElement_CurveElementFreedomMember extends StepData_SelectNamed {
}

/**
 * Representation of STEP SELECT type CurveElementPurpose
 */
class StepElement_CurveElementPurpose extends StepData_SelectType {
}

/**
 * Representation of member for STEP SELECT type CurveElementPurpose
 */
class StepElement_CurveElementPurposeMember extends StepData_SelectNamed {
}

/**
 * Representation of STEP entity CurveElementSectionDefinition
 */
class StepElement_CurveElementSectionDefinition extends Standard_Transient {
}

/**
 * Representation of STEP entity CurveElementSectionDerivedDefinitions
 */
class StepElement_CurveElementSectionDerivedDefinitions extends StepElement_CurveElementSectionDefinition {
}

/**
 * Representation of STEP SELECT type ElementAspect
 */
class StepElement_ElementAspect extends StepData_SelectType {
}

/**
 * Representation of member for STEP SELECT type ElementAspect
 */
class StepElement_ElementAspectMember extends StepData_SelectNamed {
}

/**
 * Representation of STEP entity ElementDescriptor
 */
class StepElement_ElementDescriptor extends Standard_Transient {
}

/**
 * Representation of STEP entity ElementMaterial
 */
class StepElement_ElementMaterial extends Standard_Transient {
}

class StepElement_HArray1OfCurveElementEndReleasePacket extends Standard_Transient {
}

class StepElement_HArray1OfCurveElementEndReleasePacket_1 extends StepElement_HArray1OfCurveElementEndReleasePacket {}

class StepElement_HArray1OfCurveElementEndReleasePacket_2 extends StepElement_HArray1OfCurveElementEndReleasePacket {}

class StepElement_HArray1OfCurveElementEndReleasePacket_3 extends StepElement_HArray1OfCurveElementEndReleasePacket {}

class StepElement_HArray1OfCurveElementEndReleasePacket_4 extends StepElement_HArray1OfCurveElementEndReleasePacket {}

class StepElement_HArray1OfCurveElementSectionDefinition extends Standard_Transient {
}

class StepElement_HArray1OfCurveElementSectionDefinition_1 extends StepElement_HArray1OfCurveElementSectionDefinition {}

class StepElement_HArray1OfCurveElementSectionDefinition_2 extends StepElement_HArray1OfCurveElementSectionDefinition {}

class StepElement_HArray1OfCurveElementSectionDefinition_3 extends StepElement_HArray1OfCurveElementSectionDefinition {}

class StepElement_HArray1OfCurveElementSectionDefinition_4 extends StepElement_HArray1OfCurveElementSectionDefinition {}

class StepElement_HArray1OfHSequenceOfCurveElementPurposeMember extends Standard_Transient {
}

class StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_1 extends StepElement_HArray1OfHSequenceOfCurveElementPurposeMember {}

class StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_2 extends StepElement_HArray1OfHSequenceOfCurveElementPurposeMember {}

class StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_3 extends StepElement_HArray1OfHSequenceOfCurveElementPurposeMember {}

class StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_4 extends StepElement_HArray1OfHSequenceOfCurveElementPurposeMember {}

class StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember extends Standard_Transient {
}

class StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_1 extends StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember {}

class StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_2 extends StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember {}

class StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_3 extends StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember {}

class StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_4 extends StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember {}

class StepElement_HArray1OfMeasureOrUnspecifiedValue extends Standard_Transient {
}

class StepElement_HArray1OfMeasureOrUnspecifiedValue_1 extends StepElement_HArray1OfMeasureOrUnspecifiedValue {}

class StepElement_HArray1OfMeasureOrUnspecifiedValue_2 extends StepElement_HArray1OfMeasureOrUnspecifiedValue {}

class StepElement_HArray1OfMeasureOrUnspecifiedValue_3 extends StepElement_HArray1OfMeasureOrUnspecifiedValue {}

class StepElement_HArray1OfMeasureOrUnspecifiedValue_4 extends StepElement_HArray1OfMeasureOrUnspecifiedValue {}

class StepElement_HArray1OfSurfaceSection extends Standard_Transient {
}

class StepElement_HArray1OfSurfaceSection_1 extends StepElement_HArray1OfSurfaceSection {}

class StepElement_HArray1OfSurfaceSection_2 extends StepElement_HArray1OfSurfaceSection {}

class StepElement_HArray1OfSurfaceSection_3 extends StepElement_HArray1OfSurfaceSection {}

class StepElement_HArray1OfSurfaceSection_4 extends StepElement_HArray1OfSurfaceSection {}

class StepElement_HArray1OfVolumeElementPurpose extends Standard_Transient {
}

class StepElement_HArray1OfVolumeElementPurpose_1 extends StepElement_HArray1OfVolumeElementPurpose {}

class StepElement_HArray1OfVolumeElementPurpose_2 extends StepElement_HArray1OfVolumeElementPurpose {}

class StepElement_HArray1OfVolumeElementPurpose_3 extends StepElement_HArray1OfVolumeElementPurpose {}

class StepElement_HArray1OfVolumeElementPurpose_4 extends StepElement_HArray1OfVolumeElementPurpose {}

class StepElement_HArray1OfVolumeElementPurposeMember extends Standard_Transient {
}

class StepElement_HArray1OfVolumeElementPurposeMember_1 extends StepElement_HArray1OfVolumeElementPurposeMember {}

class StepElement_HArray1OfVolumeElementPurposeMember_2 extends StepElement_HArray1OfVolumeElementPurposeMember {}

class StepElement_HArray1OfVolumeElementPurposeMember_3 extends StepElement_HArray1OfVolumeElementPurposeMember {}

class StepElement_HArray1OfVolumeElementPurposeMember_4 extends StepElement_HArray1OfVolumeElementPurposeMember {}

class StepElement_HArray2OfCurveElementPurposeMember extends Standard_Transient {
}

class StepElement_HArray2OfCurveElementPurposeMember_1 extends StepElement_HArray2OfCurveElementPurposeMember {}

class StepElement_HArray2OfCurveElementPurposeMember_2 extends StepElement_HArray2OfCurveElementPurposeMember {}

class StepElement_HArray2OfCurveElementPurposeMember_3 extends StepElement_HArray2OfCurveElementPurposeMember {}

class StepElement_HArray2OfSurfaceElementPurpose extends Standard_Transient {
}

class StepElement_HArray2OfSurfaceElementPurpose_1 extends StepElement_HArray2OfSurfaceElementPurpose {}

class StepElement_HArray2OfSurfaceElementPurpose_2 extends StepElement_HArray2OfSurfaceElementPurpose {}

class StepElement_HArray2OfSurfaceElementPurpose_3 extends StepElement_HArray2OfSurfaceElementPurpose {}

class StepElement_HArray2OfSurfaceElementPurposeMember extends Standard_Transient {
}

class StepElement_HArray2OfSurfaceElementPurposeMember_1 extends StepElement_HArray2OfSurfaceElementPurposeMember {}

class StepElement_HArray2OfSurfaceElementPurposeMember_2 extends StepElement_HArray2OfSurfaceElementPurposeMember {}

class StepElement_HArray2OfSurfaceElementPurposeMember_3 extends StepElement_HArray2OfSurfaceElementPurposeMember {}

class StepElement_HSequenceOfCurveElementPurposeMember extends Standard_Transient {
}

class StepElement_HSequenceOfCurveElementPurposeMember_1 extends StepElement_HSequenceOfCurveElementPurposeMember {}

class StepElement_HSequenceOfCurveElementPurposeMember_2 extends StepElement_HSequenceOfCurveElementPurposeMember {}

class StepElement_HSequenceOfCurveElementSectionDefinition extends Standard_Transient {
}

class StepElement_HSequenceOfCurveElementSectionDefinition_1 extends StepElement_HSequenceOfCurveElementSectionDefinition {}

class StepElement_HSequenceOfCurveElementSectionDefinition_2 extends StepElement_HSequenceOfCurveElementSectionDefinition {}

class StepElement_HSequenceOfElementMaterial extends Standard_Transient {
}

class StepElement_HSequenceOfElementMaterial_1 extends StepElement_HSequenceOfElementMaterial {}

class StepElement_HSequenceOfElementMaterial_2 extends StepElement_HSequenceOfElementMaterial {}

class StepElement_HSequenceOfSurfaceElementPurposeMember extends Standard_Transient {
}

class StepElement_HSequenceOfSurfaceElementPurposeMember_1 extends StepElement_HSequenceOfSurfaceElementPurposeMember {}

class StepElement_HSequenceOfSurfaceElementPurposeMember_2 extends StepElement_HSequenceOfSurfaceElementPurposeMember {}

/**
 * Representation of STEP SELECT type MeasureOrUnspecifiedValue
 */
class StepElement_MeasureOrUnspecifiedValue extends StepData_SelectType {
}

/**
 * Representation of member for STEP SELECT type MeasureOrUnspecifiedValue
 */
class StepElement_MeasureOrUnspecifiedValueMember extends StepData_SelectNamed {
}

/**
 * Representation of STEP entity Surface3dElementDescriptor
 */
class StepElement_Surface3dElementDescriptor extends StepElement_ElementDescriptor {
}

/**
 * Representation of STEP entity SurfaceElementProperty
 */
class StepElement_SurfaceElementProperty extends Standard_Transient {
}

/**
 * Representation of STEP SELECT type SurfaceElementPurpose
 */
class StepElement_SurfaceElementPurpose extends StepData_SelectType {
}

/**
 * Representation of member for STEP SELECT type SurfaceElementPurpose
 */
class StepElement_SurfaceElementPurposeMember extends StepData_SelectNamed {
}

/**
 * Representation of STEP entity SurfaceSection
 */
class StepElement_SurfaceSection extends Standard_Transient {
}

/**
 * Representation of STEP entity SurfaceSectionField
 */
class StepElement_SurfaceSectionField extends Standard_Transient {
}

/**
 * Representation of STEP entity SurfaceSectionFieldConstant
 */
class StepElement_SurfaceSectionFieldConstant extends StepElement_SurfaceSectionField {
}

/**
 * Representation of STEP entity SurfaceSectionFieldVarying
 */
class StepElement_SurfaceSectionFieldVarying extends StepElement_SurfaceSectionField {
}

/**
 * Representation of STEP entity UniformSurfaceSection
 */
class StepElement_UniformSurfaceSection extends StepElement_SurfaceSection {
}

/**
 * Representation of STEP entity Volume3dElementDescriptor
 */
class StepElement_Volume3dElementDescriptor extends StepElement_ElementDescriptor {
}

/**
 * Representation of STEP SELECT type VolumeElementPurpose
 */
class StepElement_VolumeElementPurpose extends StepData_SelectType {
}

/**
 * Representation of member for STEP SELECT type VolumeElementPurpose
 */
class StepElement_VolumeElementPurposeMember extends StepData_SelectNamed {
}

/**
 * Representation of STEP entity AlignedCurve3dElementCoordinateSystem
 */
class StepFEA_AlignedCurve3dElementCoordinateSystem extends StepFEA_FeaRepresentationItem {
}

/**
 * Representation of STEP entity AlignedSurface3dElementCoordinateSystem
 */
class StepFEA_AlignedSurface3dElementCoordinateSystem extends StepFEA_FeaRepresentationItem {
}

/**
 * Representation of STEP entity ArbitraryVolume3dElementCoordinateSystem
 */
class StepFEA_ArbitraryVolume3dElementCoordinateSystem extends StepFEA_FeaRepresentationItem {
}

/**
 * Representation of STEP entity ConstantSurface3dElementCoordinateSystem
 */
class StepFEA_ConstantSurface3dElementCoordinateSystem extends StepFEA_FeaRepresentationItem {
}

/**
 * Representation of STEP entity Curve3dElementProperty
 */
class StepFEA_Curve3dElementProperty extends Standard_Transient {
}

/**
 * Representation of STEP entity Curve3dElementRepresentation
 */
class StepFEA_Curve3dElementRepresentation extends StepFEA_ElementRepresentation {
}

/**
 * Representation of STEP SELECT type CurveElementEndCoordinateSystem
 */
class StepFEA_CurveElementEndCoordinateSystem extends StepData_SelectType {
}

/**
 * Representation of STEP entity CurveElementEndOffset
 */
class StepFEA_CurveElementEndOffset extends Standard_Transient {
}

/**
 * Representation of STEP entity CurveElementEndRelease
 */
class StepFEA_CurveElementEndRelease extends Standard_Transient {
}

/**
 * Representation of STEP entity CurveElementInterval
 */
class StepFEA_CurveElementInterval extends Standard_Transient {
}

/**
 * Representation of STEP entity CurveElementIntervalConstant
 */
class StepFEA_CurveElementIntervalConstant extends StepFEA_CurveElementInterval {
}

/**
 * Representation of STEP entity CurveElementIntervalLinearlyVarying
 */
class StepFEA_CurveElementIntervalLinearlyVarying extends StepFEA_CurveElementInterval {
}

/**
 * Representation of STEP entity CurveElementLocation
 */
class StepFEA_CurveElementLocation extends Standard_Transient {
}

/**
 * Representation of STEP SELECT type DegreeOfFreedom
 */
class StepFEA_DegreeOfFreedom extends StepData_SelectType {
}

/**
 * Representation of member for STEP SELECT type CurveElementFreedom
 */
class StepFEA_DegreeOfFreedomMember extends StepData_SelectNamed {
}

/**
 * Representation of STEP entity DummyNode
 */
class StepFEA_DummyNode extends StepFEA_NodeRepresentation {
}

/**
 * Representation of STEP entity ElementGeometricRelationship
 */
class StepFEA_ElementGeometricRelationship extends Standard_Transient {
}

/**
 * Representation of STEP entity ElementGroup
 */
class StepFEA_ElementGroup extends StepFEA_FeaGroup {
}

/**
 * Representation of STEP SELECT type ElementOrElementGroup
 */
class StepFEA_ElementOrElementGroup extends StepData_SelectType {
}

/**
 * Representation of STEP entity ElementRepresentation
 */
class StepFEA_ElementRepresentation extends StepRepr_Representation {
}

/**
 * Representation of STEP entity FeaAreaDensity
 */
class StepFEA_FeaAreaDensity extends StepFEA_FeaMaterialPropertyRepresentationItem {
}

/**
 * Representation of STEP entity FeaAxis2Placement3d
 */
class StepFEA_FeaAxis2Placement3d extends StepGeom_Axis2Placement3d {
}

/**
 * Representation of STEP entity FeaCurveSectionGeometricRelationship
 */
class StepFEA_FeaCurveSectionGeometricRelationship extends Standard_Transient {
}

/**
 * Representation of STEP entity FeaGroup
 */
class StepFEA_FeaGroup extends StepBasic_Group {
}

/**
 * Representation of STEP entity FeaLinearElasticity
 */
class StepFEA_FeaLinearElasticity extends StepFEA_FeaMaterialPropertyRepresentationItem {
}

/**
 * Representation of STEP entity FeaMassDensity
 */
class StepFEA_FeaMassDensity extends StepFEA_FeaMaterialPropertyRepresentationItem {
}

/**
 * Representation of STEP entity FeaMaterialPropertyRepresentation
 */
class StepFEA_FeaMaterialPropertyRepresentation extends StepRepr_MaterialPropertyRepresentation {
}

/**
 * Representation of STEP entity FeaMaterialPropertyRepresentationItem
 */
class StepFEA_FeaMaterialPropertyRepresentationItem extends StepRepr_RepresentationItem {
}

/**
 * Representation of STEP entity FeaModel
 */
class StepFEA_FeaModel extends StepRepr_Representation {
}

/**
 * Representation of STEP entity FeaModel3d
 */
class StepFEA_FeaModel3d extends StepFEA_FeaModel {
}

/**
 * Representation of STEP entity FeaModelDefinition
 */
class StepFEA_FeaModelDefinition extends StepRepr_ShapeAspect {
}

/**
 * Representation of STEP entity FeaMoistureAbsorption
 */
class StepFEA_FeaMoistureAbsorption extends StepFEA_FeaMaterialPropertyRepresentationItem {
}

/**
 * Representation of STEP entity FeaParametricPoint
 */
class StepFEA_FeaParametricPoint extends StepGeom_Point {
}

/**
 * Representation of STEP entity FeaRepresentationItem
 */
class StepFEA_FeaRepresentationItem extends StepRepr_RepresentationItem {
}

/**
 * Representation of STEP entity FeaSecantCoefficientOfLinearThermalExpansion
 */
class StepFEA_FeaSecantCoefficientOfLinearThermalExpansion extends StepFEA_FeaMaterialPropertyRepresentationItem {
}

/**
 * Representation of STEP entity FeaShellBendingStiffness
 */
class StepFEA_FeaShellBendingStiffness extends StepFEA_FeaMaterialPropertyRepresentationItem {
}

/**
 * Representation of STEP entity FeaShellMembraneBendingCouplingStiffness
 */
class StepFEA_FeaShellMembraneBendingCouplingStiffness extends StepFEA_FeaMaterialPropertyRepresentationItem {
}

/**
 * Representation of STEP entity FeaShellMembraneStiffness
 */
class StepFEA_FeaShellMembraneStiffness extends StepFEA_FeaMaterialPropertyRepresentationItem {
}

/**
 * Representation of STEP entity FeaShellShearStiffness
 */
class StepFEA_FeaShellShearStiffness extends StepFEA_FeaMaterialPropertyRepresentationItem {
}

/**
 * Representation of STEP entity FeaSurfaceSectionGeometricRelationship
 */
class StepFEA_FeaSurfaceSectionGeometricRelationship extends Standard_Transient {
}

/**
 * Representation of STEP entity FeaTangentialCoefficientOfLinearThermalExpansion
 */
class StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion extends StepFEA_FeaMaterialPropertyRepresentationItem {
}

/**
 * Representation of STEP entity FreedomAndCoefficient
 */
class StepFEA_FreedomAndCoefficient extends Standard_Transient {
}

/**
 * Representation of STEP entity FreedomsList
 */
class StepFEA_FreedomsList extends Standard_Transient {
}

/**
 * Representation of STEP entity GeometricNode
 */
class StepFEA_GeometricNode extends StepFEA_NodeRepresentation {
}

class StepFEA_HArray1OfCurveElementEndOffset extends Standard_Transient {
}

class StepFEA_HArray1OfCurveElementEndOffset_1 extends StepFEA_HArray1OfCurveElementEndOffset {}

class StepFEA_HArray1OfCurveElementEndOffset_2 extends StepFEA_HArray1OfCurveElementEndOffset {}

class StepFEA_HArray1OfCurveElementEndOffset_3 extends StepFEA_HArray1OfCurveElementEndOffset {}

class StepFEA_HArray1OfCurveElementEndOffset_4 extends StepFEA_HArray1OfCurveElementEndOffset {}

class StepFEA_HArray1OfCurveElementEndRelease extends Standard_Transient {
}

class StepFEA_HArray1OfCurveElementEndRelease_1 extends StepFEA_HArray1OfCurveElementEndRelease {}

class StepFEA_HArray1OfCurveElementEndRelease_2 extends StepFEA_HArray1OfCurveElementEndRelease {}

class StepFEA_HArray1OfCurveElementEndRelease_3 extends StepFEA_HArray1OfCurveElementEndRelease {}

class StepFEA_HArray1OfCurveElementEndRelease_4 extends StepFEA_HArray1OfCurveElementEndRelease {}

class StepFEA_HArray1OfCurveElementInterval extends Standard_Transient {
}

class StepFEA_HArray1OfCurveElementInterval_1 extends StepFEA_HArray1OfCurveElementInterval {}

class StepFEA_HArray1OfCurveElementInterval_2 extends StepFEA_HArray1OfCurveElementInterval {}

class StepFEA_HArray1OfCurveElementInterval_3 extends StepFEA_HArray1OfCurveElementInterval {}

class StepFEA_HArray1OfCurveElementInterval_4 extends StepFEA_HArray1OfCurveElementInterval {}

class StepFEA_HArray1OfDegreeOfFreedom extends Standard_Transient {
}

class StepFEA_HArray1OfDegreeOfFreedom_1 extends StepFEA_HArray1OfDegreeOfFreedom {}

class StepFEA_HArray1OfDegreeOfFreedom_2 extends StepFEA_HArray1OfDegreeOfFreedom {}

class StepFEA_HArray1OfDegreeOfFreedom_3 extends StepFEA_HArray1OfDegreeOfFreedom {}

class StepFEA_HArray1OfDegreeOfFreedom_4 extends StepFEA_HArray1OfDegreeOfFreedom {}

class StepFEA_HArray1OfElementRepresentation extends Standard_Transient {
}

class StepFEA_HArray1OfElementRepresentation_1 extends StepFEA_HArray1OfElementRepresentation {}

class StepFEA_HArray1OfElementRepresentation_2 extends StepFEA_HArray1OfElementRepresentation {}

class StepFEA_HArray1OfElementRepresentation_3 extends StepFEA_HArray1OfElementRepresentation {}

class StepFEA_HArray1OfElementRepresentation_4 extends StepFEA_HArray1OfElementRepresentation {}

class StepFEA_HArray1OfNodeRepresentation extends Standard_Transient {
}

class StepFEA_HArray1OfNodeRepresentation_1 extends StepFEA_HArray1OfNodeRepresentation {}

class StepFEA_HArray1OfNodeRepresentation_2 extends StepFEA_HArray1OfNodeRepresentation {}

class StepFEA_HArray1OfNodeRepresentation_3 extends StepFEA_HArray1OfNodeRepresentation {}

class StepFEA_HArray1OfNodeRepresentation_4 extends StepFEA_HArray1OfNodeRepresentation {}

class StepFEA_HSequenceOfCurve3dElementProperty extends Standard_Transient {
}

class StepFEA_HSequenceOfCurve3dElementProperty_1 extends StepFEA_HSequenceOfCurve3dElementProperty {}

class StepFEA_HSequenceOfCurve3dElementProperty_2 extends StepFEA_HSequenceOfCurve3dElementProperty {}

class StepFEA_HSequenceOfElementGeometricRelationship extends Standard_Transient {
}

class StepFEA_HSequenceOfElementGeometricRelationship_1 extends StepFEA_HSequenceOfElementGeometricRelationship {}

class StepFEA_HSequenceOfElementGeometricRelationship_2 extends StepFEA_HSequenceOfElementGeometricRelationship {}

class StepFEA_HSequenceOfElementRepresentation extends Standard_Transient {
}

class StepFEA_HSequenceOfElementRepresentation_1 extends StepFEA_HSequenceOfElementRepresentation {}

class StepFEA_HSequenceOfElementRepresentation_2 extends StepFEA_HSequenceOfElementRepresentation {}

class StepFEA_HSequenceOfNodeRepresentation extends Standard_Transient {
}

class StepFEA_HSequenceOfNodeRepresentation_1 extends StepFEA_HSequenceOfNodeRepresentation {}

class StepFEA_HSequenceOfNodeRepresentation_2 extends StepFEA_HSequenceOfNodeRepresentation {}

/**
 * Representation of STEP entity Node
 */
class StepFEA_Node extends StepFEA_NodeRepresentation {
}

/**
 * Representation of STEP entity NodeDefinition
 */
class StepFEA_NodeDefinition extends StepRepr_ShapeAspect {
}

/**
 * Representation of STEP entity NodeGroup
 */
class StepFEA_NodeGroup extends StepFEA_FeaGroup {
}

/**
 * Representation of STEP entity NodeRepresentation
 */
class StepFEA_NodeRepresentation extends StepRepr_Representation {
}

/**
 * Representation of STEP entity NodeSet
 */
class StepFEA_NodeSet extends StepGeom_GeometricRepresentationItem {
}

/**
 * Representation of STEP entity NodeWithSolutionCoordinateSystem
 */
class StepFEA_NodeWithSolutionCoordinateSystem extends StepFEA_Node {
}

/**
 * Representation of STEP entity NodeWithVector
 */
class StepFEA_NodeWithVector extends StepFEA_Node {
}

/**
 * Representation of STEP entity ParametricCurve3dElementCoordinateDirection
 */
class StepFEA_ParametricCurve3dElementCoordinateDirection extends StepFEA_FeaRepresentationItem {
}

/**
 * Representation of STEP entity ParametricCurve3dElementCoordinateSystem
 */
class StepFEA_ParametricCurve3dElementCoordinateSystem extends StepFEA_FeaRepresentationItem {
}

/**
 * Representation of STEP entity ParametricSurface3dElementCoordinateSystem
 */
class StepFEA_ParametricSurface3dElementCoordinateSystem extends StepFEA_FeaRepresentationItem {
}

/**
 * Representation of STEP entity Surface3dElementRepresentation
 */
class StepFEA_Surface3dElementRepresentation extends StepFEA_ElementRepresentation {
}

/**
 * Representation of STEP SELECT type SymmetricTensor22d
 */
class StepFEA_SymmetricTensor22d extends StepData_SelectType {
}

/**
 * Representation of STEP SELECT type SymmetricTensor23d
 */
class StepFEA_SymmetricTensor23d extends StepData_SelectType {
}

/**
 * Representation of member for STEP SELECT type SymmetricTensor23d
 */
class StepFEA_SymmetricTensor23dMember extends StepData_SelectArrReal {
}

/**
 * Representation of STEP SELECT type SymmetricTensor42d
 */
class StepFEA_SymmetricTensor42d extends StepData_SelectType {
}

/**
 * Representation of member for STEP SELECT type SymmetricTensor43d
 */
class StepFEA_SymmetricTensor43dMember extends StepData_SelectArrReal {
}

/**
 * Representation of STEP entity Volume3dElementRepresentation
 */
class StepFEA_Volume3dElementRepresentation extends StepFEA_ElementRepresentation {
}

class StepGeom_Axis1Placement extends StepGeom_Placement {
}

class StepGeom_Axis2Placement extends StepData_SelectType {
}

class StepGeom_Axis2Placement2d extends StepGeom_Placement {
}

class StepGeom_Axis2Placement3d extends StepGeom_Placement {
}

class StepGeom_BSplineCurve extends StepGeom_BoundedCurve {
}

class StepGeom_BSplineCurveWithKnots extends StepGeom_BSplineCurve {
}

class StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve extends StepGeom_BSplineCurve {
}

class StepGeom_BSplineSurface extends StepGeom_BoundedSurface {
}

class StepGeom_BSplineSurfaceWithKnots extends StepGeom_BSplineSurface {
}

class StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface extends StepGeom_BSplineSurface {
}

class StepGeom_BezierCurve extends StepGeom_BSplineCurve {
}

class StepGeom_BezierCurveAndRationalBSplineCurve extends StepGeom_BSplineCurve {
}

class StepGeom_BezierSurface extends StepGeom_BSplineSurface {
}

class StepGeom_BezierSurfaceAndRationalBSplineSurface extends StepGeom_BSplineSurface {
}

class StepGeom_BoundaryCurve extends StepGeom_CompositeCurveOnSurface {
}

class StepGeom_BoundedCurve extends StepGeom_Curve {
}

class StepGeom_BoundedSurface extends StepGeom_Surface {
}

class StepGeom_CartesianPoint extends StepGeom_Point {
}

class StepGeom_CartesianTransformationOperator extends StepGeom_GeometricRepresentationItem {
}

/**
 * Added from StepGeom Rev2 to Rev4
 */
class StepGeom_CartesianTransformationOperator2d extends StepGeom_CartesianTransformationOperator {
}

class StepGeom_CartesianTransformationOperator3d extends StepGeom_CartesianTransformationOperator {
}

class StepGeom_Circle extends StepGeom_Conic {
}

class StepGeom_CompositeCurve extends StepGeom_BoundedCurve {
}

class StepGeom_CompositeCurveOnSurface extends StepGeom_CompositeCurve {
}

class StepGeom_CompositeCurveSegment extends Standard_Transient {
}

class StepGeom_Conic extends StepGeom_Curve {
}

class StepGeom_ConicalSurface extends StepGeom_ElementarySurface {
}

class StepGeom_Curve extends StepGeom_GeometricRepresentationItem {
}

/**
 * Representation of STEP entity CurveBoundedSurface
 */
class StepGeom_CurveBoundedSurface extends StepGeom_BoundedSurface {
}

class StepGeom_CurveOnSurface extends StepData_SelectType {
}

class StepGeom_CurveReplica extends StepGeom_Curve {
}

class StepGeom_CylindricalSurface extends StepGeom_ElementarySurface {
}

class StepGeom_DegeneratePcurve extends StepGeom_Point {
}

class StepGeom_DegenerateToroidalSurface extends StepGeom_ToroidalSurface {
}

class StepGeom_Direction extends StepGeom_GeometricRepresentationItem {
}

class StepGeom_ElementarySurface extends StepGeom_Surface {
}

class StepGeom_Ellipse extends StepGeom_Conic {
}

class StepGeom_EvaluatedDegeneratePcurve extends StepGeom_DegeneratePcurve {
}

class StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx extends StepRepr_RepresentationContext {
}

class StepGeom_GeometricRepresentationContext extends StepRepr_RepresentationContext {
}

class StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext extends StepRepr_RepresentationContext {
}

class StepGeom_GeometricRepresentationContextAndParametricRepresentationContext extends StepRepr_RepresentationContext {
}

class StepGeom_GeometricRepresentationItem extends StepRepr_RepresentationItem {
}

class StepGeom_HArray1OfBoundaryCurve extends Standard_Transient {
}

class StepGeom_HArray1OfBoundaryCurve_1 extends StepGeom_HArray1OfBoundaryCurve {}

class StepGeom_HArray1OfBoundaryCurve_2 extends StepGeom_HArray1OfBoundaryCurve {}

class StepGeom_HArray1OfBoundaryCurve_3 extends StepGeom_HArray1OfBoundaryCurve {}

class StepGeom_HArray1OfBoundaryCurve_4 extends StepGeom_HArray1OfBoundaryCurve {}

class StepGeom_HArray1OfCartesianPoint extends Standard_Transient {
}

class StepGeom_HArray1OfCartesianPoint_1 extends StepGeom_HArray1OfCartesianPoint {}

class StepGeom_HArray1OfCartesianPoint_2 extends StepGeom_HArray1OfCartesianPoint {}

class StepGeom_HArray1OfCartesianPoint_3 extends StepGeom_HArray1OfCartesianPoint {}

class StepGeom_HArray1OfCartesianPoint_4 extends StepGeom_HArray1OfCartesianPoint {}

class StepGeom_HArray1OfCompositeCurveSegment extends Standard_Transient {
}

class StepGeom_HArray1OfCompositeCurveSegment_1 extends StepGeom_HArray1OfCompositeCurveSegment {}

class StepGeom_HArray1OfCompositeCurveSegment_2 extends StepGeom_HArray1OfCompositeCurveSegment {}

class StepGeom_HArray1OfCompositeCurveSegment_3 extends StepGeom_HArray1OfCompositeCurveSegment {}

class StepGeom_HArray1OfCompositeCurveSegment_4 extends StepGeom_HArray1OfCompositeCurveSegment {}

class StepGeom_HArray1OfCurve extends Standard_Transient {
}

class StepGeom_HArray1OfCurve_1 extends StepGeom_HArray1OfCurve {}

class StepGeom_HArray1OfCurve_2 extends StepGeom_HArray1OfCurve {}

class StepGeom_HArray1OfCurve_3 extends StepGeom_HArray1OfCurve {}

class StepGeom_HArray1OfCurve_4 extends StepGeom_HArray1OfCurve {}

class StepGeom_HArray1OfPcurveOrSurface extends Standard_Transient {
}

class StepGeom_HArray1OfPcurveOrSurface_1 extends StepGeom_HArray1OfPcurveOrSurface {}

class StepGeom_HArray1OfPcurveOrSurface_2 extends StepGeom_HArray1OfPcurveOrSurface {}

class StepGeom_HArray1OfPcurveOrSurface_3 extends StepGeom_HArray1OfPcurveOrSurface {}

class StepGeom_HArray1OfPcurveOrSurface_4 extends StepGeom_HArray1OfPcurveOrSurface {}

class StepGeom_HArray1OfSurfaceBoundary extends Standard_Transient {
}

class StepGeom_HArray1OfSurfaceBoundary_1 extends StepGeom_HArray1OfSurfaceBoundary {}

class StepGeom_HArray1OfSurfaceBoundary_2 extends StepGeom_HArray1OfSurfaceBoundary {}

class StepGeom_HArray1OfSurfaceBoundary_3 extends StepGeom_HArray1OfSurfaceBoundary {}

class StepGeom_HArray1OfSurfaceBoundary_4 extends StepGeom_HArray1OfSurfaceBoundary {}

class StepGeom_HArray1OfTrimmingSelect extends Standard_Transient {
}

class StepGeom_HArray1OfTrimmingSelect_1 extends StepGeom_HArray1OfTrimmingSelect {}

class StepGeom_HArray1OfTrimmingSelect_2 extends StepGeom_HArray1OfTrimmingSelect {}

class StepGeom_HArray1OfTrimmingSelect_3 extends StepGeom_HArray1OfTrimmingSelect {}

class StepGeom_HArray1OfTrimmingSelect_4 extends StepGeom_HArray1OfTrimmingSelect {}

class StepGeom_HArray2OfCartesianPoint extends Standard_Transient {
}

class StepGeom_HArray2OfCartesianPoint_1 extends StepGeom_HArray2OfCartesianPoint {}

class StepGeom_HArray2OfCartesianPoint_2 extends StepGeom_HArray2OfCartesianPoint {}

class StepGeom_HArray2OfCartesianPoint_3 extends StepGeom_HArray2OfCartesianPoint {}

class StepGeom_HArray2OfSurfacePatch extends Standard_Transient {
}

class StepGeom_HArray2OfSurfacePatch_1 extends StepGeom_HArray2OfSurfacePatch {}

class StepGeom_HArray2OfSurfacePatch_2 extends StepGeom_HArray2OfSurfacePatch {}

class StepGeom_HArray2OfSurfacePatch_3 extends StepGeom_HArray2OfSurfacePatch {}

class StepGeom_Hyperbola extends StepGeom_Conic {
}

class StepGeom_IntersectionCurve extends StepGeom_SurfaceCurve {
}

class StepGeom_Line extends StepGeom_Curve {
}

class StepGeom_OffsetCurve3d extends StepGeom_Curve {
}

class StepGeom_OffsetSurface extends StepGeom_Surface {
}

/**
 * Representation of STEP entity OrientedSurface
 */
class StepGeom_OrientedSurface extends StepGeom_Surface {
}

class StepGeom_OuterBoundaryCurve extends StepGeom_BoundaryCurve {
}

class StepGeom_Parabola extends StepGeom_Conic {
}

class StepGeom_Pcurve extends StepGeom_Curve {
}

class StepGeom_PcurveOrSurface extends StepData_SelectType {
}

class StepGeom_Placement extends StepGeom_GeometricRepresentationItem {
}

class StepGeom_Plane extends StepGeom_ElementarySurface {
}

class StepGeom_Point extends StepGeom_GeometricRepresentationItem {
}

class StepGeom_PointOnCurve extends StepGeom_Point {
}

class StepGeom_PointOnSurface extends StepGeom_Point {
}

class StepGeom_PointReplica extends StepGeom_Point {
}

class StepGeom_Polyline extends StepGeom_BoundedCurve {
}

class StepGeom_QuasiUniformCurve extends StepGeom_BSplineCurve {
}

class StepGeom_QuasiUniformCurveAndRationalBSplineCurve extends StepGeom_BSplineCurve {
}

class StepGeom_QuasiUniformSurface extends StepGeom_BSplineSurface {
}

class StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface extends StepGeom_BSplineSurface {
}

class StepGeom_RationalBSplineCurve extends StepGeom_BSplineCurve {
}

class StepGeom_RationalBSplineSurface extends StepGeom_BSplineSurface {
}

class StepGeom_RectangularCompositeSurface extends StepGeom_BoundedSurface {
}

class StepGeom_RectangularTrimmedSurface extends StepGeom_BoundedSurface {
}

class StepGeom_ReparametrisedCompositeCurveSegment extends StepGeom_CompositeCurveSegment {
}

class StepGeom_SeamCurve extends StepGeom_SurfaceCurve {
}

class StepGeom_SphericalSurface extends StepGeom_ElementarySurface {
}

class StepGeom_Surface extends StepGeom_GeometricRepresentationItem {
}

/**
 * Representation of STEP SELECT type SurfaceBoundary
 */
class StepGeom_SurfaceBoundary extends StepData_SelectType {
}

class StepGeom_SurfaceCurve extends StepGeom_Curve {
}

/**
 * complex type: bounded_curve + surface_curve needed for curve_bounded_surfaces (S4132)
 */
class StepGeom_SurfaceCurveAndBoundedCurve extends StepGeom_SurfaceCurve {
}

class StepGeom_SurfaceOfLinearExtrusion extends StepGeom_SweptSurface {
}

class StepGeom_SurfaceOfRevolution extends StepGeom_SweptSurface {
}

class StepGeom_SurfacePatch extends Standard_Transient {
}

class StepGeom_SurfaceReplica extends StepGeom_Surface {
}

class StepGeom_SweptSurface extends StepGeom_Surface {
}

class StepGeom_ToroidalSurface extends StepGeom_ElementarySurface {
}

class StepGeom_TrimmedCurve extends StepGeom_BoundedCurve {
}

/**
 * For immediate members of TrimmingSelect, i.e. : ParameterValue (a Real)
 */
class StepGeom_TrimmingMember extends StepData_SelectReal {
}

class StepGeom_TrimmingSelect extends StepData_SelectType {
}

class StepGeom_UniformCurve extends StepGeom_BSplineCurve {
}

class StepGeom_UniformCurveAndRationalBSplineCurve extends StepGeom_BSplineCurve {
}

class StepGeom_UniformSurface extends StepGeom_BSplineSurface {
}

class StepGeom_UniformSurfaceAndRationalBSplineSurface extends StepGeom_BSplineSurface {
}

class StepGeom_Vector extends StepGeom_GeometricRepresentationItem {
}

class StepGeom_VectorOrDirection extends StepData_SelectType {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_AllAroundShapeAspect extends StepRepr_ContinuosShapeAspect {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_Apex extends StepRepr_DerivedShapeAspect {
}

/**
 * Representation of STEP entity AssemblyComponentUsage
 */
class StepRepr_AssemblyComponentUsage extends StepRepr_ProductDefinitionUsage {
}

class StepRepr_AssemblyComponentUsageSubstitute extends Standard_Transient {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_BetweenShapeAspect extends StepRepr_ContinuosShapeAspect {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_CentreOfSymmetry extends StepRepr_DerivedShapeAspect {
}

/**
 * Representation of STEP SELECT type CharacterizedDefinition
 */
class StepRepr_CharacterizedDefinition extends StepData_SelectType {
}

class StepRepr_CharacterizedRepresentation extends StepRepr_Representation {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp extends StepRepr_CompShAspAndDatumFeatAndShAsp {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_CompShAspAndDatumFeatAndShAsp extends StepRepr_ShapeAspect {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_CompositeGroupShapeAspect extends StepRepr_CompositeShapeAspect {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_CompositeShapeAspect extends StepRepr_ShapeAspect {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_CompoundRepresentationItem extends StepRepr_RepresentationItem {
}

/**
 * Representation of STEP entity ConfigurationDesign
 */
class StepRepr_ConfigurationDesign extends Standard_Transient {
}

/**
 * Representation of STEP SELECT type ConfigurationDesignItem
 */
class StepRepr_ConfigurationDesignItem extends StepData_SelectType {
}

/**
 * Representation of STEP entity ConfigurationEffectivity
 */
class StepRepr_ConfigurationEffectivity extends StepBasic_ProductDefinitionEffectivity {
}

/**
 * Representation of STEP entity ConfigurationItem
 */
class StepRepr_ConfigurationItem extends Standard_Transient {
}

class StepRepr_ConstructiveGeometryRepresentation extends StepRepr_Representation {
}

class StepRepr_ConstructiveGeometryRepresentationRelationship extends StepRepr_RepresentationRelationship {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_ContinuosShapeAspect extends StepRepr_CompositeShapeAspect {
}

/**
 * Representation of STEP entity DataEnvironment
 */
class StepRepr_DataEnvironment extends Standard_Transient {
}

class StepRepr_DefinitionalRepresentation extends StepRepr_Representation {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_DerivedShapeAspect extends StepRepr_ShapeAspect {
}

class StepRepr_DescriptiveRepresentationItem extends StepRepr_RepresentationItem {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_Extension extends StepRepr_DerivedShapeAspect {
}

class StepRepr_ExternallyDefinedRepresentation extends StepRepr_Representation {
}

/**
 * Representation of STEP entity DimensionalLocation
 */
class StepRepr_FeatureForDatumTargetRelationship extends StepRepr_ShapeAspectRelationship {
}

class StepRepr_FunctionallyDefinedTransformation extends Standard_Transient {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_GeometricAlignment extends StepRepr_DerivedShapeAspect {
}

class StepRepr_GlobalUncertaintyAssignedContext extends StepRepr_RepresentationContext {
}

class StepRepr_GlobalUnitAssignedContext extends StepRepr_RepresentationContext {
}

class StepRepr_HArray1OfMaterialPropertyRepresentation extends Standard_Transient {
}

class StepRepr_HArray1OfMaterialPropertyRepresentation_1 extends StepRepr_HArray1OfMaterialPropertyRepresentation {}

class StepRepr_HArray1OfMaterialPropertyRepresentation_2 extends StepRepr_HArray1OfMaterialPropertyRepresentation {}

class StepRepr_HArray1OfMaterialPropertyRepresentation_3 extends StepRepr_HArray1OfMaterialPropertyRepresentation {}

class StepRepr_HArray1OfMaterialPropertyRepresentation_4 extends StepRepr_HArray1OfMaterialPropertyRepresentation {}

class StepRepr_HArray1OfPropertyDefinitionRepresentation extends Standard_Transient {
}

class StepRepr_HArray1OfPropertyDefinitionRepresentation_1 extends StepRepr_HArray1OfPropertyDefinitionRepresentation {}

class StepRepr_HArray1OfPropertyDefinitionRepresentation_2 extends StepRepr_HArray1OfPropertyDefinitionRepresentation {}

class StepRepr_HArray1OfPropertyDefinitionRepresentation_3 extends StepRepr_HArray1OfPropertyDefinitionRepresentation {}

class StepRepr_HArray1OfPropertyDefinitionRepresentation_4 extends StepRepr_HArray1OfPropertyDefinitionRepresentation {}

class StepRepr_HArray1OfRepresentationItem extends Standard_Transient {
}

class StepRepr_HArray1OfRepresentationItem_1 extends StepRepr_HArray1OfRepresentationItem {}

class StepRepr_HArray1OfRepresentationItem_2 extends StepRepr_HArray1OfRepresentationItem {}

class StepRepr_HArray1OfRepresentationItem_3 extends StepRepr_HArray1OfRepresentationItem {}

class StepRepr_HArray1OfRepresentationItem_4 extends StepRepr_HArray1OfRepresentationItem {}

class StepRepr_HArray1OfShapeAspect extends Standard_Transient {
}

class StepRepr_HArray1OfShapeAspect_1 extends StepRepr_HArray1OfShapeAspect {}

class StepRepr_HArray1OfShapeAspect_2 extends StepRepr_HArray1OfShapeAspect {}

class StepRepr_HArray1OfShapeAspect_3 extends StepRepr_HArray1OfShapeAspect {}

class StepRepr_HArray1OfShapeAspect_4 extends StepRepr_HArray1OfShapeAspect {}

class StepRepr_HSequenceOfMaterialPropertyRepresentation extends Standard_Transient {
}

class StepRepr_HSequenceOfMaterialPropertyRepresentation_1 extends StepRepr_HSequenceOfMaterialPropertyRepresentation {}

class StepRepr_HSequenceOfMaterialPropertyRepresentation_2 extends StepRepr_HSequenceOfMaterialPropertyRepresentation {}

class StepRepr_HSequenceOfRepresentationItem extends Standard_Transient {
}

class StepRepr_HSequenceOfRepresentationItem_1 extends StepRepr_HSequenceOfRepresentationItem {}

class StepRepr_HSequenceOfRepresentationItem_2 extends StepRepr_HSequenceOfRepresentationItem {}

class StepRepr_IntegerRepresentationItem extends StepRepr_RepresentationItem {
}

/**
 * Added from StepRepr Rev2 to Rev4
 */
class StepRepr_ItemDefinedTransformation extends Standard_Transient {
}

/**
 * Representation of STEP entity MakeFromUsageOption
 */
class StepRepr_MakeFromUsageOption extends StepRepr_ProductDefinitionUsage {
}

class StepRepr_MappedItem extends StepRepr_RepresentationItem {
}

class StepRepr_MaterialDesignation extends Standard_Transient {
}

/**
 * Representation of STEP entity MaterialProperty
 */
class StepRepr_MaterialProperty extends StepRepr_PropertyDefinition {
}

/**
 * Representation of STEP entity MaterialPropertyRepresentation
 */
class StepRepr_MaterialPropertyRepresentation extends StepRepr_PropertyDefinitionRepresentation {
}

/**
 * Implements a measure_representation_item entity which is used for storing validation properties (e.g. area) for shapes
 */
class StepRepr_MeasureRepresentationItem extends StepRepr_RepresentationItem {
}

/**
 * Representation of STEP entity NextAssemblyUsageOccurrence
 */
class StepRepr_NextAssemblyUsageOccurrence extends StepRepr_AssemblyComponentUsage {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_ParallelOffset extends StepRepr_DerivedShapeAspect {
}

class StepRepr_ParametricRepresentationContext extends StepRepr_RepresentationContext {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_PerpendicularTo extends StepRepr_DerivedShapeAspect {
}

/**
 * Representation of STEP entity ProductConcept
 */
class StepRepr_ProductConcept extends Standard_Transient {
}

/**
 * Representation of STEP entity ProductDefinitionShape
 */
class StepRepr_ProductDefinitionShape extends StepRepr_PropertyDefinition {
}

/**
 * Representation of STEP entity ProductDefinitionUsage
 */
class StepRepr_ProductDefinitionUsage extends StepBasic_ProductDefinitionRelationship {
}

class StepRepr_PromissoryUsageOccurrence extends StepRepr_AssemblyComponentUsage {
}

/**
 * Representation of STEP entity PropertyDefinition
 */
class StepRepr_PropertyDefinition extends Standard_Transient {
}

/**
 * Representation of STEP entity PropertyDefinitionRelationship
 */
class StepRepr_PropertyDefinitionRelationship extends Standard_Transient {
}

/**
 * Representation of STEP entity PropertyDefinitionRepresentation
 */
class StepRepr_PropertyDefinitionRepresentation extends Standard_Transient {
}

/**
 * Representation of STEP entity QuantifiedAssemblyComponentUsage
 */
class StepRepr_QuantifiedAssemblyComponentUsage extends StepRepr_AssemblyComponentUsage {
}

class StepRepr_ReprItemAndLengthMeasureWithUnit extends StepRepr_ReprItemAndMeasureWithUnit {
}

class StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI extends StepRepr_ReprItemAndMeasureWithUnitAndQRI {
}

/**
 * Base class for complex types (MEASURE_REPRESENTATION_ITEM, MEASURE_WITH_UNIT, REPRESENTATION_ITEM, LENGTH_MEASURE_WITH_UNIT/PLANE_ANGLE_MEASURE_WITH_UNIT).
 */
class StepRepr_ReprItemAndMeasureWithUnit extends StepRepr_RepresentationItem {
}

/**
 * Base class for complex types (MEASURE_REPRESENTATION_ITEM, MEASURE_WITH_UNIT, QUALIFIED_REPRESENTATION_ITEM REPRESENTATION_ITEM, LENGTH_MEASURE_WITH_UNIT/PLANE_ANGLE_MEASURE_WITH_UNIT).
 */
class StepRepr_ReprItemAndMeasureWithUnitAndQRI extends StepRepr_ReprItemAndMeasureWithUnit {
}

class StepRepr_ReprItemAndPlaneAngleMeasureWithUnit extends StepRepr_ReprItemAndMeasureWithUnit {
}

class StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI extends StepRepr_ReprItemAndMeasureWithUnitAndQRI {
}

class StepRepr_Representation extends Standard_Transient {
}

class StepRepr_RepresentationContext extends Standard_Transient {
}

class StepRepr_RepresentationItem extends Standard_Transient {
}

class StepRepr_RepresentationMap extends Standard_Transient {
}

class StepRepr_RepresentationRelationship extends Standard_Transient {
}

class StepRepr_RepresentationRelationshipWithTransformation extends StepRepr_ShapeRepresentationRelationship {
}

/**
 * Representation of STEP SELECT type RepresentedDefinition
 */
class StepRepr_RepresentedDefinition extends StepData_SelectType {
}

class StepRepr_ShapeAspect extends Standard_Transient {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_ShapeAspectDerivingRelationship extends StepRepr_ShapeAspectRelationship {
}

/**
 * Representation of STEP entity ShapeAspectRelationship
 */
class StepRepr_ShapeAspectRelationship extends Standard_Transient {
}

/**
 * Representation of STEP entity ShapeAspectTransition
 */
class StepRepr_ShapeAspectTransition extends StepRepr_ShapeAspectRelationship {
}

class StepRepr_ShapeDefinition extends StepData_SelectType {
}

class StepRepr_ShapeRepresentationRelationship extends StepRepr_RepresentationRelationship {
}

class StepRepr_ShapeRepresentationRelationshipWithTransformation extends StepRepr_RepresentationRelationshipWithTransformation {
}

/**
 * Representation of STEP entity SpecifiedHigherUsageOccurrence
 */
class StepRepr_SpecifiedHigherUsageOccurrence extends StepRepr_AssemblyComponentUsage {
}

/**
 * Representation of STEP entity StructuralResponseProperty
 */
class StepRepr_StructuralResponseProperty extends StepRepr_PropertyDefinition {
}

/**
 * Representation of STEP entity StructuralResponsePropertyDefinitionRepresentation
 */
class StepRepr_StructuralResponsePropertyDefinitionRepresentation extends StepRepr_PropertyDefinitionRepresentation {
}

class StepRepr_SuppliedPartRelationship extends StepBasic_ProductDefinitionRelationship {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_Tangent extends StepRepr_DerivedShapeAspect {
}

class StepRepr_Transformation extends StepData_SelectType {
}

/**
 * Added for Dimensional Tolerances
 */
class StepRepr_ValueRange extends StepRepr_CompoundRepresentationItem {
}

class StepRepr_ValueRepresentationItem extends StepRepr_RepresentationItem {
}

/**
 * Performs Actions specific to StepSelect, i.e. creation of Step Selections and Counters, plus dumping specific to Step
 */
class StepSelect_Activator extends IFSelect_Activator {
}

class StepSelect_FileModifier extends IFSelect_GeneralModifier {
}

/**
 * This class gives control out format for floatting values : ZeroSuppress or no, Main Format, Format in Range (for values around 1.), as StepWriter allows to manage it. Formats are given under C-printf form
 */
class StepSelect_FloatFormat extends StepSelect_FileModifier {
}

class StepSelect_ModelModifier extends IFSelect_Modifier {
}

/**
 * StepType is a Signature specific to Step definitions : it considers the type as defined in STEP Schemas, the same which is used in files. For a Complex Type, if its definition is known, StepType produces the list of basic types, separated by commas, the whole between brackets : "(TYPE1,TYPE2..)". If its precise definition is not known (simply it is known as Complex, it can be recognised, but the list is produced at Write time only), StepType produces : "(..COMPLEX TYPE..)"
 */
class StepSelect_StepType extends IFSelect_Signature {
}

/**
 * Performs Read and Write a STEP File with a STEP Model Following the protocols, Copy may be implemented or not
 */
class StepSelect_WorkLibrary extends IFSelect_WorkLibrary {
}

class StepShape_AdvancedBrepShapeRepresentation extends StepShape_ShapeRepresentation {
}

class StepShape_AdvancedFace extends StepShape_FaceSurface {
}

/**
 * Representation of STEP entity AngularLocation
 */
class StepShape_AngularLocation extends StepShape_DimensionalLocation {
}

/**
 * Representation of STEP entity AngularSize
 */
class StepShape_AngularSize extends StepShape_DimensionalSize {
}

class StepShape_Block extends StepGeom_GeometricRepresentationItem {
}

class StepShape_BooleanOperand {
}

class StepShape_BooleanResult extends StepGeom_GeometricRepresentationItem {
}

class StepShape_BoxDomain extends Standard_Transient {
}

class StepShape_BoxedHalfSpace extends StepShape_HalfSpaceSolid {
}

class StepShape_BrepWithVoids extends StepShape_ManifoldSolidBrep {
}

class StepShape_ClosedShell extends StepShape_ConnectedFaceSet {
}

/**
 * Representation of STEP entity CompoundShapeRepresentation
 */
class StepShape_CompoundShapeRepresentation extends StepShape_ShapeRepresentation {
}

/**
 * Representation of STEP entity ConnectedEdgeSet
 */
class StepShape_ConnectedEdgeSet extends StepShape_TopologicalRepresentationItem {
}

class StepShape_ConnectedFaceSet extends StepShape_TopologicalRepresentationItem {
}

/**
 * Representation of STEP entity ConnectedFaceShapeRepresentation
 */
class StepShape_ConnectedFaceShapeRepresentation extends StepRepr_Representation {
}

/**
 * Representation of STEP entity ConnectedFaceSubSet
 */
class StepShape_ConnectedFaceSubSet extends StepShape_ConnectedFaceSet {
}

class StepShape_ContextDependentShapeRepresentation extends Standard_Transient {
}

class StepShape_CsgPrimitive extends StepData_SelectType {
}

class StepShape_CsgSelect {
}

class StepShape_CsgShapeRepresentation extends StepShape_ShapeRepresentation {
}

class StepShape_CsgSolid extends StepShape_SolidModel {
}

/**
 * Implements complex type (DEFINITIONAL_REPRESENTATION,REPRESENTATION,SHAPE_REPRESENTATION)
 */
class StepShape_DefinitionalRepresentationAndShapeRepresentation extends StepRepr_DefinitionalRepresentation {
}

/**
 * Representation of STEP SELECT type DimensionalCharacteristic
 */
class StepShape_DimensionalCharacteristic extends StepData_SelectType {
}

/**
 * Representation of STEP entity DimensionalCharacteristicRepresentation
 */
class StepShape_DimensionalCharacteristicRepresentation extends Standard_Transient {
}

/**
 * Representation of STEP entity DimensionalLocation
 */
class StepShape_DimensionalLocation extends StepRepr_ShapeAspectRelationship {
}

/**
 * Representation of STEP entity DimensionalLocationWithPath
 */
class StepShape_DimensionalLocationWithPath extends StepShape_DimensionalLocation {
}

/**
 * Representation of STEP entity DimensionalSize
 */
class StepShape_DimensionalSize extends Standard_Transient {
}

/**
 * Representation of STEP entity DimensionalSizeWithPath
 */
class StepShape_DimensionalSizeWithPath extends StepShape_DimensionalSize {
}

/**
 * Representation of STEP entity DirectedDimensionalLocation
 */
class StepShape_DirectedDimensionalLocation extends StepShape_DimensionalLocation {
}

class StepShape_Edge extends StepShape_TopologicalRepresentationItem {
}

/**
 * Representation of STEP entity EdgeBasedWireframeModel
 */
class StepShape_EdgeBasedWireframeModel extends StepGeom_GeometricRepresentationItem {
}

/**
 * Representation of STEP entity EdgeBasedWireframeShapeRepresentation
 */
class StepShape_EdgeBasedWireframeShapeRepresentation extends StepShape_ShapeRepresentation {
}

class StepShape_EdgeCurve extends StepShape_Edge {
}

class StepShape_EdgeLoop extends StepShape_Loop {
}

class StepShape_ExtrudedAreaSolid extends StepShape_SweptAreaSolid {
}

class StepShape_ExtrudedFaceSolid extends StepShape_SweptFaceSolid {
}

class StepShape_Face extends StepShape_TopologicalRepresentationItem {
}

/**
 * Representation of STEP entity FaceBasedSurfaceModel
 */
class StepShape_FaceBasedSurfaceModel extends StepGeom_GeometricRepresentationItem {
}

class StepShape_FaceBound extends StepShape_TopologicalRepresentationItem {
}

class StepShape_FaceOuterBound extends StepShape_FaceBound {
}

class StepShape_FaceSurface extends StepShape_Face {
}

class StepShape_FacetedBrep extends StepShape_ManifoldSolidBrep {
}

class StepShape_FacetedBrepAndBrepWithVoids extends StepShape_ManifoldSolidBrep {
}

class StepShape_FacetedBrepShapeRepresentation extends StepShape_ShapeRepresentation {
}

class StepShape_GeometricCurveSet extends StepShape_GeometricSet {
}

class StepShape_GeometricSet extends StepGeom_GeometricRepresentationItem {
}

class StepShape_GeometricSetSelect extends StepData_SelectType {
}

class StepShape_GeometricallyBoundedSurfaceShapeRepresentation extends StepShape_ShapeRepresentation {
}

class StepShape_GeometricallyBoundedWireframeShapeRepresentation extends StepShape_ShapeRepresentation {
}

class StepShape_HArray1OfConnectedEdgeSet extends Standard_Transient {
}

class StepShape_HArray1OfConnectedEdgeSet_1 extends StepShape_HArray1OfConnectedEdgeSet {}

class StepShape_HArray1OfConnectedEdgeSet_2 extends StepShape_HArray1OfConnectedEdgeSet {}

class StepShape_HArray1OfConnectedEdgeSet_3 extends StepShape_HArray1OfConnectedEdgeSet {}

class StepShape_HArray1OfConnectedEdgeSet_4 extends StepShape_HArray1OfConnectedEdgeSet {}

class StepShape_HArray1OfConnectedFaceSet extends Standard_Transient {
}

class StepShape_HArray1OfConnectedFaceSet_1 extends StepShape_HArray1OfConnectedFaceSet {}

class StepShape_HArray1OfConnectedFaceSet_2 extends StepShape_HArray1OfConnectedFaceSet {}

class StepShape_HArray1OfConnectedFaceSet_3 extends StepShape_HArray1OfConnectedFaceSet {}

class StepShape_HArray1OfConnectedFaceSet_4 extends StepShape_HArray1OfConnectedFaceSet {}

class StepShape_HArray1OfEdge extends Standard_Transient {
}

class StepShape_HArray1OfEdge_1 extends StepShape_HArray1OfEdge {}

class StepShape_HArray1OfEdge_2 extends StepShape_HArray1OfEdge {}

class StepShape_HArray1OfEdge_3 extends StepShape_HArray1OfEdge {}

class StepShape_HArray1OfEdge_4 extends StepShape_HArray1OfEdge {}

class StepShape_HArray1OfFace extends Standard_Transient {
}

class StepShape_HArray1OfFace_1 extends StepShape_HArray1OfFace {}

class StepShape_HArray1OfFace_2 extends StepShape_HArray1OfFace {}

class StepShape_HArray1OfFace_3 extends StepShape_HArray1OfFace {}

class StepShape_HArray1OfFace_4 extends StepShape_HArray1OfFace {}

class StepShape_HArray1OfFaceBound extends Standard_Transient {
}

class StepShape_HArray1OfFaceBound_1 extends StepShape_HArray1OfFaceBound {}

class StepShape_HArray1OfFaceBound_2 extends StepShape_HArray1OfFaceBound {}

class StepShape_HArray1OfFaceBound_3 extends StepShape_HArray1OfFaceBound {}

class StepShape_HArray1OfFaceBound_4 extends StepShape_HArray1OfFaceBound {}

class StepShape_HArray1OfGeometricSetSelect extends Standard_Transient {
}

class StepShape_HArray1OfGeometricSetSelect_1 extends StepShape_HArray1OfGeometricSetSelect {}

class StepShape_HArray1OfGeometricSetSelect_2 extends StepShape_HArray1OfGeometricSetSelect {}

class StepShape_HArray1OfGeometricSetSelect_3 extends StepShape_HArray1OfGeometricSetSelect {}

class StepShape_HArray1OfGeometricSetSelect_4 extends StepShape_HArray1OfGeometricSetSelect {}

class StepShape_HArray1OfOrientedClosedShell extends Standard_Transient {
}

class StepShape_HArray1OfOrientedClosedShell_1 extends StepShape_HArray1OfOrientedClosedShell {}

class StepShape_HArray1OfOrientedClosedShell_2 extends StepShape_HArray1OfOrientedClosedShell {}

class StepShape_HArray1OfOrientedClosedShell_3 extends StepShape_HArray1OfOrientedClosedShell {}

class StepShape_HArray1OfOrientedClosedShell_4 extends StepShape_HArray1OfOrientedClosedShell {}

class StepShape_HArray1OfOrientedEdge extends Standard_Transient {
}

class StepShape_HArray1OfOrientedEdge_1 extends StepShape_HArray1OfOrientedEdge {}

class StepShape_HArray1OfOrientedEdge_2 extends StepShape_HArray1OfOrientedEdge {}

class StepShape_HArray1OfOrientedEdge_3 extends StepShape_HArray1OfOrientedEdge {}

class StepShape_HArray1OfOrientedEdge_4 extends StepShape_HArray1OfOrientedEdge {}

class StepShape_HArray1OfShapeDimensionRepresentationItem extends Standard_Transient {
}

class StepShape_HArray1OfShapeDimensionRepresentationItem_1 extends StepShape_HArray1OfShapeDimensionRepresentationItem {}

class StepShape_HArray1OfShapeDimensionRepresentationItem_2 extends StepShape_HArray1OfShapeDimensionRepresentationItem {}

class StepShape_HArray1OfShapeDimensionRepresentationItem_3 extends StepShape_HArray1OfShapeDimensionRepresentationItem {}

class StepShape_HArray1OfShapeDimensionRepresentationItem_4 extends StepShape_HArray1OfShapeDimensionRepresentationItem {}

class StepShape_HArray1OfShell extends Standard_Transient {
}

class StepShape_HArray1OfShell_1 extends StepShape_HArray1OfShell {}

class StepShape_HArray1OfShell_2 extends StepShape_HArray1OfShell {}

class StepShape_HArray1OfShell_3 extends StepShape_HArray1OfShell {}

class StepShape_HArray1OfShell_4 extends StepShape_HArray1OfShell {}

class StepShape_HArray1OfValueQualifier extends Standard_Transient {
}

class StepShape_HArray1OfValueQualifier_1 extends StepShape_HArray1OfValueQualifier {}

class StepShape_HArray1OfValueQualifier_2 extends StepShape_HArray1OfValueQualifier {}

class StepShape_HArray1OfValueQualifier_3 extends StepShape_HArray1OfValueQualifier {}

class StepShape_HArray1OfValueQualifier_4 extends StepShape_HArray1OfValueQualifier {}

class StepShape_HalfSpaceSolid extends StepGeom_GeometricRepresentationItem {
}

/**
 * Added for Dimensional Tolerances
 */
class StepShape_LimitsAndFits extends Standard_Transient {
}

class StepShape_Loop extends StepShape_TopologicalRepresentationItem {
}

class StepShape_LoopAndPath extends StepShape_TopologicalRepresentationItem {
}

class StepShape_ManifoldSolidBrep extends StepShape_SolidModel {
}

class StepShape_ManifoldSurfaceShapeRepresentation extends StepShape_ShapeRepresentation {
}

/**
 * Added for Dimensional Tolerances
 */
class StepShape_MeasureQualification extends Standard_Transient {
}

/**
 * Added for Dimensional Tolerances Complex Type between MeasureRepresentationItem and QualifiedRepresentationItem
 */
class StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem extends StepRepr_RepresentationItem {
}

/**
 * Representation of STEP entity NonManifoldSurfaceShapeRepresentation
 */
class StepShape_NonManifoldSurfaceShapeRepresentation extends StepShape_ShapeRepresentation {
}

class StepShape_OpenShell extends StepShape_ConnectedFaceSet {
}

class StepShape_OrientedClosedShell extends StepShape_ClosedShell {
}

class StepShape_OrientedEdge extends StepShape_Edge {
}

class StepShape_OrientedFace extends StepShape_Face {
}

class StepShape_OrientedOpenShell extends StepShape_OpenShell {
}

class StepShape_OrientedPath extends StepShape_Path {
}

class StepShape_Path extends StepShape_TopologicalRepresentationItem {
}

/**
 * Added for Dimensional Tolerances
 */
class StepShape_PlusMinusTolerance extends Standard_Transient {
}

/**
 * Representation of STEP entity PointRepresentation
 */
class StepShape_PointRepresentation extends StepShape_ShapeRepresentation {
}

class StepShape_PolyLoop extends StepShape_Loop {
}

/**
 * Added for Dimensional Tolerances
 */
class StepShape_PrecisionQualifier extends Standard_Transient {
}

/**
 * Added for Dimensional Tolerances
 */
class StepShape_QualifiedRepresentationItem extends StepRepr_RepresentationItem {
}

class StepShape_ReversibleTopologyItem extends StepData_SelectType {
}

class StepShape_RevolvedAreaSolid extends StepShape_SweptAreaSolid {
}

class StepShape_RevolvedFaceSolid extends StepShape_SweptFaceSolid {
}

class StepShape_RightAngularWedge extends StepGeom_GeometricRepresentationItem {
}

class StepShape_RightCircularCone extends StepGeom_GeometricRepresentationItem {
}

class StepShape_RightCircularCylinder extends StepGeom_GeometricRepresentationItem {
}

/**
 * Representation of STEP entity SeamEdge
 */
class StepShape_SeamEdge extends StepShape_OrientedEdge {
}

/**
 * Representation of STEP entity ShapeDefinitionRepresentation
 */
class StepShape_ShapeDefinitionRepresentation extends StepRepr_PropertyDefinitionRepresentation {
}

/**
 * Representation of STEP entity ShapeDimensionRepresentation
 */
class StepShape_ShapeDimensionRepresentation extends StepShape_ShapeRepresentation {
}

class StepShape_ShapeDimensionRepresentationItem extends StepData_SelectType {
}

class StepShape_ShapeRepresentation extends StepRepr_Representation {
}

/**
 * Representation of STEP entity ShapeRepresentationWithParameters
 */
class StepShape_ShapeRepresentationWithParameters extends StepShape_ShapeRepresentation {
}

class StepShape_Shell extends StepData_SelectType {
}

class StepShape_ShellBasedSurfaceModel extends StepGeom_GeometricRepresentationItem {
}

class StepShape_SolidModel extends StepGeom_GeometricRepresentationItem {
}

class StepShape_SolidReplica extends StepShape_SolidModel {
}

class StepShape_Sphere extends StepGeom_GeometricRepresentationItem {
}

/**
 * Representation of STEP entity Subedge
 */
class StepShape_Subedge extends StepShape_Edge {
}

/**
 * Representation of STEP entity Subface
 */
class StepShape_Subface extends StepShape_Face {
}

class StepShape_SurfaceModel extends StepData_SelectType {
}

class StepShape_SweptAreaSolid extends StepShape_SolidModel {
}

class StepShape_SweptFaceSolid extends StepShape_SolidModel {
}

/**
 * Added for Dimensional Tolerances
 */
class StepShape_ToleranceMethodDefinition extends StepData_SelectType {
}

/**
 * Added for Dimensional Tolerances
 */
class StepShape_ToleranceValue extends Standard_Transient {
}

class StepShape_TopologicalRepresentationItem extends StepRepr_RepresentationItem {
}

class StepShape_Torus extends StepGeom_GeometricRepresentationItem {
}

class StepShape_TransitionalShapeRepresentation extends StepShape_ShapeRepresentation {
}

/**
 * Added for Dimensional Tolerances
 */
class StepShape_TypeQualifier extends Standard_Transient {
}

/**
 * Added for Dimensional Tolerances
 */
class StepShape_ValueFormatTypeQualifier extends Standard_Transient {
}

/**
 * Added for Dimensional Tolerances
 */
class StepShape_ValueQualifier extends StepData_SelectType {
}

class StepShape_Vertex extends StepShape_TopologicalRepresentationItem {
}

class StepShape_VertexLoop extends StepShape_Loop {
}

class StepShape_VertexPoint extends StepShape_Vertex {
}

/**
 * This class provides static methods to convert STEP geometric entities to OCCT. The methods returning handles will return null handle in case of error. The methods returning boolean will return True if succeeded and False if error.
 */
class StepToGeom {
}

/**
 * This package implements the mapping between AP214 Shape representation and CAS.CAD Shape Representation. The source schema is Part42 (which is included in AP214)
 */
class StepToTopoDS {
}

class StepToTopoDS_CartesianPointHasher {
}

/**
 * This class contains some algorithmic services specific to the mapping STEP to CAS.CADE
 */
class StepToTopoDS_GeometricTool {
}

/**
 * Produces instances by Transformation of a basic item
 */
class StepToTopoDS_MakeTransformed extends StepToTopoDS_Root {
}

/**
 * Provides data to process non-manifold topology when reading from STEP.
 */
class StepToTopoDS_NMTool {
}

class StepToTopoDS_NMTool_1 extends StepToTopoDS_NMTool {}

class StepToTopoDS_NMTool_2 extends StepToTopoDS_NMTool {}

/**
 * Stores a pair of Points from step
 */
class StepToTopoDS_PointPair {
}

class StepToTopoDS_PointPairHasher {
}

/**
 * This class implements the common services for all classes of StepToTopoDS which report error and sets and returns precision.
 */
class StepToTopoDS_Root {
}

/**
 * This Tool Class provides Information to build a Cas.Cad BRep from a ProSTEP Shape model.
 */
class StepToTopoDS_Tool {
}

class StepToTopoDS_Tool_1 extends StepToTopoDS_Tool {}

class StepToTopoDS_Tool_2 extends StepToTopoDS_Tool {}

/**
 * Translate STEP entity composite_curve to TopoDS_Wire If surface is given, the curve is assumed to lie on that surface and in case if any segment of it is a curve_on_surface, the pcurve for that segment will be taken. Note: a segment of composite_curve may be itself composite_curve. Only one-level protection against cyclic references is implemented.
 */
class StepToTopoDS_TranslateCompositeCurve extends StepToTopoDS_Root {
}

class StepToTopoDS_TranslateCompositeCurve_1 extends StepToTopoDS_TranslateCompositeCurve {}

class StepToTopoDS_TranslateCompositeCurve_2 extends StepToTopoDS_TranslateCompositeCurve {}

class StepToTopoDS_TranslateCompositeCurve_3 extends StepToTopoDS_TranslateCompositeCurve {}

/**
 * Translate curve_bounded_surface into TopoDS_Face
 */
class StepToTopoDS_TranslateCurveBoundedSurface extends StepToTopoDS_Root {
}

class StepToTopoDS_TranslateCurveBoundedSurface_1 extends StepToTopoDS_TranslateCurveBoundedSurface {}

class StepToTopoDS_TranslateCurveBoundedSurface_2 extends StepToTopoDS_TranslateCurveBoundedSurface {}

class StepToTopoDS_TranslateEdge extends StepToTopoDS_Root {
}

class StepToTopoDS_TranslateEdge_1 extends StepToTopoDS_TranslateEdge {}

class StepToTopoDS_TranslateEdge_2 extends StepToTopoDS_TranslateEdge {}

class StepToTopoDS_TranslateEdgeLoop extends StepToTopoDS_Root {
}

class StepToTopoDS_TranslateEdgeLoop_1 extends StepToTopoDS_TranslateEdgeLoop {}

class StepToTopoDS_TranslateEdgeLoop_2 extends StepToTopoDS_TranslateEdgeLoop {}

class StepToTopoDS_TranslateFace extends StepToTopoDS_Root {
}

class StepToTopoDS_TranslateFace_1 extends StepToTopoDS_TranslateFace {}

class StepToTopoDS_TranslateFace_2 extends StepToTopoDS_TranslateFace {}

class StepToTopoDS_TranslatePolyLoop extends StepToTopoDS_Root {
}

class StepToTopoDS_TranslatePolyLoop_1 extends StepToTopoDS_TranslatePolyLoop {}

class StepToTopoDS_TranslatePolyLoop_2 extends StepToTopoDS_TranslatePolyLoop {}

class StepToTopoDS_TranslateShell extends StepToTopoDS_Root {
}

class StepToTopoDS_TranslateShell_1 extends StepToTopoDS_TranslateShell {}

class StepToTopoDS_TranslateShell_2 extends StepToTopoDS_TranslateShell {}

class StepToTopoDS_TranslateVertex extends StepToTopoDS_Root {
}

class StepToTopoDS_TranslateVertex_1 extends StepToTopoDS_TranslateVertex {}

class StepToTopoDS_TranslateVertex_2 extends StepToTopoDS_TranslateVertex {}

class StepToTopoDS_TranslateVertexLoop extends StepToTopoDS_Root {
}

class StepToTopoDS_TranslateVertexLoop_1 extends StepToTopoDS_TranslateVertexLoop {}

class StepToTopoDS_TranslateVertexLoop_2 extends StepToTopoDS_TranslateVertexLoop {}

class StepVisual_AnnotationCurveOccurrence extends StepVisual_AnnotationOccurrence {
}

/**
 * Added for Dimensional Tolerances Complex STEP entity AnnotationCurveOccurrence & AnnotationOccurrence & GeometricRepresentationItem & RepresentationItem & StyledItem
 */
class StepVisual_AnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem extends StepVisual_AnnotationCurveOccurrence {
}

class StepVisual_AnnotationFillArea extends StepShape_GeometricCurveSet {
}

class StepVisual_AnnotationFillAreaOccurrence extends StepVisual_AnnotationOccurrence {
}

class StepVisual_AnnotationOccurrence extends StepVisual_StyledItem {
}

class StepVisual_AnnotationPlane extends StepVisual_AnnotationOccurrence {
}

class StepVisual_AnnotationPlaneElement extends StepData_SelectType {
}

class StepVisual_AnnotationText extends StepRepr_MappedItem {
}

class StepVisual_AnnotationTextOccurrence extends StepVisual_AnnotationOccurrence {
}

class StepVisual_AreaInSet extends Standard_Transient {
}

class StepVisual_AreaOrView extends StepData_SelectType {
}

class StepVisual_BackgroundColour extends StepVisual_Colour {
}

class StepVisual_BoxCharacteristicSelect {
}

class StepVisual_CameraImage extends StepRepr_MappedItem {
}

class StepVisual_CameraImage2dWithScale extends StepVisual_CameraImage {
}

class StepVisual_CameraImage3dWithScale extends StepVisual_CameraImage {
}

class StepVisual_CameraModel extends StepGeom_GeometricRepresentationItem {
}

class StepVisual_CameraModelD2 extends StepVisual_CameraModel {
}

class StepVisual_CameraModelD3 extends StepVisual_CameraModel {
}

class StepVisual_CameraModelD3MultiClipping extends StepVisual_CameraModelD3 {
}

class StepVisual_CameraModelD3MultiClippingInterectionSelect extends StepData_SelectType {
}

class StepVisual_CameraModelD3MultiClippingIntersection extends StepGeom_GeometricRepresentationItem {
}

class StepVisual_CameraModelD3MultiClippingUnion extends StepGeom_GeometricRepresentationItem {
}

class StepVisual_CameraModelD3MultiClippingUnionSelect extends StepData_SelectType {
}

class StepVisual_CameraUsage extends StepRepr_RepresentationMap {
}

/**
 * Added for Dimensional Tolerances Complex STEP entity Characterized_Object & Characterized_Representation & Draughting_Model & Representation
 */
class StepVisual_CharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation extends StepVisual_DraughtingModel {
}

class StepVisual_Colour extends Standard_Transient {
}

class StepVisual_ColourRgb extends StepVisual_ColourSpecification {
}

class StepVisual_ColourSpecification extends StepVisual_Colour {
}

class StepVisual_CompositeText extends StepGeom_GeometricRepresentationItem {
}

class StepVisual_CompositeTextWithExtent extends StepVisual_CompositeText {
}

class StepVisual_ContextDependentInvisibility extends StepVisual_Invisibility {
}

class StepVisual_ContextDependentOverRidingStyledItem extends StepVisual_OverRidingStyledItem {
}

class StepVisual_CoordinatesList extends StepVisual_TessellatedItem {
}

class StepVisual_CurveStyle extends Standard_Transient {
}

class StepVisual_CurveStyleFont extends Standard_Transient {
}

class StepVisual_CurveStyleFontPattern extends Standard_Transient {
}

class StepVisual_CurveStyleFontSelect extends StepData_SelectType {
}

class StepVisual_DirectionCountSelect {
}

class StepVisual_DraughtingAnnotationOccurrence extends StepVisual_AnnotationOccurrence {
}

class StepVisual_DraughtingCallout extends StepGeom_GeometricRepresentationItem {
}

class StepVisual_DraughtingCalloutElement extends StepData_SelectType {
}

/**
 * Representation of STEP entity DraughtingModel
 */
class StepVisual_DraughtingModel extends StepRepr_Representation {
}

class StepVisual_DraughtingPreDefinedColour extends StepVisual_PreDefinedColour {
}

class StepVisual_DraughtingPreDefinedCurveFont extends StepVisual_PreDefinedCurveFont {
}

/**
 * Representation of STEP entity ExternallyDefinedCurveFont
 */
class StepVisual_ExternallyDefinedCurveFont extends StepBasic_ExternallyDefinedItem {
}

/**
 * Representation of STEP entity ExternallyDefinedTextFont
 */
class StepVisual_ExternallyDefinedTextFont extends StepBasic_ExternallyDefinedItem {
}

class StepVisual_FillAreaStyle extends Standard_Transient {
}

class StepVisual_FillAreaStyleColour extends Standard_Transient {
}

class StepVisual_FillStyleSelect extends StepData_SelectType {
}

class StepVisual_FontSelect extends StepData_SelectType {
}

class StepVisual_HArray1OfAnnotationPlaneElement extends Standard_Transient {
}

class StepVisual_HArray1OfAnnotationPlaneElement_1 extends StepVisual_HArray1OfAnnotationPlaneElement {}

class StepVisual_HArray1OfAnnotationPlaneElement_2 extends StepVisual_HArray1OfAnnotationPlaneElement {}

class StepVisual_HArray1OfAnnotationPlaneElement_3 extends StepVisual_HArray1OfAnnotationPlaneElement {}

class StepVisual_HArray1OfAnnotationPlaneElement_4 extends StepVisual_HArray1OfAnnotationPlaneElement {}

class StepVisual_HArray1OfBoxCharacteristicSelect extends Standard_Transient {
}

class StepVisual_HArray1OfBoxCharacteristicSelect_1 extends StepVisual_HArray1OfBoxCharacteristicSelect {}

class StepVisual_HArray1OfBoxCharacteristicSelect_2 extends StepVisual_HArray1OfBoxCharacteristicSelect {}

class StepVisual_HArray1OfBoxCharacteristicSelect_3 extends StepVisual_HArray1OfBoxCharacteristicSelect {}

class StepVisual_HArray1OfBoxCharacteristicSelect_4 extends StepVisual_HArray1OfBoxCharacteristicSelect {}

class StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect extends Standard_Transient {
}

class StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_1 extends StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect {}

class StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_2 extends StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect {}

class StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_3 extends StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect {}

class StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_4 extends StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect {}

class StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect extends Standard_Transient {
}

class StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_1 extends StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect {}

class StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_2 extends StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect {}

class StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_3 extends StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect {}

class StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_4 extends StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect {}

class StepVisual_HArray1OfCurveStyleFontPattern extends Standard_Transient {
}

class StepVisual_HArray1OfCurveStyleFontPattern_1 extends StepVisual_HArray1OfCurveStyleFontPattern {}

class StepVisual_HArray1OfCurveStyleFontPattern_2 extends StepVisual_HArray1OfCurveStyleFontPattern {}

class StepVisual_HArray1OfCurveStyleFontPattern_3 extends StepVisual_HArray1OfCurveStyleFontPattern {}

class StepVisual_HArray1OfCurveStyleFontPattern_4 extends StepVisual_HArray1OfCurveStyleFontPattern {}

class StepVisual_HArray1OfDirectionCountSelect extends Standard_Transient {
}

class StepVisual_HArray1OfDirectionCountSelect_1 extends StepVisual_HArray1OfDirectionCountSelect {}

class StepVisual_HArray1OfDirectionCountSelect_2 extends StepVisual_HArray1OfDirectionCountSelect {}

class StepVisual_HArray1OfDirectionCountSelect_3 extends StepVisual_HArray1OfDirectionCountSelect {}

class StepVisual_HArray1OfDirectionCountSelect_4 extends StepVisual_HArray1OfDirectionCountSelect {}

class StepVisual_HArray1OfDraughtingCalloutElement extends Standard_Transient {
}

class StepVisual_HArray1OfDraughtingCalloutElement_1 extends StepVisual_HArray1OfDraughtingCalloutElement {}

class StepVisual_HArray1OfDraughtingCalloutElement_2 extends StepVisual_HArray1OfDraughtingCalloutElement {}

class StepVisual_HArray1OfDraughtingCalloutElement_3 extends StepVisual_HArray1OfDraughtingCalloutElement {}

class StepVisual_HArray1OfDraughtingCalloutElement_4 extends StepVisual_HArray1OfDraughtingCalloutElement {}

class StepVisual_HArray1OfFillStyleSelect extends Standard_Transient {
}

class StepVisual_HArray1OfFillStyleSelect_1 extends StepVisual_HArray1OfFillStyleSelect {}

class StepVisual_HArray1OfFillStyleSelect_2 extends StepVisual_HArray1OfFillStyleSelect {}

class StepVisual_HArray1OfFillStyleSelect_3 extends StepVisual_HArray1OfFillStyleSelect {}

class StepVisual_HArray1OfFillStyleSelect_4 extends StepVisual_HArray1OfFillStyleSelect {}

class StepVisual_HArray1OfInvisibleItem extends Standard_Transient {
}

class StepVisual_HArray1OfInvisibleItem_1 extends StepVisual_HArray1OfInvisibleItem {}

class StepVisual_HArray1OfInvisibleItem_2 extends StepVisual_HArray1OfInvisibleItem {}

class StepVisual_HArray1OfInvisibleItem_3 extends StepVisual_HArray1OfInvisibleItem {}

class StepVisual_HArray1OfInvisibleItem_4 extends StepVisual_HArray1OfInvisibleItem {}

class StepVisual_HArray1OfLayeredItem extends Standard_Transient {
}

class StepVisual_HArray1OfLayeredItem_1 extends StepVisual_HArray1OfLayeredItem {}

class StepVisual_HArray1OfLayeredItem_2 extends StepVisual_HArray1OfLayeredItem {}

class StepVisual_HArray1OfLayeredItem_3 extends StepVisual_HArray1OfLayeredItem {}

class StepVisual_HArray1OfLayeredItem_4 extends StepVisual_HArray1OfLayeredItem {}

class StepVisual_HArray1OfPresentationStyleAssignment extends Standard_Transient {
}

class StepVisual_HArray1OfPresentationStyleAssignment_1 extends StepVisual_HArray1OfPresentationStyleAssignment {}

class StepVisual_HArray1OfPresentationStyleAssignment_2 extends StepVisual_HArray1OfPresentationStyleAssignment {}

class StepVisual_HArray1OfPresentationStyleAssignment_3 extends StepVisual_HArray1OfPresentationStyleAssignment {}

class StepVisual_HArray1OfPresentationStyleAssignment_4 extends StepVisual_HArray1OfPresentationStyleAssignment {}

class StepVisual_HArray1OfPresentationStyleSelect extends Standard_Transient {
}

class StepVisual_HArray1OfPresentationStyleSelect_1 extends StepVisual_HArray1OfPresentationStyleSelect {}

class StepVisual_HArray1OfPresentationStyleSelect_2 extends StepVisual_HArray1OfPresentationStyleSelect {}

class StepVisual_HArray1OfPresentationStyleSelect_3 extends StepVisual_HArray1OfPresentationStyleSelect {}

class StepVisual_HArray1OfPresentationStyleSelect_4 extends StepVisual_HArray1OfPresentationStyleSelect {}

class StepVisual_HArray1OfStyleContextSelect extends Standard_Transient {
}

class StepVisual_HArray1OfStyleContextSelect_1 extends StepVisual_HArray1OfStyleContextSelect {}

class StepVisual_HArray1OfStyleContextSelect_2 extends StepVisual_HArray1OfStyleContextSelect {}

class StepVisual_HArray1OfStyleContextSelect_3 extends StepVisual_HArray1OfStyleContextSelect {}

class StepVisual_HArray1OfStyleContextSelect_4 extends StepVisual_HArray1OfStyleContextSelect {}

class StepVisual_HArray1OfSurfaceStyleElementSelect extends Standard_Transient {
}

class StepVisual_HArray1OfSurfaceStyleElementSelect_1 extends StepVisual_HArray1OfSurfaceStyleElementSelect {}

class StepVisual_HArray1OfSurfaceStyleElementSelect_2 extends StepVisual_HArray1OfSurfaceStyleElementSelect {}

class StepVisual_HArray1OfSurfaceStyleElementSelect_3 extends StepVisual_HArray1OfSurfaceStyleElementSelect {}

class StepVisual_HArray1OfSurfaceStyleElementSelect_4 extends StepVisual_HArray1OfSurfaceStyleElementSelect {}

class StepVisual_HArray1OfTextOrCharacter extends Standard_Transient {
}

class StepVisual_HArray1OfTextOrCharacter_1 extends StepVisual_HArray1OfTextOrCharacter {}

class StepVisual_HArray1OfTextOrCharacter_2 extends StepVisual_HArray1OfTextOrCharacter {}

class StepVisual_HArray1OfTextOrCharacter_3 extends StepVisual_HArray1OfTextOrCharacter {}

class StepVisual_HArray1OfTextOrCharacter_4 extends StepVisual_HArray1OfTextOrCharacter {}

class StepVisual_Invisibility extends Standard_Transient {
}

class StepVisual_InvisibilityContext extends StepData_SelectType {
}

class StepVisual_InvisibleItem extends StepData_SelectType {
}

class StepVisual_LayeredItem extends StepData_SelectType {
}

/**
 * Defines MarkerType as unique member of MarkerSelect Works with an EnumTool
 */
class StepVisual_MarkerMember extends StepData_SelectInt {
}

class StepVisual_MarkerSelect extends StepData_SelectType {
}

class StepVisual_MechanicalDesignGeometricPresentationArea extends StepVisual_PresentationArea {
}

class StepVisual_MechanicalDesignGeometricPresentationRepresentation extends StepVisual_PresentationRepresentation {
}

/**
 * Defines NullStyle as unique member of PresentationStyleSelect Works with an EnumTool
 */
class StepVisual_NullStyleMember extends StepData_SelectInt {
}

class StepVisual_OverRidingStyledItem extends StepVisual_StyledItem {
}

class StepVisual_PlanarBox extends StepVisual_PlanarExtent {
}

class StepVisual_PlanarExtent extends StepGeom_GeometricRepresentationItem {
}

class StepVisual_PointStyle extends Standard_Transient {
}

class StepVisual_PreDefinedColour extends StepVisual_Colour {
}

class StepVisual_PreDefinedCurveFont extends StepVisual_PreDefinedItem {
}

class StepVisual_PreDefinedItem extends Standard_Transient {
}

class StepVisual_PreDefinedTextFont extends StepVisual_PreDefinedItem {
}

class StepVisual_PresentationArea extends StepVisual_PresentationRepresentation {
}

class StepVisual_PresentationLayerAssignment extends Standard_Transient {
}

/**
 * Added from StepVisual Rev2 to Rev4
 */
class StepVisual_PresentationLayerUsage extends Standard_Transient {
}

class StepVisual_PresentationRepresentation extends StepRepr_Representation {
}

class StepVisual_PresentationRepresentationSelect extends StepData_SelectType {
}

class StepVisual_PresentationSet extends Standard_Transient {
}

class StepVisual_PresentationSize extends Standard_Transient {
}

class StepVisual_PresentationSizeAssignmentSelect extends StepData_SelectType {
}

class StepVisual_PresentationStyleAssignment extends Standard_Transient {
}

class StepVisual_PresentationStyleByContext extends StepVisual_PresentationStyleAssignment {
}

class StepVisual_PresentationStyleSelect extends StepData_SelectType {
}

class StepVisual_PresentationView extends StepVisual_PresentationRepresentation {
}

class StepVisual_PresentedItem extends Standard_Transient {
}

/**
 * Added from StepVisual Rev2 to Rev4
 */
class StepVisual_PresentedItemRepresentation extends Standard_Transient {
}

class StepVisual_StyleContextSelect extends StepData_SelectType {
}

class StepVisual_StyledItem extends StepRepr_RepresentationItem {
}

class StepVisual_StyledItemTarget extends StepData_SelectType {
}

class StepVisual_SurfaceSideStyle extends Standard_Transient {
}

class StepVisual_SurfaceStyleBoundary extends Standard_Transient {
}

class StepVisual_SurfaceStyleControlGrid extends Standard_Transient {
}

class StepVisual_SurfaceStyleElementSelect extends StepData_SelectType {
}

class StepVisual_SurfaceStyleFillArea extends Standard_Transient {
}

class StepVisual_SurfaceStyleParameterLine extends Standard_Transient {
}

class StepVisual_SurfaceStyleSegmentationCurve extends Standard_Transient {
}

class StepVisual_SurfaceStyleSilhouette extends Standard_Transient {
}

class StepVisual_SurfaceStyleUsage extends Standard_Transient {
}

class StepVisual_Template extends StepRepr_Representation {
}

class StepVisual_TemplateInstance extends StepRepr_MappedItem {
}

class StepVisual_TessellatedAnnotationOccurrence extends StepVisual_StyledItem {
}

class StepVisual_TessellatedCurveSet extends StepVisual_TessellatedItem {
}

class StepVisual_TessellatedGeometricSet extends StepVisual_TessellatedItem {
}

class StepVisual_TessellatedItem extends StepGeom_GeometricRepresentationItem {
}

class StepVisual_TextLiteral extends StepGeom_GeometricRepresentationItem {
}

class StepVisual_TextOrCharacter extends StepData_SelectType {
}

class StepVisual_TextStyle extends Standard_Transient {
}

class StepVisual_TextStyleForDefinedFont extends Standard_Transient {
}

class StepVisual_TextStyleWithBoxCharacteristics extends StepVisual_TextStyle {
}

class StepVisual_ViewVolume extends Standard_Transient {
}

/**
 * Offers the API for STL data manipulation.
 */
class StlAPI {
}

/**
 * Reading from stereolithography format.
 */
class StlAPI_Reader {
}

/**
 * This class creates and writes STL files from Open CASCADE shapes. An STL file can be written to an existing STL file or to a new one.
 */
class StlAPI_Writer {
}

/**
 * Storage package is used to write and read persistent objects. These objects are read and written by a retrieval or storage algorithm (Storage_Schema object) in a container (disk, memory, network ...). Drivers (FSD_File objects) assign a physical container for data to be stored or retrieved. The standard procedure for an application in reading a container is the following: - open the driver in reading mode, - call the Read function from the schema, setting the driver as a parameter. This function returns an instance of the Storage_Data class which contains the data being read, - close the driver. The standard procedure for an application in writing a container is the following: - open the driver in writing mode, - create an instance of the Storage_Data class, then add the persistent data to write with the function AddRoot, - call the function Write from the schema, setting the driver and the Storage_Data instance as parameters, - close the driver.
 */
class Storage {
}

class Storage_Bucket {
}

class Storage_Bucket_1 extends Storage_Bucket {}

class Storage_Bucket_2 extends Storage_Bucket {}

class Storage_BucketIterator {
}

class Storage_BucketOfPersistent {
}

class Storage_CallBack extends Standard_Transient {
}

/**
 * A picture memorizing the data stored in a container (for example, in a file). A Storage_Data object represents either: - persistent data to be written into a container, or - persistent data which are read from a container. A Storage_Data object is used in both the storage and retrieval operations: - Storage mechanism: create an empty Storage_Data object, then add successively persistent objects (roots) to be stored using the function AddRoot. When the set of data is complete, write it to a container using the function Write in your Storage_Schema storage/retrieval algorithm. - Retrieval mechanism: a Storage_Data object is returned by the Read function from your Storage_Schema storage/retrieval algorithm. Use the functions NumberOfRoots and Roots to find the roots which were stored in the read container. The roots of a Storage_Data object may share references on objects. The shared internal references of a Storage_Data object are maintained by the storage/retrieval mechanism. Note: References shared by objects which are contained in two distinct Storage_Data objects are not maintained by the storage/retrieval mechanism: external references are not supported by Storage_Schema algorithm
 */
class Storage_Data extends Standard_Transient {
}

class Storage_DefaultCallBack extends Storage_CallBack {
}

class Storage_HArrayOfCallBack extends Standard_Transient {
}

class Storage_HArrayOfCallBack_1 extends Storage_HArrayOfCallBack {}

class Storage_HArrayOfCallBack_2 extends Storage_HArrayOfCallBack {}

class Storage_HArrayOfCallBack_3 extends Storage_HArrayOfCallBack {}

class Storage_HArrayOfCallBack_4 extends Storage_HArrayOfCallBack {}

class Storage_HArrayOfSchema extends Standard_Transient {
}

class Storage_HArrayOfSchema_1 extends Storage_HArrayOfSchema {}

class Storage_HArrayOfSchema_2 extends Storage_HArrayOfSchema {}

class Storage_HArrayOfSchema_3 extends Storage_HArrayOfSchema {}

class Storage_HArrayOfSchema_4 extends Storage_HArrayOfSchema {}

class Storage_HPArray extends Standard_Transient {
}

class Storage_HPArray_1 extends Storage_HPArray {}

class Storage_HPArray_2 extends Storage_HPArray {}

class Storage_HPArray_3 extends Storage_HPArray {}

class Storage_HPArray_4 extends Storage_HPArray {}

class Storage_HeaderData extends Standard_Transient {
}

class Storage_InternalData extends Standard_Transient {
}

/**
 * A root object extracted from a Storage_Data object. A Storage_Root encapsulates a persistent object which is a root of a Storage_Data object. It contains additional information: the name and the data type of the persistent object. When retrieving a Storage_Data object from a container (for example, a file) you access its roots with the function Roots which returns a sequence of root objects. The provided functions allow you to request information about each root of the sequence. You do not create explicit roots: when inserting data in a Storage_Data object, you just provide the persistent object and optionally its name to the function AddRoot.
 */
class Storage_Root extends Standard_Transient {
}

class Storage_Root_1 extends Storage_Root {}

class Storage_Root_2 extends Storage_Root {}

class Storage_Root_3 extends Storage_Root {}

class Storage_RootData extends Standard_Transient {
}

/**
 * Root class for basic storage/retrieval algorithms. A Storage_Schema object processes: - writing of a set of persistent data into a container (store mechanism), - reading of a container to extract all the contained persistent data (retrieve mechanism). A Storage_Schema object is based on the data schema for the persistent data of the application, i.e.: - the list of all persistent objects which may be known by the application, - the organization of their data; a data schema knows how to browse each persistent object it contains. During the store or retrieve operation, only persistent objects known from the data schema can be processed; they are then stored or retrieved according to their description in the schema. A data schema is specific to the object classes to be read or written. Tools dedicated to the environment in use allow a description of the application persistent data structure. Storage_Schema algorithms are called basic because they do not support external references between containers.
 */
class Storage_Schema extends Standard_Transient {
}

class Storage_StreamExtCharParityError extends Storage_StreamReadError {
}

class Storage_StreamExtCharParityError_1 extends Storage_StreamExtCharParityError {}

class Storage_StreamExtCharParityError_2 extends Storage_StreamExtCharParityError {}

class Storage_StreamFormatError extends Standard_Failure {
}

class Storage_StreamFormatError_1 extends Storage_StreamFormatError {}

class Storage_StreamFormatError_2 extends Storage_StreamFormatError {}

class Storage_StreamModeError extends Standard_Failure {
}

class Storage_StreamModeError_1 extends Storage_StreamModeError {}

class Storage_StreamModeError_2 extends Storage_StreamModeError {}

class Storage_StreamReadError extends Standard_Failure {
}

class Storage_StreamReadError_1 extends Storage_StreamReadError {}

class Storage_StreamReadError_2 extends Storage_StreamReadError {}

class Storage_StreamTypeMismatchError extends Storage_StreamReadError {
}

class Storage_StreamTypeMismatchError_1 extends Storage_StreamTypeMismatchError {}

class Storage_StreamTypeMismatchError_2 extends Storage_StreamTypeMismatchError {}

class Storage_StreamUnknownTypeError extends Storage_StreamReadError {
}

class Storage_StreamUnknownTypeError_1 extends Storage_StreamUnknownTypeError {}

class Storage_StreamUnknownTypeError_2 extends Storage_StreamUnknownTypeError {}

class Storage_StreamWriteError extends Standard_Failure {
}

class Storage_StreamWriteError_1 extends Storage_StreamWriteError {}

class Storage_StreamWriteError_2 extends Storage_StreamWriteError {}

class Storage_TypeData extends Standard_Transient {
}

class Storage_TypedCallBack extends Standard_Transient {
}

class Storage_TypedCallBack_1 extends Storage_TypedCallBack {}

class Storage_TypedCallBack_2 extends Storage_TypedCallBack {}

/**
 * Gives a simple indexed representation of a Directing Edge topology.
 */
class Sweep_NumShape {
}

class Sweep_NumShape_1 extends Sweep_NumShape {}

class Sweep_NumShape_2 extends Sweep_NumShape {}

/**
 * This class provides iteration services required by the Swept Primitives for a Directing NumShape Line.
 */
class Sweep_NumShapeIterator {
}

/**
 * This class provides the indexation and type analysis services required by the NumShape Directing Shapes of Swept Primitives.
 */
class Sweep_NumShapeTool {
}

class TColGeom2d_HArray1OfBezierCurve extends Standard_Transient {
}

class TColGeom2d_HArray1OfBezierCurve_1 extends TColGeom2d_HArray1OfBezierCurve {}

class TColGeom2d_HArray1OfBezierCurve_2 extends TColGeom2d_HArray1OfBezierCurve {}

class TColGeom2d_HArray1OfBezierCurve_3 extends TColGeom2d_HArray1OfBezierCurve {}

class TColGeom2d_HArray1OfBezierCurve_4 extends TColGeom2d_HArray1OfBezierCurve {}

class TColGeom2d_HSequenceOfBoundedCurve extends Standard_Transient {
}

class TColGeom2d_HSequenceOfBoundedCurve_1 extends TColGeom2d_HSequenceOfBoundedCurve {}

class TColGeom2d_HSequenceOfBoundedCurve_2 extends TColGeom2d_HSequenceOfBoundedCurve {}

class TColGeom_HArray1OfBezierCurve extends Standard_Transient {
}

class TColGeom_HArray1OfBezierCurve_1 extends TColGeom_HArray1OfBezierCurve {}

class TColGeom_HArray1OfBezierCurve_2 extends TColGeom_HArray1OfBezierCurve {}

class TColGeom_HArray1OfBezierCurve_3 extends TColGeom_HArray1OfBezierCurve {}

class TColGeom_HArray1OfBezierCurve_4 extends TColGeom_HArray1OfBezierCurve {}

class TColGeom_HArray1OfCurve extends Standard_Transient {
}

class TColGeom_HArray1OfCurve_1 extends TColGeom_HArray1OfCurve {}

class TColGeom_HArray1OfCurve_2 extends TColGeom_HArray1OfCurve {}

class TColGeom_HArray1OfCurve_3 extends TColGeom_HArray1OfCurve {}

class TColGeom_HArray1OfCurve_4 extends TColGeom_HArray1OfCurve {}

class TColGeom_HArray2OfSurface extends Standard_Transient {
}

class TColGeom_HArray2OfSurface_1 extends TColGeom_HArray2OfSurface {}

class TColGeom_HArray2OfSurface_2 extends TColGeom_HArray2OfSurface {}

class TColGeom_HArray2OfSurface_3 extends TColGeom_HArray2OfSurface {}

class TColGeom_HSequenceOfBoundedCurve extends Standard_Transient {
}

class TColGeom_HSequenceOfBoundedCurve_1 extends TColGeom_HSequenceOfBoundedCurve {}

class TColGeom_HSequenceOfBoundedCurve_2 extends TColGeom_HSequenceOfBoundedCurve {}

class TColStd_HArray1OfExtendedString extends Standard_Transient {
}

class TColStd_HArray1OfExtendedString_1 extends TColStd_HArray1OfExtendedString {}

class TColStd_HArray1OfExtendedString_2 extends TColStd_HArray1OfExtendedString {}

class TColStd_HArray1OfExtendedString_3 extends TColStd_HArray1OfExtendedString {}

class TColStd_HArray1OfExtendedString_4 extends TColStd_HArray1OfExtendedString {}

class TColStd_HArray2OfCharacter extends Standard_Transient {
}

class TColStd_HArray2OfCharacter_1 extends TColStd_HArray2OfCharacter {}

class TColStd_HArray2OfCharacter_2 extends TColStd_HArray2OfCharacter {}

class TColStd_HArray2OfCharacter_3 extends TColStd_HArray2OfCharacter {}

/**
 * Extension of TColStd_PackedMapOfInteger class to be manipulated by handle.
 */
class TColStd_HPackedMapOfInteger extends Standard_Transient {
}

class TColStd_HPackedMapOfInteger_1 extends TColStd_HPackedMapOfInteger {}

class TColStd_HPackedMapOfInteger_2 extends TColStd_HPackedMapOfInteger {}

/**
 * Optimized Map of integer values. Each block of 32 integers is stored in 8 bytes in memory.
 */
class TColStd_PackedMapOfInteger {
}

class TColStd_PackedMapOfInteger_1 extends TColStd_PackedMapOfInteger {}

class TColStd_PackedMapOfInteger_2 extends TColStd_PackedMapOfInteger {}

class TColgp_HArray1OfDir2d extends Standard_Transient {
}

class TColgp_HArray1OfDir2d_1 extends TColgp_HArray1OfDir2d {}

class TColgp_HArray1OfDir2d_2 extends TColgp_HArray1OfDir2d {}

class TColgp_HArray1OfDir2d_3 extends TColgp_HArray1OfDir2d {}

class TColgp_HArray1OfDir2d_4 extends TColgp_HArray1OfDir2d {}

class TColgp_HArray2OfCirc2d extends Standard_Transient {
}

class TColgp_HArray2OfCirc2d_1 extends TColgp_HArray2OfCirc2d {}

class TColgp_HArray2OfCirc2d_2 extends TColgp_HArray2OfCirc2d {}

class TColgp_HArray2OfCirc2d_3 extends TColgp_HArray2OfCirc2d {}

class TColgp_HArray2OfDir extends Standard_Transient {
}

class TColgp_HArray2OfDir_1 extends TColgp_HArray2OfDir {}

class TColgp_HArray2OfDir_2 extends TColgp_HArray2OfDir {}

class TColgp_HArray2OfDir_3 extends TColgp_HArray2OfDir {}

class TColgp_HArray2OfDir2d extends Standard_Transient {
}

class TColgp_HArray2OfDir2d_1 extends TColgp_HArray2OfDir2d {}

class TColgp_HArray2OfDir2d_2 extends TColgp_HArray2OfDir2d {}

class TColgp_HArray2OfDir2d_3 extends TColgp_HArray2OfDir2d {}

class TColgp_HArray2OfLin2d extends Standard_Transient {
}

class TColgp_HArray2OfLin2d_1 extends TColgp_HArray2OfLin2d {}

class TColgp_HArray2OfLin2d_2 extends TColgp_HArray2OfLin2d {}

class TColgp_HArray2OfLin2d_3 extends TColgp_HArray2OfLin2d {}

class TColgp_HArray2OfVec extends Standard_Transient {
}

class TColgp_HArray2OfVec_1 extends TColgp_HArray2OfVec {}

class TColgp_HArray2OfVec_2 extends TColgp_HArray2OfVec {}

class TColgp_HArray2OfVec_3 extends TColgp_HArray2OfVec {}

class TColgp_HArray2OfVec2d extends Standard_Transient {
}

class TColgp_HArray2OfVec2d_1 extends TColgp_HArray2OfVec2d {}

class TColgp_HArray2OfVec2d_2 extends TColgp_HArray2OfVec2d {}

class TColgp_HArray2OfVec2d_3 extends TColgp_HArray2OfVec2d {}

class TColgp_HArray2OfXY extends Standard_Transient {
}

class TColgp_HArray2OfXY_1 extends TColgp_HArray2OfXY {}

class TColgp_HArray2OfXY_2 extends TColgp_HArray2OfXY {}

class TColgp_HArray2OfXY_3 extends TColgp_HArray2OfXY {}

class TColgp_HSequenceOfDir extends Standard_Transient {
}

class TColgp_HSequenceOfDir_1 extends TColgp_HSequenceOfDir {}

class TColgp_HSequenceOfDir_2 extends TColgp_HSequenceOfDir {}

class TColgp_HSequenceOfDir2d extends Standard_Transient {
}

class TColgp_HSequenceOfDir2d_1 extends TColgp_HSequenceOfDir2d {}

class TColgp_HSequenceOfDir2d_2 extends TColgp_HSequenceOfDir2d {}

class TColgp_HSequenceOfVec extends Standard_Transient {
}

class TColgp_HSequenceOfVec_1 extends TColgp_HSequenceOfVec {}

class TColgp_HSequenceOfVec_2 extends TColgp_HSequenceOfVec {}

class TColgp_HSequenceOfVec2d extends Standard_Transient {
}

class TColgp_HSequenceOfVec2d_1 extends TColgp_HSequenceOfVec2d {}

class TColgp_HSequenceOfVec2d_2 extends TColgp_HSequenceOfVec2d {}

/**
 * The package <TCollection> provides the services for the transient basic data structures.
 */
class TCollection {
}

/**
 * Class defines a variable-length sequence of 8-bit characters. Despite class name (kept for historical reasons), it is intended to store UTF-8 string, not just ASCII characters. However, multi-byte nature of UTF-8 is not considered by the following methods: - Method ::Length() return the number of bytes, not the number of Unicode symbols. - Methods taking/returning symbol index work with 8-bit code units, not true Unicode symbols, including ::Remove(), ::SetValue(), ::Value(), ::Search(), ::Trunc() and others. If application needs to process multi-byte Unicode symbols explicitly, NCollection_Utf8Iter class can be used for iterating through Unicode string (UTF-32 code unit will be returned for each position).
 */
class TCollection_AsciiString {
}

class TCollection_AsciiString_1 extends TCollection_AsciiString {}

class TCollection_AsciiString_2 extends TCollection_AsciiString {}

class TCollection_AsciiString_3 extends TCollection_AsciiString {}

class TCollection_AsciiString_4 extends TCollection_AsciiString {}

class TCollection_AsciiString_5 extends TCollection_AsciiString {}

class TCollection_AsciiString_6 extends TCollection_AsciiString {}

class TCollection_AsciiString_7 extends TCollection_AsciiString {}

class TCollection_AsciiString_8 extends TCollection_AsciiString {}

class TCollection_AsciiString_9 extends TCollection_AsciiString {}

class TCollection_AsciiString_10 extends TCollection_AsciiString {}

class TCollection_AsciiString_11 extends TCollection_AsciiString {}

class TCollection_AsciiString_12 extends TCollection_AsciiString {}

class TCollection_AsciiString_13 extends TCollection_AsciiString {}

class TCollection_AsciiString_14 extends TCollection_AsciiString {}

/**
 * Definition of a base class for all instanciations of sequence.
 */
class TCollection_BaseSequence {
}

/**
 * Root class of all the maps, provides utilitites for managing the buckets. Maps are dynamically extended data structures where data is quickly accessed with a key. General properties of maps - Map items may be (complex) non-unitary data; they may be difficult to manage with an array. Moreover, the map allows a data structure to be indexed by complex data. - The size of a map is dynamically extended. So a map may be first dimensioned for a little number of items. Maps avoid the use of large and quasi-empty arrays. - The access to a map item is much faster than the one to a sequence, a list, a queue or a stack item. - The access time to a map item may be compared with the one to an array item. First of all, it depends on the size of the map. It also depends on the quality of a user redefinable function (the hashing function) to find quickly where the item is. - The exploration of a map may be of better performance than the exploration of an array because the size of the map is adapted to the number of inserted items. These properties explain why maps are commonly used as internal data structures for algorithms. Definitions - A map is a data structure for which data is addressed by keys. - Once inserted in the map, a map item is referenced as an entry of the map. - Each entry of the map is addressed by a key. Two different keys address two different entries of the map. - The position of an entry in the map is called a bucket. - A map is dimensioned by its number of buckets, i.e. the maximum number of entries in the map. The performance of a map is conditioned by the number of buckets. - The hashing function transforms a key into a bucket index. The number of values that can be computed by the hashing function is equal to the number of buckets of the map. - Both the hashing function and the equality test between two keys are provided by a hasher object. - A map may be explored by a map iterator. This exploration provides only inserted entries in the map (i.e. non empty buckets). Collections' generic maps The Collections component provides numerous generic derived maps. - These maps include automatic management of the number of buckets: they are automatically resized when the number of keys exceeds the number of buckets. If you have a fair idea of the number of items in your map, you can save on automatic resizing by specifying a number of buckets at the time of construction, or by using a resizing function. This may be considered for crucial optimization issues. - Keys, items and hashers are parameters of these generic derived maps. - TCollection_MapHasher class describes the functions required by any hasher which is to be used with a map instantiated from the Collections component. - An iterator class is automatically instantiated at the time of instantiation of a map provided by the Collections component if this map is to be explored with an iterator. Note that some provided generic maps are not to be explored with an iterator but with indexes (indexed maps).
 */
class TCollection_BasicMap {
}

/**
 * This class provides basic services for the iterators on Maps. The iterators are inherited from this one.
 */
class TCollection_BasicMapIterator {
}

/**
 * A variable-length sequence of "extended" (UNICODE) characters (16-bit character type). It provides editing operations with built-in memory management to make ExtendedString objects easier to use than ordinary extended character arrays. ExtendedString objects follow "value semantics", that is, they are the actual strings, not handles to strings, and are copied through assignment. You may use HExtendedString objects to get handles to strings.
 */
class TCollection_ExtendedString {
}

class TCollection_ExtendedString_1 extends TCollection_ExtendedString {}

class TCollection_ExtendedString_2 extends TCollection_ExtendedString {}

class TCollection_ExtendedString_3 extends TCollection_ExtendedString {}

class TCollection_ExtendedString_4 extends TCollection_ExtendedString {}

class TCollection_ExtendedString_5 extends TCollection_ExtendedString {}

class TCollection_ExtendedString_6 extends TCollection_ExtendedString {}

class TCollection_ExtendedString_7 extends TCollection_ExtendedString {}

class TCollection_ExtendedString_8 extends TCollection_ExtendedString {}

class TCollection_ExtendedString_9 extends TCollection_ExtendedString {}

class TCollection_ExtendedString_10 extends TCollection_ExtendedString {}

class TCollection_ExtendedString_11 extends TCollection_ExtendedString {}

class TCollection_ExtendedString_12 extends TCollection_ExtendedString {}

/**
 * A variable-length sequence of ASCII characters (normal 8-bit character type). It provides editing operations with built-in memory management to make HAsciiString objects easier to use than ordinary character arrays. HAsciiString objects are handles to strings. - HAsciiString strings may be shared by several objects. - You may use an AsciiString object to get the actual string. Note: HAsciiString objects use an AsciiString string as a field.
 */
class TCollection_HAsciiString extends Standard_Transient {
}

class TCollection_HAsciiString_1 extends TCollection_HAsciiString {}

class TCollection_HAsciiString_2 extends TCollection_HAsciiString {}

class TCollection_HAsciiString_3 extends TCollection_HAsciiString {}

class TCollection_HAsciiString_4 extends TCollection_HAsciiString {}

class TCollection_HAsciiString_5 extends TCollection_HAsciiString {}

class TCollection_HAsciiString_6 extends TCollection_HAsciiString {}

class TCollection_HAsciiString_7 extends TCollection_HAsciiString {}

class TCollection_HAsciiString_8 extends TCollection_HAsciiString {}

class TCollection_HAsciiString_9 extends TCollection_HAsciiString {}

/**
 * A variable-length sequence of "extended" (UNICODE) characters (16-bit character type). It provides editing operations with built-in memory management to make ExtendedString objects easier to use than ordinary extended character arrays. HExtendedString objects are handles to strings. - HExtendedString strings may be shared by several objects. - You may use an ExtendedString object to get the actual string. Note: HExtendedString objects use an ExtendedString string as a field.
 */
class TCollection_HExtendedString extends Standard_Transient {
}

class TCollection_HExtendedString_1 extends TCollection_HExtendedString {}

class TCollection_HExtendedString_2 extends TCollection_HExtendedString {}

class TCollection_HExtendedString_3 extends TCollection_HExtendedString {}

class TCollection_HExtendedString_4 extends TCollection_HExtendedString {}

class TCollection_HExtendedString_5 extends TCollection_HExtendedString {}

class TCollection_HExtendedString_6 extends TCollection_HExtendedString {}

class TCollection_HExtendedString_7 extends TCollection_HExtendedString {}

class TCollection_HExtendedString_8 extends TCollection_HExtendedString {}

/**
 * Basic class root of all the Maps.
 */
class TCollection_MapNode extends Standard_Transient {
}

class TCollection_SeqNode extends Standard_Transient {
}

/**
 * This package provides data framework for binding features and data structures.
 */
class TDF {
}

/**
 * A class each application has to implement. It is used to contain the application data. This abstract class, alongwith Label, is one of the cornerstones of Model Editor. The groundwork is to define the root of information. This information is to be attached to a Label, and could be of any of the following types: - a feature - a constraint - a comment
 */
class TDF_Attribute extends Standard_Transient {
}

/**
 * This class discribes the services we need to implement Delta and Undo/Redo services.
 */
class TDF_AttributeDelta extends Standard_Transient {
}

class TDF_AttributeIterator {
}

class TDF_AttributeIterator_1 extends TDF_AttributeIterator {}

class TDF_AttributeIterator_2 extends TDF_AttributeIterator {}

class TDF_AttributeIterator_3 extends TDF_AttributeIterator {}

/**
 * Iterates on the children of a label, to find attributes having ID as Attribute ID.
 */
class TDF_ChildIDIterator {
}

class TDF_ChildIDIterator_1 extends TDF_ChildIDIterator {}

class TDF_ChildIDIterator_2 extends TDF_ChildIDIterator {}

/**
 * Iterates on the children of a label, at the first level only. It is possible to ask the iterator to explore all the sub label levels of the given one, with the option "allLevels".
 */
class TDF_ChildIterator {
}

class TDF_ChildIterator_1 extends TDF_ChildIterator {}

class TDF_ChildIterator_2 extends TDF_ChildIterator {}

/**
 * This class provides options closure management.
 */
class TDF_ClosureMode {
}

/**
 * This class provides services to build the closure of an information set. This class gives services around the transitive enclosure of a set of information, starting from a list of label. You can set closure options by using IDFilter (to select or exclude specific attribute IDs) and CopyOption objects and by giving to Closure method.
 */
class TDF_ClosureTool {
}

/**
 * This class provides services to compare sets of information. The use of this tool can works after a copy, acted by a CopyTool.
 */
class TDF_ComparisonTool {
}

/**
 * This class gives copy of source label hierarchy
 */
class TDF_CopyLabel {
}

class TDF_CopyLabel_1 extends TDF_CopyLabel {}

class TDF_CopyLabel_2 extends TDF_CopyLabel {}

/**
 * This class provides services to build, copy or paste a set of information.
 */
class TDF_CopyTool {
}

/**
 * This class is used to manipulate a complete independant, self sufficient data structure and its services:
 */
class TDF_Data extends Standard_Transient {
}

/**
 * This class is a set of TDF informations like labels and attributes.
 */
class TDF_DataSet extends Standard_Transient {
}

/**
 * This class provides a default implementation of a TDF_DeltaOnModification.
 */
class TDF_DefaultDeltaOnModification extends TDF_DeltaOnModification {
}

/**
 * This class provides a default implementation of a TDF_DeltaOnRemoval.
 */
class TDF_DefaultDeltaOnRemoval extends TDF_DeltaOnRemoval {
}

/**
 * A set of AttributeDelta for a given transaction number and reference time number. A delta set is available at <aSourceTime>. If applied, it restores the TDF_Data in the state it was at <aTargetTime>.
 */
class TDF_Delta extends Standard_Transient {
}

/**
 * This class provides default services for an AttributeDelta on an ADDITION action.
 */
class TDF_DeltaOnAddition extends TDF_AttributeDelta {
}

/**
 * This class provides default services for an AttributeDelta on an Forget action.
 */
class TDF_DeltaOnForget extends TDF_AttributeDelta {
}

/**
 * This class provides default services for an AttributeDelta on a MODIFICATION action.
 */
class TDF_DeltaOnModification extends TDF_AttributeDelta {
}

/**
 * This class provides default services for an AttributeDelta on a REMOVAL action.
 */
class TDF_DeltaOnRemoval extends TDF_AttributeDelta {
}

/**
 * This class provides default services for an AttributeDelta on an Resume action.
 */
class TDF_DeltaOnResume extends TDF_AttributeDelta {
}

class TDF_HAttributeArray1 extends Standard_Transient {
}

class TDF_HAttributeArray1_1 extends TDF_HAttributeArray1 {}

class TDF_HAttributeArray1_2 extends TDF_HAttributeArray1 {}

class TDF_HAttributeArray1_3 extends TDF_HAttributeArray1 {}

class TDF_HAttributeArray1_4 extends TDF_HAttributeArray1 {}

/**
 * This class offers filtering services around an ID list.
 */
class TDF_IDFilter {
}

/**
 * This class provides basic operations to define a label in a data structure. A label is a feature in the feature hierarchy. A label is always connected to a Data from TDF. To a label is attached attributes containing the software components information.
 */
class TDF_Label {
}

/**
 * A label hasher for label maps.
 */
class TDF_LabelMapHasher {
}

/**
 * This attribute is used to store in the framework a reference to an other label.
 */
class TDF_Reference extends TDF_Attribute {
}

/**
 * This is a relocation dictionnary between source and target labels, attributes or any transient(useful for copy or paste actions). Note that one target value may be the relocation value of more than one source object.
 */
class TDF_RelocationTable extends Standard_Transient {
}

/**
 * This attribute manage a tag provider to create child labels of a given one.
 */
class TDF_TagSource extends TDF_Attribute {
}

/**
 * This class provides general services for a data framework.
 */
class TDF_Tool {
}

/**
 * This class offers services to open, commit or abort a transaction in a more secure way than using Data from TDF. If you forget to close a transaction, it will be automaticaly aborted at the destruction of this object, at the closure of its scope.
 */
class TDF_Transaction {
}

class TDF_Transaction_1 extends TDF_Transaction {}

class TDF_Transaction_2 extends TDF_Transaction {}

/**
 * This package defines standard attributes for modelling. These allow you to create and modify labels and attributes for many basic data types. Standard topological and visualization attributes have also been created. To find an attribute attached to a specific label, you use the GUID of the type of attribute you are looking for. To do this, first find this information using the method GetID as follows: Standard_GUID anID = MyAttributeClass::GetID(); Then, use the method Find for the label as follows: Standard_Boolean HasAttribute = aLabel.Find(anID,anAttribute); Note For information on the relations between this component of OCAF and the others, refer to the OCAF User's Guide.
 */
class TDataStd {
}

/**
 * Used to define an AsciiString attribute containing a TCollection_AsciiString
 */
class TDataStd_AsciiString extends TDF_Attribute {
}

/**
 * An array of boolean values.
 */
class TDataStd_BooleanArray extends TDF_Attribute {
}

/**
 * Contains a list of bolleans.
 */
class TDataStd_BooleanList extends TDF_Attribute {
}

/**
 * An array of Byte (unsigned char) values.
 */
class TDataStd_ByteArray extends TDF_Attribute {
}

/**
 * Iterates on the ChildStepren step of a step, at the first level only. It is possible to ask the iterator to explore all the sub step levels of the given one, with the option "allLevels".
 */
class TDataStd_ChildNodeIterator {
}

class TDataStd_ChildNodeIterator_1 extends TDataStd_ChildNodeIterator {}

class TDataStd_ChildNodeIterator_2 extends TDataStd_ChildNodeIterator {}

/**
 * Comment attribute. may be associated to any label to store user comment.
 */
class TDataStd_Comment extends TDF_Attribute {
}

/**
 * this attribute, located at root label, manage an access to a current label.
 */
class TDataStd_Current extends TDF_Attribute {
}

/**
 * This class provides default services for an AttributeDelta on a MODIFICATION action.
 */
class TDataStd_DeltaOnModificationOfByteArray extends TDF_DeltaOnModification {
}

/**
 * This class provides default services for an AttributeDelta on a MODIFICATION action.
 */
class TDataStd_DeltaOnModificationOfExtStringArray extends TDF_DeltaOnModification {
}

/**
 * This class provides default services for an AttributeDelta on a MODIFICATION action.
 */
class TDataStd_DeltaOnModificationOfIntArray extends TDF_DeltaOnModification {
}

/**
 * This class provides default services for an AttributeDelta on a MODIFICATION action.
 */
class TDataStd_DeltaOnModificationOfIntPackedMap extends TDF_DeltaOnModification {
}

/**
 * This class provides default services for an AttributeDelta on a MODIFICATION action
 */
class TDataStd_DeltaOnModificationOfRealArray extends TDF_DeltaOnModification {
}

/**
 * Associates a directory in the data framework with a TDataStd_TagSource attribute. You can create a new directory label and add sub-directory or object labels to it,
 */
class TDataStd_Directory extends TDF_Attribute {
}

/**
 * Expression attribute. ====================
 */
class TDataStd_Expression extends TDF_Attribute {
}

/**
 * ExtStringArray Attribute. Handles an array of UNICODE strings (represented by the TCollection_ExtendedString class).
 */
class TDataStd_ExtStringArray extends TDF_Attribute {
}

/**
 * Contains a list of ExtendedString.
 */
class TDataStd_ExtStringList extends TDF_Attribute {
}

/**
 * Extension of TDataStd_DataMapOfStringByte class to be manipulated by handle.
 */
class TDataStd_HDataMapOfStringByte extends Standard_Transient {
}

class TDataStd_HDataMapOfStringByte_1 extends TDataStd_HDataMapOfStringByte {}

class TDataStd_HDataMapOfStringByte_2 extends TDataStd_HDataMapOfStringByte {}

/**
 * Extension of TDataStd_DataMapOfStringHArray1OfInteger class to be manipulated by handle.
 */
class TDataStd_HDataMapOfStringHArray1OfInteger extends Standard_Transient {
}

class TDataStd_HDataMapOfStringHArray1OfInteger_1 extends TDataStd_HDataMapOfStringHArray1OfInteger {}

class TDataStd_HDataMapOfStringHArray1OfInteger_2 extends TDataStd_HDataMapOfStringHArray1OfInteger {}

/**
 * Extension of TDataStd_DataMapOfStringHArray1OfReal class to be manipulated by handle.
 */
class TDataStd_HDataMapOfStringHArray1OfReal extends Standard_Transient {
}

class TDataStd_HDataMapOfStringHArray1OfReal_1 extends TDataStd_HDataMapOfStringHArray1OfReal {}

class TDataStd_HDataMapOfStringHArray1OfReal_2 extends TDataStd_HDataMapOfStringHArray1OfReal {}

/**
 * Extension of TColStd_DataMapOfStringInteger class to be manipulated by handle.
 */
class TDataStd_HDataMapOfStringInteger extends Standard_Transient {
}

class TDataStd_HDataMapOfStringInteger_1 extends TDataStd_HDataMapOfStringInteger {}

class TDataStd_HDataMapOfStringInteger_2 extends TDataStd_HDataMapOfStringInteger {}

/**
 * Extension of TDataStd_DataMapOfStringReal class to be manipulated by handle.
 */
class TDataStd_HDataMapOfStringReal extends Standard_Transient {
}

class TDataStd_HDataMapOfStringReal_1 extends TDataStd_HDataMapOfStringReal {}

class TDataStd_HDataMapOfStringReal_2 extends TDataStd_HDataMapOfStringReal {}

/**
 * Extension of TDataStd_DataMapOfStringString class to be manipulated by handle.
 */
class TDataStd_HDataMapOfStringString extends Standard_Transient {
}

class TDataStd_HDataMapOfStringString_1 extends TDataStd_HDataMapOfStringString {}

class TDataStd_HDataMapOfStringString_2 extends TDataStd_HDataMapOfStringString {}

class TDataStd_HLabelArray1 extends Standard_Transient {
}

class TDataStd_HLabelArray1_1 extends TDataStd_HLabelArray1 {}

class TDataStd_HLabelArray1_2 extends TDataStd_HLabelArray1 {}

class TDataStd_HLabelArray1_3 extends TDataStd_HLabelArray1 {}

class TDataStd_HLabelArray1_4 extends TDataStd_HLabelArray1 {}

/**
 * Attribute for storing TColStd_PackedMapOfInteger
 */
class TDataStd_IntPackedMap extends TDF_Attribute {
}

/**
 * The basis to define an integer attribute.
 */
class TDataStd_Integer extends TDF_Attribute {
}

/**
 * Contains an array of integers.
 */
class TDataStd_IntegerArray extends TDF_Attribute {
}

/**
 * Contains a list of integers.
 */
class TDataStd_IntegerList extends TDF_Attribute {
}

/**
 * Used to define a name attribute containing a string which specifies the name.
 */
class TDataStd_Name extends TDF_Attribute {
}

/**
 * Contains a named data.
 */
class TDataStd_NamedData extends TDF_Attribute {
}

/**
 * NoteBook Object attribute
 */
class TDataStd_NoteBook extends TDF_Attribute {
}

/**
 * The basis to define a real number attribute.
 */
class TDataStd_Real extends TDF_Attribute {
}

/**
 * A framework for an attribute composed of a real number array.
 */
class TDataStd_RealArray extends TDF_Attribute {
}

/**
 * Contains a list of doubles.
 */
class TDataStd_RealList extends TDF_Attribute {
}

/**
 * Contains an array of references to the labels.
 */
class TDataStd_ReferenceArray extends TDF_Attribute {
}

/**
 * Contains a list of references.
 */
class TDataStd_ReferenceList extends TDF_Attribute {
}

/**
 * Relation attribute. ==================
 */
class TDataStd_Relation extends TDF_Attribute {
}

/**
 * Defines a boolean attribute. If it exists at a label - true, Otherwise - false.
 */
class TDataStd_Tick extends TDF_Attribute {
}

/**
 * Allows you to define an explicit tree of labels which you can also edit. Without this class, the data structure cannot be fully edited. This service is required if for presentation purposes, you want to create an application with a tree which allows you to organize and link data as a function of application features.
 */
class TDataStd_TreeNode extends TDF_Attribute {
}

class TDataStd_UAttribute extends TDF_Attribute {
}

/**
 * Variable attribute. ==================
 */
class TDataStd_Variable extends TDF_Attribute {
}

/**
 * This package defines extension of standard attributes for modelling (mainly for work with geometry).
 */
class TDataXtd {
}

/**
 * The basis to define an axis attribute.
 */
class TDataXtd_Axis extends TDF_Attribute {
}

/**
 * The groundwork to define constraint attributes. The constraint attribute contains the following sorts of data: - Type whether the constraint attribute is a geometric constraint or a dimension - Value the real number value of a numeric constraint such as an angle or a radius - Geometries to identify the geometries underlying the topological attributes which define the constraint (up to 4) - Plane for 2D constraints.
 */
class TDataXtd_Constraint extends TDF_Attribute {
}

/**
 * This class is used to model construction geometry. The specific geometric construction of the attribute is defined by an element of the enumeration TDataXtd_GeometryEnum. This attribute may also be used to qualify underlying geometry of the associated NamedShape. for Constructuion element by example.
 */
class TDataXtd_Geometry extends TDF_Attribute {
}

class TDataXtd_HArray1OfTrsf extends Standard_Transient {
}

class TDataXtd_HArray1OfTrsf_1 extends TDataXtd_HArray1OfTrsf {}

class TDataXtd_HArray1OfTrsf_2 extends TDataXtd_HArray1OfTrsf {}

class TDataXtd_HArray1OfTrsf_3 extends TDataXtd_HArray1OfTrsf {}

class TDataXtd_HArray1OfTrsf_4 extends TDataXtd_HArray1OfTrsf {}

/**
 * a general pattern model
 */
class TDataXtd_Pattern extends TDF_Attribute {
}

/**
 * to create a PatternStd (LinearPattern, CircularPattern, RectangularPattern, RadialCircularPattern, MirrorPattern)
 */
class TDataXtd_PatternStd extends TDataXtd_Pattern {
}

class TDataXtd_Placement extends TDF_Attribute {
}

/**
 * The basis to define a plane attribute. Warning: Use TDataXtd_Geometry attribute to retrieve the gp_Pln of the Plane attribute
 */
class TDataXtd_Plane extends TDF_Attribute {
}

/**
 * The basis to define a point attribute. The topological attribute must contain a vertex. You use this class to create reference points in a design.
 */
class TDataXtd_Point extends TDF_Attribute {
}

/**
 * Position of a Label
 */
class TDataXtd_Position extends TDF_Attribute {
}

/**
 * Attribute containing parameters of presentation of the shape, e.g. the shape attached to the same label and displayed using TPrsStd tools (see TPrsStd_AISPresentation).
 */
class TDataXtd_Presentation extends TDF_Attribute {
}

/**
 * A Shape is associated in the framework with : a NamedShape attribute
 */
class TDataXtd_Shape extends TDF_Attribute {
}

/**
 * An Ocaf attribute containing a mesh (Poly_Triangulation). It duplicates all methods from Poly_Triangulation. It is highly recommended to modify the mesh through the methods of this attribute, but not directly via the underlying Poly_Triangulation object. In this case Undo/Redo will work fine and robust.
 */
class TDataXtd_Triangulation extends TDF_Attribute {
}

/**
 * This package define CAF main classes.
 */
class TDocStd {
}

/**
 * The abstract root class for all application classes. They are in charge of: - Creating documents - Storing documents and retrieving them - Initializing document views. To create a useful OCAF-based application, you derive a class from Application and implement the methods below. You will have to redefine the deferred (virtual) methods Formats, InitDocument, and Resources, and override others. The application is a container for a document, which in its turn is the container of the data framework made up of labels and attributes. Besides furnishing a container for documents, TDocStd_Application provides the following services for them: - Creation of new documents - Activation of documents in sessions of an application - Storage and retrieval of documents - Initialization of document views. Note: If a client needs detailed information concerning the events during the Open/Store operation, a MessageDriver based on Message_PrinterOStream may be used. In case of need client can implement his own version inheriting from Message_Printer class and add it to the Messanger. Also the trace level of messages can be tuned by setting trace level (SetTraceLevel (Gravity )) for the used Printer. By default, trace level is Message_Info, so that all messages are output.
 */
class TDocStd_Application extends CDF_Application {
}

class TDocStd_ApplicationDelta extends Standard_Transient {
}

/**
 * A delta set is available at <aSourceTime>. If applied, it restores the TDF_Data in the state it was at <aTargetTime>.
 */
class TDocStd_CompoundDelta extends TDF_Delta {
}

class TDocStd_Context {
}

/**
 * The contents of a TDocStd_Application, a document is a container for a data framework composed of labels and attributes. As such, TDocStd_Document is the entry point into the data framework. To gain access to the data, you create a document as follows: Handle(TDocStd_Document) MyDF = new TDocStd_Document The document also allows you to manage: - modifications, providing Undo and Redo functions. - command transactions. Warning: The only data saved is the framework (TDF_Data)
 */
class TDocStd_Document extends CDM_Document {
}

/**
 * Transient attribute wich register modified labels. This attribute is attached to root label.
 */
class TDocStd_Modified extends TDF_Attribute {
}

/**
 * Class for synchronization of transactions within multiple documents. Each transaction of this class involvess one transaction in each modified document.
 */
class TDocStd_MultiTransactionManager extends Standard_Transient {
}

/**
 * This attribute located at the root label of the framework contains a back reference to the owner TDocStd_Document, providing acces to the document from any label. private class Owner;
 */
class TDocStd_Owner extends TDF_Attribute {
}

/**
 * parse an OS path
 */
class TDocStd_PathParser {
}

/**
 * An attribute to store the path and the entry of external links. These refer from one data structure to a data structure in another document.
 */
class TDocStd_XLink extends TDF_Attribute {
}

/**
 * Iterates on Reference attributes. This is an iterator giving all the external references of a Document.
 */
class TDocStd_XLinkIterator {
}

class TDocStd_XLinkIterator_1 extends TDocStd_XLinkIterator {}

class TDocStd_XLinkIterator_2 extends TDocStd_XLinkIterator {}

/**
 * This attribute is the root of all external references contained in a Data from TDF. Only one instance of this class is added to the TDF_Data root label. Starting from this attribute all the Reference are linked together, to be found easely.
 */
class TDocStd_XLinkRoot extends TDF_Attribute {
}

/**
 * This tool class is used to copy the content of source label under target label. Only child labels and attributes of source are copied. attributes located out of source scope are not copied by this algorithm. Depending of the called method an external reference is set in the the target document to registred the externallink. Provide services to set, update and perform external references. Warning1: Nothing is provided in this class about the opportunity to copy, set a link or update it. Such decisions must be under application control. Warning2: If the document manages shapes, use after copy TNaming::ChangeShapes(target,M) to make copy of shapes.
 */
class TDocStd_XLinkTool {
}

/**
 * This driver class provide services around function execution. One instance of this class is built for the whole session. The driver is bound to the DriverGUID in the DriverTable class. It allows you to create classes which inherit from this abstract class. These subclasses identify the various algorithms which can be applied to the data contained in the attributes of sub-labels of a model. A single instance of this class and each of its subclasses is built for the whole session.
 */
class TFunction_Driver extends Standard_Transient {
}

/**
 * A container for instances of drivers. You create a new instance of TFunction_Driver and use the method AddDriver to load it into the driver table.
 */
class TFunction_DriverTable extends Standard_Transient {
}

/**
 * Provides the following two services - a link to an evaluation driver - the means of providing a link between a function and an evaluation driver.
 */
class TFunction_Function extends TDF_Attribute {
}

/**
 * Provides links between functions.
 */
class TFunction_GraphNode extends TDF_Attribute {
}

class TFunction_HArray1OfDataMapOfGUIDDriver extends Standard_Transient {
}

class TFunction_HArray1OfDataMapOfGUIDDriver_1 extends TFunction_HArray1OfDataMapOfGUIDDriver {}

class TFunction_HArray1OfDataMapOfGUIDDriver_2 extends TFunction_HArray1OfDataMapOfGUIDDriver {}

class TFunction_HArray1OfDataMapOfGUIDDriver_3 extends TFunction_HArray1OfDataMapOfGUIDDriver {}

class TFunction_HArray1OfDataMapOfGUIDDriver_4 extends TFunction_HArray1OfDataMapOfGUIDDriver {}

/**
 * Interface class for usage of Function Mechanism
 */
class TFunction_IFunction {
}

class TFunction_IFunction_1 extends TFunction_IFunction {}

class TFunction_IFunction_2 extends TFunction_IFunction {}

/**
 * Iterator of the graph of functions
 */
class TFunction_Iterator {
}

class TFunction_Iterator_1 extends TFunction_Iterator {}

class TFunction_Iterator_2 extends TFunction_Iterator {}

/**
 * This class contains information which is written and read during the solving process. Information is divided in three groups.
 */
class TFunction_Logbook extends TDF_Attribute {
}

/**
 * Keeps a scope of functions.
 */
class TFunction_Scope extends TDF_Attribute {
}

/**
 * A topological attribute can be seen as a hook into the topological structure. To this hook, data can be attached and references defined. It is used for keeping and access to topological objects and their evolution. All topological objects are stored in the one user-protected TNaming_UsedShapes attribute at the root label of the data framework. This attribute contains map with all topological shapes, used in this document. To all other labels TNaming_NamedShape attribute can be added. This attribute contains references (hooks) to shapes from the TNaming_UsedShapes attribute and evolution of these shapes. TNaming_NamedShape attribute contains a set of pairs of hooks: old shape and new shape (see the figure below). It allows not only get the topological shapes by the labels, but also trace evolution of the shapes and correctly resolve dependent shapes by the changed one. If shape is just-created, then the old shape for accorded named shape is an empty shape. If a shape is deleted, then the new shape in this named shape is empty. Different algorithms may dispose sub-shapes of the result shape at the individual label depending on necessity: - If a sub-shape must have some extra attributes (material of each face or color of each edge). In this case a specific sub-shape is placed to the separate label (usually, sub-label of the result shape label) with all attributes of this sub-shape. - If topological naming is needed, a necessary and sufficient (for selected sub-shapes identification) set of sub-shapes is placed to the child labels of the result shape label. As usual, as far as basic solids and closed shells are concerned, all faces of the shape are disposed. Edges and vertices sub-shapes can be identified as intersection of contiguous faces. Modified/generated shapes may be placed to one named shape and identified as this named shape and source named shape that also can be identified with used algorithms. TNaming_NamedShape may contain a few pairs of hooks with the same evolution. In this case topology shape, which belongs to the named shape, is a compound of new shapes. The data model contains both the topology and the hooks, and functions handle both topological entities and hooks. Consider the case of a box function, which creates a solid with six faces and six hooks. Each hook is attached to a face. If you want, you can also have this function create hooks for edges and vertices as well as for faces. For the sake of simplicity though, let's limit the example. Not all functions can define explicit hooks for all topological entities they create, but all topological entities can be turned into hooks when necessary. This is where topological naming is necessary.
 */
class TNaming {
}

/**
 * A tool to create and maintain topological attributes. Constructor creates an empty TNaming_NamedShape attribute at the given label. It allows adding "old shape" and "new shape" pairs with the specified evolution to this named shape. One evolution type per one builder must be used.
 */
class TNaming_Builder {
}

class TNaming_CopyShape {
}

/**
 * This class provides default services for an AttributeDelta on a MODIFICATION action.
 */
class TNaming_DeltaOnModification extends TDF_DeltaOnModification {
}

class TNaming_DeltaOnRemoval extends TDF_DeltaOnRemoval {
}

class TNaming_Identifier {
}

class TNaming_Identifier_1 extends TNaming_Identifier {}

class TNaming_Identifier_2 extends TNaming_Identifier {}

/**
 * A tool to visit the contents of a named shape attribute. Pairs of shapes in the attribute are iterated, one being the pre-modification or the old shape, and the other the post-modification or the new shape. This allows you to have a full access to all contents of an attribute. If, on the other hand, you are only interested in topological entities stored in the attribute, you can use the functions GetShape and CurrentShape in TNaming_Tool.
 */
class TNaming_Iterator {
}

class TNaming_Iterator_1 extends TNaming_Iterator {}

class TNaming_Iterator_2 extends TNaming_Iterator {}

class TNaming_Iterator_3 extends TNaming_Iterator {}

class TNaming_IteratorOnShapesSet {
}

class TNaming_IteratorOnShapesSet_1 extends TNaming_IteratorOnShapesSet {}

class TNaming_IteratorOnShapesSet_2 extends TNaming_IteratorOnShapesSet {}

class TNaming_Localizer {
}

/**
 * store the arguments of Naming.
 */
class TNaming_Name {
}

/**
 * The basis to define an attribute for the storage of topology and naming data. This attribute contains two parts: - The type of evolution, a term of the enumeration TNaming_Evolution - A list of pairs of shapes called the "old" shape and the "new" shape. The meaning depends on the type of evolution.
 */
class TNaming_NamedShape extends TDF_Attribute {
}

/**
 * This attribute store the topological naming of any selected shape, when this shape is not already attached to a specific label. This class is also used to solve it when the argumentsof the toipological naming are modified.
 */
class TNaming_Naming extends TDF_Attribute {
}

class TNaming_NamingTool {
}

/**
 * Iterates on all the descendants of a shape
 */
class TNaming_NewShapeIterator {
}

class TNaming_NewShapeIterator_1 extends TNaming_NewShapeIterator {}

class TNaming_NewShapeIterator_2 extends TNaming_NewShapeIterator {}

class TNaming_NewShapeIterator_3 extends TNaming_NewShapeIterator {}

class TNaming_NewShapeIterator_4 extends TNaming_NewShapeIterator {}

/**
 * Iterates on all the ascendants of a shape
 */
class TNaming_OldShapeIterator {
}

class TNaming_OldShapeIterator_1 extends TNaming_OldShapeIterator {}

class TNaming_OldShapeIterator_2 extends TNaming_OldShapeIterator {}

class TNaming_OldShapeIterator_3 extends TNaming_OldShapeIterator {}

class TNaming_OldShapeIterator_4 extends TNaming_OldShapeIterator {}

class TNaming_RefShape {
}

class TNaming_RefShape_1 extends TNaming_RefShape {}

class TNaming_RefShape_2 extends TNaming_RefShape {}

/**
 * To iterate on all the label which contained a given shape.
 */
class TNaming_SameShapeIterator {
}

/**
 * this class manage a scope of labels ===================================
 */
class TNaming_Scope {
}

class TNaming_Scope_1 extends TNaming_Scope {}

class TNaming_Scope_2 extends TNaming_Scope {}

class TNaming_Scope_3 extends TNaming_Scope {}

/**
 * This class provides a single API for selection of shapes. This involves both identification and selection of shapes in the data framework. If the selected shape is modified, this selector will solve its identifications. This class is the user interface for topological naming resources. * The <IsIdentified> method returns (if exists) the NamedShape which contains a given shape. The definition of an identified shape is : a Shape handled by a NamedShape (this shape is the only one stored) , which has the TNaming_PRImITIVE evolution
 */
class TNaming_Selector {
}

class TNaming_ShapesSet {
}

class TNaming_ShapesSet_1 extends TNaming_ShapesSet {}

class TNaming_ShapesSet_2 extends TNaming_ShapesSet {}

/**
 * A tool to get information on the topology of a named shape attribute. This information is typically a TopoDS_Shape object. Using this tool, relations between named shapes are also accessible.
 */
class TNaming_Tool {
}

/**
 * tool to copy underlying TShape of a Shape. The TranslateTool class is provided to support the translation of topological data structures Transient to Transient.
 */
class TNaming_TranslateTool extends Standard_Transient {
}

/**
 * only for Shape Copy test - to move in DNaming
 */
class TNaming_Translator {
}

/**
 * Global attribute located under root label to store all the shapes handled by the framework Set of Shapes Used in a Data from TDF Only one instance by Data, it always Stored as Attribute of The Root.
 */
class TNaming_UsedShapes extends TDF_Attribute {
}

/**
 * This is a base class for OCAF based TObj models with declared virtual methods
 */
class TObj_Application extends TDocStd_Application {
}

/**
 * This class provides interface to the static data to be used during save or load models.
 */
class TObj_Assistant {
}

/**
 * This class provides consistency check of the TObj model. It collects all inconsistencies in the status bits and prepaires messages to be sent using SendStatusMessages (SendMessages) method. It supports also the fix mode, in which some inconsistencies are corrected.
 */
class TObj_CheckModel extends Message_Algorithm {
}

class TObj_HSequenceOfObject extends Standard_Transient {
}

class TObj_HSequenceOfObject_1 extends TObj_HSequenceOfObject {}

class TObj_HSequenceOfObject_2 extends TObj_HSequenceOfObject {}

/**
 * This class is partition is predefined hidden flag
 */
class TObj_HiddenPartition extends TObj_Partition {
}

/**
 * This class is a basis for OCAF based iterators.
 */
class TObj_LabelIterator extends TObj_ObjectIterator {
}

/**
 * Base class for OCAF based models. Defines common behaviour for all models based on TObject classes, basic services to access model objects and common operations with the model. Provides default implementation for many methods.
 */
class TObj_Model extends Standard_Transient {
}

/**
 * This class provides an iterator by all objects in the model.
 */
class TObj_ModelIterator extends TObj_ObjectIterator {
}

/**
 * Basis class for transient objects in OCAF-based models
 */
class TObj_Object extends Standard_Transient {
}

/**
 * This class provides an iterator by objects in a partition. (implements TObj_ObjectIterator interface)
 */
class TObj_ObjectIterator extends Standard_Transient {
}

/**
 * This class provides an iterator by objects in a partition. (implements TObj_ObjectIterator interface)
 */
class TObj_OcafObjectIterator extends TObj_LabelIterator {
}

/**
 * This class privides tool handling one of partitions (the set of homogenious elements) in the OCAF based model`s data structure
 */
class TObj_Partition extends TObj_Object {
}

/**
 * This class is intended to be a root of tools (one per class) to manage persistence of objects inherited from TObj_Object It provides a mechanism to recover correctly typed objects (subtypes of TObj_Object) out of their persistent names
 */
class TObj_Persistence {
}

/**
 * This class provides an iterator by references of the object (implements TObj_ReferenceIterator interface)
 */
class TObj_ReferenceIterator extends TObj_LabelIterator {
}

/**
 * This class is an iterator on sequence
 */
class TObj_SequenceIterator extends TObj_ObjectIterator {
}

/**
 * OCAF Attribute to store a set of positive integer values in the OCAF tree. Each value is identified by ID (positive integer). The supporting underlying data structure is NCollection_SparseArray of integers.
 */
class TObj_TIntSparseArray extends TDF_Attribute {
}

/**
 * Attribute to store OCAF-based models in OCAF tree The persistency mechanism of the TObj_TModel allowes to save and restore various types of models without recompilation of the schema
 */
class TObj_TModel extends TDF_Attribute {
}

/**
 * This class provides OCAF Attribute to storing the unique names of object in model.
 */
class TObj_TNameContainer extends TDF_Attribute {
}

/**
 * Purpose: OCAF Attribute to storing objects (interfaces) of OCAF-based modelers in the OCAF tree. The persistency mechanism of the TObj_TObject allowes to save and restore objects of various subtypes without recompilation of the schema
 */
class TObj_TObject extends TDF_Attribute {
}

/**
 * Attribute for storing references to the objects which implement TObj_Object interface in the OCAF tree. Its persistency mechanism provides transparent method for storing cross-model references. Each reference, when created, registers itself in the referred object, to support back references
 */
class TObj_TReference extends TDF_Attribute {
}

class TObj_TXYZ extends TDF_Attribute {
}

class TShort_HArray2OfShortReal extends Standard_Transient {
}

class TShort_HArray2OfShortReal_1 extends TShort_HArray2OfShortReal {}

class TShort_HArray2OfShortReal_2 extends TShort_HArray2OfShortReal {}

class TShort_HArray2OfShortReal_3 extends TShort_HArray2OfShortReal {}

class TShort_HSequenceOfShortReal extends Standard_Transient {
}

class TShort_HSequenceOfShortReal_1 extends TShort_HSequenceOfShortReal {}

class TShort_HSequenceOfShortReal_2 extends TShort_HSequenceOfShortReal {}

/**
 * This package gives resources for Topology oriented applications such as : Topological Data Structure, Topological Algorithms.
 */
class TopAbs {
}

class TopBas_TestInterference {
}

class TopBas_TestInterference_1 extends TopBas_TestInterference {}

class TopBas_TestInterference_2 extends TopBas_TestInterference {}

/**
 * TheEdgeFaceTransition is an algorithm to compute the cumulated transition for interferences on an edge.
 */
class TopCnx_EdgeFaceTransition {
}

/**
 * This package provides basic tools to explore the topological data structures.
 */
class TopExp {
}

/**
 * An Explorer is a Tool to visit a Topological Data Structure form the TopoDS package.
 */
class TopExp_Explorer {
}

class TopExp_Explorer_1 extends TopExp_Explorer {}

class TopExp_Explorer_2 extends TopExp_Explorer {}

/**
 * Describes a coordinate transformation, i.e. a change to an elementary 3D coordinate system, or position in 3D space. A Datum3D is always described relative to the default datum. The default datum is described relative to itself: its origin is (0,0,0), and its axes are (1,0,0) (0,1,0) (0,0,1).
 */
class TopLoc_Datum3D extends Standard_Transient {
}

class TopLoc_Datum3D_1 extends TopLoc_Datum3D {}

class TopLoc_Datum3D_2 extends TopLoc_Datum3D {}

/**
 * An ItemLocation is an elementary coordinate system in a Location.
 */
class TopLoc_ItemLocation {
}

/**
 * A Location is a composite transition. It comprises a series of elementary reference coordinates, i.e. objects of type TopLoc_Datum3D, and the powers to which these objects are raised.
 */
class TopLoc_Location {
}

class TopLoc_Location_1 extends TopLoc_Location {}

class TopLoc_Location_2 extends TopLoc_Location {}

class TopLoc_Location_3 extends TopLoc_Location {}

class TopLoc_SListNodeOfItemLocation extends Standard_Transient {
}

/**
 * An SListOfItemLocation is a LISP like list of Items. An SListOfItemLocation is : . Empty. . Or it has a Value and a Tail which is an other SListOfItemLocation.
 */
class TopLoc_SListOfItemLocation {
}

class TopLoc_SListOfItemLocation_1 extends TopLoc_SListOfItemLocation {}

class TopLoc_SListOfItemLocation_2 extends TopLoc_SListOfItemLocation {}

class TopLoc_SListOfItemLocation_3 extends TopLoc_SListOfItemLocation {}

class TopLoc_SListOfItemLocation_4 extends TopLoc_SListOfItemLocation {}

/**
 * This package provides the topological operations on the BRep data structure.
 */
class TopOpeBRep {
}

class TopOpeBRepBuild_Area1dBuilder extends TopOpeBRepBuild_AreaBuilder {
}

class TopOpeBRepBuild_Area1dBuilder_1 extends TopOpeBRepBuild_Area1dBuilder {}

class TopOpeBRepBuild_Area1dBuilder_2 extends TopOpeBRepBuild_Area1dBuilder {}

/**
 * The Area2dBuilder algorithm is used to construct Faces from a LoopSet, where the Loop is the composite topological object of the boundary, here wire or block of edges. The LoopSet gives an iteration on Loops. For each Loop it indicates if it is on the boundary (wire) or if it results from an interference (block of edges). The result of the Area2dBuilder is an iteration on areas. An area is described by a set of Loops.
 */
class TopOpeBRepBuild_Area2dBuilder extends TopOpeBRepBuild_AreaBuilder {
}

class TopOpeBRepBuild_Area2dBuilder_1 extends TopOpeBRepBuild_Area2dBuilder {}

class TopOpeBRepBuild_Area2dBuilder_2 extends TopOpeBRepBuild_Area2dBuilder {}

/**
 * The Area3dBuilder algorithm is used to construct Solids from a LoopSet, where the Loop is the composite topological object of the boundary, here wire or block of edges. The LoopSet gives an iteration on Loops. For each Loop it indicates if it is on the boundary (wire) or if it results from an interference (block of edges). The result of the Area3dBuilder is an iteration on areas. An area is described by a set of Loops.
 */
class TopOpeBRepBuild_Area3dBuilder extends TopOpeBRepBuild_AreaBuilder {
}

class TopOpeBRepBuild_Area3dBuilder_1 extends TopOpeBRepBuild_Area3dBuilder {}

class TopOpeBRepBuild_Area3dBuilder_2 extends TopOpeBRepBuild_Area3dBuilder {}

/**
 * The AreaBuilder algorithm is used to reconstruct complex topological objects as Faces or Solids. * Loop is the composite topological object of the boundary. Wire for a Face. Shell for a Solid. * LoopSet is a tool describing the object to build. It gives an iteration on Loops. For each Loop it tells if it is on the boundary or if it is an interference. * LoopClassifier is an algorithm used to test if a Loop is inside another Loop. The result of the reconstruction is an iteration on the reconstructed areas. An area is described by a set of Loops. A AreaBuilder is built with : - a LoopSet describing the object to reconstruct. - a LoopClassifier providing the classification algorithm.
 */
class TopOpeBRepBuild_AreaBuilder {
}

class TopOpeBRepBuild_AreaBuilder_1 extends TopOpeBRepBuild_AreaBuilder {}

class TopOpeBRepBuild_AreaBuilder_2 extends TopOpeBRepBuild_AreaBuilder {}

class TopOpeBRepBuild_BlockBuilder {
}

class TopOpeBRepBuild_BlockBuilder_1 extends TopOpeBRepBuild_BlockBuilder {}

class TopOpeBRepBuild_BlockBuilder_2 extends TopOpeBRepBuild_BlockBuilder {}

/**
 * Iterator on the elements of a block.
 */
class TopOpeBRepBuild_BlockIterator {
}

class TopOpeBRepBuild_BlockIterator_1 extends TopOpeBRepBuild_BlockIterator {}

class TopOpeBRepBuild_BlockIterator_2 extends TopOpeBRepBuild_BlockIterator {}

class TopOpeBRepBuild_BuilderON {
}

class TopOpeBRepBuild_BuilderON_1 extends TopOpeBRepBuild_BuilderON {}

class TopOpeBRepBuild_BuilderON_2 extends TopOpeBRepBuild_BuilderON {}

/**
 * classify composite Loops, i.e, loops that can be either a Shape, or a block of Elements.
 */
class TopOpeBRepBuild_CompositeClassifier extends TopOpeBRepBuild_LoopClassifier {
}

class TopOpeBRepBuild_CorrectFace2d {
}

class TopOpeBRepBuild_CorrectFace2d_1 extends TopOpeBRepBuild_CorrectFace2d {}

class TopOpeBRepBuild_CorrectFace2d_2 extends TopOpeBRepBuild_CorrectFace2d {}

class TopOpeBRepBuild_EdgeBuilder extends TopOpeBRepBuild_Area1dBuilder {
}

class TopOpeBRepBuild_EdgeBuilder_1 extends TopOpeBRepBuild_EdgeBuilder {}

class TopOpeBRepBuild_EdgeBuilder_2 extends TopOpeBRepBuild_EdgeBuilder {}

/**
 * The FaceAreaBuilder algorithm is used to construct Faces from a LoopSet, where the Loop is the composite topological object of the boundary, here wire or block of edges. The LoopSet gives an iteration on Loops. For each Loop it indicates if it is on the boundary (wire) or if it results from an interference (block of edges). The result of the FaceAreaBuilder is an iteration on areas. An area is described by a set of Loops.
 */
class TopOpeBRepBuild_FaceAreaBuilder extends TopOpeBRepBuild_Area2dBuilder {
}

class TopOpeBRepBuild_FaceAreaBuilder_1 extends TopOpeBRepBuild_FaceAreaBuilder {}

class TopOpeBRepBuild_FaceAreaBuilder_2 extends TopOpeBRepBuild_FaceAreaBuilder {}

class TopOpeBRepBuild_FaceBuilder {
}

class TopOpeBRepBuild_FaceBuilder_1 extends TopOpeBRepBuild_FaceBuilder {}

class TopOpeBRepBuild_FaceBuilder_2 extends TopOpeBRepBuild_FaceBuilder {}

class TopOpeBRepBuild_FuseFace {
}

class TopOpeBRepBuild_FuseFace_1 extends TopOpeBRepBuild_FuseFace {}

class TopOpeBRepBuild_FuseFace_2 extends TopOpeBRepBuild_FuseFace {}

class TopOpeBRepBuild_GIter {
}

class TopOpeBRepBuild_GIter_1 extends TopOpeBRepBuild_GIter {}

class TopOpeBRepBuild_GIter_2 extends TopOpeBRepBuild_GIter {}

class TopOpeBRepBuild_GTool {
}

class TopOpeBRepBuild_GTopo {
}

class TopOpeBRepBuild_GTopo_1 extends TopOpeBRepBuild_GTopo {}

class TopOpeBRepBuild_GTopo_2 extends TopOpeBRepBuild_GTopo {}

/**
 * The HBuilder algorithm constructs topological objects from an existing topology and new geometries attached to the topology. It is used to construct the result of a topological operation; the existing topologies are the parts involved in the topological operation and the new geometries are the intersection lines and points.
 */
class TopOpeBRepBuild_HBuilder extends Standard_Transient {
}

/**
 * a Loop is an existing shape (Shell,Wire) or a set of shapes (Faces,Edges) which are connex. a set of connex shape is represented by a BlockIterator
 */
class TopOpeBRepBuild_Loop extends Standard_Transient {
}

class TopOpeBRepBuild_Loop_1 extends TopOpeBRepBuild_Loop {}

class TopOpeBRepBuild_Loop_2 extends TopOpeBRepBuild_Loop {}

/**
 * classify loops in order to build Areas
 */
class TopOpeBRepBuild_LoopClassifier {
}

class TopOpeBRepBuild_LoopSet {
}

class TopOpeBRepBuild_Pave extends TopOpeBRepBuild_Loop {
}

/**
 * This class compares vertices on an edge.
 */
class TopOpeBRepBuild_PaveClassifier extends TopOpeBRepBuild_LoopClassifier {
}

/**
 * class providing an exploration of a set of vertices to build edges. It is similar to LoopSet from TopOpeBRepBuild where Loop is Pave.
 */
class TopOpeBRepBuild_PaveSet extends TopOpeBRepBuild_LoopSet {
}

/**
 * represent shape + a list of shape
 */
class TopOpeBRepBuild_ShapeListOfShape {
}

class TopOpeBRepBuild_ShapeListOfShape_1 extends TopOpeBRepBuild_ShapeListOfShape {}

class TopOpeBRepBuild_ShapeListOfShape_2 extends TopOpeBRepBuild_ShapeListOfShape {}

class TopOpeBRepBuild_ShapeListOfShape_3 extends TopOpeBRepBuild_ShapeListOfShape {}

/**
 * Auxiliary class providing an exploration of a set of shapes to build faces or solids. To build faces : shapes are wires, elements are edges. To build solids : shapes are shells, elements are faces. The ShapeSet stores a list of shapes, a list of elements to start reconstructions, and a map to search neighbours. The map stores the connection between elements through subshapes of type <SubShapeType> given in constructor. <SubShapeType> is : - TopAbs_VERTEX to connect edges - TopAbs_EDGE to connect faces
 */
class TopOpeBRepBuild_ShapeSet {
}

/**
 * Classify faces and shells. shapes are Shells, Elements are Faces.
 */
class TopOpeBRepBuild_ShellFaceClassifier extends TopOpeBRepBuild_CompositeClassifier {
}

/**
 * a bound is a shell, a boundelement is a face. The ShapeSet stores : - a list of shell (bounds), - a list of face (boundelements) to start reconstructions, - a map of edge giving the list of face incident to an edge.
 */
class TopOpeBRepBuild_ShellFaceSet extends TopOpeBRepBuild_ShapeSet {
}

class TopOpeBRepBuild_ShellFaceSet_1 extends TopOpeBRepBuild_ShellFaceSet {}

class TopOpeBRepBuild_ShellFaceSet_2 extends TopOpeBRepBuild_ShellFaceSet {}

/**
 * This class builds solids from a set of shells SSh and a solid F.
 */
class TopOpeBRepBuild_ShellToSolid {
}

/**
 * The SolidAreaBuilder algorithm is used to construct Solids from a LoopSet, where the Loop is the composite topological object of the boundary, here wire or block of edges. The LoopSet gives an iteration on Loops. For each Loop it indicates if it is on the boundary (wire) or if it results from an interference (block of edges). The result of the SolidAreaBuilder is an iteration on areas. An area is described by a set of Loops.
 */
class TopOpeBRepBuild_SolidAreaBuilder extends TopOpeBRepBuild_Area3dBuilder {
}

class TopOpeBRepBuild_SolidAreaBuilder_1 extends TopOpeBRepBuild_SolidAreaBuilder {}

class TopOpeBRepBuild_SolidAreaBuilder_2 extends TopOpeBRepBuild_SolidAreaBuilder {}

class TopOpeBRepBuild_SolidBuilder {
}

class TopOpeBRepBuild_SolidBuilder_1 extends TopOpeBRepBuild_SolidBuilder {}

class TopOpeBRepBuild_SolidBuilder_2 extends TopOpeBRepBuild_SolidBuilder {}

/**
 * Auxiliary methods used in TopOpeBRepBuild_Builder1 class
 */
class TopOpeBRepBuild_Tools {
}

class TopOpeBRepBuild_Tools2d {
}

class TopOpeBRepBuild_VertexInfo {
}

/**
 * Classify edges and wires. shapes are Wires, Element are Edge.
 */
class TopOpeBRepBuild_WireEdgeClassifier extends TopOpeBRepBuild_CompositeClassifier {
}

/**
 * a bound is a wire, a boundelement is an edge. The ShapeSet stores : - a list of wire (bounds), - a list of edge (boundelements) to start reconstructions, - a map of vertex giving the list of edge incident to a vertex.
 */
class TopOpeBRepBuild_WireEdgeSet extends TopOpeBRepBuild_ShapeSet {
}

/**
 * This class builds faces from a set of wires SW and a face F. The face must have and underlying surface, say S. All of the edges of all of the wires must have a 2d representation on surface S (except if S is planar)
 */
class TopOpeBRepBuild_WireToFace {
}

/**
 * This package provides services used by the TopOpeBRepBuild package performing topological operations on the BRep data structure.
 */
class TopOpeBRepDS {
}

class TopOpeBRepDS_Association extends Standard_Transient {
}

/**
 * Provides a Tool to build topologies. Used to instantiate the Builder algorithm.
 */
class TopOpeBRepDS_BuildTool {
}

class TopOpeBRepDS_BuildTool_1 extends TopOpeBRepDS_BuildTool {}

class TopOpeBRepDS_BuildTool_2 extends TopOpeBRepDS_BuildTool {}

class TopOpeBRepDS_BuildTool_3 extends TopOpeBRepDS_BuildTool {}

/**
 * a tool verifing integrity and structure of DS
 */
class TopOpeBRepDS_Check extends Standard_Transient {
}

class TopOpeBRepDS_Check_1 extends TopOpeBRepDS_Check {}

class TopOpeBRepDS_Check_2 extends TopOpeBRepDS_Check {}

/**
 * A Geom curve and a tolerance.
 */
class TopOpeBRepDS_Curve {
}

class TopOpeBRepDS_Curve_1 extends TopOpeBRepDS_Curve {}

class TopOpeBRepDS_Curve_2 extends TopOpeBRepDS_Curve {}

class TopOpeBRepDS_CurveData extends TopOpeBRepDS_GeometryData {
}

class TopOpeBRepDS_CurveData_1 extends TopOpeBRepDS_CurveData {}

class TopOpeBRepDS_CurveData_2 extends TopOpeBRepDS_CurveData {}

class TopOpeBRepDS_CurveExplorer {
}

class TopOpeBRepDS_CurveExplorer_1 extends TopOpeBRepDS_CurveExplorer {}

class TopOpeBRepDS_CurveExplorer_2 extends TopOpeBRepDS_CurveExplorer {}

class TopOpeBRepDS_CurveIterator extends TopOpeBRepDS_InterferenceIterator {
}

/**
 * An interference with a parameter.
 */
class TopOpeBRepDS_CurvePointInterference extends TopOpeBRepDS_Interference {
}

/**
 * The DataStructure stores :
 */
class TopOpeBRepDS_DataStructure {
}

class TopOpeBRepDS_Dumper {
}

/**
 * EdgeInterferenceReducer
 */
class TopOpeBRepDS_EIR {
}

/**
 * a tool computing edge / face complex transition, Interferences of edge reference are given by I = (T on face, G = point or vertex, S = edge)
 */
class TopOpeBRepDS_Edge3dInterferenceTool {
}

/**
 * a tool computing complex transition on Edge.
 */
class TopOpeBRepDS_EdgeInterferenceTool {
}

/**
 * An interference with a parameter (ShapeShapeInterference).
 */
class TopOpeBRepDS_EdgeVertexInterference extends TopOpeBRepDS_ShapeShapeInterference {
}

class TopOpeBRepDS_EdgeVertexInterference_1 extends TopOpeBRepDS_EdgeVertexInterference {}

class TopOpeBRepDS_EdgeVertexInterference_2 extends TopOpeBRepDS_EdgeVertexInterference {}

class TopOpeBRepDS_Explorer {
}

class TopOpeBRepDS_Explorer_1 extends TopOpeBRepDS_Explorer {}

class TopOpeBRepDS_Explorer_2 extends TopOpeBRepDS_Explorer {}

/**
 * FaceInterferenceReducer
 */
class TopOpeBRepDS_FIR {
}

/**
 * ShapeShapeInterference
 */
class TopOpeBRepDS_FaceEdgeInterference extends TopOpeBRepDS_ShapeShapeInterference {
}

/**
 * a tool computing complex transition on Face.
 */
class TopOpeBRepDS_FaceInterferenceTool {
}

class TopOpeBRepDS_Filter {
}

class TopOpeBRepDS_GapFiller {
}

class TopOpeBRepDS_GapTool extends Standard_Transient {
}

class TopOpeBRepDS_GapTool_1 extends TopOpeBRepDS_GapTool {}

class TopOpeBRepDS_GapTool_2 extends TopOpeBRepDS_GapTool {}

/**
 * mother-class of SurfaceData, CurveData, PointData
 */
class TopOpeBRepDS_GeometryData {
}

class TopOpeBRepDS_GeometryData_1 extends TopOpeBRepDS_GeometryData {}

class TopOpeBRepDS_GeometryData_2 extends TopOpeBRepDS_GeometryData {}

class TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference extends Standard_Transient {
}

class TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference_1 extends TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference {}

class TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference_2 extends TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference {}

class TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference_3 extends TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference {}

class TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference_4 extends TopOpeBRepDS_HArray1OfDataMapOfIntegerListOfInterference {}

class TopOpeBRepDS_HDataStructure extends Standard_Transient {
}

/**
 * An interference is the description of the attachment of a new geometry on a geometry. For example an intersection point on an Edge or on a Curve.
 */
class TopOpeBRepDS_Interference extends Standard_Transient {
}

class TopOpeBRepDS_Interference_1 extends TopOpeBRepDS_Interference {}

class TopOpeBRepDS_Interference_2 extends TopOpeBRepDS_Interference {}

class TopOpeBRepDS_Interference_3 extends TopOpeBRepDS_Interference {}

/**
 * Iterate on interferences of a list, matching conditions on interferences. Nota : inheritance of ListIteratorOfListOfInterference from TopOpeBRepDS has not been done because of the impossibility of naming the classical More, Next methods which are declared as static in TCollection_ListIteratorOfList ... . ListIteratorOfList has benn placed as a field of InterferenceIterator.
 */
class TopOpeBRepDS_InterferenceIterator {
}

class TopOpeBRepDS_InterferenceIterator_1 extends TopOpeBRepDS_InterferenceIterator {}

class TopOpeBRepDS_InterferenceIterator_2 extends TopOpeBRepDS_InterferenceIterator {}

class TopOpeBRepDS_InterferenceTool {
}

/**
 * represent a list of shape
 */
class TopOpeBRepDS_ListOfShapeOn1State {
}

class TopOpeBRepDS_Marker extends Standard_Transient {
}

/**
 * A Geom point and a tolerance.
 */
class TopOpeBRepDS_Point {
}

class TopOpeBRepDS_Point_1 extends TopOpeBRepDS_Point {}

class TopOpeBRepDS_Point_2 extends TopOpeBRepDS_Point {}

class TopOpeBRepDS_Point_3 extends TopOpeBRepDS_Point {}

class TopOpeBRepDS_PointData extends TopOpeBRepDS_GeometryData {
}

class TopOpeBRepDS_PointData_1 extends TopOpeBRepDS_PointData {}

class TopOpeBRepDS_PointData_2 extends TopOpeBRepDS_PointData {}

class TopOpeBRepDS_PointData_3 extends TopOpeBRepDS_PointData {}

class TopOpeBRepDS_PointExplorer {
}

class TopOpeBRepDS_PointExplorer_1 extends TopOpeBRepDS_PointExplorer {}

class TopOpeBRepDS_PointExplorer_2 extends TopOpeBRepDS_PointExplorer {}

class TopOpeBRepDS_PointIterator extends TopOpeBRepDS_InterferenceIterator {
}

/**
 * reduce interferences of a data structure (HDS) used in topological operations.
 */
class TopOpeBRepDS_Reducer {
}

class TopOpeBRepDS_ShapeData {
}

/**
 * Interference
 */
class TopOpeBRepDS_ShapeShapeInterference extends TopOpeBRepDS_Interference {
}

class TopOpeBRepDS_ShapeWithState {
}

/**
 * Interference
 */
class TopOpeBRepDS_SolidSurfaceInterference extends TopOpeBRepDS_Interference {
}

/**
 * A Geom surface and a tolerance.
 */
class TopOpeBRepDS_Surface {
}

class TopOpeBRepDS_Surface_1 extends TopOpeBRepDS_Surface {}

class TopOpeBRepDS_Surface_2 extends TopOpeBRepDS_Surface {}

class TopOpeBRepDS_Surface_3 extends TopOpeBRepDS_Surface {}

/**
 * an interference with a 2d curve
 */
class TopOpeBRepDS_SurfaceCurveInterference extends TopOpeBRepDS_Interference {
}

class TopOpeBRepDS_SurfaceCurveInterference_1 extends TopOpeBRepDS_SurfaceCurveInterference {}

class TopOpeBRepDS_SurfaceCurveInterference_2 extends TopOpeBRepDS_SurfaceCurveInterference {}

class TopOpeBRepDS_SurfaceCurveInterference_3 extends TopOpeBRepDS_SurfaceCurveInterference {}

class TopOpeBRepDS_SurfaceData extends TopOpeBRepDS_GeometryData {
}

class TopOpeBRepDS_SurfaceData_1 extends TopOpeBRepDS_SurfaceData {}

class TopOpeBRepDS_SurfaceData_2 extends TopOpeBRepDS_SurfaceData {}

class TopOpeBRepDS_SurfaceExplorer {
}

class TopOpeBRepDS_SurfaceExplorer_1 extends TopOpeBRepDS_SurfaceExplorer {}

class TopOpeBRepDS_SurfaceExplorer_2 extends TopOpeBRepDS_SurfaceExplorer {}

class TopOpeBRepDS_SurfaceIterator extends TopOpeBRepDS_InterferenceIterator {
}

class TopOpeBRepDS_TKI {
}

class TopOpeBRepDS_TOOL {
}

class TopOpeBRepDS_Transition {
}

class TopOpeBRepDS_Transition_1 extends TopOpeBRepDS_Transition {}

class TopOpeBRepDS_Transition_2 extends TopOpeBRepDS_Transition {}

class TopOpeBRepDS_Transition_3 extends TopOpeBRepDS_Transition {}

/**
 * This package provides services used by the TopOpeBRep package performing topological operations on the BRep data structure.
 */
class TopOpeBRepTool {
}

/**
 * Describes the ancestors tool needed by the class DSFiller from TopOpeInter.
 */
class TopOpeBRepTool_AncestorsTool {
}

class TopOpeBRepTool_BoxSort {
}

class TopOpeBRepTool_BoxSort_1 extends TopOpeBRepTool_BoxSort {}

class TopOpeBRepTool_BoxSort_2 extends TopOpeBRepTool_BoxSort {}

class TopOpeBRepTool_C2DF {
}

class TopOpeBRepTool_C2DF_1 extends TopOpeBRepTool_C2DF {}

class TopOpeBRepTool_C2DF_2 extends TopOpeBRepTool_C2DF {}

class TopOpeBRepTool_CLASSI {
}

/**
 * Fref is built on x-periodic surface (x=u,v). S built on Fref's geometry, should be UVClosed.
 */
class TopOpeBRepTool_CORRISO {
}

class TopOpeBRepTool_CORRISO_1 extends TopOpeBRepTool_CORRISO {}

class TopOpeBRepTool_CORRISO_2 extends TopOpeBRepTool_CORRISO {}

class TopOpeBRepTool_CurveTool {
}

class TopOpeBRepTool_CurveTool_1 extends TopOpeBRepTool_CurveTool {}

class TopOpeBRepTool_CurveTool_2 extends TopOpeBRepTool_CurveTool {}

class TopOpeBRepTool_CurveTool_3 extends TopOpeBRepTool_CurveTool {}

/**
 * This class can detect vertices in a face that can be considered useless and then perform the fuse of the edges and remove the useless vertices. By useles vertices, we mean : * vertices that have exactly two connex edges * the edges connex to the vertex must have exactly the same 2 connex faces . * The edges connex to the vertex must have the same geometric support.
 */
class TopOpeBRepTool_FuseEdges {
}

class TopOpeBRepTool_GeomTool {
}

class TopOpeBRepTool_HBoxTool extends Standard_Transient {
}

/**
 * remove from a shape, the internal edges that are not connected to any face in the shape. We can get the list of the edges as a DataMapOfShapeListOfShape with a Face of the Shape as the key and a list of internal edges as the value. The list of internal edges means edges that are not connected to any face in the shape.
 */
class TopOpeBRepTool_PurgeInternalEdges {
}

class TopOpeBRepTool_REGUS {
}

class TopOpeBRepTool_REGUW {
}

class TopOpeBRepTool_ShapeClassifier {
}

class TopOpeBRepTool_ShapeClassifier_1 extends TopOpeBRepTool_ShapeClassifier {}

class TopOpeBRepTool_ShapeClassifier_2 extends TopOpeBRepTool_ShapeClassifier {}

/**
 * Extends TopExp_Explorer by counting index of current item (for tracing and debug)
 */
class TopOpeBRepTool_ShapeExplorer extends TopExp_Explorer {
}

class TopOpeBRepTool_ShapeExplorer_1 extends TopOpeBRepTool_ShapeExplorer {}

class TopOpeBRepTool_ShapeExplorer_2 extends TopOpeBRepTool_ShapeExplorer {}

class TopOpeBRepTool_ShapeTool {
}

class TopOpeBRepTool_SolidClassifier {
}

class TopOpeBRepTool_TOOL {
}

class TopOpeBRepTool_connexity {
}

class TopOpeBRepTool_connexity_1 extends TopOpeBRepTool_connexity {}

class TopOpeBRepTool_connexity_2 extends TopOpeBRepTool_connexity {}

class TopOpeBRepTool_face {
}

class TopOpeBRepTool_makeTransition {
}

class TopOpeBRepTool_mkTondgE {
}

class TopOpeBRep_Bipoint {
}

class TopOpeBRep_Bipoint_1 extends TopOpeBRep_Bipoint {}

class TopOpeBRep_Bipoint_2 extends TopOpeBRep_Bipoint {}

/**
 * Provides class methods to fill a datastructure with results of intersections.
 */
class TopOpeBRep_DSFiller {
}

/**
 * Fills a TopOpeBRepDS_DataStructure with Edge/Edge instersection data described by TopOpeBRep_EdgesIntersector.
 */
class TopOpeBRep_EdgesFiller {
}

/**
 * Describes the intersection of two edges on the same surface
 */
class TopOpeBRep_EdgesIntersector {
}

class TopOpeBRep_FFDumper extends Standard_Transient {
}

class TopOpeBRep_FFTransitionTool {
}

class TopOpeBRep_FaceEdgeFiller {
}

/**
 * Describes the intersection of a face and an edge.
 */
class TopOpeBRep_FaceEdgeIntersector {
}

/**
 * Fills a DataStructure from TopOpeBRepDS with the result of Face/Face instersection described by FacesIntersector from TopOpeBRep. if the faces have same Domain, record it in the DS. else record lines and points and attach list of interferences to the faces, the lines and the edges.
 */
class TopOpeBRep_FacesFiller {
}

/**
 * Describes the intersection of two faces.
 */
class TopOpeBRep_FacesIntersector {
}

/**
 * Provide services needed by the DSFiller
 */
class TopOpeBRep_GeomTool {
}

class TopOpeBRep_HArray1OfLineInter extends Standard_Transient {
}

class TopOpeBRep_HArray1OfLineInter_1 extends TopOpeBRep_HArray1OfLineInter {}

class TopOpeBRep_HArray1OfLineInter_2 extends TopOpeBRep_HArray1OfLineInter {}

class TopOpeBRep_HArray1OfLineInter_3 extends TopOpeBRep_HArray1OfLineInter {}

class TopOpeBRep_HArray1OfLineInter_4 extends TopOpeBRep_HArray1OfLineInter {}

class TopOpeBRep_HArray1OfVPointInter extends Standard_Transient {
}

class TopOpeBRep_HArray1OfVPointInter_1 extends TopOpeBRep_HArray1OfVPointInter {}

class TopOpeBRep_HArray1OfVPointInter_2 extends TopOpeBRep_HArray1OfVPointInter {}

class TopOpeBRep_HArray1OfVPointInter_3 extends TopOpeBRep_HArray1OfVPointInter {}

class TopOpeBRep_HArray1OfVPointInter_4 extends TopOpeBRep_HArray1OfVPointInter {}

class TopOpeBRep_Hctxee2d extends Standard_Transient {
}

class TopOpeBRep_Hctxff2d extends Standard_Transient {
}

class TopOpeBRep_LineInter {
}

class TopOpeBRep_Point2d {
}

class TopOpeBRep_PointClassifier {
}

/**
 * Provide services needed by the Fillers
 */
class TopOpeBRep_PointGeomTool {
}

/**
 * Intersect two shapes.
 */
class TopOpeBRep_ShapeIntersector {
}

/**
 * Intersect two shapes.
 */
class TopOpeBRep_ShapeIntersector2d {
}

/**
 * Find, among the subshapes SS of a reference shape RS, the ones which 3D box interfers with the box of a shape S (SS and S are of the same type).
 */
class TopOpeBRep_ShapeScanner {
}

class TopOpeBRep_VPointInter {
}

class TopOpeBRep_VPointInterClassifier {
}

class TopOpeBRep_VPointInterIterator {
}

class TopOpeBRep_VPointInterIterator_1 extends TopOpeBRep_VPointInterIterator {}

class TopOpeBRep_VPointInterIterator_2 extends TopOpeBRep_VPointInterIterator {}

class TopOpeBRep_WPointInter {
}

class TopOpeBRep_WPointInterIterator {
}

class TopOpeBRep_WPointInterIterator_1 extends TopOpeBRep_WPointInterIterator {}

class TopOpeBRep_WPointInterIterator_2 extends TopOpeBRep_WPointInterIterator {}

/**
 * The TopTools package provides utilities for the topological data structure.
 */
class TopTools {
}

class TopTools_HArray1OfListOfShape extends Standard_Transient {
}

class TopTools_HArray1OfListOfShape_1 extends TopTools_HArray1OfListOfShape {}

class TopTools_HArray1OfListOfShape_2 extends TopTools_HArray1OfListOfShape {}

class TopTools_HArray1OfListOfShape_3 extends TopTools_HArray1OfListOfShape {}

class TopTools_HArray1OfListOfShape_4 extends TopTools_HArray1OfListOfShape {}

/**
 * The class LocationSet stores a set of location in a relocatable state.
 */
class TopTools_LocationSet {
}

/**
 * Class TopTools_MutexForShapeProvider This class is used to create and store mutexes associated with shapes.
 */
class TopTools_MutexForShapeProvider {
}

class TopTools_OrientedShapeMapHasher {
}

/**
 * Hash tool, used for generating maps of shapes in topology.
 */
class TopTools_ShapeMapHasher {
}

/**
 * A ShapeSets contains a Shape and all its sub-shapes and locations. It can be dump, write and read.
 */
class TopTools_ShapeSet {
}

/**
 * This algorithm is used to compute the transition of a Curve intersecting a curvilinear boundary.
 */
class TopTrans_CurveTransition {
}

/**
 * This algorithm is used to compute the transition of a 3D surface intersecting a topological surfacic boundary on a 3D curve ( intersection curve ). The boundary is described by a set of faces each face is described by - its support surface, - an orientation defining its matter side. The geometric elements are described locally at the intersection point by a second order development. A surface is described by the normal vector, the principal directions and the principal curvatures. A curve is described by the tangent, the normal and the curvature. The algorithm keeps track of the two faces elements closest to the part of the curve "before" and "after" the intersection, these two elements are updated for each new face. The position of the curve can be computed when at least one surface element has been given, this position is "In","Out" or "On" for the part of the curve "Before" or "After" the intersection.
 */
class TopTrans_SurfaceTransition {
}

/**
 * Provides methods to cast objects of class TopoDS_Shape to be onjects of more specialized sub-classes. Types are verified, thus in the example below, the first two blocks are correct but the third is rejected by the compiler.
 */
class TopoDS {
}

/**
 * This package implements the mapping between CAS.CAD Shape representation and AP214 Shape Representation. The target schema is pms_c4 (a subset of AP214)
 */
class TopoDSToStep {
}

/**
 * This builder Class provides services to build a ProSTEP Shape model from a Cas.Cad BRep.
 */
class TopoDSToStep_Builder extends TopoDSToStep_Root {
}

class TopoDSToStep_Builder_1 extends TopoDSToStep_Builder {}

class TopoDSToStep_Builder_2 extends TopoDSToStep_Builder {}

/**
 * This Tool Class provides Information about Faceted Shapes to be mapped to STEP.
 */
class TopoDSToStep_FacetedTool {
}

/**
 * This class implements the mapping between classes Solid from TopoDS and BrepWithVoids from StepShape. All the topology and geometry comprised into the shell or the solid are taken into account and translated.
 */
class TopoDSToStep_MakeBrepWithVoids extends TopoDSToStep_Root {
}

/**
 * This class implements the mapping between classes Shell or Solid from TopoDS and FacetedBrep from StepShape. All the topology and geometry comprised into the shell or the solid are taken into account and translated.
 */
class TopoDSToStep_MakeFacetedBrep extends TopoDSToStep_Root {
}

class TopoDSToStep_MakeFacetedBrep_1 extends TopoDSToStep_MakeFacetedBrep {}

class TopoDSToStep_MakeFacetedBrep_2 extends TopoDSToStep_MakeFacetedBrep {}

/**
 * This class implements the mapping between classes Solid from TopoDS and FacetedBrepAndBrepWithVoids from StepShape. All the topology and geometry comprised into the shell or the solid are taken into account and translated.
 */
class TopoDSToStep_MakeFacetedBrepAndBrepWithVoids extends TopoDSToStep_Root {
}

/**
 * This class implements the mapping between a Shape from TopoDS and a GeometricCurveSet from StepShape in order to create a GeometricallyBoundedWireframeRepresentation.
 */
class TopoDSToStep_MakeGeometricCurveSet extends TopoDSToStep_Root {
}

/**
 * This class implements the mapping between classes Shell or Solid from TopoDS and ManifoldSolidBrep from StepShape. All the topology and geometry comprised into the shell or the solid are taken into account and translated.
 */
class TopoDSToStep_MakeManifoldSolidBrep extends TopoDSToStep_Root {
}

class TopoDSToStep_MakeManifoldSolidBrep_1 extends TopoDSToStep_MakeManifoldSolidBrep {}

class TopoDSToStep_MakeManifoldSolidBrep_2 extends TopoDSToStep_MakeManifoldSolidBrep {}

/**
 * This class implements the mapping between classes Face, Shell or Solid from TopoDS and ShellBasedSurfaceModel from StepShape. All the topology and geometry comprised into the shape are taken into account and translated.
 */
class TopoDSToStep_MakeShellBasedSurfaceModel extends TopoDSToStep_Root {
}

class TopoDSToStep_MakeShellBasedSurfaceModel_1 extends TopoDSToStep_MakeShellBasedSurfaceModel {}

class TopoDSToStep_MakeShellBasedSurfaceModel_2 extends TopoDSToStep_MakeShellBasedSurfaceModel {}

class TopoDSToStep_MakeShellBasedSurfaceModel_3 extends TopoDSToStep_MakeShellBasedSurfaceModel {}

/**
 * This class implements the mapping between classes Edge from TopoDS and TopologicalRepresentationItem from StepShape.
 */
class TopoDSToStep_MakeStepEdge extends TopoDSToStep_Root {
}

class TopoDSToStep_MakeStepEdge_1 extends TopoDSToStep_MakeStepEdge {}

class TopoDSToStep_MakeStepEdge_2 extends TopoDSToStep_MakeStepEdge {}

/**
 * This class implements the mapping between classes Face from TopoDS and TopologicalRepresentationItem from StepShape.
 */
class TopoDSToStep_MakeStepFace extends TopoDSToStep_Root {
}

class TopoDSToStep_MakeStepFace_1 extends TopoDSToStep_MakeStepFace {}

class TopoDSToStep_MakeStepFace_2 extends TopoDSToStep_MakeStepFace {}

/**
 * This class implements the mapping between classes Vertex from TopoDS and TopologicalRepresentationItem from StepShape.
 */
class TopoDSToStep_MakeStepVertex extends TopoDSToStep_Root {
}

class TopoDSToStep_MakeStepVertex_1 extends TopoDSToStep_MakeStepVertex {}

class TopoDSToStep_MakeStepVertex_2 extends TopoDSToStep_MakeStepVertex {}

/**
 * This class implements the mapping between classes Wire from TopoDS and TopologicalRepresentationItem from StepShape.
 */
class TopoDSToStep_MakeStepWire extends TopoDSToStep_Root {
}

class TopoDSToStep_MakeStepWire_1 extends TopoDSToStep_MakeStepWire {}

class TopoDSToStep_MakeStepWire_2 extends TopoDSToStep_MakeStepWire {}

/**
 * This class implements the common services for all classes of TopoDSToStep which report error.
 */
class TopoDSToStep_Root {
}

/**
 * This Tool Class provides Information to build a ProSTEP Shape model from a Cas.Cad BRep.
 */
class TopoDSToStep_Tool {
}

class TopoDSToStep_Tool_1 extends TopoDSToStep_Tool {}

class TopoDSToStep_Tool_2 extends TopoDSToStep_Tool {}

/**
 * This builder Class provides services to build a ProSTEP Wireframemodel from a Cas.Cad BRep.
 */
class TopoDSToStep_WireframeBuilder extends TopoDSToStep_Root {
}

class TopoDSToStep_WireframeBuilder_1 extends TopoDSToStep_WireframeBuilder {}

class TopoDSToStep_WireframeBuilder_2 extends TopoDSToStep_WireframeBuilder {}

/**
 * Alert object storing TopoDS shape in its field
 */
class TopoDS_AlertWithShape extends Message_Alert {
}

/**
 * A Builder is used to create Topological Data Structures.It is the root of the Builder class hierarchy.
 */
class TopoDS_Builder {
}

/**
 * Describes a composite solid which - references an underlying composite solid with the potential to be given a location and an orientation - has a location for the underlying composite solid, giving its placement in the local coordinate system - has an orientation for the underlying composite solid, in terms of its geometry (as opposed to orientation in relation to other shapes). Casts shape S to the more specialized return type, CompSolid.
 */
class TopoDS_CompSolid extends TopoDS_Shape {
}

/**
 * Describes a compound which - references an underlying compound with the potential to be given a location and an orientation - has a location for the underlying compound, giving its placement in the local coordinate system - has an orientation for the underlying compound, in terms of its geometry (as opposed to orientation in relation to other shapes). Casts shape S to the more specialized return type, Compound.
 */
class TopoDS_Compound extends TopoDS_Shape {
}

/**
 * Describes an edge which - references an underlying edge with the potential to be given a location and an orientation - has a location for the underlying edge, giving its placement in the local coordinate system - has an orientation for the underlying edge, in terms of its geometry (as opposed to orientation in relation to other shapes).
 */
class TopoDS_Edge extends TopoDS_Shape {
}

/**
 * Describes a face which - references an underlying face with the potential to be given a location and an orientation - has a location for the underlying face, giving its placement in the local coordinate system - has an orientation for the underlying face, in terms of its geometry (as opposed to orientation in relation to other shapes).
 */
class TopoDS_Face extends TopoDS_Shape {
}

/**
 * An attempt was made to modify a Shape already shared or protected.
 */
class TopoDS_FrozenShape extends Standard_DomainError {
}

class TopoDS_FrozenShape_1 extends TopoDS_FrozenShape {}

class TopoDS_FrozenShape_2 extends TopoDS_FrozenShape {}

/**
 * Class to manipulate a Shape with handle.
 */
class TopoDS_HShape extends Standard_Transient {
}

class TopoDS_HShape_1 extends TopoDS_HShape {}

class TopoDS_HShape_2 extends TopoDS_HShape {}

/**
 * Iterates on the underlying shape underlying a given TopoDS_Shape object, providing access to its component sub-shapes. Each component shape is returned as a TopoDS_Shape with an orientation, and a compound of the original values and the relative values.
 */
class TopoDS_Iterator {
}

class TopoDS_Iterator_1 extends TopoDS_Iterator {}

class TopoDS_Iterator_2 extends TopoDS_Iterator {}

/**
 * An attempt was made to modify a geometry of Shape already shared or protected.
 */
class TopoDS_LockedShape extends Standard_DomainError {
}

class TopoDS_LockedShape_1 extends TopoDS_LockedShape {}

class TopoDS_LockedShape_2 extends TopoDS_LockedShape {}

/**
 * Describes a shape which - references an underlying shape with the potential to be given a location and an orientation - has a location for the underlying shape, giving its placement in the local coordinate system - has an orientation for the underlying shape, in terms of its geometry (as opposed to orientation in relation to other shapes). Note: A Shape is empty if it references an underlying shape which has an empty list of shapes.
 */
class TopoDS_Shape {
}

/**
 * Describes a shell which - references an underlying shell with the potential to be given a location and an orientation - has a location for the underlying shell, giving its placement in the local coordinate system - has an orientation for the underlying shell, in terms of its geometry (as opposed to orientation in relation to other shapes).
 */
class TopoDS_Shell extends TopoDS_Shape {
}

/**
 * Describes a solid shape which - references an underlying solid shape with the potential to be given a location and an orientation - has a location for the underlying shape, giving its placement in the local coordinate system - has an orientation for the underlying shape, in terms of its geometry (as opposed to orientation in relation to other shapes).
 */
class TopoDS_Solid extends TopoDS_Shape {
}

/**
 * A set of solids connected by their faces.
 */
class TopoDS_TCompSolid extends TopoDS_TShape {
}

/**
 * A TCompound is an all-purpose set of Shapes.
 */
class TopoDS_TCompound extends TopoDS_TShape {
}

/**
 * A topological part of a curve in 2D or 3D, the boundary is a set of oriented Vertices.
 */
class TopoDS_TEdge extends TopoDS_TShape {
}

/**
 * A topological part of a surface or of the 2D space. The boundary is a set of wires and vertices.
 */
class TopoDS_TFace extends TopoDS_TShape {
}

/**
 * A TShape is a topological structure describing a set of points in a 2D or 3D space.
 */
class TopoDS_TShape extends Standard_Transient {
}

/**
 * A set of faces connected by their edges.
 */
class TopoDS_TShell extends TopoDS_TShape {
}

/**
 * A Topological part of 3D space, bounded by shells, edges and vertices.
 */
class TopoDS_TSolid extends TopoDS_TShape {
}

/**
 * A Vertex is a topological point in two or three dimensions.
 */
class TopoDS_TVertex extends TopoDS_TShape {
}

/**
 * A set of edges connected by their vertices.
 */
class TopoDS_TWire extends TopoDS_TShape {
}

/**
 * An incorrect insertion was attempted.
 */
class TopoDS_UnCompatibleShapes extends Standard_DomainError {
}

class TopoDS_UnCompatibleShapes_1 extends TopoDS_UnCompatibleShapes {}

class TopoDS_UnCompatibleShapes_2 extends TopoDS_UnCompatibleShapes {}

/**
 * Describes a vertex which - references an underlying vertex with the potential to be given a location and an orientation - has a location for the underlying vertex, giving its placement in the local coordinate system - has an orientation for the underlying vertex, in terms of its geometry (as opposed to orientation in relation to other shapes).
 */
class TopoDS_Vertex extends TopoDS_Shape {
}

/**
 * Describes a wire which - references an underlying wire with the potential to be given a location and an orientation - has a location for the underlying wire, giving its placement in the local coordinate system - has an orientation for the underlying wire, in terms of its geometry (as opposed to orientation in relation to other shapes).
 */
class TopoDS_Wire extends TopoDS_Shape {
}

/**
 * Allows direct binding between a starting Object and the Result of its transfer when it is Unique. The Result itself is defined as a formal parameter <Shape from TopoDS> Warning : While it is possible to instantiate BinderOfShape with any Type for the Result, it is not advisable to instantiate it with Transient Classes, because such Results are directly known and managed by TransferProcess & Co, through SimpleBinderOfTransient : this class looks like instantiation of BinderOfShape, but its method ResultType is adapted (reads DynamicType of the Result)
 */
class TransferBRep_BinderOfShape extends Transfer_Binder {
}

class TransferBRep_BinderOfShape_1 extends TransferBRep_BinderOfShape {}

class TransferBRep_BinderOfShape_2 extends TransferBRep_BinderOfShape {}

class TransferBRep_HSequenceOfTransferResultInfo extends Standard_Transient {
}

class TransferBRep_HSequenceOfTransferResultInfo_1 extends TransferBRep_HSequenceOfTransferResultInfo {}

class TransferBRep_HSequenceOfTransferResultInfo_2 extends TransferBRep_HSequenceOfTransferResultInfo {}

class TransferBRep_OrientedShapeMapper extends Transfer_Finder {
}

/**
 * This class offers a simple, easy to call, way of transferring data from interface files to Shapes from CasCade It must be specialized according to each norm/protocol, by : - defining how to read a file (specific method with protocol) - definig transfer, by providing an Actor
 */
class TransferBRep_Reader {
}

/**
 * A ShapeBinder is a BinderOfShape with some additional services to cast the Result under various kinds of Shapes
 */
class TransferBRep_ShapeBinder extends TransferBRep_BinderOfShape {
}

class TransferBRep_ShapeBinder_1 extends TransferBRep_ShapeBinder {}

class TransferBRep_ShapeBinder_2 extends TransferBRep_ShapeBinder {}

/**
 * Gives informations on an object, see template DataInfo This class is for Shape
 */
class TransferBRep_ShapeInfo {
}

/**
 * This binder binds several (a list of) shapes with a starting entity, when this entity itself corresponds to a simple list of shapes. Each part is not seen as a sub-result of an independant componant, but as an item of a built-in list
 */
class TransferBRep_ShapeListBinder extends Transfer_Binder {
}

class TransferBRep_ShapeListBinder_1 extends TransferBRep_ShapeListBinder {}

class TransferBRep_ShapeListBinder_2 extends TransferBRep_ShapeListBinder {}

class TransferBRep_ShapeMapper extends Transfer_Finder {
}

/**
 * Data structure for storing information on transfer result. At the moment it dispatches information for the following types: - result, - result + warning(s), - result + fail(s), - result + warning(s) + fail(s) - no result, - no result + warning(s), - no result + fail(s), - no result + warning(s) + fail(s),
 */
class TransferBRep_TransferResultInfo extends Standard_Transient {
}

/**
 * This class allows to work with a TransferDispatch, i.e. to transfer entities from a data set to another one defined by the same interface norm, with the following features : - ActorDispatch itself acts as a default actor, i.e. it copies entities with the general service Copy, as CopyTool does - it allows to add other actors for specific ways of transfer, which may include data modifications, conversions ... - and other features from TransferDispatch (such as mapping other than one-one)
 */
class Transfer_ActorDispatch extends Transfer_ActorOfTransientProcess {
}

class Transfer_ActorDispatch_1 extends Transfer_ActorDispatch {}

class Transfer_ActorDispatch_2 extends Transfer_ActorDispatch {}

class Transfer_ActorDispatch_3 extends Transfer_ActorDispatch {}

/**
 * The original class was renamed. Compatibility only
 */
class Transfer_ActorOfFinderProcess extends Transfer_ActorOfProcessForFinder {
}

class Transfer_ActorOfProcessForFinder extends Standard_Transient {
}

class Transfer_ActorOfProcessForTransient extends Standard_Transient {
}

/**
 * The original class was renamed. Compatibility only
 */
class Transfer_ActorOfTransientProcess extends Transfer_ActorOfProcessForTransient {
}

/**
 * A Binder is an auxiliary object to Map the Result of the Transfer of a given Object : it records the Result of the Unitary Transfer (Resulting Object), status of progress and error (if any) of the Process
 */
class Transfer_Binder extends Standard_Transient {
}

/**
 * This type of Binder allows to attach as result, besides a Transient Object, an Integer Value, which can be an Index in the Object if it defines a List, for instance
 */
class Transfer_BinderOfTransientInteger extends Transfer_SimpleBinderOfTransient {
}

/**
 * Gives informations on an object Used as template to instantiate Mapper and SimpleBinder This class is for Transient
 */
class Transfer_DataInfo {
}

/**
 * This is an auxiliary class for TransferDispatch, which allows to record simple copies, as CopyControl from Interface, but based on a TransientProcess. Hence, it allows in addition more actions (such as recording results of adaptations)
 */
class Transfer_DispatchControl extends Interface_CopyControl {
}

/**
 * FindHasher defines HashCode for Finder, which is : ask a Finder its HashCode ! Because this is the Finder itself which brings the HashCode for its Key
 */
class Transfer_FindHasher {
}

/**
 * a Finder allows to map any kind of object as a Key for a Map. This works by defining, for a Hash Code, that of the real Key, not of the Finder which acts only as an intermediate. When a Map asks for the HashCode of a Finder, this one returns the code it has determined at creation time
 */
class Transfer_Finder extends Standard_Transient {
}

/**
 * Adds specific features to the generic definition : PrintTrace is adapted
 */
class Transfer_FinderProcess extends Transfer_ProcessForFinder {
}

class Transfer_HSequenceOfBinder extends Standard_Transient {
}

class Transfer_HSequenceOfBinder_1 extends Transfer_HSequenceOfBinder {}

class Transfer_HSequenceOfBinder_2 extends Transfer_HSequenceOfBinder {}

class Transfer_IteratorOfProcessForFinder extends Transfer_TransferIterator {
}

class Transfer_IteratorOfProcessForTransient extends Transfer_TransferIterator {
}

class Transfer_MapContainer extends Standard_Transient {
}

/**
 * Allows direct binding between a starting Object and the Result of its transfer, when it can be made of several Transient Objects. Compared to a Transcriptor, it has no Transfer Action
 */
class Transfer_MultipleBinder extends Transfer_Binder {
}

class Transfer_ProcessForFinder extends Standard_Transient {
}

class Transfer_ProcessForFinder_1 extends Transfer_ProcessForFinder {}

class Transfer_ProcessForFinder_2 extends Transfer_ProcessForFinder {}

/**
 * Manages Transfer of Transient Objects. Produces also ActorOfTransientProcess (deferred class), IteratorOfTransientProcess (for Results), TransferMapOfTransientProcess (internally used) Normally uses as TransientProcess, which adds some specifics
 */
class Transfer_ProcessForTransient extends Standard_Transient {
}

class Transfer_ProcessForTransient_1 extends Transfer_ProcessForTransient {}

class Transfer_ProcessForTransient_2 extends Transfer_ProcessForTransient {}

/**
 * ResultFromModel is used to store a final result stored in a TransientProcess, respectfully to its structuration in scopes by using a set of ResultFromTransient Hence, it can be regarded as a passive equivalent of the stored data in the TransientProcess, while an Iterator gives a flat view of it.
 */
class Transfer_ResultFromModel extends Standard_Transient {
}

/**
 * This class, in conjunction with ResultFromModel, allows to record the result of a transfer initially stored in a TransientProcess.
 */
class Transfer_ResultFromTransient extends Standard_Transient {
}

/**
 * An adapted instantiation of SimpleBinder for Transient Result, i.e. ResultType can be computed from the Result itself, instead of being static
 */
class Transfer_SimpleBinderOfTransient extends Transfer_Binder {
}

class Transfer_TransferDeadLoop extends Transfer_TransferFailure {
}

class Transfer_TransferDeadLoop_1 extends Transfer_TransferDeadLoop {}

class Transfer_TransferDeadLoop_2 extends Transfer_TransferDeadLoop {}

/**
 * A TransferDispatch is aimed to dispatch Entities between two Interface Models, by default by copying them, as CopyTool, but with more capabilities of adapting : Copy is redefined to firstly pass the hand to a TransferProcess. If this gives no result, standard Copy is called.
 */
class Transfer_TransferDispatch extends Interface_CopyTool {
}

class Transfer_TransferDispatch_1 extends Transfer_TransferDispatch {}

class Transfer_TransferDispatch_2 extends Transfer_TransferDispatch {}

class Transfer_TransferDispatch_3 extends Transfer_TransferDispatch {}

class Transfer_TransferFailure extends Interface_InterfaceError {
}

class Transfer_TransferFailure_1 extends Transfer_TransferFailure {}

class Transfer_TransferFailure_2 extends Transfer_TransferFailure {}

/**
 * A TransferInput is a Tool which fills an InterfaceModel with the result of the Transfer of CasCade Objects, once determined The Result comes from a TransferProcess, either from Transient (the Complete Result is considered, it must contain only Transient Objects)
 */
class Transfer_TransferInput {
}

/**
 * Defines an Iterator on the result of a Transfer Available for Normal Results or not (Erroneous Transfer) It gives several kinds of Informations, and allows to consider various criteria (criteria are cumulative)
 */
class Transfer_TransferIterator {
}

/**
 * A TransferOutput is a Tool which manages the transfer of entities created by an Interface, stored in an InterfaceModel, into a set of Objects suitable for an Application Objects to be transferred are given, by method Transfer (which calls Transfer from TransientProcess) A default action is available to get all roots of the Model Result is given as a TransferIterator (see TransferProcess) Also, it is possible to pilot directly the TransientProcess
 */
class Transfer_TransferOutput {
}

class Transfer_TransferOutput_1 extends Transfer_TransferOutput {}

class Transfer_TransferOutput_2 extends Transfer_TransferOutput {}

/**
 * This binder binds several (a list of) Transients with a starting entity, when this entity itself corresponds to a simple list of Transients. Each part is not seen as a sub-result of an independant componant, but as an item of a built-in list
 */
class Transfer_TransientListBinder extends Transfer_Binder {
}

class Transfer_TransientListBinder_1 extends Transfer_TransientListBinder {}

class Transfer_TransientListBinder_2 extends Transfer_TransientListBinder {}

class Transfer_TransientMapper extends Transfer_Finder {
}

/**
 * Adds specific features to the generic definition : TransientProcess is intended to work from an InterfaceModel to a set of application objects.
 */
class Transfer_TransientProcess extends Transfer_ProcessForTransient {
}

/**
 * a VoidBinder is used to bind a starting item with a status, error or warning messages, but no result It is interpreted by TransferProcess, which admits a VoidBinder to be over-written, and copies its check to the new Binder
 */
class Transfer_VoidBinder extends Transfer_Binder {
}

/**
 * This package provides all the facilities to create and question a dictionary of units, and also to manipulate measurements which are real values with units.
 */
class Units {
}

/**
 * The UnitsAPI global functions are used to convert a value from any unit into another unit. Principles Conversion is executed among three unit systems: - the SI System - the user's Local System - the user's Current System. The SI System is the standard international unit system. It is indicated by SI in the synopses of the UnitsAPI functions. The MDTV System corresponds to the SI international standard but the length unit and all its derivatives use millimeters instead of the meters. Both systems are proposed by Open CASCADE; the SI System is the standard option. By selecting one of these two systems, the user defines his Local System through the SetLocalSystem function. The Local System is indicated by LS in the synopses of the UnitsAPI functions. The user's Local System units can be modified in the working environment. The user defines his Current System by modifying its units through the SetCurrentUnit function. The Current System is indicated by Current in the synopses of the UnitsAPI functions.
 */
class UnitsAPI {
}

class UnitsMethods {
}

/**
 * This class includes all the methods to create and manipulate the dimensions of the physical quantities.
 */
class Units_Dimensions extends Standard_Transient {
}

/**
 * This class provides all the services to explore UnitsSystem or UnitsDictionary.
 */
class Units_Explorer {
}

class Units_Explorer_1 extends Units_Explorer {}

class Units_Explorer_2 extends Units_Explorer {}

class Units_Explorer_3 extends Units_Explorer {}

class Units_Explorer_4 extends Units_Explorer {}

class Units_Explorer_5 extends Units_Explorer {}

/**
 * This class defines a lexicon useful to analyse and recognize the different key words included in a sentence. The lexicon is stored in a sequence of tokens.
 */
class Units_Lexicon extends Standard_Transient {
}

/**
 * This class defines all the methods to create and compute an algebraic formula.
 */
class Units_MathSentence extends Units_Sentence {
}

/**
 * This class defines a measurement which is the association of a real value and a unit.
 */
class Units_Measurement {
}

class Units_Measurement_1 extends Units_Measurement {}

class Units_Measurement_2 extends Units_Measurement {}

class Units_Measurement_3 extends Units_Measurement {}

class Units_NoSuchType extends Standard_NoSuchObject {
}

class Units_NoSuchType_1 extends Units_NoSuchType {}

class Units_NoSuchType_2 extends Units_NoSuchType {}

class Units_NoSuchUnit extends Standard_NoSuchObject {
}

class Units_NoSuchUnit_1 extends Units_NoSuchUnit {}

class Units_NoSuchUnit_2 extends Units_NoSuchUnit {}

class Units_QuantitiesSequence extends Standard_Transient {
}

class Units_QuantitiesSequence_1 extends Units_QuantitiesSequence {}

class Units_QuantitiesSequence_2 extends Units_QuantitiesSequence {}

/**
 * This class stores in its field all the possible units of all the unit systems for a given physical quantity. Each unit's value is expressed in the S.I. unit system.
 */
class Units_Quantity extends Standard_Transient {
}

/**
 * This class describes all the methods to create and compute an expression contained in a string.
 */
class Units_Sentence {
}

/**
 * The ShiftedToken class inherits from Token and describes tokens which have a gap in addition of the multiplicative factor. This kind of token allows the description of linear functions which do not pass through the origin, of the form :
 */
class Units_ShiftedToken extends Units_Token {
}

/**
 * This class is useful to describe units with a shifted origin in relation to another unit. A well known example is the Celsius degrees in relation to Kelvin degrees. The shift of the Celsius origin is 273.15 Kelvin degrees.
 */
class Units_ShiftedUnit extends Units_Unit {
}

class Units_ShiftedUnit_1 extends Units_ShiftedUnit {}

class Units_ShiftedUnit_2 extends Units_ShiftedUnit {}

class Units_ShiftedUnit_3 extends Units_ShiftedUnit {}

/**
 * This class defines an elementary word contained in a Sentence object.
 */
class Units_Token extends Standard_Transient {
}

class Units_Token_1 extends Units_Token {}

class Units_Token_2 extends Units_Token {}

class Units_Token_3 extends Units_Token {}

class Units_Token_4 extends Units_Token {}

class Units_Token_5 extends Units_Token {}

class Units_Token_6 extends Units_Token {}

class Units_TokensSequence extends Standard_Transient {
}

class Units_TokensSequence_1 extends Units_TokensSequence {}

class Units_TokensSequence_2 extends Units_TokensSequence {}

/**
 * This class defines an elementary word contained in a physical quantity.
 */
class Units_Unit extends Standard_Transient {
}

class Units_Unit_1 extends Units_Unit {}

class Units_Unit_2 extends Units_Unit {}

class Units_Unit_3 extends Units_Unit {}

/**
 * This class describes all the facilities to manipulate and compute units contained in a string expression.
 */
class Units_UnitSentence extends Units_Sentence {
}

class Units_UnitSentence_1 extends Units_UnitSentence {}

class Units_UnitSentence_2 extends Units_UnitSentence {}

/**
 * This class creates a dictionary of all the units you want to know.
 */
class Units_UnitsDictionary extends Standard_Transient {
}

/**
 * This class defines a lexicon useful to analyse and recognize the different key words included in a sentence. The lexicon is stored in a sequence of tokens.
 */
class Units_UnitsLexicon extends Units_Lexicon {
}

class Units_UnitsSequence extends Standard_Transient {
}

class Units_UnitsSequence_1 extends Units_UnitsSequence {}

class Units_UnitsSequence_2 extends Units_UnitsSequence {}

/**
 * This class allows the user to define his own system of units.
 */
class Units_UnitsSystem extends Standard_Transient {
}

class Units_UnitsSystem_1 extends Units_UnitsSystem {}

class Units_UnitsSystem_2 extends Units_UnitsSystem {}

/**
 * This package contains the set of commands and services of the 3D Viewer. It provides a set of high level commands to control the views and viewing modes.
 */
class V3d {
}

/**
 * Creation of an ambient light source in a viewer.
 */
class V3d_AmbientLight extends Graphic3d_CLight {
}

class V3d_BadValue extends Standard_OutOfRange {
}

class V3d_BadValue_1 extends V3d_BadValue {}

class V3d_BadValue_2 extends V3d_BadValue {}

class V3d_CircularGrid extends Aspect_CircularGrid {
}

/**
 * Directional light source for a viewer.
 */
class V3d_DirectionalLight extends V3d_PositionLight {
}

class V3d_DirectionalLight_1 extends V3d_DirectionalLight {}

class V3d_DirectionalLight_2 extends V3d_DirectionalLight {}

/**
 * Obsolete clip plane presentation class. Ported on new core of Graphic3d_ClipPlane approach. Please access Graphic3d_ClipPlane via ClipPlane() method to use it for standard clipping workflow. Example of use:
 */
class V3d_Plane extends Standard_Transient {
}

/**
 * Base class for Positional, Spot and Directional Light classes.
 */
class V3d_PositionLight extends Graphic3d_CLight {
}

/**
 * Creation and modification of an isolated (positional) light source. It is also defined by the color and two attenuation factors ConstAttentuation() and LinearAttentuation(). The resulting attenuation factor determining the illumination of a surface depends on the following formula: Where Distance is the distance of the isolated source from the surface.
 */
class V3d_PositionalLight extends V3d_PositionLight {
}

class V3d_RectangularGrid extends Aspect_RectangularGrid {
}

/**
 * Creation and modification of a spot. The attenuation factor F determines the illumination of a surface: Where Distance is the distance from the source to the surface. The default values (1.0, 0.0) correspond to a minimum of attenuation. The concentration factor determines the dispersion of the light on the surface, the default value (1.0) corresponds to a minimum of dispersion.
 */
class V3d_SpotLight extends V3d_PositionLight {
}

class V3d_SpotLight_1 extends V3d_SpotLight {}

class V3d_SpotLight_2 extends V3d_SpotLight {}

/**
 * Class for presentation of zbuffer trihedron object.
 */
class V3d_Trihedron extends Standard_Transient {
}

class V3d_UnMapped extends Standard_DomainError {
}

class V3d_UnMapped_1 extends V3d_UnMapped {}

class V3d_UnMapped_2 extends V3d_UnMapped {}

/**
 * Defines the application object VIEW for the VIEWER application. The methods of this class allow the editing and inquiring the parameters linked to the view. Provides a set of services common to all types of view. Warning: The default parameters are defined by the class Viewer (Example : SetDefaultViewSize()). Certain methods are mouse oriented, and it is necessary to know the difference between the start and the continuation of this gesture in putting the method into operation. Example : Shifting the eye-view along the screen axes.
 */
class V3d_View extends Standard_Transient {
}

class V3d_View_1 extends V3d_View {}

class V3d_View_2 extends V3d_View {}

/**
 * Defines services on Viewer type objects. The methods of this class allow editing and interrogation of the parameters linked to the viewer its friend classes (View,light,plane).
 */
class V3d_Viewer extends Standard_Transient {
}

class V3d_Viewer_1 extends V3d_Viewer {}

class V3d_Viewer_2 extends V3d_Viewer {}

/**
 * Vrml package implements the specification of the VRML ( Virtual Reality Modeling Language ). VRML is a standard language for describing interactive 3-D objects and worlds delivered across Internet. Actual version of Vrml package have made for objects of VRML version 1.0. This package is used by VrmlConverter package. The developer should already be familiar with VRML specification before using this package.
 */
class Vrml {
}

/**
 * API for writing to VRML 1.0
 */
class VrmlAPI {
}

/**
 * Creates and writes VRML files from Open CASCADE shapes. A VRML file can be written to an existing VRML file or to a new one.
 */
class VrmlAPI_Writer {
}

/**
 * Curve - computes the presentation of objects to be seen as curves (the computation will be made with a constant number of points), converts this one into VRML objects and writes (adds) them into anOStream. All requested properties of the representation are specify in aDrawer of Drawer class (VrmlConverter). This kind of the presentation is converted into IndexedLineSet ( VRML ).
 */
class VrmlConverter_Curve {
}

/**
 * DeflectionCurve - computes the presentation of objects to be seen as curves, converts this one into VRML objects and writes (adds) into anOStream. All requested properties of the representation are specify in aDrawer. This kind of the presentation is converted into IndexedLineSet ( VRML ). The computation will be made according to a maximal chordial deviation.
 */
class VrmlConverter_DeflectionCurve {
}

/**
 * qualifies the aspect properties for the VRML conversation of a specific kind of object. This includes for example color, maximal chordial deviation, etc...
 */
class VrmlConverter_Drawer extends Standard_Transient {
}

/**
 * HLRShape - computes the presentation of objects with removal of their hidden lines for a specific projector, converts them into VRML objects and writes (adds) them into anOStream. All requested properties of the representation are specify in aDrawer of Drawer class. This kind of the presentation is converted into IndexedLineSet and if they are defined in Projector into : PerspectiveCamera, OrthographicCamera, DirectionLight, PointLight, SpotLight from Vrml package.
 */
class VrmlConverter_HLRShape {
}

/**
 * qualifies the aspect properties for the VRML conversation of iso curves .
 */
class VrmlConverter_IsoAspect extends VrmlConverter_LineAspect {
}

class VrmlConverter_IsoAspect_1 extends VrmlConverter_IsoAspect {}

class VrmlConverter_IsoAspect_2 extends VrmlConverter_IsoAspect {}

/**
 * qualifies the aspect properties for the VRML conversation of a Curve and a DeflectionCurve .
 */
class VrmlConverter_LineAspect extends Standard_Transient {
}

class VrmlConverter_LineAspect_1 extends VrmlConverter_LineAspect {}

class VrmlConverter_LineAspect_2 extends VrmlConverter_LineAspect {}

/**
 * qualifies the aspect properties for the VRML conversation of a Point Set.
 */
class VrmlConverter_PointAspect extends Standard_Transient {
}

class VrmlConverter_PointAspect_1 extends VrmlConverter_PointAspect {}

class VrmlConverter_PointAspect_2 extends VrmlConverter_PointAspect {}

/**
 * defines projector and calculates properties of cameras and lights from Vrml ( OrthograpicCamera, PerspectiveCamera, DirectionalLight, PointLight, SpotLight and MatrixTransform ) to display all scene shapes with arbitrary locations for requested the Projection Vector, High Point Direction and the Focus and adds them ( method Add ) to anOSream.
 */
class VrmlConverter_Projector extends Standard_Transient {
}

/**
 * ShadedShape - computes the shading presentation of shapes by triangulation algorithms, converts this one into VRML objects and writes (adds) into anOStream. All requested properties of the representation including the maximal chordial deviation are specify in aDrawer. This kind of the presentation is converted into IndexedFaceSet ( VRML ).
 */
class VrmlConverter_ShadedShape {
}

/**
 * qualifies the aspect properties for the VRML conversation of ShadedShape .
 */
class VrmlConverter_ShadingAspect extends Standard_Transient {
}

/**
 * WFDeflectionRestrictedFace - computes the wireframe presentation of faces with restrictions by displaying a given number of U and/or V isoparametric curves, converts his into VRML objects and writes (adds) them into anOStream. All requested properties of the representation are specify in aDrawer of Drawer class (Prs3d). This kind of the presentation is converted into IndexedFaceSet and IndexedLineSet ( VRML ).
 */
class VrmlConverter_WFDeflectionRestrictedFace {
}

/**
 * WFDeflectionShape - computes the wireframe presentation of compound set of faces, edges and vertices by displaying a given number of U and/or V isoparametric curves, converts this one into VRML objects and writes (adds) them into anOStream. All requested properties of the representation are specify in aDrawer. This kind of the presentation is converted into IndexedLineSet and PointSet ( VRML ).
 */
class VrmlConverter_WFDeflectionShape {
}

/**
 * WFRestrictedFace - computes the wireframe presentation of faces with restrictions by displaying a given number of U and/or V isoparametric curves, converts this one into VRML objects and writes (adds) into anOStream. All requested properties of the representation are specify in aDrawer. This kind of the presentation is converted into IndexedLineSet ( VRML ).
 */
class VrmlConverter_WFRestrictedFace {
}

/**
 * WFShape - computes the wireframe presentation of compound set of faces, edges and vertices by displaying a given number of U and/or V isoparametric curves converts this one into VRML objects and writes (adds) them into anOStream. All requested properties of the representation are specify in aDrawer. This kind of the presentation is converted into IndexedLineSet and PointSet ( VRML ).
 */
class VrmlConverter_WFShape {
}

/**
 * Implementation of the Appearance node type
 */
class VrmlData_Appearance extends VrmlData_Node {
}

class VrmlData_Appearance_1 extends VrmlData_Appearance {}

class VrmlData_Appearance_2 extends VrmlData_Appearance {}

/**
 * Implementatioon of basic node for Coordinate, Normal and Color (array of triplets).
 */
class VrmlData_ArrayVec3d extends VrmlData_Node {
}

/**
 * Inplementation of the Box node. This node is defined by Size vector, assumong that the box center is located in (0., 0., 0.) and that each corner is 0.5*|Size| distance from the center.
 */
class VrmlData_Box extends VrmlData_Geometry {
}

class VrmlData_Box_1 extends VrmlData_Box {}

class VrmlData_Box_2 extends VrmlData_Box {}

/**
 * Implementation of the node Color
 */
class VrmlData_Color extends VrmlData_ArrayVec3d {
}

class VrmlData_Color_1 extends VrmlData_Color {}

class VrmlData_Color_2 extends VrmlData_Color {}

/**
 * Implementation of the Cone node. The cone is located with its middle of the height segment in (0., 0., 0.) The height is oriented along OY.
 */
class VrmlData_Cone extends VrmlData_Geometry {
}

class VrmlData_Cone_1 extends VrmlData_Cone {}

class VrmlData_Cone_2 extends VrmlData_Cone {}

/**
 * Implementation of the node Coordinate
 */
class VrmlData_Coordinate extends VrmlData_ArrayVec3d {
}

class VrmlData_Coordinate_1 extends VrmlData_Coordinate {}

class VrmlData_Coordinate_2 extends VrmlData_Coordinate {}

/**
 * Implementation of the Cylinder node
 */
class VrmlData_Cylinder extends VrmlData_Geometry {
}

class VrmlData_Cylinder_1 extends VrmlData_Cylinder {}

class VrmlData_Cylinder_2 extends VrmlData_Cylinder {}

/**
 * Common API of faceted Geometry nodes: IndexedFaceSet, ElevationGrid, Extrusion.
 */
class VrmlData_Faceted extends VrmlData_Geometry {
}

/**
 * Implementation of the Geometry node. Contains the topological representation (TopoDS_Shell) of the VRML geometry
 */
class VrmlData_Geometry extends VrmlData_Node {
}

/**
 * Implementation of node "Group"
 */
class VrmlData_Group extends VrmlData_Node {
}

class VrmlData_Group_1 extends VrmlData_Group {}

class VrmlData_Group_2 extends VrmlData_Group {}

/**
 * Implementation of the ImageTexture node
 */
class VrmlData_ImageTexture extends VrmlData_Texture {
}

class VrmlData_ImageTexture_1 extends VrmlData_ImageTexture {}

class VrmlData_ImageTexture_2 extends VrmlData_ImageTexture {}

/**
 * Implementation of the Material node
 */
class VrmlData_Material extends VrmlData_Node {
}

class VrmlData_Material_1 extends VrmlData_Material {}

class VrmlData_Material_2 extends VrmlData_Material {}

/**
 * Implementation of the node Normal
 */
class VrmlData_Normal extends VrmlData_ArrayVec3d {
}

class VrmlData_Normal_1 extends VrmlData_Normal {}

class VrmlData_Normal_2 extends VrmlData_Normal {}

/**
 * Algorithm converting one shape or a set of shapes to VrmlData_Scene.
 */
class VrmlData_ShapeConvert {
}

/**
 * Implementation of the Shape node type
 */
class VrmlData_ShapeNode extends VrmlData_Node {
}

class VrmlData_ShapeNode_1 extends VrmlData_ShapeNode {}

class VrmlData_ShapeNode_2 extends VrmlData_ShapeNode {}

/**
 * Implementation of the Sphere node.
 */
class VrmlData_Sphere extends VrmlData_Geometry {
}

class VrmlData_Sphere_1 extends VrmlData_Sphere {}

class VrmlData_Sphere_2 extends VrmlData_Sphere {}

/**
 * Implementation of the Texture node
 */
class VrmlData_Texture extends VrmlData_Node {
}

/**
 * Implementation of the node TextureCoordinate
 */
class VrmlData_TextureCoordinate extends VrmlData_Node {
}

class VrmlData_TextureCoordinate_1 extends VrmlData_TextureCoordinate {}

class VrmlData_TextureCoordinate_2 extends VrmlData_TextureCoordinate {}

/**
 * Implementation of the TextureTransform node
 */
class VrmlData_TextureTransform extends VrmlData_Node {
}

/**
 * Definition of UnknownNode -- placeholder for node types that are not processed now.
 */
class VrmlData_UnknownNode extends VrmlData_Node {
}

class VrmlData_UnknownNode_1 extends VrmlData_UnknownNode {}

class VrmlData_UnknownNode_2 extends VrmlData_UnknownNode {}

/**
 * Data type for WorldInfo node
 */
class VrmlData_WorldInfo extends VrmlData_Node {
}

class VrmlData_WorldInfo_1 extends VrmlData_WorldInfo {}

class VrmlData_WorldInfo_2 extends VrmlData_WorldInfo {}

/**
 * defines a AsciiText node of VRML specifying geometry shapes. This node represents strings of text characters from ASCII coded character set. All subsequent strings advance y by -( size * spacing). The justification field determines the placement of the strings in the x dimension. LEFT (the default) places the left edge of each string at x=0. CENTER places the center of each string at x=0. RIGHT places the right edge of each string at x=0. Text is rendered from left to right, top to bottom in the font set by FontStyle. The default value for the wigth field indicates the natural width should be used for that string.
 */
class Vrml_AsciiText extends Standard_Transient {
}

class Vrml_AsciiText_1 extends Vrml_AsciiText {}

class Vrml_AsciiText_2 extends Vrml_AsciiText {}

/**
 * defines a Cone node of VRML specifying geometry shapes. This node represents a simple cone, whose central axis is aligned with the y-axis. By default , the cone is centred at (0,0,0) and has size of -1 to +1 in the all three directions. the cone has a radius of 1 at the bottom and height of 2, with its apex at 1 and its bottom at -1. The cone has two parts: the sides and the bottom
 */
class Vrml_Cone {
}

/**
 * defines a Coordinate3 node of VRML specifying properties of geometry and its appearance. This node defines a set of 3D coordinates to be used by a subsequent IndexedFaceSet, IndexedLineSet, or PointSet node. This node does not produce a visible result during rendering; it simply replaces the current coordinates in the rendering state for subsequent nodes to use.
 */
class Vrml_Coordinate3 extends Standard_Transient {
}

class Vrml_Coordinate3_1 extends Vrml_Coordinate3 {}

class Vrml_Coordinate3_2 extends Vrml_Coordinate3 {}

/**
 * defines a Cube node of VRML specifying geometry shapes. This node represents a cuboid aligned with the coordinate axes. By default , the cube is centred at (0,0,0) and measures 2 units in each dimension, from -1 to +1. A cube's width is its extent along its object-space X axis, its height is its extent along the object-space Y axis, and its depth is its extent along its object-space Z axis.
 */
class Vrml_Cube {
}

/**
 * defines a Cylinder node of VRML specifying geometry shapes. This node represents a simple capped cylinder centred around the y-axis. By default , the cylinder is centred at (0,0,0) and has size of -1 to +1 in the all three dimensions. The cylinder has three parts: the sides, the top (y=+1) and the bottom (y=-1)
 */
class Vrml_Cylinder {
}

/**
 * defines a directional light node of VRML specifying properties of lights. This node defines a directional light source that illuminates along rays parallel to a given 3-dimentional vector Color is written as an RGB triple. Light intensity must be in the range 0.0 to 1.0, inclusive.
 */
class Vrml_DirectionalLight {
}

class Vrml_DirectionalLight_1 extends Vrml_DirectionalLight {}

class Vrml_DirectionalLight_2 extends Vrml_DirectionalLight {}

/**
 * defines a FontStyle node of VRML of properties of geometry and its appearance. The size field specifies the height (in object space units) of glyphs rendered and determines the vertical spacing of adjacent lines of text.
 */
class Vrml_FontStyle {
}

/**
 * defines a Group node of VRML specifying group properties. This node defines the base class for all group nodes. Group is a node that contains an ordered list of child nodes. This node is simply a container for the child nodes and does not alter the traversal state in any way. During traversal, state accumulated for a child is passed on to each successive child and then to the parents of the group (Group does not push or pop traversal state as separator does).
 */
class Vrml_Group {
}

/**
 * defines a IndexedFaceSet node of VRML specifying geometry shapes. This node represents a 3D shape formed by constructing faces (polygons) from vertices located at the current coordinates. IndexedFaceSet uses the indices in its coordIndex to define polygonal faces. An index of -1 separates faces (so a -1 at the end of the list is optional).
 */
class Vrml_IndexedFaceSet extends Standard_Transient {
}

class Vrml_IndexedFaceSet_1 extends Vrml_IndexedFaceSet {}

class Vrml_IndexedFaceSet_2 extends Vrml_IndexedFaceSet {}

/**
 * defines a IndexedLineSet node of VRML specifying geometry shapes. This node represents a 3D shape formed by constructing polylines from vertices located at the current coordinates. IndexedLineSet uses the indices in its coordIndex field to specify the polylines. An index of -1 separates one polyline from the next (thus, a final -1 is optional). the current polyline has ended and the next one begins. Treatment of the current material and normal binding is as follows: The PER_PART binding specifies a material or normal for each segment of the line. The PER_FACE binding specifies a material or normal for each polyline. PER_VERTEX specifies a material or normal for each vertex. The corresponding _INDEXED bindings are the same, but use the materialIndex or normalIndex indices. The DEFAULT material binding is equal to OVERALL. The DEFAULT normal binding is equal to PER_VERTEX_INDEXED; if insufficient normals exist in the state, the lines will be drawn unlit. The same rules for texture coordinate generation as IndexedFaceSet are used.
 */
class Vrml_IndexedLineSet extends Standard_Transient {
}

class Vrml_IndexedLineSet_1 extends Vrml_IndexedLineSet {}

class Vrml_IndexedLineSet_2 extends Vrml_IndexedLineSet {}

/**
 * defines a Info node of VRML specifying properties of geometry and its appearance. It is used to store information in the scene graph, Typically for application-specific purposes, copyright messages, or other strings.
 */
class Vrml_Info {
}

/**
 * defines "instancing" - using the same instance of a node multiple times. It is accomplished by using the "DEF" and "USE" keywords. The DEF keyword both defines a named node, and creates a single instance of it. The USE keyword indicates that the most recently defined instance should be used again. If several nades were given the same name, then the last DEF encountered during parsing "wins". DEF/USE is limited to a single file.
 */
class Vrml_Instancing {
}

/**
 * defines a LOD (level of detailization) node of VRML specifying properties of geometry and its appearance. This group node is used to allow applications to switch between various representations of objects automatically. The children of this node typically represent the same object or objects at the varying of Levels Of Detail (LOD), from highest detail to lowest.
 */
class Vrml_LOD extends Standard_Transient {
}

class Vrml_LOD_1 extends Vrml_LOD {}

class Vrml_LOD_2 extends Vrml_LOD {}

/**
 * defines a Material node of VRML specifying properties of geometry and its appearance. This node defines the current surface material properties for all subsequent shapes. Material sets several components of the current material during traversal. Different shapes interpret materials with multiple values differently. To bind materials to shapes, use a MaterialBinding node.
 */
class Vrml_Material extends Standard_Transient {
}

class Vrml_Material_1 extends Vrml_Material {}

class Vrml_Material_2 extends Vrml_Material {}

/**
 * defines a MaterialBinding node of VRML specifying properties of geometry and its appearance. Material nodes may contain more than one material. This node specifies how the current materials are bound to shapes that follow in the scene graph. Each shape node may interpret bindings differently. For example, a Sphere node is always drawn using the first material in the material node, no matter what the current MaterialBinding, while a Cube node may use six different materials to draw each of its six faces, depending on the MaterialBinding.
 */
class Vrml_MaterialBinding {
}

class Vrml_MaterialBinding_1 extends Vrml_MaterialBinding {}

class Vrml_MaterialBinding_2 extends Vrml_MaterialBinding {}

/**
 * defines a MatrixTransform node of VRML specifying matrix and transform properties. This node defines 3D transformation with a 4 by 4 matrix. By default : a11=1 a12=0 a13=0 a14=0 a21=0 a22=1 a23=0 a24=0 a31=0 a32=0 a33=1 a34=0 a41=0 a42=0 a43=0 a44=1 It is written to the file in row-major order as 16 Real numbers separated by whitespace. For example , matrix expressing a translation of 7.3 units along the X axis is written as: 1 0 0 0 0 1 0 0 0 0 1 0 7.3 0 0 1
 */
class Vrml_MatrixTransform {
}

class Vrml_MatrixTransform_1 extends Vrml_MatrixTransform {}

class Vrml_MatrixTransform_2 extends Vrml_MatrixTransform {}

/**
 * defines a Normal node of VRML specifying properties of geometry and its appearance. This node defines a set of 3D surface normal vectors to be used by vertex-based shape nodes (IndexedFaceSet, IndexedLineSet, PointSet) that follow it in the scene graph. This node does not produce a visible result during rendering; it simply replaces the current normals in the rendering state for subsequent nodes to use. This node contains one multiple-valued field that contains the normal vectors.
 */
class Vrml_Normal extends Standard_Transient {
}

class Vrml_Normal_1 extends Vrml_Normal {}

class Vrml_Normal_2 extends Vrml_Normal {}

/**
 * defines a NormalBinding node of VRML specifying properties of geometry and its appearance. This node specifies how the current normals are bound to shapes that follow in the scene graph. Each shape node may interpret bindings differently. The bindings for faces and vertices are meaningful only for shapes that are made from faces and vertices. Similarly, the indexed bindings are only used by the shapes that allow indexing. For bindings that require multiple normals, be sure to have at least as many normals defined as are necessary; otherwise, errors will occur.
 */
class Vrml_NormalBinding {
}

class Vrml_NormalBinding_1 extends Vrml_NormalBinding {}

class Vrml_NormalBinding_2 extends Vrml_NormalBinding {}

/**
 * specifies a OrthographicCamera node of VRML specifying properties of cameras. An orthographic camera defines a parallel projection from a viewpoint. This camera does not diminish objects with distance, as a PerspectiveCamera does. The viewing volume for an orthographic camera is a rectangular parallelepiped (a box).
 */
class Vrml_OrthographicCamera {
}

class Vrml_OrthographicCamera_1 extends Vrml_OrthographicCamera {}

class Vrml_OrthographicCamera_2 extends Vrml_OrthographicCamera {}

/**
 * specifies a PerspectiveCamera node of VRML specifying properties of cameras. A perspective camera defines a perspective projection from a viewpoint. The viewing volume for a perspective camera is a truncated right pyramid.
 */
class Vrml_PerspectiveCamera {
}

class Vrml_PerspectiveCamera_1 extends Vrml_PerspectiveCamera {}

class Vrml_PerspectiveCamera_2 extends Vrml_PerspectiveCamera {}

/**
 * defines a point light node of VRML specifying properties of lights. This node defines a point light source at a fixed 3D location A point source illuminates equally in all directions; that is omni-directional. Color is written as an RGB triple. Light intensity must be in the range 0.0 to 1.0, inclusive.
 */
class Vrml_PointLight {
}

class Vrml_PointLight_1 extends Vrml_PointLight {}

class Vrml_PointLight_2 extends Vrml_PointLight {}

/**
 * defines a PointSet node of VRML specifying geometry shapes.
 */
class Vrml_PointSet {
}

/**
 * defines a Rotation node of VRML specifying matrix and transform properties. This node defines a 3D rotation about an arbitrary axis through the origin. By default : myRotation = (0 0 1 0)
 */
class Vrml_Rotation {
}

class Vrml_Rotation_1 extends Vrml_Rotation {}

class Vrml_Rotation_2 extends Vrml_Rotation {}

/**
 * defines SFImage type of VRML field types.
 */
class Vrml_SFImage extends Standard_Transient {
}

class Vrml_SFImage_1 extends Vrml_SFImage {}

class Vrml_SFImage_2 extends Vrml_SFImage {}

/**
 * defines SFRotation type of VRML field types. The 4 values represent an axis of rotation followed by amount of right-handed rotation about the that axis, in radians.
 */
class Vrml_SFRotation {
}

class Vrml_SFRotation_1 extends Vrml_SFRotation {}

class Vrml_SFRotation_2 extends Vrml_SFRotation {}

/**
 * defines a Scale node of VRML specifying transform properties. This node defines a 3D scaling about the origin. By default : myRotation = (1 1 1)
 */
class Vrml_Scale {
}

class Vrml_Scale_1 extends Vrml_Scale {}

class Vrml_Scale_2 extends Vrml_Scale {}

/**
 * defines a Separator node of VRML specifying group properties. This group node performs a push (save) of the traversal state before traversing its children and a pop (restore) after traversing them. This isolates the separator's children from the rest of the scene graph. A separator can include lights, cameras, coordinates, normals, bindings, and all other properties. Separators can also perform render culling. Render culling skips over traversal of the separator's children if they are not going to be rendered, based on the comparison of the separator's bounding box with the current view volume. Culling is controlled by the renderCulling field. These are set to AUTO by default, allowing the implementation to decide whether or not to cull.
 */
class Vrml_Separator {
}

class Vrml_Separator_1 extends Vrml_Separator {}

class Vrml_Separator_2 extends Vrml_Separator {}

/**
 * defines a ShapeHints node of VRML specifying properties of geometry and its appearance. The ShapeHints node indicates that IndexedFaceSets are solid, contain ordered vertices, or contain convex faces. These hints allow VRML implementations to optimize certain rendering features. Optimizations that may be performed include enabling back-face culling and disabling two-sided lighting. For example, if an object is solid and has ordered vertices, an implementation may turn on backface culling and turn off two-sided lighting. To ensure that an IndexedFaceSet can be viewed from either direction, set shapeType to be UNKNOWN_SHAPE_TYPE. If you know that your shapes are closed and will alwsys be viewed from the outside, set vertexOrdering to be either CLOCKWISE or COUNTERCLOCKWISE (depending on how you built your object), and set shapeType to be SOLID. Placing this near the top of your VRML file will allow the scene to be rendered much faster. The ShapeHints node also affects how default normals are generated. When an IndexedFaceSet has to generate default normals, it uses the creaseAngle field to determine which edges should be smoothly shaded and which ones should have a sharp crease. The crease angle is the angle between surface normals on adjacent polygons. For example, a crease angle of .5 radians (the default value) means that an edge between two adjacent polygonal faces will be smooth shaded if the normals to the two faces form an angle that is less than .5 radians (about 30 degrees). Otherwise, it will be faceted.
 */
class Vrml_ShapeHints {
}

/**
 * defines a Sphere node of VRML specifying geometry shapes. This node represents a sphere. By default , the sphere is centred at (0,0,0) and has a radius of 1.
 */
class Vrml_Sphere {
}

/**
 * specifies a spot light node of VRML nodes specifying properties of lights. This node defines a spotlight light source. A spotlight is placed at a fixed location in 3D-space and illuminates in a cone along a particular direction. The intensity of the illumination drops off exponentially as a ray of light diverges from this direction toward the edges of cone. The rate of drop-off and agle of the cone are controlled by the dropOfRate and cutOffAngle Color is written as an RGB triple. Light intensity must be in the range 0.0 to 1.0, inclusive.
 */
class Vrml_SpotLight {
}

class Vrml_SpotLight_1 extends Vrml_SpotLight {}

class Vrml_SpotLight_2 extends Vrml_SpotLight {}

/**
 * defines a Switch node of VRML specifying group properties. This group node traverses one, none, or all of its children. One can use this node to switch on and off the effects of some properties or to switch between different properties. The whichChild field specifies the index of the child to traverse, where the first child has index 0. A value of -1 (the default) means do not traverse any children. A value of -3 traverses all children, making the switch behave exactly like a regular Group.
 */
class Vrml_Switch {
}

/**
 * defines a Texture2 node of VRML specifying properties of geometry and its appearance. This property node defines a texture map and parameters for that map The texture can be read from the URL specified by the filename field. To turn off texturing, set the filename field to an empty string (""). Textures can alsobe specified inline by setting the image field to contain the texture data. By default : myFilename ("") myImage (0 0 0) myWrapS (Vrml_REPEAT) myWrapT (Vrml_REPEAT)
 */
class Vrml_Texture2 {
}

class Vrml_Texture2_1 extends Vrml_Texture2 {}

class Vrml_Texture2_2 extends Vrml_Texture2 {}

/**
 * defines a Texture2Transform node of VRML specifying properties of geometry and its appearance. This node defines a 2D transformation applied to texture coordinates. This affect the way textures are applied to the surfaces of subsequent shapes. Transformation consisits of(in order) a non-uniform scale about an arbitrary center point, a rotation about that same point, and a translation. This allows a user to change the size and position of the textures on the shape. By default : myTranslation (0 0) myRotation (0) myScaleFactor (1 1) myCenter (0 0)
 */
class Vrml_Texture2Transform {
}

class Vrml_Texture2Transform_1 extends Vrml_Texture2Transform {}

class Vrml_Texture2Transform_2 extends Vrml_Texture2Transform {}

/**
 * defines a TextureCoordinate2 node of VRML specifying properties of geometry and its appearance. This node defines a set of 2D coordinates to be used to map textures to the vertices of subsequent PointSet, IndexedLineSet, or IndexedFaceSet objects. It replaces the current texture coordinates in the rendering state for the shapes to use. Texture coordinates range from 0 to 1 across the texture. The horizontal coordinate, called S, is specified first, followed by vertical coordinate, T. By default : myPoint (0 0)
 */
class Vrml_TextureCoordinate2 extends Standard_Transient {
}

class Vrml_TextureCoordinate2_1 extends Vrml_TextureCoordinate2 {}

class Vrml_TextureCoordinate2_2 extends Vrml_TextureCoordinate2 {}

/**
 * defines a Transform of VRML specifying transform properties. This node defines a geometric 3D transformation consisting of (in order) a (possibly) non-uniform scale about an arbitrary point, a rotation about an arbitrary point and axis and translation. By default : myTranslation (0,0,0) myRotation (0,0,1,0) myScaleFactor (1,1,1) myScaleOrientation (0,0,1,0) myCenter (0,0,0)
 */
class Vrml_Transform {
}

class Vrml_Transform_1 extends Vrml_Transform {}

class Vrml_Transform_2 extends Vrml_Transform {}

/**
 * defines a TransformSeparator node of VRML specifying group properties. This group node is similar to separator node in that it saves state before traversing its children and restores it afterwards. This node can be used to isolate transformations to light sources or objects.
 */
class Vrml_TransformSeparator {
}

/**
 * defines a Translation of VRML specifying transform properties. This node defines a translation by 3D vector. By default : myTranslation (0,0,0)
 */
class Vrml_Translation {
}

class Vrml_Translation_1 extends Vrml_Translation {}

class Vrml_Translation_2 extends Vrml_Translation {}

/**
 * defines a WWWAnchor node of VRML specifying group properties. The WWWAnchor group node loads a new scene into a VRML browser when one of its children is closen. Exactly how a user "chooses" a child of the WWWAnchor is up to the VRML browser. WWWAnchor with an empty ("") name does nothing when its children are chosen. WWWAnchor behaves like a Separator, pushing the traversal state before traversing its children and popping it afterwards.
 */
class Vrml_WWWAnchor {
}

/**
 * defines a WWWInline node of VRML specifying group properties. The WWWInline group node reads its children from anywhere in the World Wide Web. Exactly when its children are read is not defined; reading the children may be delayed until the WWWInline is actually displayed. WWWInline with an empty ("") name does nothing. WWWInline behaves like a Separator, pushing the traversal state before traversing its children and popping it afterwards. By defaults: myName ("") myBboxSize (0,0,0) myBboxCenter (0,0,0)
 */
class Vrml_WWWInline {
}

class Vrml_WWWInline_1 extends Vrml_WWWInline {}

class Vrml_WWWInline_2 extends Vrml_WWWInline {}

class WNT_ClassDefinitionError extends Standard_ConstructionError {
}

class WNT_ClassDefinitionError_1 extends WNT_ClassDefinitionError {}

class WNT_ClassDefinitionError_2 extends WNT_ClassDefinitionError {}

/**
 * Access object to store datum
 */
class XCAFDimTolObjects_DatumObject extends Standard_Transient {
}

class XCAFDimTolObjects_DatumObject_1 extends XCAFDimTolObjects_DatumObject {}

class XCAFDimTolObjects_DatumObject_2 extends XCAFDimTolObjects_DatumObject {}

/**
 * Access object to store dimension data
 */
class XCAFDimTolObjects_DimensionObject extends Standard_Transient {
}

class XCAFDimTolObjects_DimensionObject_1 extends XCAFDimTolObjects_DimensionObject {}

class XCAFDimTolObjects_DimensionObject_2 extends XCAFDimTolObjects_DimensionObject {}

/**
 * Access object to store dimension and tolerance
 */
class XCAFDimTolObjects_GeomToleranceObject extends Standard_Transient {
}

class XCAFDimTolObjects_GeomToleranceObject_1 extends XCAFDimTolObjects_GeomToleranceObject {}

class XCAFDimTolObjects_GeomToleranceObject_2 extends XCAFDimTolObjects_GeomToleranceObject {}

class XCAFDimTolObjects_Tool {
}

/**
 * Definition of general structure of DECAF document and tools to work with it
 */
class XCAFDoc {
}

/**
 * attribute to store area
 */
class XCAFDoc_Area extends TDF_Attribute {
}

/**
 * Unique item identifier in the hierarchical product structure. A full path to an assembly component in the "part-of" graph starting from the root node.
 */
class XCAFDoc_AssemblyItemId {
}

class XCAFDoc_AssemblyItemId_1 extends XCAFDoc_AssemblyItemId {}

class XCAFDoc_AssemblyItemId_2 extends XCAFDoc_AssemblyItemId {}

class XCAFDoc_AssemblyItemId_3 extends XCAFDoc_AssemblyItemId {}

/**
 * An attribute that describes a weak reference to an assembly item or to a subshape or to an assembly label attribute.
 */
class XCAFDoc_AssemblyItemRef extends TDF_Attribute {
}

/**
 * attribute to store centroid
 */
class XCAFDoc_Centroid extends TDF_Attribute {
}

/**
 * Provide tool for management of ClippingPlane section of document. Provide tool to store, retrieve, remove and modify clipping planes. Each clipping plane consists of gp_Pln and its name.
 */
class XCAFDoc_ClippingPlaneTool extends TDF_Attribute {
}

/**
 * attribute to store color
 */
class XCAFDoc_Color extends TDF_Attribute {
}

/**
 * Provides tools to store and retrieve attributes (colors) of TopoDS_Shape in and from TDocStd_Document A Document is intended to hold different attributes of ONE shape and it's sub-shapes Provide tools for management of Colors section of document.
 */
class XCAFDoc_ColorTool extends TDF_Attribute {
}

/**
 * attribute to store datum
 */
class XCAFDoc_Datum extends TDF_Attribute {
}

/**
 * attribute to store dimension and tolerance
 */
class XCAFDoc_DimTol extends TDF_Attribute {
}

/**
 * Attribute containing GD&T section of XCAF document. Provide tools for GD&T section management.
 */
class XCAFDoc_DimTolTool extends TDF_Attribute {
}

/**
 * Attribute that identifies a dimension in the GD&T table. Its parent label is used as a container to store data provided by XCAFDimTolObjects_DimensionObject.
 */
class XCAFDoc_Dimension extends TDF_Attribute {
}

/**
 * Defines sections structure of an XDE document. attribute marking CAF document as being DECAF document. Creates the sections structure of the document.
 */
class XCAFDoc_DocumentTool extends TDF_Attribute {
}

/**
 * Tool for edit structure of document.
 */
class XCAFDoc_Editor {
}

/**
 * This attribute allow user multirelation tree of labels. This GraphNode is experimental Graph that not control looping and redundance. Attribute containg sequence of father's and child's labels. Provide create and work with Graph in XCAFDocument.
 */
class XCAFDoc_GraphNode extends TDF_Attribute {
}

/**
 * Provides tools to store and retrieve attributes (Layers) of TopoDS_Shape in and from TDocStd_Document A Document is intended to hold different attributes of ONE shape and it's sub-shapes Provide tools for management of Layers section of document.
 */
class XCAFDoc_LayerTool extends TDF_Attribute {
}

/**
 * attribute to store TopLoc_Location
 */
class XCAFDoc_Location extends TDF_Attribute {
}

/**
 * attribute to store material
 */
class XCAFDoc_Material extends TDF_Attribute {
}

/**
 * Provides tools to store and retrieve attributes (materials) of TopoDS_Shape in and from TDocStd_Document A Document is intended to hold different attributes of ONE shape and it's sub-shapes Provide tools for management of Materialss section of document.
 */
class XCAFDoc_MaterialTool extends TDF_Attribute {
}

/**
 * A base note attribute. Any note contains the name of the user created the note and the creation timestamp.
 */
class XCAFDoc_Note extends TDF_Attribute {
}

/**
 * A comment note attribute. Contains a textual comment.
 */
class XCAFDoc_NoteBalloon extends XCAFDoc_NoteComment {
}

class XCAFDoc_NoteBinData extends XCAFDoc_Note {
}

/**
 * A comment note attribute. Contains a textual comment.
 */
class XCAFDoc_NoteComment extends XCAFDoc_Note {
}

/**
 * A tool to annotate items in the hierarchical product structure. There are two basic entities, which operates the notes tool: notes and annotated items. A note is a user defined data structure derived from the notes hive. An annotated item is represented by attribute attached to a separate label under the annotated items hive. Notes are linked with annotated items by means of attribute. Notes play parent roles and annotated items - child roles.
 */
class XCAFDoc_NotesTool extends TDF_Attribute {
}

/**
 * attribute containing map of sub shapes
 */
class XCAFDoc_ShapeMapTool extends TDF_Attribute {
}

/**
 * A tool to store shapes in an XDE document in the form of assembly structure, and to maintain this structure. Attribute containing Shapes section of DECAF document. Provide tools for management of Shapes section. The API provided by this class allows to work with this structure regardless of its low-level implementation. All the shapes are stored on child labels of a main label which is XCAFDoc_DocumentTool::LabelShapes(). The label for assembly also has sub-labels, each of which represents the instance of another shape in that assembly (component). Such sub-label stores reference to the label of the original shape in the form of TDataStd_TreeNode with GUID XCAFDoc::ShapeRefGUID(), and its location encapsulated into the NamedShape. For correct work with an XDE document, it is necessary to use methods for analysis and methods for working with shapes. For example: if ( STool->IsAssembly(aLabel) ) { Standard_Boolean subchilds = Standard_False; (default) Standard_Integer nbc = STool->NbComponents (aLabel[,subchilds]); } If subchilds is True, commands also consider sub-levels. By default, only level one is checked. In this example, number of children from the first level of assembly will be returned. Methods for creation and initialization: Constructor: XCAFDoc_ShapeTool::XCAFDoc_ShapeTool() Getting a guid: Standard_GUID GetID (); Creation (if does not exist) of ShapeTool on label L: Handle(XCAFDoc_ShapeTool) XCAFDoc_ShapeTool::Set(const TDF_Label& L) Analyze whether shape is a simple shape or an instance or a component of an assembly or it is an assembly ( methods of analysis). For example: STool->IsShape(aLabel) ; Analyze that the label represents a shape (simple shape, assembly or reference) or STool->IsTopLevel(aLabel); Analyze that the label is a label of a top-level shape. Work with simple shapes, assemblies and instances ( methods for work with shapes). For example: Add shape: Standard_Boolean makeAssembly; // True to interpret a Compound as an Assembly, False to take it as a whole aLabel = STool->AddShape(aShape, makeAssembly); Get shape: TDF_Label aLabel... // A label must be present if (aLabel.IsNull()) { ... no such label : abandon .. } TopoDS_Shape aShape; aShape = STool->GetShape(aLabel); if (aShape.IsNull()) { ... this label is not for a Shape ... } To get a label from shape. Standard_Boolean findInstance = Standard_False; (this is default value) aLabel = STool->FindShape(aShape [,findInstance]); if (aLabel.IsNull()) { ... no label found for this shape ... }
 */
class XCAFDoc_ShapeTool extends TDF_Attribute {
}

/**
 * Attribute to store view
 */
class XCAFDoc_View extends TDF_Attribute {
}

/**
 * Provides tools to store and retrieve Views in and from TDocStd_Document Each View contains parts XCAFDoc_View attribute with all information about camera and view window. Also each view contain information of displayed shapes and GDTs as sets of shape and GDT labels.
 */
class XCAFDoc_ViewTool extends TDF_Attribute {
}

/**
 * Attribute storing Material definition for visualization purposes.
 */
class XCAFDoc_VisMaterial extends TDF_Attribute {
}

/**
 * Provides tools to store and retrieve attributes (visualization materials) of TopoDS_Shape in and from TDocStd_Document.
 */
class XCAFDoc_VisMaterialTool extends TDF_Attribute {
}

/**
 * attribute to store volume
 */
class XCAFDoc_Volume extends TDF_Attribute {
}

/**
 * object to store note auxiliary data
 */
class XCAFNoteObjects_NoteObject extends Standard_Transient {
}

class XCAFNoteObjects_NoteObject_1 extends XCAFNoteObjects_NoteObject {}

class XCAFNoteObjects_NoteObject_2 extends XCAFNoteObjects_NoteObject {}

/**
 * Presentation (visualiation, selection etc.) tools for DECAF documents
 */
class XCAFPrs {
}

/**
 * Implements AIS_InteractiveObject functionality for shape in DECAF document.
 */
class XCAFPrs_AISObject extends AIS_ColoredShape {
}

/**
 * Document iterator through shape nodes.
 */
class XCAFPrs_DocumentExplorer {
}

class XCAFPrs_DocumentExplorer_1 extends XCAFPrs_DocumentExplorer {}

class XCAFPrs_DocumentExplorer_2 extends XCAFPrs_DocumentExplorer {}

class XCAFPrs_DocumentExplorer_3 extends XCAFPrs_DocumentExplorer {}

/**
 * Auxiliary tool for iterating through Path identification string.
 */
class XCAFPrs_DocumentIdIterator {
}

/**
 * Implements a driver for presentation of shapes in DECAF document. Its the only purpose is to initialize and return XCAFPrs_AISObject object on request
 */
class XCAFPrs_Driver extends TPrsStd_Driver {
}

/**
 * Represents a set of styling settings applicable to a (sub)shape
 */
class XCAFPrs_Style {
}

/**
 * Texture holder.
 */
class XCAFPrs_Texture extends Graphic3d_Texture2Dmanual {
}

/**
 * Access object for saved view
 */
class XCAFView_Object extends Standard_Transient {
}

class XCAFView_Object_1 extends XCAFView_Object {}

class XCAFView_Object_2 extends XCAFView_Object {}

class XSAlgo {
}

class XSAlgo_AlgoContainer extends Standard_Transient {
}

/**
 * Returns tools used by AlgoContainer
 */
class XSAlgo_ToolContainer extends Standard_Transient {
}

/**
 * This package provides complements to IFSelect & Co for control of a session
 */
class XSControl {
}

/**
 * From a TopoDS_Shape, or from the entity which has produced it, searches for the shapes, and the entities which have produced them in last transfer, which are adjacent to it by VERTICES
 */
class XSControl_ConnectedShapes extends IFSelect_SelectExplore {
}

class XSControl_ConnectedShapes_1 extends XSControl_ConnectedShapes {}

class XSControl_ConnectedShapes_2 extends XSControl_ConnectedShapes {}

/**
 * This class allows a general X-STEP engine to run generic functions on any interface norm, in the same way. It includes the transfer operations. I.e. it gathers the already available general modules, the engine has just to know it
 */
class XSControl_Controller extends Standard_Transient {
}

/**
 * Defines additionnal commands for XSControl to : - control of initialisation (xinit, xnorm, newmodel) - analyse of the result of a transfer (recorded in a TransientProcess for Read, FinderProcess for Write) : statistics, various lists (roots,complete,abnormal), what about one specific entity, producing a model with the abnormal result
 */
class XSControl_FuncShape {
}

/**
 * Functions from XSControl gives access to actions which can be commanded with the resources provided by XSControl: especially Controller and Transfer
 */
class XSControl_Functions {
}

/**
 * A groundwork to convert a shape to data which complies with a particular norm. This data can be that of a whole model or that of a specific list of entities in the model. You specify the list using a single selection or a combination of selections. A selection is an operator which computes a list of entities from a list given in input. To specify the input, you can use: - A predefined selection such as "xst-transferrable-roots" - A filter based on a signature. A signature is an operator which returns a string from an entity according to its type. For example: - "xst-type" (CDL) - "iges-level" - "step-type". A filter can be based on a signature by giving a value to be matched by the string returned. For example, "xst-type(Curve)". If no list is specified, the selection computes its list of entities from the whole model. To use this class, you have to initialize the transfer norm first, as shown in the example below. Example: Control_Reader reader; IFSelect_ReturnStatus status = reader.ReadFile (filename.); When using IGESControl_Reader or STEPControl_Reader - as the above example shows - the reader initializes the norm directly. Note that loading the file only stores the data. It does not translate this data. Shapes are accumulated by successive transfers. The last shape is cleared by: - ClearShapes which allows you to handle a new batch - TransferRoots which restarts the list of shapes from scratch.
 */
class XSControl_Reader {
}

class XSControl_Reader_1 extends XSControl_Reader {}

class XSControl_Reader_2 extends XSControl_Reader {}

class XSControl_Reader_3 extends XSControl_Reader {}

/**
 * This selection selects the entities which are recognised for transfer by an Actor for Read : current one or another one.
 */
class XSControl_SelectForTransfer extends IFSelect_SelectExtract {
}

class XSControl_SelectForTransfer_1 extends XSControl_SelectForTransfer {}

class XSControl_SelectForTransfer_2 extends XSControl_SelectForTransfer {}

/**
 * This Signatures gives the Transfer Status of an entity, as recorded in a TransferProcess. It can be : - Void : not recorded, or recorded as void with no message (attributes are not taken into account) - Warning : no result, warning message(s), no fail - Fail : no result, fail messages (with or without warning) - Result.. : result, no message (neither warning nor fail) Result.. i.e. Result:TypeName of the result - Result../Warning : result, with warning but no fail - Result../Fail : result, with fail (.e. bad result) - Fail on run : no result yet recorded, no message, but an exception occurred while recording the result (this should not appear and indicates a programming error)
 */
class XSControl_SignTransferStatus extends IFSelect_Signature {
}

class XSControl_SignTransferStatus_1 extends XSControl_SignTransferStatus {}

class XSControl_SignTransferStatus_2 extends XSControl_SignTransferStatus {}

/**
 * A TransferReader performs, manages, handles results of, transfers done when reading a file (i.e. from entities of an InterfaceModel, to objects for Imagine)
 */
class XSControl_TransferReader extends Standard_Transient {
}

/**
 * TransferWriter gives help to control transfer to write a file after having converted data from Cascade/Imagine
 */
class XSControl_TransferWriter extends Standard_Transient {
}

/**
 * This class provides various useful utility routines, to facilitate handling of most common data structures : transients (type, type name ...), strings (ascii or extended, pointed or handled or ...), shapes (reading, writing, testing ...), sequences & arrays (of strings, of transients, of shapes ...), ...
 */
class XSControl_Utils {
}

/**
 * Defines a receptacle for externally defined variables, each one has a name
 */
class XSControl_Vars extends Standard_Transient {
}

/**
 * This WorkSession completes the basic one, by adding : - use of Controller, with norm selection... - management of transfers (both ways) with auxiliary classes TransferReader and TransferWriter -> these transfers may work with a Context List : its items are given by the user, according to the transfer to be i.e. it is interpreted by the Actors Each item is accessed by a Name
 */
class XSControl_WorkSession extends IFSelect_WorkSession {
}

/**
 * This class gives a simple way to create then write a Model compliant to a given norm, from a Shape The model can then be edited by tools by other appropriate tools
 */
class XSControl_Writer {
}

class XSControl_Writer_1 extends XSControl_Writer {}

class XSControl_Writer_2 extends XSControl_Writer {}

class XSControl_Writer_3 extends XSControl_Writer {}

class XmlDrivers {
}

class XmlDrivers_DocumentRetrievalDriver extends XmlLDrivers_DocumentRetrievalDriver {
}

class XmlDrivers_DocumentStorageDriver extends XmlLDrivers_DocumentStorageDriver {
}

class XmlLDrivers {
}

class XmlLDrivers_DocumentRetrievalDriver extends PCDM_RetrievalDriver {
}

class XmlLDrivers_DocumentStorageDriver extends PCDM_StorageDriver {
}

class XmlLDrivers_NamespaceDef {
}

class XmlLDrivers_NamespaceDef_1 extends XmlLDrivers_NamespaceDef {}

class XmlLDrivers_NamespaceDef_2 extends XmlLDrivers_NamespaceDef {}

/**
 * This package provides classes and methods to translate a transient DF into a persistent one and vice versa.
 */
class XmlMDF {
}

/**
 * Attribute Storage/Retrieval Driver.
 */
class XmlMDF_ADriver extends Standard_Transient {
}

/**
 * A driver table is an object building links between object types and object drivers. In the translation process, a driver table is asked to give a translation driver for each current object to be translated.
 */
class XmlMDF_ADriverTable extends Standard_Transient {
}

/**
 * Attribute Driver.
 */
class XmlMDF_ReferenceDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDF_TagSourceDriver extends XmlMDF_ADriver {
}

/**
 * Storage and Retrieval drivers for modelling attributes. Transient attributes are defined in package TDataStd.
 */
class XmlMDataStd {
}

/**
 * TDataStd_AsciiString attribute Driver.
 */
class XmlMDataStd_AsciiStringDriver extends XmlMDF_ADriver {
}

class XmlMDataStd_BooleanArrayDriver extends XmlMDF_ADriver {
}

class XmlMDataStd_BooleanListDriver extends XmlMDF_ADriver {
}

class XmlMDataStd_ByteArrayDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataStd_CommentDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataStd_DirectoryDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataStd_ExpressionDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataStd_ExtStringArrayDriver extends XmlMDF_ADriver {
}

class XmlMDataStd_ExtStringListDriver extends XmlMDF_ADriver {
}

/**
 * TDataStd_IntPackedMap attribute Driver.
 */
class XmlMDataStd_IntPackedMapDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataStd_IntegerArrayDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataStd_IntegerDriver extends XmlMDF_ADriver {
}

class XmlMDataStd_IntegerListDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataStd_NameDriver extends XmlMDF_ADriver {
}

class XmlMDataStd_NamedDataDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataStd_NoteBookDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataStd_RealArrayDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataStd_RealDriver extends XmlMDF_ADriver {
}

class XmlMDataStd_RealListDriver extends XmlMDF_ADriver {
}

class XmlMDataStd_ReferenceArrayDriver extends XmlMDF_ADriver {
}

class XmlMDataStd_ReferenceListDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataStd_RelationDriver extends XmlMDF_ADriver {
}

class XmlMDataStd_TickDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataStd_TreeNodeDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataStd_UAttributeDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataStd_VariableDriver extends XmlMDF_ADriver {
}

/**
 * Storage and Retrieval drivers for modelling attributes. Transient attributes are defined in package TDataXtd.
 */
class XmlMDataXtd {
}

/**
 * Attribute Driver.
 */
class XmlMDataXtd_AxisDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataXtd_ConstraintDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataXtd_GeometryDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataXtd_PatternStdDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataXtd_PlacementDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataXtd_PlaneDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataXtd_PointDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataXtd_PositionDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataXtd_PresentationDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMDataXtd_ShapeDriver extends XmlMDF_ADriver {
}

/**
 * TDataStd_Mesh attribute XML Driver.
 */
class XmlMDataXtd_TriangulationDriver extends XmlMDF_ADriver {
}

/**
 * Driver for TDocStd_XLink
 */
class XmlMDocStd {
}

/**
 * Attribute Driver.
 */
class XmlMDocStd_XLinkDriver extends XmlMDF_ADriver {
}

class XmlMFunction {
}

/**
 * Attribute Driver.
 */
class XmlMFunction_FunctionDriver extends XmlMDF_ADriver {
}

/**
 * XML persistence driver for dependencies of a function.
 */
class XmlMFunction_GraphNodeDriver extends XmlMDF_ADriver {
}

/**
 * XML persistence driver for a scope of functions.
 */
class XmlMFunction_ScopeDriver extends XmlMDF_ADriver {
}

class XmlMNaming {
}

class XmlMNaming_NamedShapeDriver extends XmlMDF_ADriver {
}

class XmlMNaming_NamingDriver extends XmlMDF_ADriver {
}

/**
 * The XmlMNaming_Shape1 is the Persistent view of a TopoDS_Shape.
 */
class XmlMNaming_Shape1 {
}

class XmlMNaming_Shape1_1 extends XmlMNaming_Shape1 {}

class XmlMNaming_Shape1_2 extends XmlMNaming_Shape1 {}

/**
 * Storage and Retrieval drivers for modelling attributes. Transient attributes are defined in package XCAFDoc
 */
class XmlMXCAFDoc {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_AreaDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_AssemblyItemRefDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_CentroidDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_ClippingPlaneToolDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_ColorDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_ColorToolDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_DatumDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_DimTolDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_DimTolToolDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_DocumentToolDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_GraphNodeDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_LayerToolDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_LocationDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_MaterialDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_MaterialToolDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_NoteBalloonDriver extends XmlMXCAFDoc_NoteCommentDriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_NoteBinDataDriver extends XmlMXCAFDoc_NoteDriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_NoteCommentDriver extends XmlMXCAFDoc_NoteDriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_NoteDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_NotesToolDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_ShapeToolDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_ViewToolDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_VisMaterialDriver extends XmlMDF_ADriver {
}

/**
 * XML persistence driver for XCAFDoc_VisMaterialTool.
 */
class XmlMXCAFDoc_VisMaterialToolDriver extends XmlMDF_ADriver {
}

/**
 * Attribute Driver.
 */
class XmlMXCAFDoc_VolumeDriver extends XmlMDF_ADriver {
}

/**
 * This package defines services to manage the storage grain of data produced by applications and those classes to manage persistent extern reference.
 */
class XmlObjMgt {
}

/**
 * The class Array1 represents unidimensionnal array of fixed size known at run time. The range of the index is user defined. Warning: Programs clients of such class must be independant of the range of the first element. Then, a C++ for loop must be written like this for (i = A->Lower(); i <= A->Upper(); i++)
 */
class XmlObjMgt_Array1 {
}

class XmlObjMgt_Array1_1 extends XmlObjMgt_Array1 {}

class XmlObjMgt_Array1_2 extends XmlObjMgt_Array1 {}

/**
 * Translation of gp (simple geometry) objects
 */
class XmlObjMgt_GP {
}

/**
 * root for XML-persistence
 */
class XmlObjMgt_Persistent {
}

class XmlObjMgt_Persistent_1 extends XmlObjMgt_Persistent {}

class XmlObjMgt_Persistent_2 extends XmlObjMgt_Persistent {}

class XmlObjMgt_Persistent_3 extends XmlObjMgt_Persistent {}

/**
 * Retrieval relocation table is modeled as a child class of TColStd_DataMapOfIntegerTransient that stores a handle to the file header section. With that attribute drivers have access to the file header section.
 */
class XmlObjMgt_RRelocationTable extends TColStd_DataMapOfIntegerTransient {
}

/**
 * Stored relocation table is modeled as a child class of TColStd_DataMapOfIntegerTransient that stores a handle to the file header section. With that attribute drivers have access to the file header section.
 */
class XmlObjMgt_SRelocationTable extends TColStd_IndexedMapOfTransient {
}

/**
 * Class for registering storage/retrieval drivers for TObj XML persistence
 */
class XmlTObjDrivers {
}

class XmlTObjDrivers_DocumentRetrievalDriver extends XmlLDrivers_DocumentRetrievalDriver {
}

class XmlTObjDrivers_DocumentStorageDriver extends XmlLDrivers_DocumentStorageDriver {
}

class XmlTObjDrivers_IntSparseArrayDriver extends XmlMDF_ADriver {
}

class XmlTObjDrivers_ModelDriver extends XmlMDF_ADriver {
}

class XmlTObjDrivers_ObjectDriver extends XmlMDF_ADriver {
}

class XmlTObjDrivers_ReferenceDriver extends XmlMDF_ADriver {
}

class XmlTObjDrivers_XYZDriver extends XmlMDF_ADriver {
}

class XmlXCAFDrivers {
}

/**
 * retrieval driver of a XS document
 */
class XmlXCAFDrivers_DocumentRetrievalDriver extends XmlDrivers_DocumentRetrievalDriver {
}

/**
 * storage driver of a XS document
 */
class XmlXCAFDrivers_DocumentStorageDriver extends XmlDrivers_DocumentStorageDriver {
}

/**
 * This class implements the following algorithms used to create Circ from gp.
 */
class gce_MakeCirc extends gce_Root {
}

class gce_MakeCirc_1 extends gce_MakeCirc {}

class gce_MakeCirc_2 extends gce_MakeCirc {}

class gce_MakeCirc_3 extends gce_MakeCirc {}

class gce_MakeCirc_4 extends gce_MakeCirc {}

class gce_MakeCirc_5 extends gce_MakeCirc {}

class gce_MakeCirc_6 extends gce_MakeCirc {}

class gce_MakeCirc_7 extends gce_MakeCirc {}

class gce_MakeCirc_8 extends gce_MakeCirc {}

/**
 * This class implements the following algorithms used to create Circ2d from gp.
 */
class gce_MakeCirc2d extends gce_Root {
}

class gce_MakeCirc2d_1 extends gce_MakeCirc2d {}

class gce_MakeCirc2d_2 extends gce_MakeCirc2d {}

class gce_MakeCirc2d_3 extends gce_MakeCirc2d {}

class gce_MakeCirc2d_4 extends gce_MakeCirc2d {}

class gce_MakeCirc2d_5 extends gce_MakeCirc2d {}

class gce_MakeCirc2d_6 extends gce_MakeCirc2d {}

class gce_MakeCirc2d_7 extends gce_MakeCirc2d {}

/**
 * This class implements the following algorithms used to create a Cone from gp. * Create a Cone coaxial to another and passing through a point. * Create a Cone coaxial to another at a distance <Dist>. * Create a Cone by 4 points. * Create a Cone by its axis and 2 points. * Create a Cone by 2 points and 2 radius. * Create a Cone by an Ax2 an angle and the radius of its reference section.
 */
class gce_MakeCone extends gce_Root {
}

class gce_MakeCone_1 extends gce_MakeCone {}

class gce_MakeCone_2 extends gce_MakeCone {}

class gce_MakeCone_3 extends gce_MakeCone {}

class gce_MakeCone_4 extends gce_MakeCone {}

class gce_MakeCone_5 extends gce_MakeCone {}

class gce_MakeCone_6 extends gce_MakeCone {}

class gce_MakeCone_7 extends gce_MakeCone {}

/**
 * This class implements the following algorithms used to create a Cylinder from gp. * Create a Cylinder coaxial to another and passing through a point. * Create a Cylinder coaxial to another at a distance <Dist>. * Create a Cylinder with 3 points. * Create a Cylinder by its axis and radius. * Create a cylinder by its circular base.
 */
class gce_MakeCylinder extends gce_Root {
}

class gce_MakeCylinder_1 extends gce_MakeCylinder {}

class gce_MakeCylinder_2 extends gce_MakeCylinder {}

class gce_MakeCylinder_3 extends gce_MakeCylinder {}

class gce_MakeCylinder_4 extends gce_MakeCylinder {}

class gce_MakeCylinder_5 extends gce_MakeCylinder {}

class gce_MakeCylinder_6 extends gce_MakeCylinder {}

/**
 * This class implements the following algorithms used to create a Dir from gp. * Create a Dir parallel to another and passing through a point. * Create a Dir passing through 2 points. * Create a Dir from its axis (Ax1 from gp). * Create a Dir from a point and a direction.
 */
class gce_MakeDir extends gce_Root {
}

class gce_MakeDir_1 extends gce_MakeDir {}

class gce_MakeDir_2 extends gce_MakeDir {}

class gce_MakeDir_3 extends gce_MakeDir {}

class gce_MakeDir_4 extends gce_MakeDir {}

/**
 * This class implements the following algorithms used to create a Dir2d from gp. * Create a Dir2d with 2 points. * Create a Dir2d with a Vec2d. * Create a Dir2d with a XY from gp. * Create a Dir2d with a 2 Reals (Coordinates).
 */
class gce_MakeDir2d extends gce_Root {
}

class gce_MakeDir2d_1 extends gce_MakeDir2d {}

class gce_MakeDir2d_2 extends gce_MakeDir2d {}

class gce_MakeDir2d_3 extends gce_MakeDir2d {}

class gce_MakeDir2d_4 extends gce_MakeDir2d {}

/**
 * This class implements the following algorithms used to create an ellipse from gp.
 */
class gce_MakeElips extends gce_Root {
}

class gce_MakeElips_1 extends gce_MakeElips {}

class gce_MakeElips_2 extends gce_MakeElips {}

/**
 * This class implements the following algorithms used to create Elips2d from gp.
 */
class gce_MakeElips2d extends gce_Root {
}

class gce_MakeElips2d_1 extends gce_MakeElips2d {}

class gce_MakeElips2d_2 extends gce_MakeElips2d {}

class gce_MakeElips2d_3 extends gce_MakeElips2d {}

/**
 * This class implements the following algorithms used to create Hyperbola from gp. * Create an Hyperbola from its center, and two points: one on its axis of symmetry giving the major radius, the other giving the value of the small radius. The three points give the plane of the hyperbola. * Create an hyperbola from its axisplacement and its MajorRadius and its MinorRadius.
 */
class gce_MakeHypr extends gce_Root {
}

class gce_MakeHypr_1 extends gce_MakeHypr {}

class gce_MakeHypr_2 extends gce_MakeHypr {}

/**
 * This class implements the following algorithms used to create a 2d Hyperbola from gp. * Create a 2d Hyperbola from its center and two points: one on its axis of symmetry giving the major radius, the other giving the value of the small radius. * Create a 2d Hyperbola from its major axis and its major radius and its minor radius.
 */
class gce_MakeHypr2d extends gce_Root {
}

class gce_MakeHypr2d_1 extends gce_MakeHypr2d {}

class gce_MakeHypr2d_2 extends gce_MakeHypr2d {}

class gce_MakeHypr2d_3 extends gce_MakeHypr2d {}

/**
 * This class implements the following algorithms used to create a Lin from gp. * Create a Lin parallel to another and passing through a point. * Create a Lin passing through 2 points. * Create a lin from its axis (Ax1 from gp). * Create a lin from a point and a direction.
 */
class gce_MakeLin extends gce_Root {
}

class gce_MakeLin_1 extends gce_MakeLin {}

class gce_MakeLin_2 extends gce_MakeLin {}

class gce_MakeLin_3 extends gce_MakeLin {}

class gce_MakeLin_4 extends gce_MakeLin {}

/**
 * This class implements the following algorithms used to create Lin2d from gp.
 */
class gce_MakeLin2d extends gce_Root {
}

class gce_MakeLin2d_1 extends gce_MakeLin2d {}

class gce_MakeLin2d_2 extends gce_MakeLin2d {}

class gce_MakeLin2d_3 extends gce_MakeLin2d {}

class gce_MakeLin2d_4 extends gce_MakeLin2d {}

class gce_MakeLin2d_5 extends gce_MakeLin2d {}

class gce_MakeLin2d_6 extends gce_MakeLin2d {}

/**
 * This class mplements elementary construction algorithms for a symmetrical transformation in 3D space about a point, axis or plane. The result is a gp_Trsf transformation. A MakeMirror object provides a framework for: - defining the construction of the transformation, - implementing the construction algorithm, and - consulting the result.
 */
class gce_MakeMirror {
}

class gce_MakeMirror_1 extends gce_MakeMirror {}

class gce_MakeMirror_2 extends gce_MakeMirror {}

class gce_MakeMirror_3 extends gce_MakeMirror {}

class gce_MakeMirror_4 extends gce_MakeMirror {}

class gce_MakeMirror_5 extends gce_MakeMirror {}

class gce_MakeMirror_6 extends gce_MakeMirror {}

/**
 * This class implements elementary construction algorithms for a symmetrical transformation in 2D space about a point or axis. The result is a gp_Trsf2d transformation. A MakeMirror2d object provides a framework for: - defining the construction of the transformation, - implementing the construction algorithm, and consulting the result.
 */
class gce_MakeMirror2d {
}

class gce_MakeMirror2d_1 extends gce_MakeMirror2d {}

class gce_MakeMirror2d_2 extends gce_MakeMirror2d {}

class gce_MakeMirror2d_3 extends gce_MakeMirror2d {}

class gce_MakeMirror2d_4 extends gce_MakeMirror2d {}

/**
 * This class implements the following algorithms used to create Parab from gp. Defines the parabola in the parameterization range : ]-infinite, +infinite[ The vertex of the parabola is the "Location" point of the local coordinate system (axis placement) of the parabola.
 */
class gce_MakeParab extends gce_Root {
}

class gce_MakeParab_1 extends gce_MakeParab {}

class gce_MakeParab_2 extends gce_MakeParab {}

/**
 * This class implements the following algorithms used to create Parab2d from gp. Defines an infinite parabola. An axis placement one axis defines the local cartesian coordinate system ("XAxis") of the parabola. The vertex of the parabola is the "Location" point of the local coordinate system of the parabola. The "XAxis" of the parabola is its axis of symmetry. The "XAxis" is oriented from the vertex of the parabola to the Focus of the parabola. The "YAxis" is parallel to the directrix of the parabola and its "Location" point is the vertex of the parabola. The equation of the parabola in the local coordinate system is Y**2 = (2*P) * X P is the distance between the focus and the directrix of the parabola called Parameter). The focal length F = P/2 is the distance between the vertex and the focus of the parabola.
 */
class gce_MakeParab2d extends gce_Root {
}

class gce_MakeParab2d_1 extends gce_MakeParab2d {}

class gce_MakeParab2d_2 extends gce_MakeParab2d {}

class gce_MakeParab2d_3 extends gce_MakeParab2d {}

class gce_MakeParab2d_4 extends gce_MakeParab2d {}

/**
 * This class implements the following algorithms used to create a Plane from gp. * Create a Pln parallel to another and passing through a point. * Create a Pln passing through 3 points. * Create a Pln by its normal. Defines a non-persistent plane. The plane is located in 3D space with an axis placement two axis. It is the local coordinate system of the plane.
 */
class gce_MakePln extends gce_Root {
}

class gce_MakePln_1 extends gce_MakePln {}

class gce_MakePln_2 extends gce_MakePln {}

class gce_MakePln_3 extends gce_MakePln {}

class gce_MakePln_4 extends gce_MakePln {}

class gce_MakePln_5 extends gce_MakePln {}

class gce_MakePln_6 extends gce_MakePln {}

class gce_MakePln_7 extends gce_MakePln {}

class gce_MakePln_8 extends gce_MakePln {}

/**
 * This class implements elementary construction algorithms for a rotation in 3D space. The result is a gp_Trsf transformation. A MakeRotation object provides a framework for: - defining the construction of the transformation, - implementing the construction algorithm, and - consulting the result.
 */
class gce_MakeRotation {
}

class gce_MakeRotation_1 extends gce_MakeRotation {}

class gce_MakeRotation_2 extends gce_MakeRotation {}

class gce_MakeRotation_3 extends gce_MakeRotation {}

/**
 * Implements an elementary construction algorithm for a rotation in 2D space. The result is a gp_Trsf2d transformation. A MakeRotation2d object provides a framework for: - defining the construction of the transformation, - implementing the construction algorithm, and - consulting the result.
 */
class gce_MakeRotation2d {
}

/**
 * Implements an elementary construction algorithm for a scaling transformation in 3D space. The result is a gp_Trsf transformation. A MakeScale object provides a framework for: - defining the construction of the transformation, - implementing the construction algorithm, and - consulting the result.
 */
class gce_MakeScale {
}

/**
 * This class implements an elementary construction algorithm for a scaling transformation in 2D space. The result is a gp_Trsf2d transformation. A MakeScale2d object provides a framework for: - defining the construction of the transformation, - implementing the construction algorithm, and - consulting the result.
 */
class gce_MakeScale2d {
}

/**
 * This class implements elementary construction algorithms for a translation in 3D space. The result is a gp_Trsf transformation. A MakeTranslation object provides a framework for: - defining the construction of the transformation, - implementing the construction algorithm, and - consulting the result.
 */
class gce_MakeTranslation {
}

class gce_MakeTranslation_1 extends gce_MakeTranslation {}

class gce_MakeTranslation_2 extends gce_MakeTranslation {}

/**
 * This class implements elementary construction algorithms for a translation in 2D space. The result is a gp_Trsf2d transformation. A MakeTranslation2d object provides a framework for: - defining the construction of the transformation, - implementing the construction algorithm, and - consulting the result.
 */
class gce_MakeTranslation2d {
}

class gce_MakeTranslation2d_1 extends gce_MakeTranslation2d {}

class gce_MakeTranslation2d_2 extends gce_MakeTranslation2d {}

/**
 * This class implements the common services for all classes of gce which report error.
 */
class gce_Root {
}

/**
 * The geometric processor package, called gp, provides an implementation of entities used : . for algebraic calculation such as "XYZ" coordinates, "Mat" matrix . for basis analytic geometry such as Transformations, point, vector, line, plane, axis placement, conics, and elementary surfaces. These entities are defined in 2d and 3d space. All the classes of this package are non-persistent.
 */
class gp {
}

/**
 * Describes an axis in 3D space. An axis is defined by: - its origin (also referred to as its "Location point"), and - its unit vector (referred to as its "Direction" or "main Direction"). An axis is used: - to describe 3D geometric entities (for example, the axis of a revolution entity). It serves the same purpose as the STEP function "axis placement one axis", or - to define geometric transformations (axis of symmetry, axis of rotation, and so on). For example, this entity can be used to locate a geometric entity or to define a symmetry axis.
 */
class gp_Ax1 {
}

class gp_Ax1_1 extends gp_Ax1 {}

class gp_Ax1_2 extends gp_Ax1 {}

/**
 * Describes a right-handed coordinate system in 3D space. A coordinate system is defined by: - its origin (also referred to as its "Location point"), and - three orthogonal unit vectors, termed respectively the "X Direction", the "Y Direction" and the "Direction" (also referred to as the "main Direction"). The "Direction" of the coordinate system is called its "main Direction" because whenever this unit vector is modified, the "X Direction" and the "Y Direction" are recomputed. However, when we modify either the "X Direction" or the "Y Direction", "Direction" is not modified. The "main Direction" is also the "Z Direction". Since an Ax2 coordinate system is right-handed, its "main Direction" is always equal to the cross product of its "X Direction" and "Y Direction". (To define a left-handed coordinate system, use gp_Ax3.) A coordinate system is used: - to describe geometric entities, in particular to position them. The local coordinate system of a geometric entity serves the same purpose as the STEP function "axis placement two axes", or - to define geometric transformations. Note: we refer to the "X Axis", "Y Axis" and "Z Axis", respectively, as to axes having: - the origin of the coordinate system as their origin, and - the unit vectors "X Direction", "Y Direction" and "main Direction", respectively, as their unit vectors. The "Z Axis" is also the "main Axis".
 */
class gp_Ax2 {
}

class gp_Ax2_1 extends gp_Ax2 {}

class gp_Ax2_2 extends gp_Ax2 {}

class gp_Ax2_3 extends gp_Ax2 {}

/**
 * Describes a coordinate system in a plane (2D space). A coordinate system is defined by: - its origin (also referred to as its "Location point"), and - two orthogonal unit vectors, respectively, called the "X Direction" and the "Y Direction". A gp_Ax22d may be right-handed ("direct sense") or left-handed ("inverse" or "indirect sense"). You use a gp_Ax22d to: - describe 2D geometric entities, in particular to position them. The local coordinate system of a geometric entity serves for the same purpose as the STEP function "axis placement two axes", or - define geometric transformations. Note: we refer to the "X Axis" and "Y Axis" as the axes having: - the origin of the coordinate system as their origin, and - the unit vectors "X Direction" and "Y Direction", respectively, as their unit vectors.
 */
class gp_Ax22d {
}

class gp_Ax22d_1 extends gp_Ax22d {}

class gp_Ax22d_2 extends gp_Ax22d {}

class gp_Ax22d_3 extends gp_Ax22d {}

class gp_Ax22d_4 extends gp_Ax22d {}

/**
 * Describes an axis in the plane (2D space). An axis is defined by: - its origin (also referred to as its "Location point"), and - its unit vector (referred to as its "Direction"). An axis implicitly defines a direct, right-handed coordinate system in 2D space by: - its origin, - its "Direction" (giving the "X Direction" of the coordinate system), and - the unit vector normal to "Direction" (positive angle measured in the trigonometric sense). An axis is used: - to describe 2D geometric entities (for example, the axis which defines angular coordinates on a circle). It serves for the same purpose as the STEP function "axis placement one axis", or - to define geometric transformations (axis of symmetry, axis of rotation, and so on). Note: to define a left-handed 2D coordinate system, use gp_Ax22d.
 */
class gp_Ax2d {
}

class gp_Ax2d_1 extends gp_Ax2d {}

class gp_Ax2d_2 extends gp_Ax2d {}

/**
 * Describes a coordinate system in 3D space. Unlike a gp_Ax2 coordinate system, a gp_Ax3 can be right-handed ("direct sense") or left-handed ("indirect sense"). A coordinate system is defined by: - its origin (also referred to as its "Location point"), and - three orthogonal unit vectors, termed the "X Direction", the "Y Direction" and the "Direction" (also referred to as the "main Direction"). The "Direction" of the coordinate system is called its "main Direction" because whenever this unit vector is modified, the "X Direction" and the "Y Direction" are recomputed. However, when we modify either the "X Direction" or the "Y Direction", "Direction" is not modified. "Direction" is also the "Z Direction". The "main Direction" is always parallel to the cross product of its "X Direction" and "Y Direction". If the coordinate system is right-handed, it satisfies the equation: "main Direction" = "X Direction" ^ "Y Direction" and if it is left-handed, it satisfies the equation: "main Direction" = -"X Direction" ^ "Y Direction" A coordinate system is used: - to describe geometric entities, in particular to position them. The local coordinate system of a geometric entity serves the same purpose as the STEP function "axis placement three axes", or - to define geometric transformations. Note: - We refer to the "X Axis", "Y Axis" and "Z Axis", respectively, as the axes having: - the origin of the coordinate system as their origin, and - the unit vectors "X Direction", "Y Direction" and "main Direction", respectively, as their unit vectors. - The "Z Axis" is also the "main Axis". - gp_Ax2 is used to define a coordinate system that must be always right-handed.
 */
class gp_Ax3 {
}

class gp_Ax3_1 extends gp_Ax3 {}

class gp_Ax3_2 extends gp_Ax3 {}

class gp_Ax3_3 extends gp_Ax3 {}

class gp_Ax3_4 extends gp_Ax3 {}

/**
 * Describes a circle in 3D space. A circle is defined by its radius and positioned in space with a coordinate system (a gp_Ax2 object) as follows: - the origin of the coordinate system is the center of the circle, and - the origin, "X Direction" and "Y Direction" of the coordinate system define the plane of the circle. This positioning coordinate system is the "local coordinate system" of the circle. Its "main Direction" gives the normal vector to the plane of the circle. The "main Axis" of the coordinate system is referred to as the "Axis" of the circle. Note: when a gp_Circ circle is converted into a Geom_Circle circle, some implicit properties of the circle are used explicitly: - the "main Direction" of the local coordinate system gives an implicit orientation to the circle (and defines its trigonometric sense), - this orientation corresponds to the direction in which parameter values increase, - the starting point for parameterization is that of the "X Axis" of the local coordinate system (i.e. the "X Axis" of the circle). See Also gce_MakeCirc which provides functions for more complex circle constructions Geom_Circle which provides additional functions for constructing circles and works, in particular, with the parametric equations of circles
 */
class gp_Circ {
}

class gp_Circ_1 extends gp_Circ {}

class gp_Circ_2 extends gp_Circ {}

/**
 * Describes a circle in the plane (2D space). A circle is defined by its radius and positioned in the plane with a coordinate system (a gp_Ax22d object) as follows: - the origin of the coordinate system is the center of the circle, and - the orientation (direct or indirect) of the coordinate system gives an implicit orientation to the circle (and defines its trigonometric sense). This positioning coordinate system is the "local coordinate system" of the circle. Note: when a gp_Circ2d circle is converted into a Geom2d_Circle circle, some implicit properties of the circle are used explicitly: - the implicit orientation corresponds to the direction in which parameter values increase, - the starting point for parameterization is that of the "X Axis" of the local coordinate system (i.e. the "X Axis" of the circle). See Also GccAna and Geom2dGcc packages which provide functions for constructing circles defined by geometric constraints gce_MakeCirc2d which provides functions for more complex circle constructions Geom2d_Circle which provides additional functions for constructing circles and works, with the parametric equations of circles in particular gp_Ax22d
 */
class gp_Circ2d {
}

class gp_Circ2d_1 extends gp_Circ2d {}

class gp_Circ2d_2 extends gp_Circ2d {}

class gp_Circ2d_3 extends gp_Circ2d {}

/**
 * Defines an infinite conical surface. A cone is defined by its half-angle (can be negative) at the apex and positioned in space with a coordinate system (a gp_Ax3 object) and a "reference radius" where: - the "main Axis" of the coordinate system is the axis of revolution of the cone, - the plane defined by the origin, the "X Direction" and the "Y Direction" of the coordinate system is the reference plane of the cone; the intersection of the cone with this reference plane is a circle of radius equal to the reference radius, if the half-angle is positive, the apex of the cone is on the negative side of the "main Axis" of the coordinate system. If the half-angle is negative, the apex is on the positive side. This coordinate system is the "local coordinate system" of the cone. Note: when a gp_Cone cone is converted into a Geom_ConicalSurface cone, some implicit properties of its local coordinate system are used explicitly: - its origin, "X Direction", "Y Direction" and "main Direction" are used directly to define the parametric directions on the cone and the origin of the parameters, - its implicit orientation (right-handed or left-handed) gives the orientation (direct or indirect) of the Geom_ConicalSurface cone. See Also gce_MakeCone which provides functions for more complex cone constructions Geom_ConicalSurface which provides additional functions for constructing cones and works, in particular, with the parametric equations of cones gp_Ax3
 */
class gp_Cone {
}

class gp_Cone_1 extends gp_Cone {}

class gp_Cone_2 extends gp_Cone {}

/**
 * Describes an infinite cylindrical surface. A cylinder is defined by its radius and positioned in space with a coordinate system (a gp_Ax3 object), the "main Axis" of which is the axis of the cylinder. This coordinate system is the "local coordinate system" of the cylinder. Note: when a gp_Cylinder cylinder is converted into a Geom_CylindricalSurface cylinder, some implicit properties of its local coordinate system are used explicitly: - its origin, "X Direction", "Y Direction" and "main Direction" are used directly to define the parametric directions on the cylinder and the origin of the parameters, - its implicit orientation (right-handed or left-handed) gives an orientation (direct or indirect) to the Geom_CylindricalSurface cylinder. See Also gce_MakeCylinder which provides functions for more complex cylinder constructions Geom_CylindricalSurface which provides additional functions for constructing cylinders and works, in particular, with the parametric equations of cylinders gp_Ax3
 */
class gp_Cylinder {
}

class gp_Cylinder_1 extends gp_Cylinder {}

class gp_Cylinder_2 extends gp_Cylinder {}

/**
 * Describes a unit vector in 3D space. This unit vector is also called "Direction". See Also gce_MakeDir which provides functions for more complex unit vector constructions Geom_Direction which provides additional functions for constructing unit vectors and works, in particular, with the parametric equations of unit vectors.
 */
class gp_Dir {
}

class gp_Dir_1 extends gp_Dir {}

class gp_Dir_2 extends gp_Dir {}

class gp_Dir_3 extends gp_Dir {}

class gp_Dir_4 extends gp_Dir {}

/**
 * Describes a unit vector in the plane (2D space). This unit vector is also called "Direction". See Also gce_MakeDir2d which provides functions for more complex unit vector constructions Geom2d_Direction which provides additional functions for constructing unit vectors and works, in particular, with the parametric equations of unit vectors
 */
class gp_Dir2d {
}

class gp_Dir2d_1 extends gp_Dir2d {}

class gp_Dir2d_2 extends gp_Dir2d {}

class gp_Dir2d_3 extends gp_Dir2d {}

class gp_Dir2d_4 extends gp_Dir2d {}

/**
 * Describes an ellipse in 3D space. An ellipse is defined by its major and minor radii and positioned in space with a coordinate system (a gp_Ax2 object) as follows: - the origin of the coordinate system is the center of the ellipse, - its "X Direction" defines the major axis of the ellipse, and - its "Y Direction" defines the minor axis of the ellipse. Together, the origin, "X Direction" and "Y Direction" of this coordinate system define the plane of the ellipse. This coordinate system is the "local coordinate system" of the ellipse. In this coordinate system, the equation of the ellipse is: X*X / (MajorRadius**2) + Y*Y / (MinorRadius**2) = 1.0 The "main Direction" of the local coordinate system gives the normal vector to the plane of the ellipse. This vector gives an implicit orientation to the ellipse (definition of the trigonometric sense). We refer to the "main Axis" of the local coordinate system as the "Axis" of the ellipse. See Also gce_MakeElips which provides functions for more complex ellipse constructions Geom_Ellipse which provides additional functions for constructing ellipses and works, in particular, with the parametric equations of ellipses
 */
class gp_Elips {
}

class gp_Elips_1 extends gp_Elips {}

class gp_Elips_2 extends gp_Elips {}

/**
 * Describes an ellipse in the plane (2D space). An ellipse is defined by its major and minor radii and positioned in the plane with a coordinate system (a gp_Ax22d object) as follows: - the origin of the coordinate system is the center of the ellipse, - its "X Direction" defines the major axis of the ellipse, and - its "Y Direction" defines the minor axis of the ellipse. This coordinate system is the "local coordinate system" of the ellipse. Its orientation (direct or indirect) gives an implicit orientation to the ellipse. In this coordinate system, the equation of the ellipse is: X*X / (MajorRadius**2) + Y*Y / (MinorRadius**2) = 1.0 See Also gce_MakeElips2d which provides functions for more complex ellipse constructions Geom2d_Ellipse which provides additional functions for constructing ellipses and works, in particular, with the parametric equations of ellipses
 */
class gp_Elips2d {
}

class gp_Elips2d_1 extends gp_Elips2d {}

class gp_Elips2d_2 extends gp_Elips2d {}

class gp_Elips2d_3 extends gp_Elips2d {}

/**
 * Defines a non-persistent transformation in 3D space. This transformation is a general transformation. It can be a Trsf from gp, an affinity, or you can define your own transformation giving the matrix of transformation.
 */
class gp_GTrsf {
}

class gp_GTrsf_1 extends gp_GTrsf {}

class gp_GTrsf_2 extends gp_GTrsf {}

class gp_GTrsf_3 extends gp_GTrsf {}

/**
 * Defines a non persistent transformation in 2D space. This transformation is a general transformation. It can be a Trsf2d from package gp, an affinity, or you can define your own transformation giving the corresponding matrix of transformation.
 */
class gp_GTrsf2d {
}

class gp_GTrsf2d_1 extends gp_GTrsf2d {}

class gp_GTrsf2d_2 extends gp_GTrsf2d {}

class gp_GTrsf2d_3 extends gp_GTrsf2d {}

/**
 * Describes a branch of a hyperbola in 3D space. A hyperbola is defined by its major and minor radii and positioned in space with a coordinate system (a gp_Ax2 object) of which: - the origin is the center of the hyperbola, - the "X Direction" defines the major axis of the hyperbola, and - the "Y Direction" defines the minor axis of the hyperbola. The origin, "X Direction" and "Y Direction" of this coordinate system together define the plane of the hyperbola. This coordinate system is the "local coordinate system" of the hyperbola. In this coordinate system, the equation of the hyperbola is: X*X/(MajorRadius**2)-Y*Y/(MinorRadius**2) = 1.0 The branch of the hyperbola described is the one located on the positive side of the major axis. The "main Direction" of the local coordinate system is a normal vector to the plane of the hyperbola. This vector gives an implicit orientation to the hyperbola. We refer to the "main Axis" of the local coordinate system as the "Axis" of the hyperbola. The following schema shows the plane of the hyperbola, and in it, the respective positions of the three branches of hyperbolas constructed with the functions OtherBranch, ConjugateBranch1, and ConjugateBranch2:
 */
class gp_Hypr {
}

class gp_Hypr_1 extends gp_Hypr {}

class gp_Hypr_2 extends gp_Hypr {}

/**
 * Describes a branch of a hyperbola in the plane (2D space). A hyperbola is defined by its major and minor radii, and positioned in the plane with a coordinate system (a gp_Ax22d object) of which: - the origin is the center of the hyperbola, - the "X Direction" defines the major axis of the hyperbola, and - the "Y Direction" defines the minor axis of the hyperbola. This coordinate system is the "local coordinate system" of the hyperbola. The orientation of this coordinate system (direct or indirect) gives an implicit orientation to the hyperbola. In this coordinate system, the equation of the hyperbola is: X*X/(MajorRadius**2)-Y*Y/(MinorRadius**2) = 1.0 The branch of the hyperbola described is the one located on the positive side of the major axis. The following schema shows the plane of the hyperbola, and in it, the respective positions of the three branches of hyperbolas constructed with the functions OtherBranch, ConjugateBranch1, and ConjugateBranch2: ^YAxis | FirstConjugateBranch | Other | Main --------------------- C ------------------------------>XAxis Branch | Branch | | SecondConjugateBranch |
 */
class gp_Hypr2d {
}

class gp_Hypr2d_1 extends gp_Hypr2d {}

class gp_Hypr2d_2 extends gp_Hypr2d {}

class gp_Hypr2d_3 extends gp_Hypr2d {}

/**
 * Describes a line in 3D space. A line is positioned in space with an axis (a gp_Ax1 object) which gives it an origin and a unit vector. A line and an axis are similar objects, thus, we can convert one into the other. A line provides direct access to the majority of the edit and query functions available on its positioning axis. In addition, however, a line has specific functions for computing distances and positions. See Also gce_MakeLin which provides functions for more complex line constructions Geom_Line which provides additional functions for constructing lines and works, in particular, with the parametric equations of lines
 */
class gp_Lin {
}

class gp_Lin_1 extends gp_Lin {}

class gp_Lin_2 extends gp_Lin {}

class gp_Lin_3 extends gp_Lin {}

/**
 * Describes a line in 2D space. A line is positioned in the plane with an axis (a gp_Ax2d object) which gives the line its origin and unit vector. A line and an axis are similar objects, thus, we can convert one into the other. A line provides direct access to the majority of the edit and query functions available on its positioning axis. In addition, however, a line has specific functions for computing distances and positions. See Also GccAna and Geom2dGcc packages which provide functions for constructing lines defined by geometric constraints gce_MakeLin2d which provides functions for more complex line constructions Geom2d_Line which provides additional functions for constructing lines and works, in particular, with the parametric equations of lines
 */
class gp_Lin2d {
}

class gp_Lin2d_1 extends gp_Lin2d {}

class gp_Lin2d_2 extends gp_Lin2d {}

class gp_Lin2d_3 extends gp_Lin2d {}

class gp_Lin2d_4 extends gp_Lin2d {}

/**
 * Describes a three column, three row matrix. This sort of object is used in various vectorial or matrix computations.
 */
class gp_Mat {
}

class gp_Mat_1 extends gp_Mat {}

class gp_Mat_2 extends gp_Mat {}

class gp_Mat_3 extends gp_Mat {}

/**
 * Describes a two column, two row matrix. This sort of object is used in various vectorial or matrix computations.
 */
class gp_Mat2d {
}

class gp_Mat2d_1 extends gp_Mat2d {}

class gp_Mat2d_2 extends gp_Mat2d {}

/**
 * Describes a parabola in 3D space. A parabola is defined by its focal length (that is, the distance between its focus and apex) and positioned in space with a coordinate system (a gp_Ax2 object) where: - the origin of the coordinate system is on the apex of the parabola, - the "X Axis" of the coordinate system is the axis of symmetry; the parabola is on the positive side of this axis, and - the origin, "X Direction" and "Y Direction" of the coordinate system define the plane of the parabola. The equation of the parabola in this coordinate system, which is the "local coordinate system" of the parabola, is: Y**2 = (2*P) * X. where P, referred to as the parameter of the parabola, is the distance between the focus and the directrix (P is twice the focal length). The "main Direction" of the local coordinate system gives the normal vector to the plane of the parabola. See Also gce_MakeParab which provides functions for more complex parabola constructions Geom_Parabola which provides additional functions for constructing parabolas and works, in particular, with the parametric equations of parabolas
 */
class gp_Parab {
}

class gp_Parab_1 extends gp_Parab {}

class gp_Parab_2 extends gp_Parab {}

class gp_Parab_3 extends gp_Parab {}

/**
 * Describes a parabola in the plane (2D space). A parabola is defined by its focal length (that is, the distance between its focus and apex) and positioned in the plane with a coordinate system (a gp_Ax22d object) where: - the origin of the coordinate system is on the apex of the parabola, and - the "X Axis" of the coordinate system is the axis of symmetry; the parabola is on the positive side of this axis. This coordinate system is the "local coordinate system" of the parabola. Its orientation (direct or indirect sense) gives an implicit orientation to the parabola. In this coordinate system, the equation for the parabola is: Y**2 = (2*P) * X. where P, referred to as the parameter of the parabola, is the distance between the focus and the directrix (P is twice the focal length). See Also GCE2d_MakeParab2d which provides functions for more complex parabola constructions Geom2d_Parabola which provides additional functions for constructing parabolas and works, in particular, with the parametric equations of parabolas
 */
class gp_Parab2d {
}

class gp_Parab2d_1 extends gp_Parab2d {}

class gp_Parab2d_2 extends gp_Parab2d {}

class gp_Parab2d_3 extends gp_Parab2d {}

class gp_Parab2d_4 extends gp_Parab2d {}

/**
 * Describes a plane. A plane is positioned in space with a coordinate system (a gp_Ax3 object), such that the plane is defined by the origin, "X Direction" and "Y Direction" of this coordinate system, which is the "local coordinate system" of the plane. The "main Direction" of the coordinate system is a vector normal to the plane. It gives the plane an implicit orientation such that the plane is said to be "direct", if the coordinate system is right-handed, or "indirect" in the other case. Note: when a gp_Pln plane is converted into a Geom_Plane plane, some implicit properties of its local coordinate system are used explicitly: - its origin defines the origin of the two parameters of the planar surface, - its implicit orientation is also that of the Geom_Plane. See Also gce_MakePln which provides functions for more complex plane constructions Geom_Plane which provides additional functions for constructing planes and works, in particular, with the parametric equations of planes
 */
class gp_Pln {
}

class gp_Pln_1 extends gp_Pln {}

class gp_Pln_2 extends gp_Pln {}

class gp_Pln_3 extends gp_Pln {}

class gp_Pln_4 extends gp_Pln {}

/**
 * Defines a 3D cartesian point.
 */
class gp_Pnt {
}

class gp_Pnt_1 extends gp_Pnt {}

class gp_Pnt_2 extends gp_Pnt {}

class gp_Pnt_3 extends gp_Pnt {}

/**
 * Defines a non-persistent 2D cartesian point.
 */
class gp_Pnt2d {
}

class gp_Pnt2d_1 extends gp_Pnt2d {}

class gp_Pnt2d_2 extends gp_Pnt2d {}

class gp_Pnt2d_3 extends gp_Pnt2d {}

/**
 * Represents operation of rotation in 3d space as queternion and implements operations with rotations basing on quaternion mathematics.
 */
class gp_Quaternion {
}

class gp_Quaternion_1 extends gp_Quaternion {}

class gp_Quaternion_2 extends gp_Quaternion {}

class gp_Quaternion_3 extends gp_Quaternion {}

class gp_Quaternion_4 extends gp_Quaternion {}

class gp_Quaternion_5 extends gp_Quaternion {}

class gp_Quaternion_6 extends gp_Quaternion {}

class gp_Quaternion_7 extends gp_Quaternion {}

/**
 * Class perform linear interpolation (approximate rotation interpolation), result quaternion nonunit, its length lay between. sqrt(2)/2 and 1.0
 */
class gp_QuaternionNLerp {
}

class gp_QuaternionNLerp_1 extends gp_QuaternionNLerp {}

class gp_QuaternionNLerp_2 extends gp_QuaternionNLerp {}

/**
 * Perform Spherical Linear Interpolation of the quaternions, return unit length quaternion.
 */
class gp_QuaternionSLerp {
}

class gp_QuaternionSLerp_1 extends gp_QuaternionSLerp {}

class gp_QuaternionSLerp_2 extends gp_QuaternionSLerp {}

/**
 * Describes a sphere. A sphere is defined by its radius and positioned in space with a coordinate system (a gp_Ax3 object). The origin of the coordinate system is the center of the sphere. This coordinate system is the "local coordinate system" of the sphere. Note: when a gp_Sphere sphere is converted into a Geom_SphericalSurface sphere, some implicit properties of its local coordinate system are used explicitly: - its origin, "X Direction", "Y Direction" and "main Direction" are used directly to define the parametric directions on the sphere and the origin of the parameters, - its implicit orientation (right-handed or left-handed) gives the orientation (direct, indirect) to the Geom_SphericalSurface sphere. See Also gce_MakeSphere which provides functions for more complex sphere constructions Geom_SphericalSurface which provides additional functions for constructing spheres and works, in particular, with the parametric equations of spheres.
 */
class gp_Sphere {
}

class gp_Sphere_1 extends gp_Sphere {}

class gp_Sphere_2 extends gp_Sphere {}

/**
 * Describes a torus. A torus is defined by its major and minor radii and positioned in space with a coordinate system (a gp_Ax3 object) as follows: - The origin of the coordinate system is the center of the torus; - The surface is obtained by rotating a circle of radius equal to the minor radius of the torus about the "main Direction" of the coordinate system. This circle is located in the plane defined by the origin, the "X Direction" and the "main Direction" of the coordinate system. It is centered on the "X Axis" of this coordinate system, and located at a distance, from the origin of this coordinate system, equal to the major radius of the torus; - The "X Direction" and "Y Direction" define the reference plane of the torus. The coordinate system described above is the "local coordinate system" of the torus. Note: when a gp_Torus torus is converted into a Geom_ToroidalSurface torus, some implicit properties of its local coordinate system are used explicitly: - its origin, "X Direction", "Y Direction" and "main Direction" are used directly to define the parametric directions on the torus and the origin of the parameters, - its implicit orientation (right-handed or left-handed) gives the orientation (direct, indirect) to the Geom_ToroidalSurface torus. See Also gce_MakeTorus which provides functions for more complex torus constructions Geom_ToroidalSurface which provides additional functions for constructing tori and works, in particular, with the parametric equations of tori.
 */
class gp_Torus {
}

class gp_Torus_1 extends gp_Torus {}

class gp_Torus_2 extends gp_Torus {}

/**
 * Defines a non-persistent transformation in 3D space. The following transformations are implemented : . Translation, Rotation, Scale . Symmetry with respect to a point, a line, a plane. Complex transformations can be obtained by combining the previous elementary transformations using the method Multiply. The transformations can be represented as follow :
 */
class gp_Trsf {
}

class gp_Trsf_1 extends gp_Trsf {}

class gp_Trsf_2 extends gp_Trsf {}

/**
 * Defines a non-persistent transformation in 2D space. The following transformations are implemented : . Translation, Rotation, Scale . Symmetry with respect to a point and a line. Complex transformations can be obtained by combining the previous elementary transformations using the method Multiply. The transformations can be represented as follow :
 */
class gp_Trsf2d {
}

class gp_Trsf2d_1 extends gp_Trsf2d {}

class gp_Trsf2d_2 extends gp_Trsf2d {}

/**
 * Defines a non-persistent vector in 3D space.
 */
class gp_Vec {
}

class gp_Vec_1 extends gp_Vec {}

class gp_Vec_2 extends gp_Vec {}

class gp_Vec_3 extends gp_Vec {}

class gp_Vec_4 extends gp_Vec {}

class gp_Vec_5 extends gp_Vec {}

/**
 * Defines a non-persistent vector in 2D space.
 */
class gp_Vec2d {
}

class gp_Vec2d_1 extends gp_Vec2d {}

class gp_Vec2d_2 extends gp_Vec2d {}

class gp_Vec2d_3 extends gp_Vec2d {}

class gp_Vec2d_4 extends gp_Vec2d {}

class gp_Vec2d_5 extends gp_Vec2d {}

/**
 * This class describes a cartesian coordinate entity in 2D space {X,Y}. This class is non persistent. This entity used for algebraic calculation. An XY can be transformed with a Trsf2d or a GTrsf2d from package gp. It is used in vectorial computations or for holding this type of information in data structures.
 */
class gp_XY {
}

class gp_XY_1 extends gp_XY {}

class gp_XY_2 extends gp_XY {}

/**
 * This class describes a cartesian coordinate entity in 3D space {X,Y,Z}. This entity is used for algebraic calculation. This entity can be transformed with a "Trsf" or a "GTrsf" from package "gp". It is used in vectorial computations or for holding this type of information in data structures.
 */
class gp_XYZ {
}

class gp_XYZ_1 extends gp_XYZ {}

class gp_XYZ_2 extends gp_XYZ {}

class math {
}

/**
 * This class implements the Broyden-Fletcher-Goldfarb-Shanno variant of Davidson-Fletcher-Powell minimization algorithm of a function of multiple variables.Knowledge of the function's gradient is required.
 */
class math_BFGS {
}

/**
 * This class implements a combination of Newton-Raphson and bissection methods to find the root of the function between two bounds. Knowledge of the derivative is required.
 */
class math_BissecNewton {
}

/**
 * Given two distinct initial points, BracketMinimum implements the computation of three points (a, b, c) which bracket the minimum of the function and verify A less than B, B less than C and F(B) less than F(A), F(B) less than F(C).
 */
class math_BracketMinimum {
}

class math_BracketMinimum_1 extends math_BracketMinimum {}

class math_BracketMinimum_2 extends math_BracketMinimum {}

class math_BracketMinimum_3 extends math_BracketMinimum {}

class math_BracketMinimum_4 extends math_BracketMinimum {}

/**
 * This class implements the Brent method to find the root of a function located within two bounds. No knowledge of the derivative is required.
 */
class math_BracketedRoot {
}

/**
 * This class implements the Brent's method to find the minimum of a function of a single variable. No knowledge of the derivative is required.
 */
class math_BrentMinimum {
}

class math_BrentMinimum_1 extends math_BrentMinimum {}

class math_BrentMinimum_2 extends math_BrentMinimum {}

/**
 * Fast random number generator (the algorithm proposed by Ian C. Bullard).
 */
class math_BullardGenerator {
}

class math_ComputeGaussPointsAndWeights {
}

class math_ComputeKronrodPointsAndWeights {
}

/**
 * This class implements the Crout algorithm used to solve a system A*X = B where A is a symmetric matrix. It can be used to invert a symmetric matrix. This algorithm is similar to Gauss but is faster than Gauss. Only the inferior triangle of A and the diagonal can be given.
 */
class math_Crout {
}

/**
 * This class implements the calculation of all the real roots of a real polynomial of degree <= 4 using a direct method. Once found, the roots are polished using the Newton method.
 */
class math_DirectPolynomialRoots {
}

class math_DirectPolynomialRoots_1 extends math_DirectPolynomialRoots {}

class math_DirectPolynomialRoots_2 extends math_DirectPolynomialRoots {}

class math_DirectPolynomialRoots_3 extends math_DirectPolynomialRoots {}

class math_DirectPolynomialRoots_4 extends math_DirectPolynomialRoots {}

class math_DoubleTab {
}

class math_DoubleTab_1 extends math_DoubleTab {}

class math_DoubleTab_2 extends math_DoubleTab {}

class math_DoubleTab_3 extends math_DoubleTab {}

/**
 * This class finds eigen values and vectors of real symmetric tridiagonal matrix
 */
class math_EigenValuesSearcher {
}

/**
 * this class implements the Fletcher-Reeves-Polak_Ribiere minimization algorithm of a function of multiple variables. Knowledge of the function's gradient is required.
 */
class math_FRPR {
}

/**
 * This abstract class describes the virtual functions associated with a Function of a single variable.
 */
class math_Function {
}

/**
 * This algorithm uses a sample of the function to find all intervals on which the function is null, and afterwards uses the FunctionRoots algorithm to find the points where the function is null outside the "null intervals". Knowledge of the derivative is required.
 */
class math_FunctionAllRoots {
}

/**
 * This class implements the computation of a root of a function of a single variable which is near an initial guess using a minimization algorithm.Knowledge of the derivative is required. The algorithm used is the same as in
 */
class math_FunctionRoot {
}

class math_FunctionRoot_1 extends math_FunctionRoot {}

class math_FunctionRoot_2 extends math_FunctionRoot {}

/**
 * This class implements an algorithm which finds all the real roots of a function with derivative within a given range. Knowledge of the derivative is required.
 */
class math_FunctionRoots {
}

/**
 * This class gives a default sample (constant difference of parameter) for a function defined between two bound A,B.
 */
class math_FunctionSample {
}

/**
 * This abstract class describes the virtual functions associated to a set on N Functions of M independant variables.
 */
class math_FunctionSet {
}

/**
 * The math_FunctionSetRoot class calculates the root of a set of N functions of M variables (N<M, N=M or N>M). Knowing an initial guess of the solution and using a minimization algorithm, a search is made in the Newton direction and then in the Gradient direction if there is no success in the Newton direction. This algorithm can also be used for functions minimization. Knowledge of all the partial derivatives (the Jacobian) is required.
 */
class math_FunctionSetRoot {
}

class math_FunctionSetRoot_1 extends math_FunctionSetRoot {}

class math_FunctionSetRoot_2 extends math_FunctionSetRoot {}

/**
 * This abstract class describes the virtual functions associated with a set of N Functions each of M independant variables.
 */
class math_FunctionSetWithDerivatives extends math_FunctionSet {
}

/**
 * This abstract class describes the virtual functions associated with a function of a single variable for which the first derivative is available.
 */
class math_FunctionWithDerivative extends math_Function {
}

/**
 * This class implements the Gauss LU decomposition (Crout algorithm) with partial pivoting (rows interchange) of a square matrix and the different possible derived calculation : - solution of a set of linear equations. - inverse of a matrix. - determinant of a matrix.
 */
class math_Gauss {
}

/**
 * This class implements the least square solution of a set of n linear equations of m unknowns (n >= m) using the gauss LU decomposition algorithm. This algorithm is more likely subject to numerical instability than math_SVD.
 */
class math_GaussLeastSquare {
}

/**
 * This class implements the integration of a function of multiple variables between the parameter bounds Lower[a..b] and Upper[a..b]. Warning: Each element of Order must be inferior or equal to 61.
 */
class math_GaussMultipleIntegration {
}

/**
 * -- This class implements the integration of a set of N functions of M variables variables between the parameter bounds Lower[a..b] and Upper[a..b]. Warning: - The case M>1 is not implemented.
 */
class math_GaussSetIntegration {
}

/**
 * This class implements the integration of a function of a single variable between the parameter bounds Lower and Upper. Warning: Order must be inferior or equal to 61.
 */
class math_GaussSingleIntegration {
}

class math_GaussSingleIntegration_1 extends math_GaussSingleIntegration {}

class math_GaussSingleIntegration_2 extends math_GaussSingleIntegration {}

class math_GaussSingleIntegration_3 extends math_GaussSingleIntegration {}

/**
 * This class represents Evtushenko's algorithm of global optimization based on non-uniform mesh. Article: Yu. Evtushenko. Numerical methods for finding global extreme (case of a non-uniform mesh). U.S.S.R. Comput. Maths. Math. Phys., Vol. 11, N 6, pp. 38-54.
 */
class math_GlobOptMin {
}

/**
 * This class implements the Jacobi method to find the eigenvalues and the eigenvectors of a real symmetric square matrix. A sort of eigenvalues is done.
 */
class math_Jacobi {
}

/**
 * This class implements the Gauss-Kronrod method of integral computation.
 */
class math_KronrodSingleIntegration {
}

class math_KronrodSingleIntegration_1 extends math_KronrodSingleIntegration {}

class math_KronrodSingleIntegration_2 extends math_KronrodSingleIntegration {}

class math_KronrodSingleIntegration_3 extends math_KronrodSingleIntegration {}

/**
 * Describes the virtual functions associated with a multiple variable function.
 */
class math_MultipleVarFunction {
}

/**
 * The abstract class MultipleVarFunctionWithGradient describes the virtual functions associated with a multiple variable function.
 */
class math_MultipleVarFunctionWithGradient extends math_MultipleVarFunction {
}

class math_MultipleVarFunctionWithHessian extends math_MultipleVarFunctionWithGradient {
}

/**
 * This class implements the calculation of a root of a function of a single variable starting from an initial near guess using the Newton algorithm. Knowledge of the derivative is required.
 */
class math_NewtonFunctionRoot {
}

class math_NewtonFunctionRoot_1 extends math_NewtonFunctionRoot {}

class math_NewtonFunctionRoot_2 extends math_NewtonFunctionRoot {}

class math_NewtonFunctionRoot_3 extends math_NewtonFunctionRoot {}

class math_NotSquare extends Standard_DimensionError {
}

class math_NotSquare_1 extends math_NotSquare {}

class math_NotSquare_2 extends math_NotSquare {}

/**
 * In this class implemented variation of Particle Swarm Optimization (PSO) method. A. Ismael F. Vaz, L. N. Vicente "A particle swarm pattern search method for bound constrained global optimization"
 */
class math_PSO {
}

class math_PSOParticlesPool {
}

/**
 * This class implements the Powell method to find the minimum of function of multiple variables (the gradient does not have to be known).
 */
class math_Powell {
}

/**
 * SVD implements the solution of a set of N linear equations of M unknowns without condition on N or M. The Singular Value Decomposition algorithm is used. For singular or nearly singular matrices SVD is a better choice than Gauss or GaussLeastSquare.
 */
class math_SVD {
}

class math_SingularMatrix extends Standard_Failure {
}

class math_SingularMatrix_1 extends math_SingularMatrix {}

class math_SingularMatrix_2 extends math_SingularMatrix {}

/**
 * This is function, which corresponds trigonometric equation a*Cos(x)*Cos(x) + 2*b*Cos(x)*Sin(x) + c*Cos(x) + d*Sin(x) + e = 0 See class math_TrigonometricFunctionRoots
 */
class math_TrigonometricEquationFunction extends math_FunctionWithDerivative {
}

/**
 * This class implements the solutions of the equation a*Cos(x)*Cos(x) + 2*b*Cos(x)*Sin(x) + c*Cos(x) + d*Sin(x) + e The degree of this equation can be 4, 3 or 2.
 */
class math_TrigonometricFunctionRoots {
}

class math_TrigonometricFunctionRoots_1 extends math_TrigonometricFunctionRoots {}

class math_TrigonometricFunctionRoots_2 extends math_TrigonometricFunctionRoots {}

class math_TrigonometricFunctionRoots_3 extends math_TrigonometricFunctionRoots {}

/**
 * This class implements a system resolution C*X = B with an approach solution X0. There are no conditions on the number of equations. The algorithm used is the Uzawa algorithm. It is possible to have equal or inequal (<) equations to solve. The resolution is done with a minimization of Norm(X-X0). If there are only equal equations, the resolution is directly done and is similar to Gauss resolution with an optimisation because the matrix is a symmetric matrix. (The resolution is done with Crout algorithm)
 */
class math_Uzawa {
}

class math_Uzawa_1 extends math_Uzawa {}

class math_Uzawa_2 extends math_Uzawa {}

/**
 * Simple container storing two reals: value and weight
 */
class math_ValueAndWeight {
}

class math_ValueAndWeight_1 extends math_ValueAndWeight {}

class math_ValueAndWeight_2 extends math_ValueAndWeight {}

